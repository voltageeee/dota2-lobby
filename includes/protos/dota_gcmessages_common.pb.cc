// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#include "dota_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSODOTAGameAccountClient_RoleHandicap::CSODOTAGameAccountClient_RoleHandicap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_(0u)
  , handicap_(0){}
struct CSODOTAGameAccountClient_RoleHandicapDefaultTypeInternal {
  constexpr CSODOTAGameAccountClient_RoleHandicapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAGameAccountClient_RoleHandicapDefaultTypeInternal() {}
  union {
    CSODOTAGameAccountClient_RoleHandicap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAGameAccountClient_RoleHandicapDefaultTypeInternal _CSODOTAGameAccountClient_RoleHandicap_default_instance_;
constexpr CSODOTAGameAccountClient::CSODOTAGameAccountClient(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_handicaps_()
  , account_id_(0u)
  , wins_(0u)
  , losses_(0u)
  , xp_(0u)
  , level_(0u)
  , initial_skill_(0u)
  , leaver_count_(0u)
  , low_priority_until_date_(0u)
  , prevent_text_chat_until_date_(0u)
  , prevent_voice_until_date_(0u)
  , last_abandoned_game_date_(0u)
  , leaver_penalty_count_(0u)
  , completed_game_streak_(0u)
  , account_disabled_until_date_(0u)
  , account_disabled_count_(0u)
  , match_disabled_until_date_(0u)
  , match_disabled_count_(0u)
  , shutdownlawterminatetimestamp_(0u)
  , low_priority_games_remaining_(0u)
  , competitive_rank_(0u)
  , competitive_calibration_games_remaining_(0u)
  , solo_competitive_2019_rank_(0u)
  , solo_competitive_2019_calibration_games_remaining_(0u)
  , recruitment_level_(0u)
  , secondary_leaver_count_(0u)
  , last_secondary_abandoned_game_date_(0u)
  , casual_games_played_(0u)
  , solo_competitive_games_played_(0u)
  , party_competitive_games_played_(0u)
  , has_new_notifications_(false)
  , is_league_admin_(false)
  , player_behavior_report_old_data_(false)
  , casual_1v1_games_played_(0u)
  , curr_all_hero_challenge_id_(0u)
  , play_time_points_(0u)
  , account_flags_(0u)
  , play_time_level_(0u)
  , player_behavior_seq_num_last_report_(0u)
  , player_behavior_score_last_report_(0u)
  , tourney_skill_level_(0u)
  , tourney_recent_participation_date_(0u)
  , prevent_public_text_chat_until_date_(0u)
  , anchored_phone_number_id_(PROTOBUF_ULONGLONG(0))
  , ranked_matchmaking_ban_until_date_(0u)
  , recent_game_time_1_(0u)
  , recent_game_time_2_(0u)
  , recent_game_time_3_(0u)
  , favorite_team_packed_(PROTOBUF_ULONGLONG(0))
  , recent_report_time_(0u)
  , custom_game_disabled_until_date_(0u)
  , recent_win_time_1_(0u)
  , recent_win_time_2_(0u)
  , recent_win_time_3_(0u)
  , coach_rating_(0u)
  , queue_points_(0u)
  , gauntlet_tier_(0u)
  , gauntlet_wins_(0u)
  , gauntlet_losses_(0u)
  , gauntlet_recent_time_(0u)
  , event_mode_recent_time_(0u)
  , mmr_recalibration_time_(0u)
  , prevent_new_player_chat_until_date_(0u){}
struct CSODOTAGameAccountClientDefaultTypeInternal {
  constexpr CSODOTAGameAccountClientDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAGameAccountClientDefaultTypeInternal() {}
  union {
    CSODOTAGameAccountClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAGameAccountClientDefaultTypeInternal _CSODOTAGameAccountClient_default_instance_;
constexpr CSODOTAGameAccountPlus::CSODOTAGameAccountPlus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , original_start_date_(0u)
  , plus_flags_(0u)
  , plus_status_(0u)
  , prepaid_time_start_(0u)
  , prepaid_time_balance_(0u)
  , steam_agreement_id_(PROTOBUF_ULONGLONG(0))
  , next_payment_date_(0u){}
struct CSODOTAGameAccountPlusDefaultTypeInternal {
  constexpr CSODOTAGameAccountPlusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAGameAccountPlusDefaultTypeInternal() {}
  union {
    CSODOTAGameAccountPlus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAGameAccountPlusDefaultTypeInternal _CSODOTAGameAccountPlus_default_instance_;
constexpr CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , hero_badge_xp_(0u){}
struct CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal {
  constexpr CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal() {}
  union {
    CMsgLobbyPlayerPlusSubscriptionData_HeroBadge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyPlayerPlusSubscriptionData_HeroBadgeDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_;
constexpr CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_badges_(){}
struct CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal {
  constexpr CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal() {}
  union {
    CMsgLobbyPlayerPlusSubscriptionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyPlayerPlusSubscriptionDataDefaultTypeInternal _CMsgLobbyPlayerPlusSubscriptionData_default_instance_;
constexpr CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_id_start_(0u)
  , message_id_end_(0u){}
struct CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal {
  constexpr CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_ChatWheelMessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_;
constexpr CMsgLobbyEventPoints_PingWheelMessageRange::CMsgLobbyEventPoints_PingWheelMessageRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_id_start_(0u)
  , message_id_end_(0u){}
struct CMsgLobbyEventPoints_PingWheelMessageRangeDefaultTypeInternal {
  constexpr CMsgLobbyEventPoints_PingWheelMessageRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_PingWheelMessageRangeDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_PingWheelMessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventPoints_PingWheelMessageRangeDefaultTypeInternal _CMsgLobbyEventPoints_PingWheelMessageRange_default_instance_;
constexpr CMsgLobbyEventPoints_PeriodicResourceValues::CMsgLobbyEventPoints_PeriodicResourceValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remaining_(0u)
  , max_(0u){}
struct CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal {
  constexpr CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_PeriodicResourceValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventPoints_PeriodicResourceValuesDefaultTypeInternal _CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_;
constexpr CMsgLobbyEventPoints_EventGameCustomActions::CMsgLobbyEventPoints_EventGameCustomActions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(0u)
  , times_granted_(0u){}
struct CMsgLobbyEventPoints_EventGameCustomActionsDefaultTypeInternal {
  constexpr CMsgLobbyEventPoints_EventGameCustomActionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_EventGameCustomActionsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_EventGameCustomActions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventPoints_EventGameCustomActionsDefaultTypeInternal _CMsgLobbyEventPoints_EventGameCustomActions_default_instance_;
constexpr CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unlocked_chat_wheel_message_ranges_()
  , unlocked_ping_wheel_message_ranges_()
  , event_game_custom_actions_()
  , plus_subscription_data_(nullptr)
  , wager_tokens_(nullptr)
  , rank_wager_tokens_(nullptr)
  , tip_tokens_(nullptr)
  , periodic_point_adjustments_(nullptr)
  , bounties_(nullptr)
  , account_id_(0u)
  , normal_points_(0u)
  , premium_points_(0u)
  , owned_(false)
  , active_effects_mask_(PROTOBUF_ULONGLONG(0))
  , wager_streak_(0u)
  , tip_amount_index_(0u)
  , active_event_season_id_(0u)
  , teleport_fx_level_(0u){}
struct CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal {
  constexpr CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints_AccountPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal _CMsgLobbyEventPoints_AccountPoints_default_instance_;
constexpr CMsgLobbyEventPoints::CMsgLobbyEventPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_points_()
  , event_id_(0u){}
struct CMsgLobbyEventPointsDefaultTypeInternal {
  constexpr CMsgLobbyEventPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventPointsDefaultTypeInternal() {}
  union {
    CMsgLobbyEventPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventPointsDefaultTypeInternal _CMsgLobbyEventPoints_default_instance_;
constexpr CMsgLobbyEventGameData::CMsgLobbyEventGameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_seed_(0u)
  , event_window_start_time_(0u){}
struct CMsgLobbyEventGameDataDefaultTypeInternal {
  constexpr CMsgLobbyEventGameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyEventGameDataDefaultTypeInternal() {}
  union {
    CMsgLobbyEventGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyEventGameDataDefaultTypeInternal _CMsgLobbyEventGameData_default_instance_;
constexpr CMsgLobbyGauntletProgress_AccountProgress::CMsgLobbyGauntletProgress_AccountProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , gauntlet_tier_(0u)
  , gauntlet_wins_(0u)
  , gauntlet_losses_(0u){}
struct CMsgLobbyGauntletProgress_AccountProgressDefaultTypeInternal {
  constexpr CMsgLobbyGauntletProgress_AccountProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyGauntletProgress_AccountProgressDefaultTypeInternal() {}
  union {
    CMsgLobbyGauntletProgress_AccountProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyGauntletProgress_AccountProgressDefaultTypeInternal _CMsgLobbyGauntletProgress_AccountProgress_default_instance_;
constexpr CMsgLobbyGauntletProgress::CMsgLobbyGauntletProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_(){}
struct CMsgLobbyGauntletProgressDefaultTypeInternal {
  constexpr CMsgLobbyGauntletProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyGauntletProgressDefaultTypeInternal() {}
  union {
    CMsgLobbyGauntletProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyGauntletProgressDefaultTypeInternal _CMsgLobbyGauntletProgress_default_instance_;
constexpr CMsgLocalServerGuildData::CMsgLocalServerGuildData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0)

  , guild_logo_(PROTOBUF_ULONGLONG(0))
  , guild_points_(0u)
  , guild_primary_color_(0u)
  , guild_secondary_color_(0u)
  , guild_pattern_(0u)
  , guild_flags_(0u)
  , guild_weekly_percentile_(0u){}
struct CMsgLocalServerGuildDataDefaultTypeInternal {
  constexpr CMsgLocalServerGuildDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLocalServerGuildDataDefaultTypeInternal() {}
  union {
    CMsgLocalServerGuildData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLocalServerGuildDataDefaultTypeInternal _CMsgLocalServerGuildData_default_instance_;
constexpr CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_points_()
  , guild_info_(nullptr)
  , account_id_(0u)
  , is_plus_subscriber_(false)
  , primary_event_id_(0u)
  , favorite_team_(0u)
  , favorite_team_quality_(0u)
  , teleport_fx_level_(0u){}
struct CMsgLocalServerFakeLobbyDataDefaultTypeInternal {
  constexpr CMsgLocalServerFakeLobbyDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLocalServerFakeLobbyDataDefaultTypeInternal() {}
  union {
    CMsgLocalServerFakeLobbyData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLocalServerFakeLobbyDataDefaultTypeInternal _CMsgLocalServerFakeLobbyData_default_instance_;
constexpr CMsgBattleCupVictory::CMsgBattleCupVictory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , win_date_(0u)
  , valid_until_(0u)
  , skill_level_(0u)
  , tournament_id_(0u)
  , division_id_(0u)
  , team_id_(0u)
  , streak_(0u)
  , trophy_id_(0u){}
struct CMsgBattleCupVictoryDefaultTypeInternal {
  constexpr CMsgBattleCupVictoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBattleCupVictoryDefaultTypeInternal() {}
  union {
    CMsgBattleCupVictory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBattleCupVictoryDefaultTypeInternal _CMsgBattleCupVictory_default_instance_;
constexpr CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : winners_(){}
struct CMsgLobbyBattleCupVictoryListDefaultTypeInternal {
  constexpr CMsgLobbyBattleCupVictoryListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLobbyBattleCupVictoryListDefaultTypeInternal() {}
  union {
    CMsgLobbyBattleCupVictoryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLobbyBattleCupVictoryListDefaultTypeInternal _CMsgLobbyBattleCupVictoryList_default_instance_;
constexpr CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgDOTABroadcastNotificationDefaultTypeInternal {
  constexpr CMsgDOTABroadcastNotificationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABroadcastNotificationDefaultTypeInternal() {}
  union {
    CMsgDOTABroadcastNotification _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABroadcastNotificationDefaultTypeInternal _CMsgDOTABroadcastNotification_default_instance_;
constexpr CProtoItemHeroStatue::CProtoItemHeroStatue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wearable_()
  , style_()
  , sequence_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inscription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hero_id_(0u)
  , status_effect_index_(0u)
  , cycle_(0)
  , tournament_drop_(false){}
struct CProtoItemHeroStatueDefaultTypeInternal {
  constexpr CProtoItemHeroStatueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemHeroStatueDefaultTypeInternal() {}
  union {
    CProtoItemHeroStatue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemHeroStatueDefaultTypeInternal _CProtoItemHeroStatue_default_instance_;
constexpr CProtoItemTeamShowcase::CProtoItemTeamShowcase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wearable_()
  , style_()
  , sequence_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , inscription_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hero_id_(0u)
  , status_effect_index_(0u)
  , cycle_(0){}
struct CProtoItemTeamShowcaseDefaultTypeInternal {
  constexpr CProtoItemTeamShowcaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CProtoItemTeamShowcaseDefaultTypeInternal() {}
  union {
    CProtoItemTeamShowcase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CProtoItemTeamShowcaseDefaultTypeInternal _CProtoItemTeamShowcase_default_instance_;
constexpr CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_(0u)
  , time_(0u){}
struct CMatchPlayerAbilityUpgradeDefaultTypeInternal {
  constexpr CMatchPlayerAbilityUpgradeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMatchPlayerAbilityUpgradeDefaultTypeInternal() {}
  union {
    CMatchPlayerAbilityUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMatchPlayerAbilityUpgradeDefaultTypeInternal _CMatchPlayerAbilityUpgrade_default_instance_;
constexpr CMatchPlayerTimedStats::CMatchPlayerTimedStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0u)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , net_worth_(0u)
  , xp_(0u)
  , last_hits_(0u)
  , denies_(0u)
  , bounty_rune_gold_(0u)
  , range_creep_upgrade_gold_(0u)
  , observer_wards_dewarded_(0u)
  , reliable_gold_earned_(0u)
  , gold_loss_prevented_(0u)
  , hero_kill_gold_(0u)
  , creep_kill_gold_(0u)
  , building_gold_(0u)
  , other_gold_(0u)
  , comeback_gold_(0u)
  , experimental_gold_(0u)
  , experimental2_gold_(0u)
  , creep_deny_gold_(0u)
  , tp_scrolls_purchased_1_(0u)
  , tp_scrolls_purchased_2_(0u)
  , tp_scrolls_purchased_3_(0u)
  , tp_scrolls_purchased_4_(0u)
  , tp_scrolls_purchased_5_(0u)
  , neutral_gold_(0u)
  , courier_gold_(0u)
  , roshan_gold_(0u)
  , income_gold_(0u)
  , custom_stats_1_(0u)
  , custom_stats_2_(0u)
  , custom_stats_3_(0u)
  , custom_stats_4_(0u)
  , custom_stats_5_(0u)
  , item_value_(0u)
  , support_gold_spent_(0u)
  , camps_stacked_(0u)
  , wards_placed_(0u)
  , triple_kills_(0u)
  , rampages_(0u){}
struct CMatchPlayerTimedStatsDefaultTypeInternal {
  constexpr CMatchPlayerTimedStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMatchPlayerTimedStatsDefaultTypeInternal() {}
  union {
    CMatchPlayerTimedStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMatchPlayerTimedStatsDefaultTypeInternal _CMatchPlayerTimedStats_default_instance_;
constexpr CMatchTeamTimedStats::CMatchTeamTimedStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(0u)
  , enemy_towers_killed_(0u)
  , enemy_barracks_killed_(0u)
  , enemy_towers_status_(0u)
  , enemy_barracks_status_(0u){}
struct CMatchTeamTimedStatsDefaultTypeInternal {
  constexpr CMatchTeamTimedStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMatchTeamTimedStatsDefaultTypeInternal() {}
  union {
    CMatchTeamTimedStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMatchTeamTimedStatsDefaultTypeInternal _CMatchTeamTimedStats_default_instance_;
constexpr CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , unit_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMatchAdditionalUnitInventoryDefaultTypeInternal {
  constexpr CMatchAdditionalUnitInventoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMatchAdditionalUnitInventoryDefaultTypeInternal() {}
  union {
    CMatchAdditionalUnitInventory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMatchAdditionalUnitInventoryDefaultTypeInternal _CMatchAdditionalUnitInventory_default_instance_;
constexpr CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permanent_buff_(0u)
  , stack_count_(0u)
  , grant_time_(0u){}
struct CMatchPlayerPermanentBuffDefaultTypeInternal {
  constexpr CMatchPlayerPermanentBuffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMatchPlayerPermanentBuffDefaultTypeInternal() {}
  union {
    CMatchPlayerPermanentBuff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMatchPlayerPermanentBuffDefaultTypeInternal _CMatchPlayerPermanentBuff_default_instance_;
constexpr CMatchHeroSelectEvent::CMatchHeroSelectEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_pick_(false)
  , team_(0u)
  , hero_id_(0u){}
struct CMatchHeroSelectEventDefaultTypeInternal {
  constexpr CMatchHeroSelectEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMatchHeroSelectEventDefaultTypeInternal() {}
  union {
    CMatchHeroSelectEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMatchHeroSelectEventDefaultTypeInternal _CMatchHeroSelectEvent_default_instance_;
constexpr CPartySearchClientParty::CPartySearchClientParty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : party_members_()
  , party_id_(PROTOBUF_ULONGLONG(0))
  , beacon_type_(0){}
struct CPartySearchClientPartyDefaultTypeInternal {
  constexpr CPartySearchClientPartyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CPartySearchClientPartyDefaultTypeInternal() {}
  union {
    CPartySearchClientParty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CPartySearchClientPartyDefaultTypeInternal _CPartySearchClientParty_default_instance_;
constexpr CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(0u)
  , timestamp_(0u)
  , fantasy_league_id_(0u)
  , season_(0u)
  , reference_data_(0u){}
struct CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal {
  constexpr CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal() {}
  union {
    CMsgDOTAProcessFantasyScheduledEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal _CMsgDOTAProcessFantasyScheduledEvent_default_instance_;
constexpr CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u){}
struct CMsgDOTAHasItemQueryDefaultTypeInternal {
  constexpr CMsgDOTAHasItemQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAHasItemQueryDefaultTypeInternal() {}
  union {
    CMsgDOTAHasItemQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAHasItemQueryDefaultTypeInternal _CMsgDOTAHasItemQuery_default_instance_;
constexpr CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_item_(false){}
struct CMsgDOTAHasItemResponseDefaultTypeInternal {
  constexpr CMsgDOTAHasItemResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAHasItemResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAHasItemResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAHasItemResponseDefaultTypeInternal _CMsgDOTAHasItemResponse_default_instance_;
constexpr CMsgGCIsProQuery::CMsgGCIsProQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u){}
struct CMsgGCIsProQueryDefaultTypeInternal {
  constexpr CMsgGCIsProQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCIsProQueryDefaultTypeInternal() {}
  union {
    CMsgGCIsProQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCIsProQueryDefaultTypeInternal _CMsgGCIsProQuery_default_instance_;
constexpr CMsgGCIsProResponse::CMsgGCIsProResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_pro_(false){}
struct CMsgGCIsProResponseDefaultTypeInternal {
  constexpr CMsgGCIsProResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCIsProResponseDefaultTypeInternal() {}
  union {
    CMsgGCIsProResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCIsProResponseDefaultTypeInternal _CMsgGCIsProResponse_default_instance_;
constexpr CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemdef_ids_()
  , account_id_(0u){}
struct CMsgDOTAHasItemDefsQueryDefaultTypeInternal {
  constexpr CMsgDOTAHasItemDefsQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAHasItemDefsQueryDefaultTypeInternal() {}
  union {
    CMsgDOTAHasItemDefsQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAHasItemDefsQueryDefaultTypeInternal _CMsgDOTAHasItemDefsQuery_default_instance_;
constexpr CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_items_(false){}
struct CMsgDOTAHasItemDefsResponseDefaultTypeInternal {
  constexpr CMsgDOTAHasItemDefsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAHasItemDefsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAHasItemDefsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAHasItemDefsResponseDefaultTypeInternal _CMsgDOTAHasItemDefsResponse_default_instance_;
constexpr CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_card_item_ids_()
  , account_id_(0u)
  , all_for_event_(0u){}
struct CMsgGCGetPlayerCardItemInfoDefaultTypeInternal {
  constexpr CMsgGCGetPlayerCardItemInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPlayerCardItemInfoDefaultTypeInternal() {}
  union {
    CMsgGCGetPlayerCardItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPlayerCardItemInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfo_default_instance_;
constexpr CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_card_item_id_(PROTOBUF_ULONGLONG(0))
  , packed_bonuses_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u){}
struct CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal {
  constexpr CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal() {}
  union {
    CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
constexpr CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_card_infos_(){}
struct CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal {
  constexpr CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetPlayerCardItemInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
constexpr CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , league_id_(0u){}
struct CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal {
  constexpr CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal() {}
  union {
    CMsgGCToGCFantasySetMatchLeague _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal _CMsgGCToGCFantasySetMatchLeague_default_instance_;
constexpr CSODOTAMapLocationState::CSODOTAMapLocationState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , location_id_(0)
  , completed_(false){}
struct CSODOTAMapLocationStateDefaultTypeInternal {
  constexpr CSODOTAMapLocationStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAMapLocationStateDefaultTypeInternal() {}
  union {
    CSODOTAMapLocationState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAMapLocationStateDefaultTypeInternal _CSODOTAMapLocationState_default_instance_;
constexpr CMsgLeagueAdminList::CMsgLeagueAdminList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_ids_(){}
struct CMsgLeagueAdminListDefaultTypeInternal {
  constexpr CMsgLeagueAdminListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeagueAdminListDefaultTypeInternal() {}
  union {
    CMsgLeagueAdminList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeagueAdminListDefaultTypeInternal _CMsgLeagueAdminList_default_instance_;
constexpr CCompendiumTimestampedData::CCompendiumTimestampedData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_purchases_()
  , game_time_(0u)
  , gpm_(0u)
  , xpm_(0u)
  , kills_(0u)
  , deaths_(0u){}
struct CCompendiumTimestampedDataDefaultTypeInternal {
  constexpr CCompendiumTimestampedDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCompendiumTimestampedDataDefaultTypeInternal() {}
  union {
    CCompendiumTimestampedData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCompendiumTimestampedDataDefaultTypeInternal _CCompendiumTimestampedData_default_instance_;
constexpr CCompendiumGameTimeline::CCompendiumGameTimeline(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_()
  , tags_(){}
struct CCompendiumGameTimelineDefaultTypeInternal {
  constexpr CCompendiumGameTimelineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCompendiumGameTimelineDefaultTypeInternal() {}
  union {
    CCompendiumGameTimeline _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCompendiumGameTimelineDefaultTypeInternal _CCompendiumGameTimeline_default_instance_;
constexpr CCompendiumGameList::CCompendiumGameList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : games_(){}
struct CCompendiumGameListDefaultTypeInternal {
  constexpr CCompendiumGameListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CCompendiumGameListDefaultTypeInternal() {}
  union {
    CCompendiumGameList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CCompendiumGameListDefaultTypeInternal _CCompendiumGameList_default_instance_;
constexpr CAdditionalEquipSlot::CAdditionalEquipSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : class_id_(0u)
  , slot_id_(0u)
  , def_index_(0u){}
struct CAdditionalEquipSlotDefaultTypeInternal {
  constexpr CAdditionalEquipSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CAdditionalEquipSlotDefaultTypeInternal() {}
  union {
    CAdditionalEquipSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CAdditionalEquipSlotDefaultTypeInternal _CAdditionalEquipSlot_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trophy_id_(0u)
  , trophy_score_(0u){}
struct CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Trophy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_score_(0u)
  , stat_id_(3)
{}
struct CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Stat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serialized_item_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Item_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , hero_wins_(0u)
  , hero_losses_(0u){}
struct CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : emoticon_id_(0u){}
struct CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Emoticon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
constexpr CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u){}
struct CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Team_default_instance_;
constexpr CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trophy_(nullptr)
  , stat_(nullptr)
  , item_(nullptr)
  , hero_(nullptr)
  , emoticon_(nullptr)
  , team_(nullptr)
  , slot_id_(0u){}
struct CMsgDOTAProfileCard_SlotDefaultTypeInternal {
  constexpr CMsgDOTAProfileCard_SlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCard_SlotDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard_Slot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCard_SlotDefaultTypeInternal _CMsgDOTAProfileCard_Slot_default_instance_;
constexpr CMsgDOTAProfileCard::CMsgDOTAProfileCard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , recent_battle_cup_victory_(nullptr)
  , account_id_(0u)
  , badge_points_(0u)
  , event_points_(0u)
  , event_id_(0u)
  , rank_tier_(0u)
  , leaderboard_rank_(0u)
  , is_plus_subscriber_(false)
  , plus_original_start_date_(0u)
  , rank_tier_score_(0u)
  , previous_rank_tier_(0u)
  , rank_tier_mmr_type_(0u)
  , leaderboard_rank_core_(0u)
  , rank_tier_peak_(0u)
  , title_(0u)
  , favorite_team_packed_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAProfileCardDefaultTypeInternal {
  constexpr CMsgDOTAProfileCardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProfileCardDefaultTypeInternal() {}
  union {
    CMsgDOTAProfileCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProfileCardDefaultTypeInternal _CMsgDOTAProfileCard_default_instance_;
constexpr CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , event_id_(0u)
  , slot_id_(0u)
  , int_param_0_(0u)
  , int_param_1_(0u)
  , created_time_(0u)
  , completed_(0u)
  , sequence_id_(0u)
  , challenge_tier_(0u)
  , flags_(0u)
  , attempts_(0u)
  , complete_limit_(0u)
  , quest_rank_(0u)
  , max_quest_rank_(0u)
  , instance_id_(0u)
  , hero_id_(0u)
  , template_id_(0u){}
struct CSODOTAPlayerChallengeDefaultTypeInternal {
  constexpr CSODOTAPlayerChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSODOTAPlayerChallengeDefaultTypeInternal() {}
  union {
    CSODOTAPlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSODOTAPlayerChallengeDefaultTypeInternal _CSODOTAPlayerChallenge_default_instance_;
constexpr CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0)

  , sequence_id_(0u)
  , hero_id_(0u){}
struct CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal {
  constexpr CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal() {}
  union {
    CMsgClientToGCRerollPlayerChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal _CMsgClientToGCRerollPlayerChallenge_default_instance_;
constexpr CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal {
  constexpr CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgGCRerollPlayerChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal _CMsgGCRerollPlayerChallengeResponse_default_instance_;
constexpr CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_custom_games_()
  , game_of_the_day_(PROTOBUF_ULONGLONG(0)){}
struct CMsgGCTopCustomGamesListDefaultTypeInternal {
  constexpr CMsgGCTopCustomGamesListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCTopCustomGamesListDefaultTypeInternal() {}
  union {
    CMsgGCTopCustomGamesList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCTopCustomGamesListDefaultTypeInternal _CMsgGCTopCustomGamesList_default_instance_;
constexpr CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_number_(0u)
  , team_id_(0u)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , score_(0u)
  , only_team_(false)
  , cheers_(0u)
  , net_worth_(0u){}
struct CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_TeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_ability_id_(0u)
  , time_(0)
  , sold_(false)
  , stackcount_(0u){}
struct CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_ItemDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , level_(0u)
  , cooldown_(0)
  , cooldown_max_(0){}
struct CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_AbilityDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victimid_(0u)
  , kills_(0u)
  , assists_(0u){}
struct CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_HeroToHeroStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
constexpr CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(){}
struct CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_AbilityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
constexpr CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abilities_()
  , items_()
  , stashitems_()
  , itemshoppinglist_()
  , levelpoints_()
  , hero_to_hero_stats_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , playerid_(0u)
  , team_(0u)
  , heroid_(0u)
  , healthpoints_(0u)
  , maxhealthpoints_(0u)
  , healthregenrate_(0)
  , manapoints_(0u)
  , maxmanapoints_(0u)
  , manaregenrate_(0)
  , base_strength_(0u)
  , base_agility_(0u)
  , base_intelligence_(0u)
  , base_armor_(0)
  , base_movespeed_(0u)
  , base_damage_(0u)
  , strength_(0u)
  , agility_(0u)
  , intelligence_(0u)
  , armor_(0)
  , movespeed_(0u)
  , damage_(0u)
  , hero_damage_(0u)
  , tower_damage_(0u)
  , level_(0u)
  , kill_count_(0u)
  , death_count_(0u)
  , assists_count_(0u)
  , denies_count_(0u)
  , lh_count_(0u)
  , hero_healing_(0u)
  , gold_per_min_(0u)
  , xp_per_min_(0u)
  , net_gold_(0u)
  , gold_(0u)
  , x_(0)
  , y_(0)
  , respawn_time_(0)
  , ultimate_cooldown_(0u)
  , has_buyback_(false)
  , has_ultimate_(false)
  , has_ultimate_mana_(false){}
struct CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_PlayerDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0u)
  , heading_(0)
  , lane_(0u)
  , tier_(0u)
  , type_(0u)
  , x_(0)
  , y_(0)
  , destroyed_(false){}
struct CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_BuildingDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , death_time_(0)
  , killer_player_id_(0u){}
struct CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_KillDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0u)
  , selected_hero_(0u)
  , selected_graph_(0u){}
struct CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_BroadcasterDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_(0u)
  , team_(0u){}
struct CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_PickBanDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : picks_()
  , bans_()
  , kills_()
  , broadcasters_()
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , matchid_(PROTOBUF_ULONGLONG(0))
  , timestamp_(0u)
  , time_of_day_(0)
  , game_time_(0)
  , teamid_radiant_(0u)
  , teamid_dire_(0u)
  , is_nightstalker_night_(false)
  , single_team_(false)
  , game_mode_(0u)
  , league_id_(0u)
  , cheers_peak_(0u)
  , league_node_id_(0u)
  , game_state_(0u){}
struct CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_MatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_(){}
struct CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_GraphData_LocationStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
constexpr CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : loc_stats_(){}
struct CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
constexpr CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : graph_gold_()
  , graph_xp_()
  , graph_kill_()
  , graph_tower_()
  , graph_rax_()
  , team_loc_stats_(){}
struct CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats_GraphData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_default_instance_;
constexpr CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , buildings_()
  , match_(nullptr)
  , graph_data_(nullptr)
  , delta_frame_(false){}
struct CMsgDOTARealtimeGameStatsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_number_(0u)
  , team_id_(0u)
  , team_logo_(PROTOBUF_ULONGLONG(0))
  , score_(0u)
  , net_worth_(0u){}
struct CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse_TeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abilities_()
  , items_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , accountid_(0u)
  , playerid_(0u)
  , team_(0u)
  , heroid_(0u)
  , level_(0u)
  , kill_count_(0u)
  , death_count_(0u)
  , assists_count_(0u)
  , denies_count_(0u)
  , lh_count_(0u)
  , gold_(0u)
  , x_(0)
  , y_(0)
  , net_worth_(0u){}
struct CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse_PlayerDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(0u)
  , heading_(0)
  , type_(0u)
  , lane_(0u)
  , tier_(0u)
  , x_(0)
  , y_(0)
  , destroyed_(false){}
struct CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse_BuildingDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CMsgDOTARealtimeGameStatsTerse_PickBanDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_(0u)
  , team_(0u){}
struct CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse_PickBanDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerse_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_broadcaster_account_ids_()
  , picks_()
  , bans_()
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , matchid_(PROTOBUF_ULONGLONG(0))
  , timestamp_(0u)
  , game_time_(0)
  , game_mode_(0u)
  , league_id_(0u)
  , league_node_id_(0u)
  , game_state_(0u){}
struct CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse_MatchDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : graph_gold_(){}
struct CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse_GraphData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
constexpr CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , buildings_()
  , match_(nullptr)
  , graph_data_(nullptr)
  , delta_frame_(false){}
struct CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal {
  constexpr CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal() {}
  union {
    CMsgDOTARealtimeGameStatsTerse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_default_instance_;
constexpr CMsgDOTABroadcastTimelineEvent::CMsgDOTABroadcastTimelineEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : string_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0u)
  , data_(0u)
  , event_(1)
{}
struct CMsgDOTABroadcastTimelineEventDefaultTypeInternal {
  constexpr CMsgDOTABroadcastTimelineEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABroadcastTimelineEventDefaultTypeInternal() {}
  union {
    CMsgDOTABroadcastTimelineEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABroadcastTimelineEventDefaultTypeInternal _CMsgDOTABroadcastTimelineEvent_default_instance_;
constexpr CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matchgroups_version_(0u){}
struct CMsgGCToClientMatchGroupsVersionDefaultTypeInternal {
  constexpr CMsgGCToClientMatchGroupsVersionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientMatchGroupsVersionDefaultTypeInternal() {}
  union {
    CMsgGCToClientMatchGroupsVersion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientMatchGroupsVersionDefaultTypeInternal _CMsgGCToClientMatchGroupsVersion_default_instance_;
constexpr CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , game_mode_(0u)
  , lobby_type_(0u)
  , start_time_(0u)
  , won_(false)
  , gpm_(0u)
  , xpm_(0u)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u){}
struct CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal {
  constexpr CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal() {}
  union {
    CMsgDOTASDOHeroStatsHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal _CMsgDOTASDOHeroStatsHistory_default_instance_;
constexpr CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , itemdef_(0u)
  , importance_(0u)
  , base_level_(0u)
  , repeat_level_(0u)
  , reward_type_(0)

  , action_id_(0u)
  , effect_index_(0u){}
struct CMsgDOTASeasonRewards_RewardDefaultTypeInternal {
  constexpr CMsgDOTASeasonRewards_RewardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonRewards_RewardDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonRewards_Reward _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonRewards_RewardDefaultTypeInternal _CMsgDOTASeasonRewards_Reward_default_instance_;
constexpr CMsgDOTASeasonRewards::CMsgDOTASeasonRewards(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rewards_(){}
struct CMsgDOTASeasonRewardsDefaultTypeInternal {
  constexpr CMsgDOTASeasonRewardsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonRewardsDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonRewards _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonRewardsDefaultTypeInternal _CMsgDOTASeasonRewards_default_instance_;
constexpr CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_id_(0u)
  , max_grants_(0u)
  , normal_points_(0u)
  , tracking_achievement_(0u)
  , achievement_goal_(0u)
  , achievement_level_(0u){}
struct CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal {
  constexpr CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonAchievements_Achievement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal _CMsgDOTASeasonAchievements_Achievement_default_instance_;
constexpr CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievements_(){}
struct CMsgDOTASeasonAchievementsDefaultTypeInternal {
  constexpr CMsgDOTASeasonAchievementsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonAchievementsDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonAchievements _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonAchievementsDefaultTypeInternal _CMsgDOTASeasonAchievements_default_instance_;
constexpr CMsgPredictionChoice::CMsgPredictionChoice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0u)
  , min_raw_value_(0u)
  , max_raw_value_(0u){}
struct CMsgPredictionChoiceDefaultTypeInternal {
  constexpr CMsgPredictionChoiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPredictionChoiceDefaultTypeInternal() {}
  union {
    CMsgPredictionChoice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPredictionChoiceDefaultTypeInternal _CMsgPredictionChoice_default_instance_;
constexpr CMsgInGamePrediction_QueryKeyValues::CMsgInGamePrediction_QueryKeyValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgInGamePrediction_QueryKeyValuesDefaultTypeInternal {
  constexpr CMsgInGamePrediction_QueryKeyValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInGamePrediction_QueryKeyValuesDefaultTypeInternal() {}
  union {
    CMsgInGamePrediction_QueryKeyValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInGamePrediction_QueryKeyValuesDefaultTypeInternal _CMsgInGamePrediction_QueryKeyValues_default_instance_;
constexpr CMsgInGamePrediction::CMsgInGamePrediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : choices_()
  , required_heroes_()
  , query_values_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , question_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , type_(0)

  , group_(0)

  , answer_resolution_type_(0)

  , points_to_grant_(0u)
  , reward_action_(0u)
  , debug_force_selection_(0u)
  , raw_value_type_(0)
{}
struct CMsgInGamePredictionDefaultTypeInternal {
  constexpr CMsgInGamePredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgInGamePredictionDefaultTypeInternal() {}
  union {
    CMsgInGamePrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgInGamePredictionDefaultTypeInternal _CMsgInGamePrediction_default_instance_;
constexpr CMsgDOTASeasonPredictions_Prediction_Answers::CMsgDOTASeasonPredictions_Prediction_Answers(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : answer_id_(0u){}
struct CMsgDOTASeasonPredictions_Prediction_AnswersDefaultTypeInternal {
  constexpr CMsgDOTASeasonPredictions_Prediction_AnswersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonPredictions_Prediction_AnswersDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonPredictions_Prediction_Answers _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonPredictions_Prediction_AnswersDefaultTypeInternal _CMsgDOTASeasonPredictions_Prediction_Answers_default_instance_;
constexpr CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : choices_()
  , answers_()
  , phases_()
  , question_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , selection_id_(0u)
  , start_date_(0u)
  , lock_date_(0u)
  , reward_(0u)
  , answer_type_(0)

  , answer_id_(0u)
  , lock_on_selection_id_(0u)
  , lock_on_selection_value_(0u)
  , lock_on_selection_set_(false)
  , use_answer_value_ranges_(false)
  , region_(0)

  , reward_event_(0)
{}
struct CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal {
  constexpr CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonPredictions_Prediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal _CMsgDOTASeasonPredictions_Prediction_default_instance_;
constexpr CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predictions_()
  , in_game_predictions_()
  , in_game_prediction_count_per_game_(0u)
  , in_game_prediction_voting_period_minutes_(0u){}
struct CMsgDOTASeasonPredictionsDefaultTypeInternal {
  constexpr CMsgDOTASeasonPredictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeasonPredictionsDefaultTypeInternal() {}
  union {
    CMsgDOTASeasonPredictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeasonPredictionsDefaultTypeInternal _CMsgDOTASeasonPredictions_default_instance_;
constexpr CMsgAvailablePredictions_MatchPrediction::CMsgAvailablePredictions_MatchPrediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : predictions_()
  , match_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgAvailablePredictions_MatchPredictionDefaultTypeInternal {
  constexpr CMsgAvailablePredictions_MatchPredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAvailablePredictions_MatchPredictionDefaultTypeInternal() {}
  union {
    CMsgAvailablePredictions_MatchPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAvailablePredictions_MatchPredictionDefaultTypeInternal _CMsgAvailablePredictions_MatchPrediction_default_instance_;
constexpr CMsgAvailablePredictions::CMsgAvailablePredictions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_predictions_(){}
struct CMsgAvailablePredictionsDefaultTypeInternal {
  constexpr CMsgAvailablePredictionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAvailablePredictionsDefaultTypeInternal() {}
  union {
    CMsgAvailablePredictions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAvailablePredictionsDefaultTypeInternal _CMsgAvailablePredictions_default_instance_;
constexpr CMsgLeagueWatchedGames_Series::CMsgLeagueWatchedGames_Series(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_()
  , node_id_(0u){}
struct CMsgLeagueWatchedGames_SeriesDefaultTypeInternal {
  constexpr CMsgLeagueWatchedGames_SeriesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeagueWatchedGames_SeriesDefaultTypeInternal() {}
  union {
    CMsgLeagueWatchedGames_Series _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeagueWatchedGames_SeriesDefaultTypeInternal _CMsgLeagueWatchedGames_Series_default_instance_;
constexpr CMsgLeagueWatchedGames_League::CMsgLeagueWatchedGames_League(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : series_()
  , league_id_(0u){}
struct CMsgLeagueWatchedGames_LeagueDefaultTypeInternal {
  constexpr CMsgLeagueWatchedGames_LeagueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeagueWatchedGames_LeagueDefaultTypeInternal() {}
  union {
    CMsgLeagueWatchedGames_League _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeagueWatchedGames_LeagueDefaultTypeInternal _CMsgLeagueWatchedGames_League_default_instance_;
constexpr CMsgLeagueWatchedGames::CMsgLeagueWatchedGames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : leagues_(){}
struct CMsgLeagueWatchedGamesDefaultTypeInternal {
  constexpr CMsgLeagueWatchedGamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgLeagueWatchedGamesDefaultTypeInternal() {}
  union {
    CMsgLeagueWatchedGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgLeagueWatchedGamesDefaultTypeInternal _CMsgLeagueWatchedGames_default_instance_;
constexpr CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dota_team_(0u)
  , winner_(false){}
struct CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal {
  constexpr CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_Player_CustomGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_Player_CustomGameData_default_instance_;
constexpr CMsgDOTAMatch_Player_HeroDamageReceived::CMsgDOTAMatch_Player_HeroDamageReceived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pre_reduction_(0u)
  , post_reduction_(0u)
  , damage_type_(0)
{}
struct CMsgDOTAMatch_Player_HeroDamageReceivedDefaultTypeInternal {
  constexpr CMsgDOTAMatch_Player_HeroDamageReceivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_Player_HeroDamageReceivedDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_Player_HeroDamageReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_Player_HeroDamageReceivedDefaultTypeInternal _CMsgDOTAMatch_Player_HeroDamageReceived_default_instance_;
constexpr CMsgDOTAMatch_Player::CMsgDOTAMatch_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_upgrades_()
  , additional_units_inventory_()
  , permanent_buffs_()
  , hero_damage_received_()
  , hero_damage_dealt_()
  , player_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pro_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_game_data_(nullptr)
  , account_id_(0u)
  , player_slot_(0u)
  , hero_id_(0u)
  , item_0_(0u)
  , item_1_(0u)
  , item_2_(0u)
  , item_3_(0u)
  , item_4_(0u)
  , item_5_(0u)
  , expected_team_contribution_(0)
  , scaled_metric_(0)
  , previous_rank_(0u)
  , rank_change_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , leaver_status_(0u)
  , gold_(0u)
  , last_hits_(0u)
  , denies_(0u)
  , gold_per_min_(0u)
  , xp_per_min_(0u)
  , gold_spent_(0u)
  , hero_damage_(0u)
  , tower_damage_(0u)
  , hero_healing_(0u)
  , level_(0u)
  , time_last_seen_(0u)
  , support_ability_value_(0u)
  , search_rank_(0u)
  , search_rank_uncertainty_(0u)
  , rank_uncertainty_change_(0)
  , party_id_(PROTOBUF_ULONGLONG(0))
  , hero_play_count_(0u)
  , scaled_kills_(0)
  , scaled_deaths_(0)
  , scaled_assists_(0)
  , claimed_farm_gold_(0u)
  , support_gold_(0u)
  , claimed_denies_(0u)
  , claimed_misses_(0u)
  , misses_(0u)
  , net_worth_(0u)
  , rank_tier_updated_(false)
  , feeding_detected_(false)
  , active_plus_subscription_(false)
  , hero_was_randomed_(false)
  , scaled_hero_damage_(0u)
  , scaled_tower_damage_(0u)
  , scaled_hero_healing_(0u)
  , bot_difficulty_(0u)
  , item_6_(0u)
  , item_7_(0u)
  , item_8_(0u)
  , hero_pick_order_(0u)
  , hero_was_dota_plus_suggestion_(false)
  , seconds_dead_(0u)
  , gold_lost_to_death_(0u)
  , outposts_captured_(0u)
  , mmr_type_(0u)
  , lane_selection_flags_(0u)
  , item_9_(0u)
  , bounty_runes_(0u){}
struct CMsgDOTAMatch_PlayerDefaultTypeInternal {
  constexpr CMsgDOTAMatch_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_PlayerDefaultTypeInternal _CMsgDOTAMatch_Player_default_instance_;
constexpr CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u){}
struct CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal {
  constexpr CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_BroadcasterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal _CMsgDOTAMatch_BroadcasterInfo_default_instance_;
constexpr CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : broadcaster_infos_()
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , language_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal {
  constexpr CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_BroadcasterChannel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal _CMsgDOTAMatch_BroadcasterChannel_default_instance_;
constexpr CMsgDOTAMatch_Coach::CMsgDOTAMatch_Coach(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : coach_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , coach_rating_(0u)
  , coach_party_id_(PROTOBUF_ULONGLONG(0))
  , coach_team_(0u)
  , is_private_coach_(false){}
struct CMsgDOTAMatch_CoachDefaultTypeInternal {
  constexpr CMsgDOTAMatch_CoachDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_CoachDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_Coach _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_CoachDefaultTypeInternal _CMsgDOTAMatch_Coach_default_instance_;
constexpr CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_game_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAMatch_CustomGameDataDefaultTypeInternal {
  constexpr CMsgDOTAMatch_CustomGameDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatch_CustomGameDataDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch_CustomGameData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatch_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_CustomGameData_default_instance_;
constexpr CMsgDOTAMatch::CMsgDOTAMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , tower_status_()
  , barracks_status_()
  , picks_bans_()
  , broadcaster_channels_()
  , mvp_account_id_()
  , coaches_()
  , radiant_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dire_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , radiant_team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dire_team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , radiant_team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dire_team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_game_data_(nullptr)
  , duration_(0u)
  , starttime_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , cluster_(0u)
  , first_blood_time_(0u)
  , replay_salt_(0u)
  , server_ip_(0u)
  , server_port_(0u)
  , lobby_type_(0u)
  , human_players_(0u)
  , average_skill_(0u)
  , game_balance_(0)
  , radiant_team_id_(0u)
  , dire_team_id_(0u)
  , leagueid_(0u)
  , radiant_team_logo_(PROTOBUF_ULONGLONG(0))
  , dire_team_logo_(PROTOBUF_ULONGLONG(0))
  , radiant_team_complete_(0u)
  , dire_team_complete_(0u)
  , positive_votes_(0u)
  , negative_votes_(0u)
  , game_mode_(0)

  , replay_state_(0)

  , match_seq_num_(PROTOBUF_ULONGLONG(0))
  , radiant_guild_id_(0u)
  , dire_guild_id_(0u)
  , series_id_(0u)
  , series_type_(0u)
  , engine_(0u)
  , match_flags_(0u)
  , private_metadata_key_(0u)
  , radiant_team_score_(0u)
  , dire_team_score_(0u)
  , match_outcome_(0)

  , tournament_id_(0u)
  , tournament_round_(0u)
  , pre_game_duration_(0u){}
struct CMsgDOTAMatchDefaultTypeInternal {
  constexpr CMsgDOTAMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatchDefaultTypeInternal() {}
  union {
    CMsgDOTAMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatchDefaultTypeInternal _CMsgDOTAMatch_default_instance_;
constexpr CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_(0u)
  , value_(0u){}
struct CMsgPlayerCard_StatModifierDefaultTypeInternal {
  constexpr CMsgPlayerCard_StatModifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerCard_StatModifierDefaultTypeInternal() {}
  union {
    CMsgPlayerCard_StatModifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerCard_StatModifierDefaultTypeInternal _CMsgPlayerCard_StatModifier_default_instance_;
constexpr CMsgPlayerCard::CMsgPlayerCard(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_modifier_()
  , account_id_(0u){}
struct CMsgPlayerCardDefaultTypeInternal {
  constexpr CMsgPlayerCardDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerCardDefaultTypeInternal() {}
  union {
    CMsgPlayerCard _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerCardDefaultTypeInternal _CMsgPlayerCard_default_instance_;
constexpr CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , player_account_id_(0u)
  , match_completed_(false)
  , team_id_(0u)
  , league_id_(0u)
  , delay_(0u)
  , series_id_(0u)
  , series_type_(0u)
  , kills_(0u)
  , deaths_(0u)
  , cs_(0u)
  , gpm_(0)
  , tower_kills_(0u)
  , roshan_kills_(0u)
  , teamfight_participation_(0)
  , wards_placed_(0u)
  , camps_stacked_(0u)
  , runes_grabbed_(0u)
  , first_blood_(0u)
  , stuns_(0){}
struct CMsgDOTAFantasyPlayerStatsDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerStats_default_instance_;
constexpr CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matches_(){}
struct CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal {
  constexpr CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal() {}
  union {
    CMsgDOTAFantasyPlayerMatchStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerMatchStats_default_instance_;
constexpr CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_id_(0u)
  , desire_(0)
  , target_entity_(0u)
  , target_x_(0u)
  , target_y_(0u)
  , target_z_(0u){}
struct CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal {
  constexpr CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal() {}
  union {
    CMsgDOTABotDebugInfo_Bot_Mode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
constexpr CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , action_id_(0u){}
struct CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal {
  constexpr CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal() {}
  union {
    CMsgDOTABotDebugInfo_Bot_Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
constexpr CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : modes_()
  , action_(nullptr)
  , player_owner_id_(0u)
  , hero_id_(0u)
  , difficulty_(0u)
  , power_current_(0u)
  , power_max_(0u)
  , move_target_x_(0u)
  , move_target_y_(0u)
  , move_target_z_(0u)
  , active_mode_id_(0u)
  , execution_time_(0){}
struct CMsgDOTABotDebugInfo_BotDefaultTypeInternal {
  constexpr CMsgDOTABotDebugInfo_BotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABotDebugInfo_BotDefaultTypeInternal() {}
  union {
    CMsgDOTABotDebugInfo_Bot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABotDebugInfo_BotDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_default_instance_;
constexpr CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bots_()
  , rune_status_()
  , desire_push_lane_top_(0)
  , desire_push_lane_mid_(0)
  , desire_push_lane_bot_(0)
  , desire_defend_lane_top_(0)
  , desire_defend_lane_mid_(0)
  , desire_defend_lane_bot_(0)
  , desire_farm_lane_top_(0)
  , desire_farm_lane_mid_(0)
  , desire_farm_lane_bot_(0)
  , desire_farm_roshan_(0)
  , execution_time_(0){}
struct CMsgDOTABotDebugInfoDefaultTypeInternal {
  constexpr CMsgDOTABotDebugInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABotDebugInfoDefaultTypeInternal() {}
  union {
    CMsgDOTABotDebugInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABotDebugInfoDefaultTypeInternal _CMsgDOTABotDebugInfo_default_instance_;
constexpr CMsgSuccessfulHero::CMsgSuccessfulHero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , win_percent_(0)
  , longest_streak_(0u){}
struct CMsgSuccessfulHeroDefaultTypeInternal {
  constexpr CMsgSuccessfulHeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSuccessfulHeroDefaultTypeInternal() {}
  union {
    CMsgSuccessfulHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSuccessfulHeroDefaultTypeInternal _CMsgSuccessfulHero_default_instance_;
constexpr CMsgRecentMatchInfo::CMsgRecentMatchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , game_mode_(0)

  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , duration_(0u)
  , player_slot_(0u)
  , match_outcome_(0)

  , timestamp_(0u){}
struct CMsgRecentMatchInfoDefaultTypeInternal {
  constexpr CMsgRecentMatchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRecentMatchInfoDefaultTypeInternal() {}
  union {
    CMsgRecentMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRecentMatchInfoDefaultTypeInternal _CMsgRecentMatchInfo_default_instance_;
constexpr CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : source_account_id_(0u)
  , target_account_id_(0u)
  , tip_amount_(0u)
  , event_id_(0)
{}
struct CMsgMatchTips_SingleTipDefaultTypeInternal {
  constexpr CMsgMatchTips_SingleTipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchTips_SingleTipDefaultTypeInternal() {}
  union {
    CMsgMatchTips_SingleTip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchTips_SingleTipDefaultTypeInternal _CMsgMatchTips_SingleTip_default_instance_;
constexpr CMsgMatchTips::CMsgMatchTips(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tips_(){}
struct CMsgMatchTipsDefaultTypeInternal {
  constexpr CMsgMatchTipsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchTipsDefaultTypeInternal() {}
  union {
    CMsgMatchTips _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchTipsDefaultTypeInternal _CMsgMatchTips_default_instance_;
constexpr CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , pro_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , hero_id_(0u)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , player_slot_(0u)
  , level_(0u){}
struct CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal {
  constexpr CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal() {}
  union {
    CMsgDOTAMatchMinimal_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal _CMsgDOTAMatchMinimal_Player_default_instance_;
constexpr CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radiant_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dire_team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , radiant_team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dire_team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , league_id_(0u)
  , radiant_team_id_(0u)
  , radiant_team_logo_(PROTOBUF_ULONGLONG(0))
  , dire_team_id_(0u)
  , series_type_(0u)
  , dire_team_logo_(PROTOBUF_ULONGLONG(0))
  , series_game_(0u)
  , weekend_tourney_tournament_id_(0u)
  , weekend_tourney_season_trophy_id_(0u)
  , weekend_tourney_division_(0u)
  , weekend_tourney_skill_level_(0u){}
struct CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal {
  constexpr CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal() {}
  union {
    CMsgDOTAMatchMinimal_Tourney _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal _CMsgDOTAMatchMinimal_Tourney_default_instance_;
constexpr CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , tourney_(nullptr)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , start_time_(0u)
  , duration_(0u)
  , game_mode_(0)

  , match_outcome_(0)

  , radiant_score_(0u)
  , dire_score_(0u){}
struct CMsgDOTAMatchMinimalDefaultTypeInternal {
  constexpr CMsgDOTAMatchMinimalDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMatchMinimalDefaultTypeInternal() {}
  union {
    CMsgDOTAMatchMinimal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMatchMinimalDefaultTypeInternal _CMsgDOTAMatchMinimal_default_instance_;
constexpr CMsgConsumableUsage::CMsgConsumableUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_def_(0u)
  , quantity_change_(0){}
struct CMsgConsumableUsageDefaultTypeInternal {
  constexpr CMsgConsumableUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgConsumableUsageDefaultTypeInternal() {}
  union {
    CMsgConsumableUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgConsumableUsageDefaultTypeInternal _CMsgConsumableUsage_default_instance_;
constexpr CMsgMatchConsumableUsage_PlayerUsage::CMsgMatchConsumableUsage_PlayerUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : consumables_used_()
  , account_id_(0u){}
struct CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal {
  constexpr CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal() {}
  union {
    CMsgMatchConsumableUsage_PlayerUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchConsumableUsage_PlayerUsageDefaultTypeInternal _CMsgMatchConsumableUsage_PlayerUsage_default_instance_;
constexpr CMsgMatchConsumableUsage::CMsgMatchConsumableUsage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_consumables_used_(){}
struct CMsgMatchConsumableUsageDefaultTypeInternal {
  constexpr CMsgMatchConsumableUsageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchConsumableUsageDefaultTypeInternal() {}
  union {
    CMsgMatchConsumableUsage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchConsumableUsageDefaultTypeInternal _CMsgMatchConsumableUsage_default_instance_;
constexpr CMsgMatchEventActionGrants_PlayerGrants::CMsgMatchEventActionGrants_PlayerGrants(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_granted_()
  , account_id_(0u){}
struct CMsgMatchEventActionGrants_PlayerGrantsDefaultTypeInternal {
  constexpr CMsgMatchEventActionGrants_PlayerGrantsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchEventActionGrants_PlayerGrantsDefaultTypeInternal() {}
  union {
    CMsgMatchEventActionGrants_PlayerGrants _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchEventActionGrants_PlayerGrantsDefaultTypeInternal _CMsgMatchEventActionGrants_PlayerGrants_default_instance_;
constexpr CMsgMatchEventActionGrants::CMsgMatchEventActionGrants(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_grants_(){}
struct CMsgMatchEventActionGrantsDefaultTypeInternal {
  constexpr CMsgMatchEventActionGrantsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgMatchEventActionGrantsDefaultTypeInternal() {}
  union {
    CMsgMatchEventActionGrants _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgMatchEventActionGrantsDefaultTypeInternal _CMsgMatchEventActionGrants_default_instance_;
constexpr CMsgCustomGameWhitelist::CMsgCustomGameWhitelist(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_games_whitelist_()
  , version_(0u)
  , disable_whitelist_(false){}
struct CMsgCustomGameWhitelistDefaultTypeInternal {
  constexpr CMsgCustomGameWhitelistDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCustomGameWhitelistDefaultTypeInternal() {}
  union {
    CMsgCustomGameWhitelist _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCustomGameWhitelistDefaultTypeInternal _CMsgCustomGameWhitelist_default_instance_;
constexpr CMsgCustomGameWhitelistForEdit_WhitelistEntry::CMsgCustomGameWhitelistForEdit_WhitelistEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_game_id_(PROTOBUF_ULONGLONG(0))
  , whitelist_state_(0)
{}
struct CMsgCustomGameWhitelistForEdit_WhitelistEntryDefaultTypeInternal {
  constexpr CMsgCustomGameWhitelistForEdit_WhitelistEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCustomGameWhitelistForEdit_WhitelistEntryDefaultTypeInternal() {}
  union {
    CMsgCustomGameWhitelistForEdit_WhitelistEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCustomGameWhitelistForEdit_WhitelistEntryDefaultTypeInternal _CMsgCustomGameWhitelistForEdit_WhitelistEntry_default_instance_;
constexpr CMsgCustomGameWhitelistForEdit::CMsgCustomGameWhitelistForEdit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : whitelist_entries_(){}
struct CMsgCustomGameWhitelistForEditDefaultTypeInternal {
  constexpr CMsgCustomGameWhitelistForEditDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCustomGameWhitelistForEditDefaultTypeInternal() {}
  union {
    CMsgCustomGameWhitelistForEdit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCustomGameWhitelistForEditDefaultTypeInternal _CMsgCustomGameWhitelistForEdit_default_instance_;
constexpr CMsgPlayerRecentMatchInfo::CMsgPlayerRecentMatchInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(PROTOBUF_ULONGLONG(0))
  , timestamp_(0u)
  , duration_(0u)
  , win_(false)
  , hero_id_(0u)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u){}
struct CMsgPlayerRecentMatchInfoDefaultTypeInternal {
  constexpr CMsgPlayerRecentMatchInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerRecentMatchInfoDefaultTypeInternal() {}
  union {
    CMsgPlayerRecentMatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerRecentMatchInfoDefaultTypeInternal _CMsgPlayerRecentMatchInfo_default_instance_;
constexpr CMsgPlayerMatchRecord::CMsgPlayerMatchRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : wins_(0u)
  , losses_(0u){}
struct CMsgPlayerMatchRecordDefaultTypeInternal {
  constexpr CMsgPlayerMatchRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerMatchRecordDefaultTypeInternal() {}
  union {
    CMsgPlayerMatchRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerMatchRecordDefaultTypeInternal _CMsgPlayerMatchRecord_default_instance_;
constexpr CMsgPlayerRecentMatchOutcomes::CMsgPlayerRecentMatchOutcomes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : outcomes_(0u)
  , match_count_(0u){}
struct CMsgPlayerRecentMatchOutcomesDefaultTypeInternal {
  constexpr CMsgPlayerRecentMatchOutcomesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerRecentMatchOutcomesDefaultTypeInternal() {}
  union {
    CMsgPlayerRecentMatchOutcomes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerRecentMatchOutcomesDefaultTypeInternal _CMsgPlayerRecentMatchOutcomes_default_instance_;
constexpr CMsgPlayerRecentCommends::CMsgPlayerRecentCommends(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commends_(0u)
  , match_count_(0u){}
struct CMsgPlayerRecentCommendsDefaultTypeInternal {
  constexpr CMsgPlayerRecentCommendsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerRecentCommendsDefaultTypeInternal() {}
  union {
    CMsgPlayerRecentCommends _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerRecentCommendsDefaultTypeInternal _CMsgPlayerRecentCommends_default_instance_;
constexpr CMsgPlayerRecentAccomplishments::CMsgPlayerRecentAccomplishments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recent_outcomes_(nullptr)
  , total_record_(nullptr)
  , recent_commends_(nullptr)
  , last_match_(nullptr)
  , recent_mvps_(nullptr)
  , prediction_streak_(0u)
  , plus_prediction_streak_(0u)
  , first_match_timestamp_(0u){}
struct CMsgPlayerRecentAccomplishmentsDefaultTypeInternal {
  constexpr CMsgPlayerRecentAccomplishmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerRecentAccomplishmentsDefaultTypeInternal() {}
  union {
    CMsgPlayerRecentAccomplishments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerRecentAccomplishmentsDefaultTypeInternal _CMsgPlayerRecentAccomplishments_default_instance_;
constexpr CMsgPlayerHeroRecentAccomplishments::CMsgPlayerHeroRecentAccomplishments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : recent_outcomes_(nullptr)
  , total_record_(nullptr)
  , last_match_(nullptr){}
struct CMsgPlayerHeroRecentAccomplishmentsDefaultTypeInternal {
  constexpr CMsgPlayerHeroRecentAccomplishmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerHeroRecentAccomplishmentsDefaultTypeInternal() {}
  union {
    CMsgPlayerHeroRecentAccomplishments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerHeroRecentAccomplishmentsDefaultTypeInternal _CMsgPlayerHeroRecentAccomplishments_default_instance_;
constexpr CMsgRecentAccomplishments::CMsgRecentAccomplishments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_accomplishments_(nullptr)
  , hero_accomplishments_(nullptr){}
struct CMsgRecentAccomplishmentsDefaultTypeInternal {
  constexpr CMsgRecentAccomplishmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRecentAccomplishmentsDefaultTypeInternal() {}
  union {
    CMsgRecentAccomplishments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRecentAccomplishmentsDefaultTypeInternal _CMsgRecentAccomplishments_default_instance_;
constexpr CMsgRequestPlayerRecentAccomplishments::CMsgRequestPlayerRecentAccomplishments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , hero_id_(0u){}
struct CMsgRequestPlayerRecentAccomplishmentsDefaultTypeInternal {
  constexpr CMsgRequestPlayerRecentAccomplishmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestPlayerRecentAccomplishmentsDefaultTypeInternal() {}
  union {
    CMsgRequestPlayerRecentAccomplishments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestPlayerRecentAccomplishmentsDefaultTypeInternal _CMsgRequestPlayerRecentAccomplishments_default_instance_;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishments::CMsgServerToGCRequestPlayerRecentAccomplishments(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , hero_id_(0u){}
struct CMsgServerToGCRequestPlayerRecentAccomplishmentsDefaultTypeInternal {
  constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestPlayerRecentAccomplishmentsDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestPlayerRecentAccomplishments _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestPlayerRecentAccomplishmentsDefaultTypeInternal _CMsgServerToGCRequestPlayerRecentAccomplishments_default_instance_;
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse::CMsgRequestPlayerRecentAccomplishmentsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_accomplishments_(nullptr)
  , result_(0)
{}
struct CMsgRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal {
  constexpr CMsgRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal() {}
  union {
    CMsgRequestPlayerRecentAccomplishmentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal _CMsgRequestPlayerRecentAccomplishmentsResponse_default_instance_;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_accomplishments_(nullptr)
  , result_(0)
{}
struct CMsgServerToGCRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal {
  constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgServerToGCRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal() {}
  union {
    CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgServerToGCRequestPlayerRecentAccomplishmentsResponseDefaultTypeInternal _CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_default_instance_;
constexpr CMsgArcanaVoteMatchVotes::CMsgArcanaVoteMatchVotes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(0u)
  , hero_id_(0u)
  , vote_count_(0u){}
struct CMsgArcanaVoteMatchVotesDefaultTypeInternal {
  constexpr CMsgArcanaVoteMatchVotesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgArcanaVoteMatchVotesDefaultTypeInternal() {}
  union {
    CMsgArcanaVoteMatchVotes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgArcanaVoteMatchVotesDefaultTypeInternal _CMsgArcanaVoteMatchVotes_default_instance_;
constexpr CMsgGCtoGCAssociatedExploiterAccountInfo::CMsgGCtoGCAssociatedExploiterAccountInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , num_matches_to_search_(0u)
  , min_shared_match_count_(0u)
  , num_additional_players_(0u){}
struct CMsgGCtoGCAssociatedExploiterAccountInfoDefaultTypeInternal {
  constexpr CMsgGCtoGCAssociatedExploiterAccountInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCtoGCAssociatedExploiterAccountInfoDefaultTypeInternal() {}
  union {
    CMsgGCtoGCAssociatedExploiterAccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCtoGCAssociatedExploiterAccountInfoDefaultTypeInternal _CMsgGCtoGCAssociatedExploiterAccountInfo_default_instance_;
constexpr CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , num_common_matches_(0u)
  , earliest_common_match_(0u)
  , latest_common_match_(0u)
  , generation_(0u)
  , already_banned_(false){}
struct CMsgGCtoGCAssociatedExploiterAccountInfoResponse_AccountDefaultTypeInternal {
  constexpr CMsgGCtoGCAssociatedExploiterAccountInfoResponse_AccountDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCtoGCAssociatedExploiterAccountInfoResponse_AccountDefaultTypeInternal() {}
  union {
    CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCtoGCAssociatedExploiterAccountInfoResponse_AccountDefaultTypeInternal _CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account_default_instance_;
constexpr CMsgGCtoGCAssociatedExploiterAccountInfoResponse::CMsgGCtoGCAssociatedExploiterAccountInfoResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : accounts_(){}
struct CMsgGCtoGCAssociatedExploiterAccountInfoResponseDefaultTypeInternal {
  constexpr CMsgGCtoGCAssociatedExploiterAccountInfoResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCtoGCAssociatedExploiterAccountInfoResponseDefaultTypeInternal() {}
  union {
    CMsgGCtoGCAssociatedExploiterAccountInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCtoGCAssociatedExploiterAccountInfoResponseDefaultTypeInternal _CMsgGCtoGCAssociatedExploiterAccountInfoResponse_default_instance_;
constexpr CMsgPullTabsData_Slot::CMsgPullTabsData_Slot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_id_(0u)
  , board_id_(0u)
  , hero_id_(0u)
  , action_id_(0u)
  , redeemed_(false){}
struct CMsgPullTabsData_SlotDefaultTypeInternal {
  constexpr CMsgPullTabsData_SlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPullTabsData_SlotDefaultTypeInternal() {}
  union {
    CMsgPullTabsData_Slot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPullTabsData_SlotDefaultTypeInternal _CMsgPullTabsData_Slot_default_instance_;
constexpr CMsgPullTabsData_Jackpot::CMsgPullTabsData_Jackpot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_id_(0u)
  , action_id_(0u)
  , hero_id_(0u){}
struct CMsgPullTabsData_JackpotDefaultTypeInternal {
  constexpr CMsgPullTabsData_JackpotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPullTabsData_JackpotDefaultTypeInternal() {}
  union {
    CMsgPullTabsData_Jackpot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPullTabsData_JackpotDefaultTypeInternal _CMsgPullTabsData_Jackpot_default_instance_;
constexpr CMsgPullTabsData::CMsgPullTabsData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slots_()
  , jackpots_()
  , last_board_(0u){}
struct CMsgPullTabsDataDefaultTypeInternal {
  constexpr CMsgPullTabsDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPullTabsDataDefaultTypeInternal() {}
  union {
    CMsgPullTabsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPullTabsDataDefaultTypeInternal _CMsgPullTabsData_default_instance_;
constexpr CMsgUnderDraftData_BenchSlot::CMsgUnderDraftData_BenchSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_id_(0u)
  , hero_id_(0u)
  , stars_(0u){}
struct CMsgUnderDraftData_BenchSlotDefaultTypeInternal {
  constexpr CMsgUnderDraftData_BenchSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUnderDraftData_BenchSlotDefaultTypeInternal() {}
  union {
    CMsgUnderDraftData_BenchSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUnderDraftData_BenchSlotDefaultTypeInternal _CMsgUnderDraftData_BenchSlot_default_instance_;
constexpr CMsgUnderDraftData_ShopSlot::CMsgUnderDraftData_ShopSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_id_(0u)
  , hero_id_(0u)
  , is_special_reward_(false){}
struct CMsgUnderDraftData_ShopSlotDefaultTypeInternal {
  constexpr CMsgUnderDraftData_ShopSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUnderDraftData_ShopSlotDefaultTypeInternal() {}
  union {
    CMsgUnderDraftData_ShopSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUnderDraftData_ShopSlotDefaultTypeInternal _CMsgUnderDraftData_ShopSlot_default_instance_;
constexpr CMsgUnderDraftData::CMsgUnderDraftData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bench_slots_()
  , shop_slots_()
  , gold_(0u)
  , total_gold_(0u)
  , not_restorable_(false){}
struct CMsgUnderDraftDataDefaultTypeInternal {
  constexpr CMsgUnderDraftDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgUnderDraftDataDefaultTypeInternal() {}
  union {
    CMsgUnderDraftData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgUnderDraftDataDefaultTypeInternal _CMsgUnderDraftData_default_instance_;
constexpr CMsgPlayerTitleData::CMsgPlayerTitleData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_()
  , event_id_()
  , active_(0u){}
struct CMsgPlayerTitleDataDefaultTypeInternal {
  constexpr CMsgPlayerTitleDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlayerTitleDataDefaultTypeInternal() {}
  union {
    CMsgPlayerTitleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlayerTitleDataDefaultTypeInternal _CMsgPlayerTitleData_default_instance_;
constexpr CMsgDOTATriviaQuestion::CMsgDOTATriviaQuestion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : answer_values_()
  , question_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , question_id_(0u)
  , category_(0)

  , timestamp_(0u)
  , correct_answer_index_(0u){}
struct CMsgDOTATriviaQuestionDefaultTypeInternal {
  constexpr CMsgDOTATriviaQuestionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATriviaQuestionDefaultTypeInternal() {}
  union {
    CMsgDOTATriviaQuestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATriviaQuestionDefaultTypeInternal _CMsgDOTATriviaQuestion_default_instance_;
constexpr CMsgDOTATriviaQuestionAnswersSummary::CMsgDOTATriviaQuestionAnswersSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : picked_count_()
  , summary_available_(false){}
struct CMsgDOTATriviaQuestionAnswersSummaryDefaultTypeInternal {
  constexpr CMsgDOTATriviaQuestionAnswersSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATriviaQuestionAnswersSummaryDefaultTypeInternal() {}
  union {
    CMsgDOTATriviaQuestionAnswersSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATriviaQuestionAnswersSummaryDefaultTypeInternal _CMsgDOTATriviaQuestionAnswersSummary_default_instance_;
constexpr CMsgGameDataSpecialValues::CMsgGameDataSpecialValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_float_()
  , values_int_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , heading_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_percentage_(false){}
struct CMsgGameDataSpecialValuesDefaultTypeInternal {
  constexpr CMsgGameDataSpecialValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataSpecialValuesDefaultTypeInternal() {}
  union {
    CMsgGameDataSpecialValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataSpecialValuesDefaultTypeInternal _CMsgGameDataSpecialValues_default_instance_;
constexpr CMsgGameDataAbilityOrItem::CMsgGameDataAbilityOrItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : notes_loc_()
  , cast_ranges_()
  , cast_points_()
  , channel_times_()
  , cooldowns_()
  , durations_()
  , damages_()
  , mana_costs_()
  , gold_costs_()
  , special_values_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lore_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shard_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scepter_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , type_(0u)
  , behavior_(PROTOBUF_ULONGLONG(0))
  , target_team_(0u)
  , target_type_(0u)
  , flags_(0u)
  , damage_(0u)
  , immunity_(0u)
  , dispellable_(0u)
  , item_quality_(0u)
  , max_level_(0u)
  , is_item_(false)
  , ability_has_scepter_(false)
  , ability_has_shard_(false)
  , ability_is_granted_by_scepter_(false)
  , ability_is_granted_by_shard_(false)
  , item_cost_(0u)
  , item_initial_charges_(0u)
  , item_neutral_tier_(0u)
  , item_stock_max_(0u)
  , item_stock_time_(0){}
struct CMsgGameDataAbilityOrItemDefaultTypeInternal {
  constexpr CMsgGameDataAbilityOrItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataAbilityOrItemDefaultTypeInternal() {}
  union {
    CMsgGameDataAbilityOrItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataAbilityOrItemDefaultTypeInternal _CMsgGameDataAbilityOrItem_default_instance_;
constexpr CMsgGameDataHero::CMsgGameDataHero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : role_levels_()
  , abilities_()
  , talents_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bio_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hype_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , npe_desc_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , order_id_(0u)
  , str_base_(0u)
  , str_gain_(0)
  , agi_base_(0u)
  , agi_gain_(0)
  , int_base_(0u)
  , int_gain_(0)
  , primary_attr_(0u)
  , complexity_(0u)
  , attack_capability_(0u)
  , damage_min_(0u)
  , damage_max_(0u)
  , attack_rate_(0)
  , attack_range_(0u)
  , projectile_speed_(0u)
  , armor_(0)
  , magic_resistance_(0u)
  , movement_speed_(0u)
  , turn_rate_(0)
  , sight_range_day_(0u)
  , sight_range_night_(0u)
  , max_health_(0u)
  , health_regen_(0)
  , max_mana_(0u)
  , mana_regen_(0){}
struct CMsgGameDataHeroDefaultTypeInternal {
  constexpr CMsgGameDataHeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataHeroDefaultTypeInternal() {}
  union {
    CMsgGameDataHero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataHeroDefaultTypeInternal _CMsgGameDataHero_default_instance_;
constexpr CMsgGameDataAbilities::CMsgGameDataAbilities(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abilities_(){}
struct CMsgGameDataAbilitiesDefaultTypeInternal {
  constexpr CMsgGameDataAbilitiesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataAbilitiesDefaultTypeInternal() {}
  union {
    CMsgGameDataAbilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataAbilitiesDefaultTypeInternal _CMsgGameDataAbilities_default_instance_;
constexpr CMsgGameDataItems::CMsgGameDataItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct CMsgGameDataItemsDefaultTypeInternal {
  constexpr CMsgGameDataItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataItemsDefaultTypeInternal() {}
  union {
    CMsgGameDataItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataItemsDefaultTypeInternal _CMsgGameDataItems_default_instance_;
constexpr CMsgGameDataHeroes::CMsgGameDataHeroes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heroes_(){}
struct CMsgGameDataHeroesDefaultTypeInternal {
  constexpr CMsgGameDataHeroesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataHeroesDefaultTypeInternal() {}
  union {
    CMsgGameDataHeroes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataHeroesDefaultTypeInternal _CMsgGameDataHeroes_default_instance_;
constexpr CMsgGameDataHeroList_HeroInfo::CMsgGameDataHeroList_HeroInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_english_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , primary_attr_(0u)
  , complexity_(0u){}
struct CMsgGameDataHeroList_HeroInfoDefaultTypeInternal {
  constexpr CMsgGameDataHeroList_HeroInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataHeroList_HeroInfoDefaultTypeInternal() {}
  union {
    CMsgGameDataHeroList_HeroInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataHeroList_HeroInfoDefaultTypeInternal _CMsgGameDataHeroList_HeroInfo_default_instance_;
constexpr CMsgGameDataHeroList::CMsgGameDataHeroList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heroes_(){}
struct CMsgGameDataHeroListDefaultTypeInternal {
  constexpr CMsgGameDataHeroListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataHeroListDefaultTypeInternal() {}
  union {
    CMsgGameDataHeroList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataHeroListDefaultTypeInternal _CMsgGameDataHeroList_default_instance_;
constexpr CMsgGameDataItemAbilityList_ItemAbilityInfo::CMsgGameDataItemAbilityList_ItemAbilityInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_english_loc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u)
  , neutral_item_tier_(0){}
struct CMsgGameDataItemAbilityList_ItemAbilityInfoDefaultTypeInternal {
  constexpr CMsgGameDataItemAbilityList_ItemAbilityInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataItemAbilityList_ItemAbilityInfoDefaultTypeInternal() {}
  union {
    CMsgGameDataItemAbilityList_ItemAbilityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataItemAbilityList_ItemAbilityInfoDefaultTypeInternal _CMsgGameDataItemAbilityList_ItemAbilityInfo_default_instance_;
constexpr CMsgGameDataItemAbilityList::CMsgGameDataItemAbilityList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : itemabilities_(){}
struct CMsgGameDataItemAbilityListDefaultTypeInternal {
  constexpr CMsgGameDataItemAbilityListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGameDataItemAbilityListDefaultTypeInternal() {}
  union {
    CMsgGameDataItemAbilityList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGameDataItemAbilityListDefaultTypeInternal _CMsgGameDataItemAbilityList_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_2eproto[162];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient_RoleHandicap, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient_RoleHandicap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient_RoleHandicap, role_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient_RoleHandicap, handicap_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, wins_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, losses_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, xp_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, initial_skill_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, leaver_count_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, secondary_leaver_count_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, low_priority_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, prevent_text_chat_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, prevent_voice_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, prevent_public_text_chat_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, prevent_new_player_chat_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, last_abandoned_game_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, last_secondary_abandoned_game_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, leaver_penalty_count_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, completed_game_streak_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, account_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, account_disabled_count_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, match_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, match_disabled_count_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, shutdownlawterminatetimestamp_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, low_priority_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, competitive_rank_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, competitive_calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, solo_competitive_2019_rank_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, solo_competitive_2019_calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recruitment_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, has_new_notifications_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, is_league_admin_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, casual_games_played_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, solo_competitive_games_played_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, party_competitive_games_played_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, casual_1v1_games_played_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, curr_all_hero_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, play_time_points_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, account_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, play_time_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, player_behavior_seq_num_last_report_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, player_behavior_score_last_report_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, player_behavior_report_old_data_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, tourney_recent_participation_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, anchored_phone_number_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, ranked_matchmaking_ban_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_game_time_1_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_game_time_2_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_game_time_3_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, favorite_team_packed_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_report_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, custom_game_disabled_until_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_win_time_1_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_win_time_2_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, recent_win_time_3_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, coach_rating_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, queue_points_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, role_handicaps_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, gauntlet_tier_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, gauntlet_wins_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, gauntlet_losses_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, gauntlet_recent_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, event_mode_recent_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountClient, mmr_recalibration_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  24,
  7,
  8,
  9,
  41,
  61,
  10,
  25,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  29,
  30,
  26,
  27,
  28,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  31,
  39,
  40,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  ~0u,
  55,
  56,
  57,
  58,
  59,
  60,
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, original_start_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, plus_flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, plus_status_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, prepaid_time_start_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, prepaid_time_balance_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, next_payment_date_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAGameAccountPlus, steam_agreement_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, hero_badge_xp_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyPlayerPlusSubscriptionData, hero_badges_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_ChatWheelMessageRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_ChatWheelMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PingWheelMessageRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PingWheelMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PingWheelMessageRange, message_id_start_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PingWheelMessageRange, message_id_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceValues, remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_PeriodicResourceValues, max_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_EventGameCustomActions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_EventGameCustomActions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_EventGameCustomActions, action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_EventGameCustomActions, times_granted_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, normal_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, premium_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, owned_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, active_effects_mask_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, unlocked_chat_wheel_message_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, plus_subscription_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, wager_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, rank_wager_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, tip_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, periodic_point_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, unlocked_ping_wheel_message_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, wager_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, bounties_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, event_game_custom_actions_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, tip_amount_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, active_event_season_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints_AccountPoints, teleport_fx_level_),
  6,
  7,
  8,
  9,
  10,
  ~0u,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  11,
  5,
  ~0u,
  12,
  13,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventPoints, account_points_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, game_seed_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyEventGameData, event_window_start_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress_AccountProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress_AccountProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress_AccountProgress, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress_AccountProgress, gauntlet_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress_AccountProgress, gauntlet_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress_AccountProgress, gauntlet_losses_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyGauntletProgress, accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_primary_color_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_secondary_color_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_pattern_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerGuildData, guild_weekly_percentile_),
  0,
  1,
  3,
  2,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, event_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, favorite_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, favorite_team_quality_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, guild_info_),
  PROTOBUF_FIELD_OFFSET(::CMsgLocalServerFakeLobbyData, teleport_fx_level_),
  1,
  ~0u,
  2,
  3,
  4,
  5,
  0,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, win_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, valid_until_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, division_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgBattleCupVictory, trophy_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyBattleCupVictoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLobbyBattleCupVictoryList, winners_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastNotification, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, status_effect_index_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, sequence_name_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, cycle_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, wearable_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, inscription_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, style_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemHeroStatue, tournament_drop_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, status_effect_index_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, sequence_name_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, cycle_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, wearable_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, inscription_),
  PROTOBUF_FIELD_OFFSET(::CProtoItemTeamShowcase, style_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerAbilityUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerAbilityUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerAbilityUpgrade, ability_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerAbilityUpgrade, time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, time_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, assists_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, xp_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, denies_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, bounty_rune_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, range_creep_upgrade_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, observer_wards_dewarded_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, reliable_gold_earned_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, gold_loss_prevented_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, hero_kill_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, creep_kill_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, building_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, other_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, comeback_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, experimental_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, experimental2_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, creep_deny_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, tp_scrolls_purchased_1_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, tp_scrolls_purchased_2_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, tp_scrolls_purchased_3_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, tp_scrolls_purchased_4_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, tp_scrolls_purchased_5_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, neutral_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, courier_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, roshan_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, income_gold_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, custom_stats_1_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, custom_stats_2_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, custom_stats_3_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, custom_stats_4_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, custom_stats_5_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, item_value_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerTimedStats, rampages_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, time_),
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, enemy_towers_killed_),
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, enemy_barracks_killed_),
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, enemy_towers_status_),
  PROTOBUF_FIELD_OFFSET(::CMatchTeamTimedStats, enemy_barracks_status_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMatchAdditionalUnitInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMatchAdditionalUnitInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMatchAdditionalUnitInventory, unit_name_),
  PROTOBUF_FIELD_OFFSET(::CMatchAdditionalUnitInventory, items_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerPermanentBuff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerPermanentBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerPermanentBuff, permanent_buff_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerPermanentBuff, stack_count_),
  PROTOBUF_FIELD_OFFSET(::CMatchPlayerPermanentBuff, grant_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMatchHeroSelectEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMatchHeroSelectEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMatchHeroSelectEvent, is_pick_),
  PROTOBUF_FIELD_OFFSET(::CMatchHeroSelectEvent, team_),
  PROTOBUF_FIELD_OFFSET(::CMatchHeroSelectEvent, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CPartySearchClientParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CPartySearchClientParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CPartySearchClientParty, party_id_),
  PROTOBUF_FIELD_OFFSET(::CPartySearchClientParty, beacon_type_),
  PROTOBUF_FIELD_OFFSET(::CPartySearchClientParty, party_members_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, event_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, fantasy_league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, season_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProcessFantasyScheduledEvent, reference_data_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemQuery, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemQuery, item_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemResponse, has_item_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCIsProQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIsProQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCIsProQuery, account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCIsProResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCIsProResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCIsProResponse, is_pro_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsQuery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsQuery, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsQuery, itemdef_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAHasItemDefsResponse, has_items_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfo, player_card_item_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfo, all_for_event_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, player_card_item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, packed_bonuses_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPlayerCardItemInfoResponse, player_card_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFantasySetMatchLeague, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFantasySetMatchLeague, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFantasySetMatchLeague, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToGCFantasySetMatchLeague, league_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSODOTAMapLocationState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAMapLocationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAMapLocationState, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAMapLocationState, location_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAMapLocationState, completed_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueAdminList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueAdminList, account_ids_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, game_time_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, gpm_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, xpm_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, kills_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, deaths_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumTimestampedData, item_purchases_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCompendiumGameTimeline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCompendiumGameTimeline, data_),
  PROTOBUF_FIELD_OFFSET(::CCompendiumGameTimeline, tags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CCompendiumGameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CCompendiumGameList, games_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlot, class_id_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CAdditionalEquipSlot, def_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Trophy, trophy_score_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Stat, stat_score_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, serialized_item_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Item, item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, hero_wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Hero, hero_losses_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Emoticon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Emoticon, emoticon_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot_Team, team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, trophy_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, stat_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, hero_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, emoticon_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard_Slot, team_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, badge_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, event_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, recent_battle_cup_victory_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, leaderboard_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, is_plus_subscriber_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, plus_original_start_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, previous_rank_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_mmr_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, leaderboard_rank_core_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, rank_tier_peak_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, title_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProfileCard, favorite_team_packed_),
  1,
  ~0u,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, int_param_0_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, int_param_1_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, created_time_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, completed_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, challenge_tier_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, flags_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, attempts_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, complete_limit_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, quest_rank_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, max_quest_rank_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, instance_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CSODOTAPlayerChallenge, template_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRerollPlayerChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRerollPlayerChallenge, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRerollPlayerChallenge, sequence_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCRerollPlayerChallenge, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRerollPlayerChallengeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRerollPlayerChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRerollPlayerChallengeResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCTopCustomGamesList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCTopCustomGamesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCTopCustomGamesList, top_custom_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCTopCustomGamesList, game_of_the_day_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, team_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, only_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, cheers_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_TeamDetails, team_logo_url_),
  3,
  4,
  0,
  5,
  1,
  6,
  9,
  ~0u,
  7,
  8,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, item_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, sold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_ItemDetails, stackcount_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_max_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_HeroToHeroStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_HeroToHeroStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_HeroToHeroStats, victimid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_HeroToHeroStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_HeroToHeroStats, assists_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_AbilityList, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, playerid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, heroid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, healthpoints_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, maxhealthpoints_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, healthregenrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, manapoints_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, maxmanapoints_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, manaregenrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, base_strength_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, base_agility_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, base_intelligence_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, base_armor_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, base_movespeed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, base_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, strength_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, agility_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, intelligence_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, armor_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, movespeed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, kill_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, death_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, assists_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, denies_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, lh_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, net_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, ultimate_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, has_buyback_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, stashitems_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, itemshoppinglist_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, levelpoints_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, hero_to_hero_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_mana_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  ~0u,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  41,
  42,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, heading_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BuildingDetails, destroyed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_KillDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_KillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_KillDetails, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_KillDetails, death_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_KillDetails, killer_player_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BroadcasterDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BroadcasterDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BroadcasterDetails, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_hero_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_graph_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PickBanDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PickBanDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PickBanDetails, hero_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_PickBanDetails, team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, is_nightstalker_night_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, teamid_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, teamid_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, picks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, broadcasters_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, single_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_MatchDetails, cheers_peak_),
  0,
  1,
  2,
  3,
  7,
  4,
  13,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
  12,
  8,
  11,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData_LocationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData_LocationStats, stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, loc_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, graph_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, graph_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, graph_kill_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, graph_tower_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, graph_rax_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats_GraphData, team_loc_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, match_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, buildings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, graph_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStats, delta_frame_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_TeamDetails, players_),
  3,
  4,
  0,
  1,
  5,
  6,
  7,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, accountid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, playerid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, heroid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, kill_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, death_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, assists_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, denies_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, lh_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails, items_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, heading_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, lane_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails, destroyed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, hero_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_PickBanDetails, team_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, matchid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, steam_broadcaster_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, picks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_MatchDetails, bans_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse_GraphData, graph_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, match_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, buildings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, graph_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTARealtimeGameStatsTerse, delta_frame_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastTimelineEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastTimelineEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastTimelineEvent, event_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastTimelineEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastTimelineEvent, data_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABroadcastTimelineEvent, string_data_),
  3,
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientMatchGroupsVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientMatchGroupsVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientMatchGroupsVersion, matchgroups_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, won_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, xpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASDOHeroStatsHistory, assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, itemdef_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, importance_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, base_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, repeat_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, reward_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, image_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards_Reward, effect_index_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonRewards, rewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, description_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, image_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, max_grants_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, normal_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, tracking_achievement_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, achievement_goal_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements_Achievement, achievement_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonAchievements, achievements_),
  PROTOBUF_FIELD_OFFSET(::CMsgPredictionChoice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPredictionChoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPredictionChoice, value_),
  PROTOBUF_FIELD_OFFSET(::CMsgPredictionChoice, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgPredictionChoice, min_raw_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgPredictionChoice, max_raw_value_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction_QueryKeyValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction_QueryKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction_QueryKeyValues, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction_QueryKeyValues, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, group_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, question_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, choices_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, required_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, query_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, query_values_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, answer_resolution_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, points_to_grant_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, reward_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, debug_force_selection_),
  PROTOBUF_FIELD_OFFSET(::CMsgInGamePrediction, raw_value_type_),
  3,
  0,
  4,
  5,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction_Answers, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction_Answers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction_Answers, answer_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, question_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, choices_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, selection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, start_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, lock_date_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, reward_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, answer_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, answer_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, answers_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, query_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, lock_on_selection_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, lock_on_selection_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, lock_on_selection_set_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, use_answer_value_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, phases_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions_Prediction, reward_event_),
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  1,
  9,
  10,
  11,
  12,
  13,
  ~0u,
  14,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions, predictions_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions, in_game_predictions_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions, in_game_prediction_count_per_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeasonPredictions, in_game_prediction_voting_period_minutes_),
  ~0u,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAvailablePredictions_MatchPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailablePredictions_MatchPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAvailablePredictions_MatchPrediction, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAvailablePredictions_MatchPrediction, predictions_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAvailablePredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgAvailablePredictions, match_predictions_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_Series, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_Series, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_Series, node_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_Series, game_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_League, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_League, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_League, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames_League, series_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgLeagueWatchedGames, leagues_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_CustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_CustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_CustomGameData, dota_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_CustomGameData, winner_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_HeroDamageReceived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_HeroDamageReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_HeroDamageReceived, pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_HeroDamageReceived, post_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player_HeroDamageReceived, damage_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_0_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_3_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_4_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_5_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_6_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_7_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_8_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, item_9_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, expected_team_contribution_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_metric_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, previous_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, rank_change_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, mmr_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, rank_tier_updated_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, leaver_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, gold_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, xp_per_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, time_last_seen_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, player_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, support_ability_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, feeding_detected_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, search_rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, search_rank_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, rank_uncertainty_change_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_play_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_tower_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_hero_healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, scaled_assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, claimed_farm_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, support_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, claimed_denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, claimed_misses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, misses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, additional_units_inventory_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, permanent_buffs_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, pro_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, real_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, active_plus_subscription_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, bot_difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_pick_order_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_was_randomed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_was_dota_plus_suggestion_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_damage_received_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, hero_damage_dealt_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, seconds_dead_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, gold_lost_to_death_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Player, outposts_captured_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  55,
  56,
  57,
  65,
  13,
  14,
  15,
  16,
  63,
  47,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  0,
  32,
  48,
  33,
  34,
  35,
  37,
  36,
  51,
  52,
  53,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  49,
  46,
  54,
  58,
  50,
  59,
  ~0u,
  ~0u,
  60,
  61,
  64,
  66,
  62,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterInfo, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterChannel, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterChannel, description_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterChannel, broadcaster_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_BroadcasterChannel, language_code_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, coach_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, coach_rating_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, coach_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, coach_party_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_Coach, is_private_coach_),
  1,
  0,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_CustomGameData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_CustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_CustomGameData, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch_CustomGameData, map_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, starttime_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, tower_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, barracks_status_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, cluster_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, first_blood_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, replay_salt_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, server_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, human_players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, average_skill_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, game_balance_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, leagueid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_complete_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_complete_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, positive_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, negative_votes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, picks_bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, match_seq_num_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, replay_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_guild_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, broadcaster_channels_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, engine_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, custom_game_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, match_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, private_metadata_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, radiant_team_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, dire_team_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, tournament_round_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, pre_game_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, mvp_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatch, coaches_),
  7,
  8,
  ~0u,
  9,
  ~0u,
  ~0u,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  0,
  1,
  22,
  23,
  4,
  5,
  24,
  25,
  26,
  27,
  28,
  ~0u,
  30,
  29,
  31,
  32,
  2,
  3,
  33,
  34,
  ~0u,
  35,
  6,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard_StatModifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard_StatModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard_StatModifier, stat_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard_StatModifier, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerCard, stat_modifier_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, match_completed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, delay_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, cs_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, teamfight_participation_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, runes_grabbed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, first_blood_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerStats, stuns_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerMatchStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAFantasyPlayerMatchStats, matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, mode_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, desire_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, target_entity_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, target_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, target_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Mode, target_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Action, action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot_Action, action_target_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, player_owner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, difficulty_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, power_current_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, power_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, move_target_x_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, move_target_y_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, move_target_z_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, active_mode_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, execution_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, modes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo_Bot, action_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, bots_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_push_lane_top_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_push_lane_mid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_push_lane_bot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_defend_lane_top_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_defend_lane_mid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_defend_lane_bot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_farm_lane_top_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_farm_lane_mid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_farm_lane_bot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, desire_farm_roshan_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, execution_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABotDebugInfo, rune_status_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, win_percent_),
  PROTOBUF_FIELD_OFFSET(::CMsgSuccessfulHero, longest_streak_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentMatchInfo, timestamp_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, source_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, target_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, tip_amount_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips_SingleTip, event_id_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchTips, tips_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, pro_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Player, level_),
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  0,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, series_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_season_trophy_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_division_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, radiant_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, radiant_team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, radiant_team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, dire_team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, dire_team_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal_Tourney, dire_team_logo_url_),
  4,
  8,
  10,
  11,
  12,
  13,
  14,
  5,
  0,
  6,
  2,
  7,
  1,
  9,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, start_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, tourney_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, match_outcome_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, radiant_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMatchMinimal, dire_score_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableUsage, item_def_),
  PROTOBUF_FIELD_OFFSET(::CMsgConsumableUsage, quantity_change_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgMatchConsumableUsage_PlayerUsage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchConsumableUsage_PlayerUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchConsumableUsage_PlayerUsage, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchConsumableUsage_PlayerUsage, consumables_used_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchConsumableUsage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchConsumableUsage, player_consumables_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchEventActionGrants_PlayerGrants, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchEventActionGrants_PlayerGrants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchEventActionGrants_PlayerGrants, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgMatchEventActionGrants_PlayerGrants, actions_granted_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchEventActionGrants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgMatchEventActionGrants, player_grants_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelist, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelist, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelist, custom_games_whitelist_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelist, disable_whitelist_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelistForEdit_WhitelistEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelistForEdit_WhitelistEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelistForEdit_WhitelistEntry, custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelistForEdit_WhitelistEntry, whitelist_state_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelistForEdit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgCustomGameWhitelistForEdit, whitelist_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, win_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchInfo, assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerMatchRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerMatchRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerMatchRecord, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerMatchRecord, losses_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchOutcomes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchOutcomes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchOutcomes, outcomes_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentMatchOutcomes, match_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentCommends, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentCommends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentCommends, commends_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentCommends, match_count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, recent_outcomes_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, total_record_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, prediction_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, plus_prediction_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, recent_commends_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, first_match_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, last_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerRecentAccomplishments, recent_mvps_),
  0,
  1,
  5,
  6,
  2,
  7,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerHeroRecentAccomplishments, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerHeroRecentAccomplishments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerHeroRecentAccomplishments, recent_outcomes_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerHeroRecentAccomplishments, total_record_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerHeroRecentAccomplishments, last_match_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgRecentAccomplishments, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentAccomplishments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRecentAccomplishments, player_accomplishments_),
  PROTOBUF_FIELD_OFFSET(::CMsgRecentAccomplishments, hero_accomplishments_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishments, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishments, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishments, hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishments, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishments, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishments, hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishmentsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishmentsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgRequestPlayerRecentAccomplishmentsResponse, player_accomplishments_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse, player_accomplishments_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgArcanaVoteMatchVotes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgArcanaVoteMatchVotes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgArcanaVoteMatchVotes, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgArcanaVoteMatchVotes, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgArcanaVoteMatchVotes, vote_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfo, num_matches_to_search_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfo, min_shared_match_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfo, num_additional_players_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, num_common_matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, earliest_common_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, latest_common_match_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, generation_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, persona_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, already_banned_),
  1,
  2,
  3,
  4,
  5,
  0,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse, accounts_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, board_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Slot, redeemed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Jackpot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Jackpot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Jackpot, board_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Jackpot, action_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData_Jackpot, hero_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData, slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData, jackpots_),
  PROTOBUF_FIELD_OFFSET(::CMsgPullTabsData, last_board_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_BenchSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_BenchSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_BenchSlot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_BenchSlot, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_BenchSlot, stars_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_ShopSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_ShopSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_ShopSlot, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_ShopSlot, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData_ShopSlot, is_special_reward_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, bench_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, shop_slots_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, total_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgUnderDraftData, not_restorable_),
  ~0u,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerTitleData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerTitleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerTitleData, title_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerTitleData, event_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlayerTitleData, active_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, question_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, category_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, question_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, answer_values_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestion, correct_answer_index_),
  1,
  2,
  3,
  0,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestionAnswersSummary, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestionAnswersSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestionAnswersSummary, summary_available_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATriviaQuestionAnswersSummary, picked_count_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, values_float_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, values_int_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, is_percentage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataSpecialValues, heading_loc_),
  0,
  ~0u,
  ~0u,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, name_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, desc_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, lore_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, notes_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, shard_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, scepter_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, behavior_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, target_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, target_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, immunity_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, dispellable_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, max_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, cast_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, cast_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, channel_times_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, cooldowns_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, durations_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, damages_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, mana_costs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, gold_costs_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, special_values_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, is_item_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, ability_has_scepter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, ability_has_shard_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, ability_is_granted_by_scepter_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, ability_is_granted_by_shard_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, item_cost_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, item_initial_charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, item_neutral_tier_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, item_stock_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, item_stock_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilityOrItem, item_quality_),
  6,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  16,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  15,
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, order_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, name_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, bio_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, hype_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, npe_desc_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, str_base_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, str_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, agi_base_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, agi_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, int_base_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, int_gain_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, primary_attr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, complexity_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, attack_capability_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, role_levels_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, damage_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, damage_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, attack_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, attack_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, projectile_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, armor_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, magic_resistance_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, turn_rate_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, sight_range_day_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, sight_range_night_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, max_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, health_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, max_mana_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, mana_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHero, talents_),
  5,
  0,
  6,
  1,
  2,
  3,
  4,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataAbilities, abilities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItems, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroes, heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, name_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, name_english_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, primary_attr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList_HeroInfo, complexity_),
  3,
  0,
  1,
  2,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataHeroList, heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, name_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, name_english_loc_),
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList_ItemAbilityInfo, neutral_item_tier_),
  3,
  0,
  1,
  2,
  4,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGameDataItemAbilityList, itemabilities_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CSODOTAGameAccountClient_RoleHandicap)},
  { 9, 77, sizeof(::CSODOTAGameAccountClient)},
  { 140, 153, sizeof(::CSODOTAGameAccountPlus)},
  { 161, 168, sizeof(::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge)},
  { 170, -1, sizeof(::CMsgLobbyPlayerPlusSubscriptionData)},
  { 176, 183, sizeof(::CMsgLobbyEventPoints_ChatWheelMessageRange)},
  { 185, 192, sizeof(::CMsgLobbyEventPoints_PingWheelMessageRange)},
  { 194, 201, sizeof(::CMsgLobbyEventPoints_PeriodicResourceValues)},
  { 203, 210, sizeof(::CMsgLobbyEventPoints_EventGameCustomActions)},
  { 212, 235, sizeof(::CMsgLobbyEventPoints_AccountPoints)},
  { 253, 260, sizeof(::CMsgLobbyEventPoints)},
  { 262, 269, sizeof(::CMsgLobbyEventGameData)},
  { 271, 280, sizeof(::CMsgLobbyGauntletProgress_AccountProgress)},
  { 284, -1, sizeof(::CMsgLobbyGauntletProgress)},
  { 290, 304, sizeof(::CMsgLocalServerGuildData)},
  { 313, 326, sizeof(::CMsgLocalServerFakeLobbyData)},
  { 334, 348, sizeof(::CMsgBattleCupVictory)},
  { 357, -1, sizeof(::CMsgLobbyBattleCupVictoryList)},
  { 363, 369, sizeof(::CMsgDOTABroadcastNotification)},
  { 370, 383, sizeof(::CProtoItemHeroStatue)},
  { 391, 403, sizeof(::CProtoItemTeamShowcase)},
  { 410, 417, sizeof(::CMatchPlayerAbilityUpgrade)},
  { 419, 465, sizeof(::CMatchPlayerTimedStats)},
  { 506, 516, sizeof(::CMatchTeamTimedStats)},
  { 521, 528, sizeof(::CMatchAdditionalUnitInventory)},
  { 530, 538, sizeof(::CMatchPlayerPermanentBuff)},
  { 541, 549, sizeof(::CMatchHeroSelectEvent)},
  { 552, 560, sizeof(::CPartySearchClientParty)},
  { 563, 573, sizeof(::CMsgDOTAProcessFantasyScheduledEvent)},
  { 578, 585, sizeof(::CMsgDOTAHasItemQuery)},
  { 587, 593, sizeof(::CMsgDOTAHasItemResponse)},
  { 594, 600, sizeof(::CMsgGCIsProQuery)},
  { 601, 607, sizeof(::CMsgGCIsProResponse)},
  { 608, 615, sizeof(::CMsgDOTAHasItemDefsQuery)},
  { 617, 623, sizeof(::CMsgDOTAHasItemDefsResponse)},
  { 624, 632, sizeof(::CMsgGCGetPlayerCardItemInfo)},
  { 635, 643, sizeof(::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo)},
  { 646, -1, sizeof(::CMsgGCGetPlayerCardItemInfoResponse)},
  { 652, 659, sizeof(::CMsgGCToGCFantasySetMatchLeague)},
  { 661, 669, sizeof(::CSODOTAMapLocationState)},
  { 672, -1, sizeof(::CMsgLeagueAdminList)},
  { 678, 689, sizeof(::CCompendiumTimestampedData)},
  { 695, -1, sizeof(::CCompendiumGameTimeline)},
  { 702, -1, sizeof(::CCompendiumGameList)},
  { 708, 716, sizeof(::CAdditionalEquipSlot)},
  { 719, 726, sizeof(::CMsgDOTAProfileCard_Slot_Trophy)},
  { 728, 735, sizeof(::CMsgDOTAProfileCard_Slot_Stat)},
  { 737, 744, sizeof(::CMsgDOTAProfileCard_Slot_Item)},
  { 746, 754, sizeof(::CMsgDOTAProfileCard_Slot_Hero)},
  { 757, 763, sizeof(::CMsgDOTAProfileCard_Slot_Emoticon)},
  { 764, 770, sizeof(::CMsgDOTAProfileCard_Slot_Team)},
  { 771, 783, sizeof(::CMsgDOTAProfileCard_Slot)},
  { 790, 812, sizeof(::CMsgDOTAProfileCard)},
  { 829, 851, sizeof(::CSODOTAPlayerChallenge)},
  { 868, 876, sizeof(::CMsgClientToGCRerollPlayerChallenge)},
  { 879, 885, sizeof(::CMsgGCRerollPlayerChallengeResponse)},
  { 886, 893, sizeof(::CMsgGCTopCustomGamesList)},
  { 895, 911, sizeof(::CMsgDOTARealtimeGameStats_TeamDetails)},
  { 922, 932, sizeof(::CMsgDOTARealtimeGameStats_ItemDetails)},
  { 937, 947, sizeof(::CMsgDOTARealtimeGameStats_AbilityDetails)},
  { 952, 960, sizeof(::CMsgDOTARealtimeGameStats_HeroToHeroStats)},
  { 963, -1, sizeof(::CMsgDOTARealtimeGameStats_AbilityList)},
  { 969, 1023, sizeof(::CMsgDOTARealtimeGameStats_PlayerDetails)},
  { 1072, 1085, sizeof(::CMsgDOTARealtimeGameStats_BuildingDetails)},
  { 1093, 1101, sizeof(::CMsgDOTARealtimeGameStats_KillDetails)},
  { 1104, 1112, sizeof(::CMsgDOTARealtimeGameStats_BroadcasterDetails)},
  { 1115, 1122, sizeof(::CMsgDOTARealtimeGameStats_PickBanDetails)},
  { 1124, 1147, sizeof(::CMsgDOTARealtimeGameStats_MatchDetails)},
  { 1165, -1, sizeof(::CMsgDOTARealtimeGameStats_GraphData_LocationStats)},
  { 1171, -1, sizeof(::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats)},
  { 1177, -1, sizeof(::CMsgDOTARealtimeGameStats_GraphData)},
  { 1188, 1198, sizeof(::CMsgDOTARealtimeGameStats)},
  { 1203, 1217, sizeof(::CMsgDOTARealtimeGameStatsTerse_TeamDetails)},
  { 1226, 1248, sizeof(::CMsgDOTARealtimeGameStatsTerse_PlayerDetails)},
  { 1265, 1278, sizeof(::CMsgDOTARealtimeGameStatsTerse_BuildingDetails)},
  { 1286, 1293, sizeof(::CMsgDOTARealtimeGameStatsTerse_PickBanDetails)},
  { 1295, 1311, sizeof(::CMsgDOTARealtimeGameStatsTerse_MatchDetails)},
  { 1322, -1, sizeof(::CMsgDOTARealtimeGameStatsTerse_GraphData)},
  { 1328, 1338, sizeof(::CMsgDOTARealtimeGameStatsTerse)},
  { 1343, 1352, sizeof(::CMsgDOTABroadcastTimelineEvent)},
  { 1356, 1362, sizeof(::CMsgGCToClientMatchGroupsVersion)},
  { 1363, 1378, sizeof(::CMsgDOTASDOHeroStatsHistory)},
  { 1388, 1402, sizeof(::CMsgDOTASeasonRewards_Reward)},
  { 1411, -1, sizeof(::CMsgDOTASeasonRewards)},
  { 1417, 1431, sizeof(::CMsgDOTASeasonAchievements_Achievement)},
  { 1440, -1, sizeof(::CMsgDOTASeasonAchievements)},
  { 1446, 1455, sizeof(::CMsgPredictionChoice)},
  { 1459, 1466, sizeof(::CMsgInGamePrediction_QueryKeyValues)},
  { 1468, 1487, sizeof(::CMsgInGamePrediction)},
  { 1501, 1507, sizeof(::CMsgDOTASeasonPredictions_Prediction_Answers)},
  { 1508, 1531, sizeof(::CMsgDOTASeasonPredictions_Prediction)},
  { 1549, 1558, sizeof(::CMsgDOTASeasonPredictions)},
  { 1562, 1569, sizeof(::CMsgAvailablePredictions_MatchPrediction)},
  { 1571, -1, sizeof(::CMsgAvailablePredictions)},
  { 1577, 1584, sizeof(::CMsgLeagueWatchedGames_Series)},
  { 1586, 1593, sizeof(::CMsgLeagueWatchedGames_League)},
  { 1595, -1, sizeof(::CMsgLeagueWatchedGames)},
  { 1601, 1608, sizeof(::CMsgDOTAMatch_Player_CustomGameData)},
  { 1610, 1618, sizeof(::CMsgDOTAMatch_Player_HeroDamageReceived)},
  { 1621, 1698, sizeof(::CMsgDOTAMatch_Player)},
  { 1770, 1777, sizeof(::CMsgDOTAMatch_BroadcasterInfo)},
  { 1779, 1788, sizeof(::CMsgDOTAMatch_BroadcasterChannel)},
  { 1792, 1803, sizeof(::CMsgDOTAMatch_Coach)},
  { 1809, 1816, sizeof(::CMsgDOTAMatch_CustomGameData)},
  { 1818, 1874, sizeof(::CMsgDOTAMatch)},
  { 1925, 1932, sizeof(::CMsgPlayerCard_StatModifier)},
  { 1934, 1941, sizeof(::CMsgPlayerCard)},
  { 1943, 1968, sizeof(::CMsgDOTAFantasyPlayerStats)},
  { 1988, -1, sizeof(::CMsgDOTAFantasyPlayerMatchStats)},
  { 1994, 2005, sizeof(::CMsgDOTABotDebugInfo_Bot_Mode)},
  { 2011, 2018, sizeof(::CMsgDOTABotDebugInfo_Bot_Action)},
  { 2020, 2037, sizeof(::CMsgDOTABotDebugInfo_Bot)},
  { 2049, 2067, sizeof(::CMsgDOTABotDebugInfo)},
  { 2080, 2088, sizeof(::CMsgSuccessfulHero)},
  { 2091, 2105, sizeof(::CMsgRecentMatchInfo)},
  { 2114, 2123, sizeof(::CMsgMatchTips_SingleTip)},
  { 2127, -1, sizeof(::CMsgMatchTips)},
  { 2133, 2147, sizeof(::CMsgDOTAMatchMinimal_Player)},
  { 2156, 2176, sizeof(::CMsgDOTAMatchMinimal_Tourney)},
  { 2191, 2205, sizeof(::CMsgDOTAMatchMinimal)},
  { 2214, 2221, sizeof(::CMsgConsumableUsage)},
  { 2223, 2230, sizeof(::CMsgMatchConsumableUsage_PlayerUsage)},
  { 2232, -1, sizeof(::CMsgMatchConsumableUsage)},
  { 2238, 2245, sizeof(::CMsgMatchEventActionGrants_PlayerGrants)},
  { 2247, -1, sizeof(::CMsgMatchEventActionGrants)},
  { 2253, 2261, sizeof(::CMsgCustomGameWhitelist)},
  { 2264, 2271, sizeof(::CMsgCustomGameWhitelistForEdit_WhitelistEntry)},
  { 2273, -1, sizeof(::CMsgCustomGameWhitelistForEdit)},
  { 2279, 2292, sizeof(::CMsgPlayerRecentMatchInfo)},
  { 2300, 2307, sizeof(::CMsgPlayerMatchRecord)},
  { 2309, 2316, sizeof(::CMsgPlayerRecentMatchOutcomes)},
  { 2318, 2325, sizeof(::CMsgPlayerRecentCommends)},
  { 2327, 2340, sizeof(::CMsgPlayerRecentAccomplishments)},
  { 2348, 2356, sizeof(::CMsgPlayerHeroRecentAccomplishments)},
  { 2359, 2366, sizeof(::CMsgRecentAccomplishments)},
  { 2368, 2375, sizeof(::CMsgRequestPlayerRecentAccomplishments)},
  { 2377, 2384, sizeof(::CMsgServerToGCRequestPlayerRecentAccomplishments)},
  { 2386, 2393, sizeof(::CMsgRequestPlayerRecentAccomplishmentsResponse)},
  { 2395, 2402, sizeof(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)},
  { 2404, 2412, sizeof(::CMsgArcanaVoteMatchVotes)},
  { 2415, 2424, sizeof(::CMsgGCtoGCAssociatedExploiterAccountInfo)},
  { 2428, 2440, sizeof(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account)},
  { 2447, -1, sizeof(::CMsgGCtoGCAssociatedExploiterAccountInfoResponse)},
  { 2453, 2463, sizeof(::CMsgPullTabsData_Slot)},
  { 2468, 2476, sizeof(::CMsgPullTabsData_Jackpot)},
  { 2479, 2487, sizeof(::CMsgPullTabsData)},
  { 2490, 2498, sizeof(::CMsgUnderDraftData_BenchSlot)},
  { 2501, 2509, sizeof(::CMsgUnderDraftData_ShopSlot)},
  { 2512, 2522, sizeof(::CMsgUnderDraftData)},
  { 2527, 2535, sizeof(::CMsgPlayerTitleData)},
  { 2538, 2549, sizeof(::CMsgDOTATriviaQuestion)},
  { 2555, 2562, sizeof(::CMsgDOTATriviaQuestionAnswersSummary)},
  { 2564, 2574, sizeof(::CMsgGameDataSpecialValues)},
  { 2579, 2621, sizeof(::CMsgGameDataAbilityOrItem)},
  { 2658, 2697, sizeof(::CMsgGameDataHero)},
  { 2731, -1, sizeof(::CMsgGameDataAbilities)},
  { 2737, -1, sizeof(::CMsgGameDataItems)},
  { 2743, -1, sizeof(::CMsgGameDataHeroes)},
  { 2749, 2760, sizeof(::CMsgGameDataHeroList_HeroInfo)},
  { 2766, -1, sizeof(::CMsgGameDataHeroList)},
  { 2772, 2782, sizeof(::CMsgGameDataItemAbilityList_ItemAbilityInfo)},
  { 2787, -1, sizeof(::CMsgGameDataItemAbilityList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAGameAccountClient_RoleHandicap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAGameAccountClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAGameAccountPlus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyPlayerPlusSubscriptionData_HeroBadge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyPlayerPlusSubscriptionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventPoints_PingWheelMessageRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventPoints_PeriodicResourceValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventPoints_EventGameCustomActions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventPoints_AccountPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyEventGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyGauntletProgress_AccountProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyGauntletProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLocalServerGuildData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLocalServerFakeLobbyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBattleCupVictory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLobbyBattleCupVictoryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABroadcastNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemHeroStatue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CProtoItemTeamShowcase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMatchPlayerAbilityUpgrade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMatchPlayerTimedStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMatchTeamTimedStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMatchAdditionalUnitInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMatchPlayerPermanentBuff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMatchHeroSelectEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CPartySearchClientParty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProcessFantasyScheduledEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAHasItemQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAHasItemResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCIsProQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCIsProResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAHasItemDefsQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAHasItemDefsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPlayerCardItemInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPlayerCardItemInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToGCFantasySetMatchLeague_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAMapLocationState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeagueAdminList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCompendiumTimestampedData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCompendiumGameTimeline_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CCompendiumGameList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CAdditionalEquipSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Trophy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Stat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Hero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_Slot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProfileCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSODOTAPlayerChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCRerollPlayerChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRerollPlayerChallengeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCTopCustomGamesList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_TeamDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_ItemDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_AbilityList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_KillDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_GraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_PickBanDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTARealtimeGameStatsTerse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABroadcastTimelineEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientMatchGroupsVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASDOHeroStatsHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonRewards_Reward_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonRewards_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonAchievements_Achievement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonAchievements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPredictionChoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInGamePrediction_QueryKeyValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgInGamePrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonPredictions_Prediction_Answers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonPredictions_Prediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeasonPredictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAvailablePredictions_MatchPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAvailablePredictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeagueWatchedGames_Series_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeagueWatchedGames_League_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgLeagueWatchedGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_Player_CustomGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_Player_HeroDamageReceived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_BroadcasterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_BroadcasterChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_Coach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_CustomGameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerCard_StatModifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerCard_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAFantasyPlayerMatchStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABotDebugInfo_Bot_Mode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABotDebugInfo_Bot_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABotDebugInfo_Bot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABotDebugInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSuccessfulHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRecentMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchTips_SingleTip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchTips_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatchMinimal_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatchMinimal_Tourney_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMatchMinimal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgConsumableUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchConsumableUsage_PlayerUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchConsumableUsage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchEventActionGrants_PlayerGrants_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgMatchEventActionGrants_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCustomGameWhitelist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCustomGameWhitelistForEdit_WhitelistEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCustomGameWhitelistForEdit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerRecentMatchInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerMatchRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerRecentMatchOutcomes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerRecentCommends_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerRecentAccomplishments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerHeroRecentAccomplishments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRecentAccomplishments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestPlayerRecentAccomplishments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestPlayerRecentAccomplishments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgRequestPlayerRecentAccomplishmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgArcanaVoteMatchVotes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCtoGCAssociatedExploiterAccountInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCtoGCAssociatedExploiterAccountInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPullTabsData_Slot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPullTabsData_Jackpot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPullTabsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUnderDraftData_BenchSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUnderDraftData_ShopSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgUnderDraftData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlayerTitleData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATriviaQuestion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATriviaQuestionAnswersSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataSpecialValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataAbilityOrItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataHero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataAbilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataHeroes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataHeroList_HeroInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataHeroList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataItemAbilityList_ItemAbilityInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGameDataItemAbilityList_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034dota_gcmessages_common.proto\032\023steammes"
  "sages.proto\032\026gcsdk_gcmessages.proto\032\027dot"
  "a_shared_enums.proto\"\261\020\n\030CSODOTAGameAcco"
  "untClient\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\014\n\004w"
  "ins\030\003 \001(\r\022\016\n\006losses\030\004 \001(\r\022\n\n\002xp\030\014 \001(\r\022\r\n"
  "\005level\030\r \001(\r\022\025\n\rinitial_skill\030\016 \001(\r\022\024\n\014l"
  "eaver_count\030\017 \001(\r\022\036\n\026secondary_leaver_co"
  "unt\030: \001(\r\022\037\n\027low_priority_until_date\030\022 \001"
  "(\r\022$\n\034prevent_text_chat_until_date\030\024 \001(\r"
  "\022 \n\030prevent_voice_until_date\030\025 \001(\r\022+\n#pr"
  "event_public_text_chat_until_date\030V \001(\r\022"
  "*\n\"prevent_new_player_chat_until_date\030z "
  "\001(\r\022 \n\030last_abandoned_game_date\030\026 \001(\r\022*\n"
  "\"last_secondary_abandoned_game_date\030; \001("
  "\r\022\034\n\024leaver_penalty_count\030\027 \001(\r\022\035\n\025compl"
  "eted_game_streak\030\030 \001(\r\022#\n\033account_disabl"
  "ed_until_date\030& \001(\r\022\036\n\026account_disabled_"
  "count\030\' \001(\r\022!\n\031match_disabled_until_date"
  "\030) \001(\r\022\034\n\024match_disabled_count\030* \001(\r\022%\n\035"
  "shutdownlawterminatetimestamp\030/ \001(\r\022$\n\034l"
  "ow_priority_games_remaining\0300 \001(\r\022\030\n\020com"
  "petitive_rank\0301 \001(\r\022/\n\'competitive_calib"
  "ration_games_remaining\0303 \001(\r\022\"\n\032solo_com"
  "petitive_2019_rank\0304 \001(\r\0229\n1solo_competi"
  "tive_2019_calibration_games_remaining\0306 "
  "\001(\r\022\031\n\021recruitment_level\0307 \001(\r\022\035\n\025has_ne"
  "w_notifications\0308 \001(\010\022\027\n\017is_league_admin"
  "\0309 \001(\010\022\033\n\023casual_games_played\030< \001(\r\022%\n\035s"
  "olo_competitive_games_played\030= \001(\r\022&\n\036pa"
  "rty_competitive_games_played\030> \001(\r\022\037\n\027ca"
  "sual_1v1_games_played\030A \001(\r\022\"\n\032curr_all_"
  "hero_challenge_id\030C \001(\r\022\030\n\020play_time_poi"
  "nts\030D \001(\r\022\025\n\raccount_flags\030E \001(\r\022\027\n\017play"
  "_time_level\030F \001(\r\022+\n#player_behavior_seq"
  "_num_last_report\030G \001(\r\022)\n!player_behavio"
  "r_score_last_report\030H \001(\r\022\'\n\037player_beha"
  "vior_report_old_data\030I \001(\010\022\033\n\023tourney_sk"
  "ill_level\030J \001(\r\022)\n!tourney_recent_partic"
  "ipation_date\030U \001(\r\022 \n\030anchored_phone_num"
  "ber_id\030X \001(\004\022)\n!ranked_matchmaking_ban_u"
  "ntil_date\030Y \001(\r\022\032\n\022recent_game_time_1\030Z "
  "\001(\r\022\032\n\022recent_game_time_2\030[ \001(\r\022\032\n\022recen"
  "t_game_time_3\030\\ \001(\r\022\034\n\024favorite_team_pac"
  "ked\030g \001(\004\022\032\n\022recent_report_time\030h \001(\r\022\'\n"
  "\037custom_game_disabled_until_date\030i \001(\r\022\031"
  "\n\021recent_win_time_1\030j \001(\r\022\031\n\021recent_win_"
  "time_2\030k \001(\r\022\031\n\021recent_win_time_3\030l \001(\r\022"
  "\024\n\014coach_rating\030m \001(\r\022\024\n\014queue_points\030r "
  "\001(\r\022>\n\016role_handicaps\030s \003(\0132&.CSODOTAGam"
  "eAccountClient.RoleHandicap\022\025\n\rgauntlet_"
  "tier\030t \001(\r\022\025\n\rgauntlet_wins\030u \001(\r\022\027\n\017gau"
  "ntlet_losses\030v \001(\r\022\034\n\024gauntlet_recent_ti"
  "me\030w \001(\r\022\036\n\026event_mode_recent_time\030x \001(\r"
  "\022\036\n\026mmr_recalibration_time\030y \001(\r\032.\n\014Role"
  "Handicap\022\014\n\004role\030\001 \001(\r\022\020\n\010handicap\030\002 \001(\002"
  "\"\351\001\n\026CSODOTAGameAccountPlus\022\030\n\naccount_i"
  "d\030\001 \001(\rB\004\200\246\035\001\022\033\n\023original_start_date\030\002 \001"
  "(\r\022\022\n\nplus_flags\030\003 \001(\r\022\023\n\013plus_status\030\004 "
  "\001(\r\022\032\n\022prepaid_time_start\030\005 \001(\r\022\034\n\024prepa"
  "id_time_balance\030\006 \001(\r\022\031\n\021next_payment_da"
  "te\030\007 \001(\007\022\032\n\022steam_agreement_id\030\010 \001(\006\"\237\001\n"
  "#CMsgLobbyPlayerPlusSubscriptionData\022C\n\013"
  "hero_badges\030\001 \003(\0132..CMsgLobbyPlayerPlusS"
  "ubscriptionData.HeroBadge\0323\n\tHeroBadge\022\017"
  "\n\007hero_id\030\001 \001(\r\022\025\n\rhero_badge_xp\030\002 \001(\r\"\217"
  "\n\n\024CMsgLobbyEventPoints\022\020\n\010event_id\030\001 \001("
  "\r\022;\n\016account_points\030\002 \003(\0132#.CMsgLobbyEve"
  "ntPoints.AccountPoints\032I\n\025ChatWheelMessa"
  "geRange\022\030\n\020message_id_start\030\001 \001(\r\022\026\n\016mes"
  "sage_id_end\030\002 \001(\r\032I\n\025PingWheelMessageRan"
  "ge\022\030\n\020message_id_start\030\001 \001(\r\022\026\n\016message_"
  "id_end\030\002 \001(\r\0328\n\026PeriodicResourceValues\022\021"
  "\n\tremaining\030\001 \001(\r\022\013\n\003max\030\002 \001(\r\032B\n\026EventG"
  "ameCustomActions\022\021\n\taction_id\030\001 \001(\r\022\025\n\rt"
  "imes_granted\030\002 \001(\r\032\223\007\n\rAccountPoints\022\022\n\n"
  "account_id\030\001 \001(\r\022\025\n\rnormal_points\030\002 \001(\r\022"
  "\026\n\016premium_points\030\003 \001(\r\022\r\n\005owned\030\004 \001(\010\022\033"
  "\n\023active_effects_mask\030\014 \001(\004\022W\n\"unlocked_"
  "chat_wheel_message_ranges\030\r \003(\0132+.CMsgLo"
  "bbyEventPoints.ChatWheelMessageRange\022D\n\026"
  "plus_subscription_data\030\020 \001(\0132$.CMsgLobby"
  "PlayerPlusSubscriptionData\022B\n\014wager_toke"
  "ns\030\021 \001(\0132,.CMsgLobbyEventPoints.Periodic"
  "ResourceValues\022G\n\021rank_wager_tokens\030\022 \001("
  "\0132,.CMsgLobbyEventPoints.PeriodicResourc"
  "eValues\022@\n\ntip_tokens\030\023 \001(\0132,.CMsgLobbyE"
  "ventPoints.PeriodicResourceValues\022P\n\032per"
  "iodic_point_adjustments\030\025 \001(\0132,.CMsgLobb"
  "yEventPoints.PeriodicResourceValues\022W\n\"u"
  "nlocked_ping_wheel_message_ranges\030\026 \003(\0132"
  "+.CMsgLobbyEventPoints.PingWheelMessageR"
  "ange\022\024\n\014wager_streak\030\027 \001(\r\022>\n\010bounties\030\030"
  " \001(\0132,.CMsgLobbyEventPoints.PeriodicReso"
  "urceValues\022O\n\031event_game_custom_actions\030"
  "\031 \003(\0132,.CMsgLobbyEventPoints.EventGameCu"
  "stomActions\022\030\n\020tip_amount_index\030\032 \001(\r\022\036\n"
  "\026active_event_season_id\030\033 \001(\r\022\031\n\021telepor"
  "t_fx_level\030\034 \001(\r\"L\n\026CMsgLobbyEventGameDa"
  "ta\022\021\n\tgame_seed\030\001 \001(\r\022\037\n\027event_window_st"
  "art_time\030\002 \001(\r\"\307\001\n\031CMsgLobbyGauntletProg"
  "ress\022<\n\010accounts\030\001 \003(\0132*.CMsgLobbyGauntl"
  "etProgress.AccountProgress\032l\n\017AccountPro"
  "gress\022\022\n\naccount_id\030\001 \001(\r\022\025\n\rgauntlet_ti"
  "er\030\003 \001(\r\022\025\n\rgauntlet_wins\030\004 \001(\r\022\027\n\017gaunt"
  "let_losses\030\005 \001(\r\"\211\002\n\030CMsgLocalServerGuil"
  "dData\022\020\n\010guild_id\030\001 \001(\r\022(\n\010event_id\030\002 \001("
  "\0162\007.EEvent:\rEVENT_ID_NONE\022\024\n\014guild_point"
  "s\030\003 \001(\r\022\022\n\nguild_logo\030\004 \001(\004\022\033\n\023guild_pri"
  "mary_color\030\005 \001(\r\022\035\n\025guild_secondary_colo"
  "r\030\006 \001(\r\022\025\n\rguild_pattern\030\007 \001(\r\022\023\n\013guild_"
  "flags\030\010 \001(\r\022\037\n\027guild_weekly_percentile\030\t"
  " \001(\r\"\225\002\n\034CMsgLocalServerFakeLobbyData\022\022\n"
  "\naccount_id\030\001 \001(\r\022+\n\014event_points\030\002 \003(\0132"
  "\025.CMsgLobbyEventPoints\022\032\n\022is_plus_subscr"
  "iber\030\003 \001(\010\022\030\n\020primary_event_id\030\004 \001(\r\022\025\n\r"
  "favorite_team\030\005 \001(\r\022\035\n\025favorite_team_qua"
  "lity\030\006 \001(\r\022-\n\nguild_info\030\007 \001(\0132\031.CMsgLoc"
  "alServerGuildData\022\031\n\021teleport_fx_level\030\010"
  " \001(\r\"\306\001\n\024CMsgBattleCupVictory\022\022\n\naccount"
  "_id\030\001 \001(\r\022\020\n\010win_date\030\002 \001(\r\022\023\n\013valid_unt"
  "il\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\025\n\rtournam"
  "ent_id\030\005 \001(\r\022\023\n\013division_id\030\006 \001(\r\022\017\n\007tea"
  "m_id\030\007 \001(\r\022\016\n\006streak\030\010 \001(\r\022\021\n\ttrophy_id\030"
  "\t \001(\r\"G\n\035CMsgLobbyBattleCupVictoryList\022&"
  "\n\007winners\030\001 \003(\0132\025.CMsgBattleCupVictory\"0"
  "\n\035CMsgDOTABroadcastNotification\022\017\n\007messa"
  "ge\030\001 \001(\t\"\271\001\n\024CProtoItemHeroStatue\022\017\n\007her"
  "o_id\030\001 \001(\r\022\033\n\023status_effect_index\030\002 \001(\r\022"
  "\025\n\rsequence_name\030\003 \001(\t\022\r\n\005cycle\030\004 \001(\002\022\020\n"
  "\010wearable\030\005 \003(\r\022\023\n\013inscription\030\006 \001(\t\022\r\n\005"
  "style\030\007 \003(\r\022\027\n\017tournament_drop\030\010 \001(\010\"\242\001\n"
  "\026CProtoItemTeamShowcase\022\017\n\007hero_id\030\001 \001(\r"
  "\022\033\n\023status_effect_index\030\002 \001(\r\022\025\n\rsequenc"
  "e_name\030\003 \001(\t\022\r\n\005cycle\030\004 \001(\002\022\020\n\010wearable\030"
  "\005 \003(\r\022\023\n\013inscription\030\006 \001(\t\022\r\n\005style\030\007 \003("
  "\r\";\n\032CMatchPlayerAbilityUpgrade\022\017\n\007abili"
  "ty\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"\346\007\n\026CMatchPlayerT"
  "imedStats\022\014\n\004time\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\016"
  "\n\006deaths\030\003 \001(\r\022\017\n\007assists\030\004 \001(\r\022\021\n\tnet_w"
  "orth\030\005 \001(\r\022\n\n\002xp\030\006 \001(\r\022\021\n\tlast_hits\030\007 \001("
  "\r\022\016\n\006denies\030\010 \001(\r\022\030\n\020bounty_rune_gold\030\t "
  "\001(\r\022 \n\030range_creep_upgrade_gold\030\n \001(\r\022\037\n"
  "\027observer_wards_dewarded\030\013 \001(\r\022\034\n\024reliab"
  "le_gold_earned\030\014 \001(\r\022\033\n\023gold_loss_preven"
  "ted\030\r \001(\r\022\026\n\016hero_kill_gold\030\016 \001(\r\022\027\n\017cre"
  "ep_kill_gold\030\017 \001(\r\022\025\n\rbuilding_gold\030\020 \001("
  "\r\022\022\n\nother_gold\030\021 \001(\r\022\025\n\rcomeback_gold\030\022"
  " \001(\r\022\031\n\021experimental_gold\030\023 \001(\r\022\032\n\022exper"
  "imental2_gold\030\024 \001(\r\022\027\n\017creep_deny_gold\030\025"
  " \001(\r\022\036\n\026tp_scrolls_purchased_1\030\026 \001(\r\022\036\n\026"
  "tp_scrolls_purchased_2\030\027 \001(\r\022\036\n\026tp_scrol"
  "ls_purchased_3\030\030 \001(\r\022\036\n\026tp_scrolls_purch"
  "ased_4\030\031 \001(\r\022\036\n\026tp_scrolls_purchased_5\030\032"
  " \001(\r\022\024\n\014neutral_gold\030\033 \001(\r\022\024\n\014courier_go"
  "ld\030\034 \001(\r\022\023\n\013roshan_gold\030\035 \001(\r\022\023\n\013income_"
  "gold\030\036 \001(\r\022\026\n\016custom_stats_1\030\037 \001(\r\022\026\n\016cu"
  "stom_stats_2\030  \001(\r\022\026\n\016custom_stats_3\030! \001"
  "(\r\022\026\n\016custom_stats_4\030\" \001(\r\022\026\n\016custom_sta"
  "ts_5\030# \001(\r\022\022\n\nitem_value\030$ \001(\r\022\032\n\022suppor"
  "t_gold_spent\030% \001(\r\022\025\n\rcamps_stacked\030& \001("
  "\r\022\024\n\014wards_placed\030\' \001(\r\022\024\n\014triple_kills\030"
  "( \001(\r\022\020\n\010rampages\030) \001(\r\"\234\001\n\024CMatchTeamTi"
  "medStats\022\014\n\004time\030\001 \001(\r\022\033\n\023enemy_towers_k"
  "illed\030\002 \001(\r\022\035\n\025enemy_barracks_killed\030\003 \001"
  "(\r\022\033\n\023enemy_towers_status\030\004 \001(\r\022\035\n\025enemy"
  "_barracks_status\030\005 \001(\r\"A\n\035CMatchAddition"
  "alUnitInventory\022\021\n\tunit_name\030\001 \001(\t\022\r\n\005it"
  "ems\030\002 \003(\r\"\\\n\031CMatchPlayerPermanentBuff\022\026"
  "\n\016permanent_buff\030\001 \001(\r\022\023\n\013stack_count\030\002 "
  "\001(\r\022\022\n\ngrant_time\030\003 \001(\r\"G\n\025CMatchHeroSel"
  "ectEvent\022\017\n\007is_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022"
  "\017\n\007hero_id\030\003 \001(\r\"W\n\027CPartySearchClientPa"
  "rty\022\020\n\010party_id\030\001 \001(\006\022\023\n\013beacon_type\030\002 \001"
  "(\005\022\025\n\rparty_members\030\003 \003(\007\"\213\001\n$CMsgDOTAPr"
  "ocessFantasyScheduledEvent\022\r\n\005event\030\001 \001("
  "\r\022\021\n\ttimestamp\030\002 \001(\r\022\031\n\021fantasy_league_i"
  "d\030\003 \001(\r\022\016\n\006season\030\004 \001(\r\022\026\n\016reference_dat"
  "a\030\005 \001(\r\";\n\024CMsgDOTAHasItemQuery\022\022\n\naccou"
  "nt_id\030\001 \001(\r\022\017\n\007item_id\030\002 \001(\004\"+\n\027CMsgDOTA"
  "HasItemResponse\022\020\n\010has_item\030\001 \001(\010\"&\n\020CMs"
  "gGCIsProQuery\022\022\n\naccount_id\030\001 \001(\r\"%\n\023CMs"
  "gGCIsProResponse\022\016\n\006is_pro\030\001 \001(\010\"C\n\030CMsg"
  "DOTAHasItemDefsQuery\022\022\n\naccount_id\030\001 \001(\r"
  "\022\023\n\013itemdef_ids\030\002 \003(\r\"0\n\033CMsgDOTAHasItem"
  "DefsResponse\022\021\n\thas_items\030\001 \001(\010\"f\n\033CMsgG"
  "CGetPlayerCardItemInfo\022\022\n\naccount_id\030\001 \001"
  "(\r\022\034\n\024player_card_item_ids\030\002 \003(\004\022\025\n\rall_"
  "for_event\030\003 \001(\r\"\320\001\n#CMsgGCGetPlayerCardI"
  "temInfoResponse\022N\n\021player_card_infos\030\001 \003"
  "(\01323.CMsgGCGetPlayerCardItemInfoResponse"
  ".PlayerCardInfo\032Y\n\016PlayerCardInfo\022\033\n\023pla"
  "yer_card_item_id\030\001 \001(\004\022\022\n\naccount_id\030\002 \001"
  "(\r\022\026\n\016packed_bonuses\030\003 \001(\004\"F\n\037CMsgGCToGC"
  "FantasySetMatchLeague\022\020\n\010match_id\030\001 \001(\004\022"
  "\021\n\tleague_id\030\002 \001(\r\"a\n\027CSODOTAMapLocation"
  "State\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\031\n\013locat"
  "ion_id\030\002 \001(\005B\004\200\246\035\001\022\021\n\tcompleted\030\003 \001(\010\"*\n"
  "\023CMsgLeagueAdminList\022\023\n\013account_ids\030\001 \003("
  "\r\"\200\001\n\032CCompendiumTimestampedData\022\021\n\tgame"
  "_time\030\001 \001(\r\022\013\n\003gpm\030\002 \001(\r\022\013\n\003xpm\030\003 \001(\r\022\r\n"
  "\005kills\030\004 \001(\r\022\016\n\006deaths\030\005 \001(\r\022\026\n\016item_pur"
  "chases\030\006 \003(\r\"R\n\027CCompendiumGameTimeline\022"
  ")\n\004data\030\001 \003(\0132\033.CCompendiumTimestampedDa"
  "ta\022\014\n\004tags\030\002 \003(\t\">\n\023CCompendiumGameList\022"
  "\'\n\005games\030\001 \003(\0132\030.CCompendiumGameTimeline"
  "\"L\n\024CAdditionalEquipSlot\022\020\n\010class_id\030\001 \001"
  "(\r\022\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\"\375"
  "\t\n\023CMsgDOTAProfileCard\022\022\n\naccount_id\030\001 \001"
  "(\r\022(\n\005slots\030\003 \003(\0132\031.CMsgDOTAProfileCard."
  "Slot\022\024\n\014badge_points\030\004 \001(\r\022\024\n\014event_poin"
  "ts\030\005 \001(\r\022\020\n\010event_id\030\006 \001(\r\0228\n\031recent_bat"
  "tle_cup_victory\030\007 \001(\0132\025.CMsgBattleCupVic"
  "tory\022\021\n\trank_tier\030\010 \001(\r\022\030\n\020leaderboard_r"
  "ank\030\t \001(\r\022\032\n\022is_plus_subscriber\030\n \001(\010\022 \n"
  "\030plus_original_start_date\030\013 \001(\r\022\027\n\017rank_"
  "tier_score\030\014 \001(\r\022\032\n\022previous_rank_tier\030\r"
  " \001(\r\022\032\n\022rank_tier_mmr_type\030\016 \001(\r\022\035\n\025lead"
  "erboard_rank_core\030\021 \001(\r\022\026\n\016rank_tier_pea"
  "k\030\025 \001(\r\022\r\n\005title\030\027 \001(\r\022\034\n\024favorite_team_"
  "packed\030\030 \001(\004\032\360\004\n\004Slot\022\017\n\007slot_id\030\001 \001(\r\0220"
  "\n\006trophy\030\002 \001(\0132 .CMsgDOTAProfileCard.Slo"
  "t.Trophy\022,\n\004stat\030\003 \001(\0132\036.CMsgDOTAProfile"
  "Card.Slot.Stat\022,\n\004item\030\004 \001(\0132\036.CMsgDOTAP"
  "rofileCard.Slot.Item\022,\n\004hero\030\005 \001(\0132\036.CMs"
  "gDOTAProfileCard.Slot.Hero\0224\n\010emoticon\030\006"
  " \001(\0132\".CMsgDOTAProfileCard.Slot.Emoticon"
  "\022,\n\004team\030\007 \001(\0132\036.CMsgDOTAProfileCard.Slo"
  "t.Team\0321\n\006Trophy\022\021\n\ttrophy_id\030\001 \001(\r\022\024\n\014t"
  "rophy_score\030\002 \001(\r\032W\n\004Stat\022;\n\007stat_id\030\001 \001"
  "(\0162\034.CMsgDOTAProfileCard.EStatID:\014k_eSta"
  "t_Wins\022\022\n\nstat_score\030\002 \001(\r\0320\n\004Item\022\027\n\017se"
  "rialized_item\030\001 \001(\014\022\017\n\007item_id\030\002 \001(\004\032\?\n\004"
  "Hero\022\017\n\007hero_id\030\001 \001(\r\022\021\n\thero_wins\030\002 \001(\r"
  "\022\023\n\013hero_losses\030\003 \001(\r\032\037\n\010Emoticon\022\023\n\013emo"
  "ticon_id\030\001 \001(\r\032\027\n\004Team\022\017\n\007team_id\030\001 \001(\r\""
  "\234\001\n\007EStatID\022\020\n\014k_eStat_Wins\020\003\022\024\n\020k_eStat"
  "_Commends\020\004\022\027\n\023k_eStat_GamesPlayed\020\005\022\032\n\026"
  "k_eStat_FirstMatchDate\020\006\022\036\n\032k_eStat_Prev"
  "iousSeasonRank\020\007\022\024\n\020k_eStat_GamesMVP\020\010\"\201"
  "\003\n\026CSODOTAPlayerChallenge\022\030\n\naccount_id\030"
  "\001 \001(\rB\004\200\246\035\001\022\026\n\010event_id\030\002 \001(\rB\004\200\246\035\001\022\025\n\007s"
  "lot_id\030\003 \001(\rB\004\200\246\035\001\022\023\n\013int_param_0\030\005 \001(\r\022"
  "\023\n\013int_param_1\030\006 \001(\r\022\024\n\014created_time\030\007 \001"
  "(\r\022\021\n\tcompleted\030\010 \001(\r\022\023\n\013sequence_id\030\t \001"
  "(\r\022\026\n\016challenge_tier\030\n \001(\r\022\r\n\005flags\030\013 \001("
  "\r\022\020\n\010attempts\030\014 \001(\r\022\026\n\016complete_limit\030\r "
  "\001(\r\022\022\n\nquest_rank\030\016 \001(\r\022\026\n\016max_quest_ran"
  "k\030\017 \001(\r\022\023\n\013instance_id\030\020 \001(\r\022\017\n\007hero_id\030"
  "\021 \001(\r\022\023\n\013template_id\030\022 \001(\r\"u\n#CMsgClient"
  "ToGCRerollPlayerChallenge\022(\n\010event_id\030\001 "
  "\001(\0162\007.EEvent:\rEVENT_ID_NONE\022\023\n\013sequence_"
  "id\030\003 \001(\r\022\017\n\007hero_id\030\004 \001(\r\"\360\001\n#CMsgGCRero"
  "llPlayerChallengeResponse\022M\n\006result\030\001 \001("
  "\0162,.CMsgGCRerollPlayerChallengeResponse."
  "EResult:\017eResult_Success\"z\n\007EResult\022\023\n\017e"
  "Result_Success\020\000\022\023\n\017eResult_Dropped\020\001\022\024\n"
  "\020eResult_NotFound\020\002\022\026\n\022eResult_CantRerol"
  "l\020\003\022\027\n\023eResult_ServerError\020\004\"M\n\030CMsgGCTo"
  "pCustomGamesList\022\030\n\020top_custom_games\030\001 \003"
  "(\004\022\027\n\017game_of_the_day\030\002 \001(\004\"\251\033\n\031CMsgDOTA"
  "RealtimeGameStats\0226\n\005match\030\001 \001(\0132\'.CMsgD"
  "OTARealtimeGameStats.MatchDetails\0225\n\005tea"
  "ms\030\002 \003(\0132&.CMsgDOTARealtimeGameStats.Tea"
  "mDetails\022=\n\tbuildings\030\003 \003(\0132*.CMsgDOTARe"
  "altimeGameStats.BuildingDetails\0228\n\ngraph"
  "_data\030\004 \001(\0132$.CMsgDOTARealtimeGameStats."
  "GraphData\022\023\n\013delta_frame\030\005 \001(\010\032\202\002\n\013TeamD"
  "etails\022\023\n\013team_number\030\001 \001(\r\022\017\n\007team_id\030\002"
  " \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001"
  "(\006\022\020\n\010team_tag\030\n \001(\t\022\r\n\005score\030\005 \001(\r\022\021\n\tn"
  "et_worth\030\t \001(\r\0229\n\007players\030\006 \003(\0132(.CMsgDO"
  "TARealtimeGameStats.PlayerDetails\022\021\n\tonl"
  "y_team\030\007 \001(\010\022\016\n\006cheers\030\010 \001(\r\022\025\n\rteam_log"
  "o_url\030\013 \001(\t\032d\n\013ItemDetails\022\027\n\017item_abili"
  "ty_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004time\030\003 \001(\005\022"
  "\014\n\004sold\030\004 \001(\010\022\022\n\nstackcount\030\005 \001(\r\032a\n\016Abi"
  "lityDetails\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n"
  "\005level\030\003 \001(\r\022\020\n\010cooldown\030\004 \001(\002\022\024\n\014cooldo"
  "wn_max\030\005 \001(\002\032C\n\017HeroToHeroStats\022\020\n\010victi"
  "mid\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\017\n\007assists\030\003 \001("
  "\r\032\031\n\013AbilityList\022\n\n\002id\030\001 \003(\r\032\345\t\n\rPlayerD"
  "etails\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playerid\030\002 "
  "\001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006heroi"
  "d\030\005 \001(\r\022\024\n\014healthpoints\030\006 \001(\r\022\027\n\017maxheal"
  "thpoints\030\007 \001(\r\022\027\n\017healthregenrate\030\010 \001(\002\022"
  "\022\n\nmanapoints\030\t \001(\r\022\025\n\rmaxmanapoints\030\n \001"
  "(\r\022\025\n\rmanaregenrate\030\013 \001(\002\022\025\n\rbase_streng"
  "th\030\014 \001(\r\022\024\n\014base_agility\030\r \001(\r\022\031\n\021base_i"
  "ntelligence\030\016 \001(\r\022\022\n\nbase_armor\030\017 \001(\005\022\026\n"
  "\016base_movespeed\030\020 \001(\r\022\023\n\013base_damage\030\021 \001"
  "(\r\022\020\n\010strength\030\022 \001(\r\022\017\n\007agility\030\023 \001(\r\022\024\n"
  "\014intelligence\030\024 \001(\r\022\r\n\005armor\030\025 \001(\005\022\021\n\tmo"
  "vespeed\030\026 \001(\r\022\016\n\006damage\030\027 \001(\r\022\023\n\013hero_da"
  "mage\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r\022<\n\tabil"
  "ities\030\032 \003(\0132).CMsgDOTARealtimeGameStats."
  "AbilityDetails\022\r\n\005level\030\033 \001(\r\022\022\n\nkill_co"
  "unt\030\034 \001(\r\022\023\n\013death_count\030\035 \001(\r\022\025\n\rassist"
  "s_count\030\036 \001(\r\022\024\n\014denies_count\030\037 \001(\r\022\020\n\010l"
  "h_count\030  \001(\r\022\024\n\014hero_healing\030! \001(\r\022\024\n\014g"
  "old_per_min\030\" \001(\r\022\022\n\nxp_per_min\030# \001(\r\022\020\n"
  "\010net_gold\030$ \001(\r\022\014\n\004gold\030% \001(\r\022\t\n\001x\030& \001(\002"
  "\022\t\n\001y\030\' \001(\002\022\024\n\014respawn_time\030( \001(\005\022\031\n\021ult"
  "imate_cooldown\030) \001(\r\022\023\n\013has_buyback\030* \001("
  "\010\0225\n\005items\030+ \003(\0132&.CMsgDOTARealtimeGameS"
  "tats.ItemDetails\022:\n\nstashitems\030, \003(\0132&.C"
  "MsgDOTARealtimeGameStats.ItemDetails\022@\n\020"
  "itemshoppinglist\030- \003(\0132&.CMsgDOTARealtim"
  "eGameStats.ItemDetails\022;\n\013levelpoints\030. "
  "\003(\0132&.CMsgDOTARealtimeGameStats.AbilityL"
  "ist\022F\n\022hero_to_hero_stats\030/ \003(\0132*.CMsgDO"
  "TARealtimeGameStats.HeroToHeroStats\022\024\n\014h"
  "as_ultimate\0300 \001(\010\022\031\n\021has_ultimate_mana\0301"
  " \001(\010\032\203\001\n\017BuildingDetails\022\014\n\004team\030\002 \001(\r\022\017"
  "\n\007heading\030\003 \001(\002\022\014\n\004lane\030\004 \001(\r\022\014\n\004tier\030\005 "
  "\001(\r\022\014\n\004type\030\006 \001(\r\022\t\n\001x\030\007 \001(\002\022\t\n\001y\030\010 \001(\002\022"
  "\021\n\tdestroyed\030\t \001(\010\032N\n\013KillDetails\022\021\n\tpla"
  "yer_id\030\001 \001(\r\022\022\n\ndeath_time\030\002 \001(\005\022\030\n\020kill"
  "er_player_id\030\003 \001(\r\032V\n\022BroadcasterDetails"
  "\022\021\n\tplayer_id\030\001 \001(\r\022\025\n\rselected_hero\030\002 \001"
  "(\r\022\026\n\016selected_graph\030\003 \001(\r\032,\n\016PickBanDet"
  "ails\022\014\n\004hero\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\032\252\004\n\014Mat"
  "chDetails\022\027\n\017server_steam_id\030\001 \001(\006\022\017\n\007ma"
  "tchid\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\r\022\023\n\013time_o"
  "f_day\030\004 \001(\002\022\035\n\025is_nightstalker_night\030\005 \001"
  "(\010\022\021\n\tgame_time\030\006 \001(\005\022\022\n\ngame_state\030\023 \001("
  "\r\022\026\n\016teamid_radiant\030\010 \001(\r\022\023\n\013teamid_dire"
  "\030\t \001(\r\0228\n\005picks\030\n \003(\0132).CMsgDOTARealtime"
  "GameStats.PickBanDetails\0227\n\004bans\030\013 \003(\0132)"
  ".CMsgDOTARealtimeGameStats.PickBanDetail"
  "s\0225\n\005kills\030\014 \003(\0132&.CMsgDOTARealtimeGameS"
  "tats.KillDetails\022C\n\014broadcasters\030\r \003(\0132-"
  ".CMsgDOTARealtimeGameStats.BroadcasterDe"
  "tails\022\021\n\tgame_mode\030\016 \001(\r\022\021\n\tleague_id\030\017 "
  "\001(\r\022\026\n\016league_node_id\030\022 \001(\r\022\023\n\013single_te"
  "am\030\020 \001(\010\022\023\n\013cheers_peak\030\021 \001(\r\032\357\003\n\tGraphD"
  "ata\022\022\n\ngraph_gold\030\001 \003(\005\022\020\n\010graph_xp\030\002 \003("
  "\005\022\022\n\ngraph_kill\030\003 \003(\005\022\023\n\013graph_tower\030\004 \003"
  "(\005\022\021\n\tgraph_rax\030\005 \003(\005\022N\n\016team_loc_stats\030"
  "\006 \003(\01326.CMsgDOTARealtimeGameStats.GraphD"
  "ata.TeamLocationStats\032\036\n\rLocationStats\022\r"
  "\n\005stats\030\001 \003(\005\032Z\n\021TeamLocationStats\022E\n\tlo"
  "c_stats\030\001 \003(\01322.CMsgDOTARealtimeGameStat"
  "s.GraphData.LocationStats\"[\n\005eStat\022\023\n\017Cr"
  "eepGoldEarned\020\000\022\022\n\016KillGoldEarned\020\001\022\033\n\027D"
  "eathAndBuybackGoldLost\020\002\022\014\n\010XPEarned\020\003\"W"
  "\n\teLocation\022\013\n\007BotLane\020\000\022\013\n\007MidLane\020\001\022\013\n"
  "\007TopLane\020\002\022\n\n\006Jungle\020\003\022\014\n\010Ancients\020\004\022\t\n\005"
  "Other\020\005\"\367\n\n\036CMsgDOTARealtimeGameStatsTer"
  "se\022;\n\005match\030\001 \001(\0132,.CMsgDOTARealtimeGame"
  "StatsTerse.MatchDetails\022:\n\005teams\030\002 \003(\0132+"
  ".CMsgDOTARealtimeGameStatsTerse.TeamDeta"
  "ils\022B\n\tbuildings\030\003 \003(\0132/.CMsgDOTARealtim"
  "eGameStatsTerse.BuildingDetails\022=\n\ngraph"
  "_data\030\004 \001(\0132).CMsgDOTARealtimeGameStatsT"
  "erse.GraphData\022\023\n\013delta_frame\030\005 \001(\010\032\344\001\n\013"
  "TeamDetails\022\023\n\013team_number\030\001 \001(\r\022\017\n\007team"
  "_id\030\002 \001(\r\022\021\n\tteam_name\030\003 \001(\t\022\020\n\010team_tag"
  "\030\010 \001(\t\022\021\n\tteam_logo\030\004 \001(\006\022\r\n\005score\030\005 \001(\r"
  "\022\021\n\tnet_worth\030\007 \001(\r\022\025\n\rteam_logo_url\030\t \001"
  "(\t\022>\n\007players\030\006 \003(\0132-.CMsgDOTARealtimeGa"
  "meStatsTerse.PlayerDetails\032\260\002\n\rPlayerDet"
  "ails\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playerid\030\002 \001("
  "\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006heroid\030"
  "\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\022\n\nkill_count\030\007 \001(\r"
  "\022\023\n\013death_count\030\010 \001(\r\022\025\n\rassists_count\030\t"
  " \001(\r\022\024\n\014denies_count\030\n \001(\r\022\020\n\010lh_count\030\013"
  " \001(\r\022\014\n\004gold\030\014 \001(\r\022\t\n\001x\030\r \001(\002\022\t\n\001y\030\016 \001(\002"
  "\022\021\n\tnet_worth\030\017 \001(\r\022\021\n\tabilities\030\020 \003(\r\022\r"
  "\n\005items\030\021 \003(\r\032\203\001\n\017BuildingDetails\022\014\n\004tea"
  "m\030\001 \001(\r\022\017\n\007heading\030\002 \001(\002\022\014\n\004type\030\003 \001(\r\022\014"
  "\n\004lane\030\004 \001(\r\022\014\n\004tier\030\005 \001(\r\022\t\n\001x\030\006 \001(\002\022\t\n"
  "\001y\030\007 \001(\002\022\021\n\tdestroyed\030\010 \001(\010\032,\n\016PickBanDe"
  "tails\022\014\n\004hero\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\032\324\002\n\014Ma"
  "tchDetails\022\027\n\017server_steam_id\030\001 \001(\006\022\017\n\007m"
  "atchid\030\002 \001(\004\022\021\n\ttimestamp\030\003 \001(\r\022\021\n\tgame_"
  "time\030\004 \001(\005\022%\n\035steam_broadcaster_account_"
  "ids\030\006 \003(\r\022\021\n\tgame_mode\030\007 \001(\r\022\021\n\tleague_i"
  "d\030\010 \001(\r\022\026\n\016league_node_id\030\t \001(\r\022\022\n\ngame_"
  "state\030\n \001(\r\022=\n\005picks\030\013 \003(\0132..CMsgDOTARea"
  "ltimeGameStatsTerse.PickBanDetails\022<\n\004ba"
  "ns\030\014 \003(\0132..CMsgDOTARealtimeGameStatsTers"
  "e.PickBanDetails\032\037\n\tGraphData\022\022\n\ngraph_g"
  "old\030\001 \003(\005\"\245\001\n\036CMsgDOTABroadcastTimelineE"
  "vent\022M\n\005event\030\001 \001(\0162\030.EBroadcastTimeline"
  "Event:$EBroadcastTimelineEvent_MatchStar"
  "ted\022\021\n\ttimestamp\030\002 \001(\007\022\014\n\004data\030\003 \001(\r\022\023\n\013"
  "string_data\030\004 \001(\t\"\?\n CMsgGCToClientMatch"
  "GroupsVersion\022\033\n\023matchgroups_version\030\001 \001"
  "(\r\"\301\001\n\033CMsgDOTASDOHeroStatsHistory\022\020\n\010ma"
  "tch_id\030\001 \001(\004\022\021\n\tgame_mode\030\002 \001(\r\022\022\n\nlobby"
  "_type\030\003 \001(\r\022\022\n\nstart_time\030\004 \001(\r\022\013\n\003won\030\005"
  " \001(\010\022\013\n\003gpm\030\006 \001(\r\022\013\n\003xpm\030\007 \001(\r\022\r\n\005kills\030"
  "\010 \001(\r\022\016\n\006deaths\030\t \001(\r\022\017\n\007assists\030\n \001(\r\"\224"
  "\003\n\025CMsgDOTASeasonRewards\022.\n\007rewards\030\001 \003("
  "\0132\035.CMsgDOTASeasonRewards.Reward\032\340\001\n\006Rew"
  "ard\022\014\n\004name\030\001 \001(\t\022\017\n\007itemdef\030\002 \001(\r\022\022\n\nim"
  "portance\030\003 \001(\r\022\022\n\nbase_level\030\004 \001(\r\022\024\n\014re"
  "peat_level\030\005 \001(\r\022A\n\013reward_type\030\006 \001(\0162\"."
  "CMsgDOTASeasonRewards.ERewardType:\010EconI"
  "tem\022\r\n\005image\030\007 \001(\t\022\021\n\taction_id\030\010 \001(\r\022\024\n"
  "\014effect_index\030\t \001(\r\"h\n\013ERewardType\022\014\n\010Ec"
  "onItem\020\000\022\020\n\014MysteryWheel\020\001\022\021\n\rAbilityEff"
  "ect\020\002\022\t\n\005Other\020\003\022\033\n\027MysteryWheelPointsBa"
  "sed\020\004\"\256\002\n\032CMsgDOTASeasonAchievements\022=\n\014"
  "achievements\030\001 \003(\0132\'.CMsgDOTASeasonAchie"
  "vements.Achievement\032\320\001\n\013Achievement\022\014\n\004n"
  "ame\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\r\n\005image\030"
  "\003 \001(\t\022\021\n\taction_id\030\004 \001(\r\022\022\n\nmax_grants\030\005"
  " \001(\r\022\025\n\rnormal_points\030\006 \001(\r\022\034\n\024tracking_"
  "achievement\030\007 \001(\r\022\030\n\020achievement_goal\030\010 "
  "\001(\r\022\031\n\021achievement_level\030\t \001(\r\"a\n\024CMsgPr"
  "edictionChoice\022\r\n\005value\030\001 \001(\r\022\014\n\004name\030\002 "
  "\001(\t\022\025\n\rmin_raw_value\030\003 \001(\r\022\025\n\rmax_raw_va"
  "lue\030\004 \001(\r\"\262\010\n\024CMsgInGamePrediction\022\n\n\002id"
  "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022<\n\004type\030\003 \001(\0162%.CMs"
  "gInGamePrediction.EPredictionType:\007Gener"
  "ic\022G\n\005group\030\004 \001(\0162-.CMsgInGamePrediction"
  ".ERandomSelectionGroup_t:\tEarlyGame\022\020\n\010q"
  "uestion\030\005 \001(\t\022&\n\007choices\030\006 \003(\0132\025.CMsgPre"
  "dictionChoice\022\027\n\017required_heroes\030\007 \003(\t\022\022"
  "\n\nquery_name\030\010 \001(\t\022:\n\014query_values\030\t \003(\013"
  "2$.CMsgInGamePrediction.QueryKeyValues\022U"
  "\n\026answer_resolution_type\030\n \001(\0162\'.CMsgInG"
  "amePrediction.EResolutionType_t:\014Invalid"
  "Query\022\027\n\017points_to_grant\030\013 \001(\r\022\025\n\rreward"
  "_action\030\014 \001(\r\022\035\n\025debug_force_selection\030\r"
  " \001(\r\022E\n\016raw_value_type\030\016 \001(\0162%.CMsgInGam"
  "ePrediction.ERawValueType_t:\006Number\032-\n\016Q"
  "ueryKeyValues\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t\"\'\n\017ERawValueType_t\022\n\n\006Number\020\000\022\010\n\004Tim"
  "e\020\001\"j\n\017EPredictionType\022\013\n\007Generic\020\000\022\010\n\004H"
  "ero\020\001\022\010\n\004Team\020\002\022\n\n\006Player\020\003\022\013\n\007Special\020\004"
  "\022\t\n\005YesNo\020\005\022\022\n\016QualifiersTeam\020\006\"\324\001\n\021ERes"
  "olutionType_t\022\020\n\014InvalidQuery\020\000\022\024\n\020First"
  "ToPassQuery\020\001\022\023\n\017LastToPassQuery\020\002\022\026\n\022La"
  "stRemainingQuery\020\003\022\022\n\016MaxToPassQuery\020\004\022\022"
  "\n\016MinToPassQuery\020\005\022\014\n\010SumQuery\020\006\022\031\n\025MaxT"
  "eamSumToPassQuery\020\007\022\031\n\025MinTeamSumToPassQ"
  "uery\020\010\"N\n\027ERandomSelectionGroup_t\022\r\n\tEar"
  "lyGame\020\000\022\013\n\007MidGame\020\001\022\014\n\010LateGame\020\002\022\t\n\005C"
  "ount\020\003\"\245\t\n\031CMsgDOTASeasonPredictions\022:\n\013"
  "predictions\030\001 \003(\0132%.CMsgDOTASeasonPredic"
  "tions.Prediction\0222\n\023in_game_predictions\030"
  "\002 \003(\0132\025.CMsgInGamePrediction\022)\n!in_game_"
  "prediction_count_per_game\030\003 \001(\r\0220\n(in_ga"
  "me_prediction_voting_period_minutes\030\004 \001("
  "\r\032\272\007\n\nPrediction\022L\n\004type\030\001 \001(\01625.CMsgDOT"
  "ASeasonPredictions.Prediction.EPredictio"
  "nType:\007Generic\022\020\n\010question\030\002 \001(\t\022&\n\007choi"
  "ces\030\003 \003(\0132\025.CMsgPredictionChoice\022\024\n\014sele"
  "ction_id\030\004 \001(\r\022\022\n\nstart_date\030\005 \001(\r\022\021\n\tlo"
  "ck_date\030\006 \001(\r\022\016\n\006reward\030\007 \001(\r\022Q\n\013answer_"
  "type\030\010 \001(\01621.CMsgDOTASeasonPredictions.P"
  "rediction.EAnswerType:\tSingleInt\022\021\n\tansw"
  "er_id\030\t \001(\r\022>\n\007answers\030\n \003(\0132-.CMsgDOTAS"
  "easonPredictions.Prediction.Answers\022\022\n\nq"
  "uery_name\030\013 \001(\t\022\034\n\024lock_on_selection_id\030"
  "\r \001(\r\022\037\n\027lock_on_selection_value\030\016 \001(\r\022\035"
  "\n\025lock_on_selection_set\030\017 \001(\010\022\037\n\027use_ans"
  "wer_value_ranges\030\020 \001(\010\0223\n\006region\030\021 \001(\0162\016"
  ".ELeagueRegion:\023LEAGUE_REGION_UNSET\022\035\n\006p"
  "hases\030\022 \003(\0162\r.ELeaguePhase\022,\n\014reward_eve"
  "nt\030\023 \001(\0162\007.EEvent:\rEVENT_ID_NONE\032\034\n\007Answ"
  "ers\022\021\n\tanswer_id\030\001 \001(\r\"j\n\017EPredictionTyp"
  "e\022\013\n\007Generic\020\000\022\010\n\004Hero\020\001\022\010\n\004Team\020\002\022\n\n\006Pl"
  "ayer\020\003\022\013\n\007Special\020\004\022\t\n\005YesNo\020\005\022\022\n\016Qualif"
  "iersTeam\020\006\"\221\001\n\013EAnswerType\022\r\n\tSingleInt\020"
  "\000\022\017\n\013SingleFloat\020\001\022\017\n\013MultipleInt\020\002\022\021\n\rM"
  "ultipleFloat\020\003\022\016\n\nAnswerTeam\020\004\022\016\n\nSingle"
  "Time\020\005\022\020\n\014MultipleTime\020\006\022\014\n\010NoAnswer\020\007\"\261"
  "\001\n\030CMsgAvailablePredictions\022D\n\021match_pre"
  "dictions\030\001 \003(\0132).CMsgAvailablePrediction"
  "s.MatchPrediction\032O\n\017MatchPrediction\022\020\n\010"
  "match_id\030\001 \001(\004\022*\n\013predictions\030\002 \003(\0132\025.CM"
  "sgInGamePrediction\"\277\001\n\026CMsgLeagueWatched"
  "Games\022/\n\007leagues\030\001 \003(\0132\036.CMsgLeagueWatch"
  "edGames.League\032\'\n\006Series\022\017\n\007node_id\030\001 \001("
  "\r\022\014\n\004game\030\002 \003(\r\032K\n\006League\022\021\n\tleague_id\030\001"
  " \001(\r\022.\n\006series\030\002 \003(\0132\036.CMsgLeagueWatched"
  "Games.Series\"\371\037\n\rCMsgDOTAMatch\022\020\n\010durati"
  "on\030\003 \001(\r\022\021\n\tstartTime\030\004 \001(\007\022&\n\007players\030\005"
  " \003(\0132\025.CMsgDOTAMatch.Player\022\020\n\010match_id\030"
  "\006 \001(\004\022\024\n\014tower_status\030\010 \003(\r\022\027\n\017barracks_"
  "status\030\t \003(\r\022\017\n\007cluster\030\n \001(\r\022\030\n\020first_b"
  "lood_time\030\014 \001(\r\022\023\n\013replay_salt\030\r \001(\007\022\021\n\t"
  "server_ip\030\016 \001(\007\022\023\n\013server_port\030\017 \001(\r\022\022\n\n"
  "lobby_type\030\020 \001(\r\022\025\n\rhuman_players\030\021 \001(\r\022"
  "\025\n\raverage_skill\030\022 \001(\r\022\024\n\014game_balance\030\023"
  " \001(\002\022\027\n\017radiant_team_id\030\024 \001(\r\022\024\n\014dire_te"
  "am_id\030\025 \001(\r\022\020\n\010leagueid\030\026 \001(\r\022\031\n\021radiant"
  "_team_name\030\027 \001(\t\022\026\n\016dire_team_name\030\030 \001(\t"
  "\022\031\n\021radiant_team_logo\030\031 \001(\004\022\026\n\016dire_team"
  "_logo\030\032 \001(\004\022\035\n\025radiant_team_logo_url\0306 \001"
  "(\t\022\032\n\022dire_team_logo_url\0307 \001(\t\022\035\n\025radian"
  "t_team_complete\030\033 \001(\r\022\032\n\022dire_team_compl"
  "ete\030\034 \001(\r\022\026\n\016positive_votes\030\035 \001(\r\022\026\n\016neg"
  "ative_votes\030\036 \001(\r\0225\n\tgame_mode\030\037 \001(\0162\016.D"
  "OTA_GameMode:\022DOTA_GAMEMODE_NONE\022*\n\npick"
  "s_bans\030  \003(\0132\026.CMatchHeroSelectEvent\022\025\n\r"
  "match_seq_num\030! \001(\004\022B\n\014replay_state\030\" \001("
  "\0162\032.CMsgDOTAMatch.ReplayState:\020REPLAY_AV"
  "AILABLE\022\030\n\020radiant_guild_id\030# \001(\r\022\025\n\rdir"
  "e_guild_id\030$ \001(\r\022\030\n\020radiant_team_tag\030% \001"
  "(\t\022\025\n\rdire_team_tag\030& \001(\t\022\021\n\tseries_id\030\'"
  " \001(\r\022\023\n\013series_type\030( \001(\r\022\?\n\024broadcaster"
  "_channels\030+ \003(\0132!.CMsgDOTAMatch.Broadcas"
  "terChannel\022\016\n\006engine\030, \001(\r\0227\n\020custom_gam"
  "e_data\030- \001(\0132\035.CMsgDOTAMatch.CustomGameD"
  "ata\022\023\n\013match_flags\030. \001(\r\022\034\n\024private_meta"
  "data_key\030/ \001(\007\022\032\n\022radiant_team_score\0300 \001"
  "(\r\022\027\n\017dire_team_score\0301 \001(\r\022>\n\rmatch_out"
  "come\0302 \001(\0162\016.EMatchOutcome:\027k_EMatchOutc"
  "ome_Unknown\022\025\n\rtournament_id\0303 \001(\r\022\030\n\020to"
  "urnament_round\0304 \001(\r\022\031\n\021pre_game_duratio"
  "n\0305 \001(\r\022\026\n\016mvp_account_id\0308 \003(\r\022%\n\007coach"
  "es\0309 \003(\0132\024.CMsgDOTAMatch.Coach\032\342\020\n\006Playe"
  "r\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_slot\030\002 \001"
  "(\r\022\017\n\007hero_id\030\003 \001(\r\022\016\n\006item_0\030\004 \001(\r\022\016\n\006i"
  "tem_1\030\005 \001(\r\022\016\n\006item_2\030\006 \001(\r\022\016\n\006item_3\030\007 "
  "\001(\r\022\016\n\006item_4\030\010 \001(\r\022\016\n\006item_5\030\t \001(\r\022\016\n\006i"
  "tem_6\030; \001(\r\022\016\n\006item_7\030< \001(\r\022\016\n\006item_8\030= "
  "\001(\r\022\016\n\006item_9\030L \001(\r\022\"\n\032expected_team_con"
  "tribution\030\n \001(\002\022\025\n\rscaled_metric\030\013 \001(\002\022\025"
  "\n\rprevious_rank\030\014 \001(\r\022\023\n\013rank_change\030\r \001"
  "(\021\022\020\n\010mmr_type\030J \001(\r\022\031\n\021rank_tier_update"
  "d\030B \001(\010\022\r\n\005kills\030\016 \001(\r\022\016\n\006deaths\030\017 \001(\r\022\017"
  "\n\007assists\030\020 \001(\r\022\025\n\rleaver_status\030\021 \001(\r\022\014"
  "\n\004gold\030\022 \001(\r\022\021\n\tlast_hits\030\023 \001(\r\022\016\n\006denie"
  "s\030\024 \001(\r\022\024\n\014gold_per_min\030\025 \001(\r\022\022\n\nXP_per_"
  "min\030\026 \001(\r\022\022\n\ngold_spent\030\027 \001(\r\022\023\n\013hero_da"
  "mage\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r\022\024\n\014hero"
  "_healing\030\032 \001(\r\022\r\n\005level\030\033 \001(\r\022\026\n\016time_la"
  "st_seen\030\034 \001(\r\022\023\n\013player_name\030\035 \001(\t\022\035\n\025su"
  "pport_ability_value\030\036 \001(\r\022\030\n\020feeding_det"
  "ected\030  \001(\010\022\023\n\013search_rank\030\" \001(\r\022\037\n\027sear"
  "ch_rank_uncertainty\030# \001(\r\022\037\n\027rank_uncert"
  "ainty_change\030$ \001(\005\022\027\n\017hero_play_count\030% "
  "\001(\r\022\020\n\010party_id\030& \001(\006\022\032\n\022scaled_hero_dam"
  "age\0306 \001(\r\022\033\n\023scaled_tower_damage\0307 \001(\r\022\033"
  "\n\023scaled_hero_healing\0308 \001(\r\022\024\n\014scaled_ki"
  "lls\030\' \001(\002\022\025\n\rscaled_deaths\030( \001(\002\022\026\n\016scal"
  "ed_assists\030) \001(\002\022\031\n\021claimed_farm_gold\030* "
  "\001(\r\022\024\n\014support_gold\030+ \001(\r\022\026\n\016claimed_den"
  "ies\030, \001(\r\022\026\n\016claimed_misses\030- \001(\r\022\016\n\006mis"
  "ses\030. \001(\r\0225\n\020ability_upgrades\030/ \003(\0132\033.CM"
  "atchPlayerAbilityUpgrade\022B\n\032additional_u"
  "nits_inventory\0300 \003(\0132\036.CMatchAdditionalU"
  "nitInventory\0223\n\017permanent_buffs\0309 \003(\0132\032."
  "CMatchPlayerPermanentBuff\022\020\n\010pro_name\030H "
  "\001(\t\022\021\n\treal_name\030I \001(\t\022>\n\020custom_game_da"
  "ta\0302 \001(\0132$.CMsgDOTAMatch.Player.CustomGa"
  "meData\022 \n\030active_plus_subscription\0303 \001(\010"
  "\022\021\n\tnet_worth\0304 \001(\r\022\026\n\016bot_difficulty\030: "
  "\001(\r\022\027\n\017hero_pick_order\030\? \001(\r\022\031\n\021hero_was"
  "_randomed\030@ \001(\010\022%\n\035hero_was_dota_plus_su"
  "ggestion\030E \001(\010\022F\n\024hero_damage_received\030C"
  " \003(\0132(.CMsgDOTAMatch.Player.HeroDamageRe"
  "ceived\022C\n\021hero_damage_dealt\030O \003(\0132(.CMsg"
  "DOTAMatch.Player.HeroDamageReceived\022\024\n\014s"
  "econds_dead\030F \001(\r\022\032\n\022gold_lost_to_death\030"
  "G \001(\r\022\034\n\024lane_selection_flags\030K \001(\r\022\024\n\014b"
  "ounty_runes\030M \001(\r\022\031\n\021outposts_captured\030N"
  " \001(\r\0323\n\016CustomGameData\022\021\n\tdota_team\030\001 \001("
  "\r\022\016\n\006winner\030\002 \001(\010\032\224\001\n\022HeroDamageReceived"
  "\022\025\n\rpre_reduction\030\001 \001(\r\022\026\n\016post_reductio"
  "n\030\002 \001(\r\022O\n\013damage_type\030\003 \001(\0162$.CMsgDOTAM"
  "atch.Player.HeroDamageType:\024HERO_DAMAGE_"
  "PHYSICAL\"Y\n\016HeroDamageType\022\030\n\024HERO_DAMAG"
  "E_PHYSICAL\020\000\022\027\n\023HERO_DAMAGE_MAGICAL\020\001\022\024\n"
  "\020HERO_DAMAGE_PURE\020\002\0323\n\017BroadcasterInfo\022\022"
  "\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\032\221\001\n\022Bro"
  "adcasterChannel\022\024\n\014country_code\030\001 \001(\t\022\023\n"
  "\013description\030\002 \001(\t\0229\n\021broadcaster_infos\030"
  "\003 \003(\0132\036.CMsgDOTAMatch.BroadcasterInfo\022\025\n"
  "\rlanguage_code\030\004 \001(\t\032\213\001\n\005Coach\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\022\n\ncoach_name\030\002 \001(\t\022\024\n\014coach_"
  "rating\030\003 \001(\r\022\022\n\ncoach_team\030\004 \001(\r\022\026\n\016coac"
  "h_party_id\030\005 \001(\004\022\030\n\020is_private_coach\030\006 \001"
  "(\010\032:\n\016CustomGameData\022\026\n\016custom_game_id\030\001"
  " \001(\004\022\020\n\010map_name\030\002 \001(\t\"P\n\013ReplayState\022\024\n"
  "\020REPLAY_AVAILABLE\020\000\022\027\n\023REPLAY_NOT_RECORD"
  "ED\020\001\022\022\n\016REPLAY_EXPIRED\020\002\"\206\001\n\016CMsgPlayerC"
  "ard\022\022\n\naccount_id\030\001 \001(\r\0223\n\rstat_modifier"
  "\030\002 \003(\0132\034.CMsgPlayerCard.StatModifier\032+\n\014"
  "StatModifier\022\014\n\004stat\030\001 \001(\r\022\r\n\005value\030\002 \001("
  "\r\"\251\003\n\032CMsgDOTAFantasyPlayerStats\022\031\n\021play"
  "er_account_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001(\004\022\027\n"
  "\017match_completed\030\003 \001(\010\022\017\n\007team_id\030\004 \001(\r\022"
  "\021\n\tleague_id\030\005 \001(\r\022\r\n\005delay\030\006 \001(\r\022\021\n\tser"
  "ies_id\030\007 \001(\r\022\023\n\013series_type\030\010 \001(\r\022\r\n\005kil"
  "ls\030\n \001(\r\022\016\n\006deaths\030\013 \001(\r\022\n\n\002cs\030\014 \001(\r\022\013\n\003"
  "gpm\030\r \001(\002\022\023\n\013tower_kills\030\016 \001(\r\022\024\n\014roshan"
  "_kills\030\017 \001(\r\022\037\n\027teamfight_participation\030"
  "\020 \001(\002\022\024\n\014wards_placed\030\021 \001(\r\022\025\n\rcamps_sta"
  "cked\030\022 \001(\r\022\025\n\rrunes_grabbed\030\023 \001(\r\022\023\n\013fir"
  "st_blood\030\024 \001(\r\022\r\n\005stuns\030\025 \001(\002\"O\n\037CMsgDOT"
  "AFantasyPlayerMatchStats\022,\n\007matches\030\001 \003("
  "\0132\033.CMsgDOTAFantasyPlayerStats\"\214\007\n\024CMsgD"
  "OTABotDebugInfo\022\'\n\004bots\030\001 \003(\0132\031.CMsgDOTA"
  "BotDebugInfo.Bot\022\034\n\024desire_push_lane_top"
  "\030\002 \001(\002\022\034\n\024desire_push_lane_mid\030\003 \001(\002\022\034\n\024"
  "desire_push_lane_bot\030\004 \001(\002\022\036\n\026desire_def"
  "end_lane_top\030\005 \001(\002\022\036\n\026desire_defend_lane"
  "_mid\030\006 \001(\002\022\036\n\026desire_defend_lane_bot\030\007 \001"
  "(\002\022\034\n\024desire_farm_lane_top\030\010 \001(\002\022\034\n\024desi"
  "re_farm_lane_mid\030\t \001(\002\022\034\n\024desire_farm_la"
  "ne_bot\030\n \001(\002\022\032\n\022desire_farm_roshan\030\013 \001(\002"
  "\022\026\n\016execution_time\030\014 \001(\002\022\023\n\013rune_status\030"
  "\r \003(\r\032\355\003\n\003Bot\022\027\n\017player_owner_id\030\001 \001(\r\022\017"
  "\n\007hero_id\030\002 \001(\r\022\022\n\ndifficulty\030\003 \001(\r\022\025\n\rp"
  "ower_current\030\004 \001(\r\022\021\n\tpower_max\030\005 \001(\r\022\025\n"
  "\rmove_target_x\030\006 \001(\r\022\025\n\rmove_target_y\030\007 "
  "\001(\r\022\025\n\rmove_target_z\030\010 \001(\r\022\026\n\016active_mod"
  "e_id\030\t \001(\r\022\026\n\016execution_time\030\n \001(\002\022-\n\005mo"
  "des\030\013 \003(\0132\036.CMsgDOTABotDebugInfo.Bot.Mod"
  "e\0220\n\006action\030\014 \001(\0132 .CMsgDOTABotDebugInfo"
  ".Bot.Action\032t\n\004Mode\022\017\n\007mode_id\030\001 \001(\r\022\016\n\006"
  "desire\030\002 \001(\002\022\025\n\rtarget_entity\030\003 \001(\r\022\020\n\010t"
  "arget_x\030\004 \001(\r\022\020\n\010target_y\030\005 \001(\r\022\020\n\010targe"
  "t_z\030\006 \001(\r\0322\n\006Action\022\021\n\taction_id\030\001 \001(\r\022\025"
  "\n\raction_target\030\002 \001(\t\"R\n\022CMsgSuccessfulH"
  "ero\022\017\n\007hero_id\030\001 \001(\r\022\023\n\013win_percent\030\002 \001("
  "\002\022\026\n\016longest_streak\030\003 \001(\r\"\210\002\n\023CMsgRecent"
  "MatchInfo\022\020\n\010match_id\030\001 \001(\004\0225\n\tgame_mode"
  "\030\002 \001(\0162\016.DOTA_GameMode:\022DOTA_GAMEMODE_NO"
  "NE\022\r\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007ass"
  "ists\030\005 \001(\r\022\020\n\010duration\030\006 \001(\r\022\023\n\013player_s"
  "lot\030\007 \001(\r\022>\n\rmatch_outcome\030\010 \001(\0162\016.EMatc"
  "hOutcome:\027k_EMatchOutcome_Unknown\022\021\n\ttim"
  "estamp\030\t \001(\r\"\270\001\n\rCMsgMatchTips\022&\n\004tips\030\002"
  " \003(\0132\030.CMsgMatchTips.SingleTip\032\177\n\tSingle"
  "Tip\022\031\n\021source_account_id\030\001 \001(\r\022\031\n\021target"
  "_account_id\030\002 \001(\r\022\022\n\ntip_amount\030\003 \001(\r\022(\n"
  "\010event_id\030\004 \001(\0162\007.EEvent:\rEVENT_ID_NONE\""
  "\245\007\n\024CMsgDOTAMatchMinimal\022\020\n\010match_id\030\001 \001"
  "(\004\022\022\n\nstart_time\030\002 \001(\007\022\020\n\010duration\030\003 \001(\r"
  "\0225\n\tgame_mode\030\004 \001(\0162\016.DOTA_GameMode:\022DOT"
  "A_GAMEMODE_NONE\022-\n\007players\030\006 \003(\0132\034.CMsgD"
  "OTAMatchMinimal.Player\022.\n\007tourney\030\007 \001(\0132"
  "\035.CMsgDOTAMatchMinimal.Tourney\022>\n\rmatch_"
  "outcome\030\010 \001(\0162\016.EMatchOutcome:\027k_EMatchO"
  "utcome_Unknown\022\025\n\rradiant_score\030\t \001(\r\022\022\n"
  "\ndire_score\030\n \001(\r\032\242\001\n\006Player\022\022\n\naccount_"
  "id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\022\r\n\005kills\030\003 \001(\r"
  "\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assists\030\005 \001(\r\022\r\n\005ite"
  "ms\030\006 \003(\r\022\023\n\013player_slot\030\007 \001(\r\022\020\n\010pro_nam"
  "e\030\010 \001(\t\022\r\n\005level\030\t \001(\r\032\256\003\n\007Tourney\022\021\n\tle"
  "ague_id\030\001 \001(\r\022\023\n\013series_type\030\010 \001(\r\022\023\n\013se"
  "ries_game\030\t \001(\r\022%\n\035weekend_tourney_tourn"
  "ament_id\030\n \001(\r\022(\n weekend_tourney_season"
  "_trophy_id\030\013 \001(\r\022 \n\030weekend_tourney_divi"
  "sion\030\014 \001(\r\022#\n\033weekend_tourney_skill_leve"
  "l\030\r \001(\r\022\027\n\017radiant_team_id\030\002 \001(\r\022\031\n\021radi"
  "ant_team_name\030\003 \001(\t\022\031\n\021radiant_team_logo"
  "\030\004 \001(\006\022\035\n\025radiant_team_logo_url\030\016 \001(\t\022\024\n"
  "\014dire_team_id\030\005 \001(\r\022\026\n\016dire_team_name\030\006 "
  "\001(\t\022\026\n\016dire_team_logo\030\007 \001(\006\022\032\n\022dire_team"
  "_logo_url\030\017 \001(\t\"@\n\023CMsgConsumableUsage\022\020"
  "\n\010item_def\030\001 \001(\r\022\027\n\017quantity_change\030\002 \001("
  "\005\"\265\001\n\030CMsgMatchConsumableUsage\022F\n\027player"
  "_consumables_used\030\001 \003(\0132%.CMsgMatchConsu"
  "mableUsage.PlayerUsage\032Q\n\013PlayerUsage\022\022\n"
  "\naccount_id\030\001 \001(\r\022.\n\020consumables_used\030\002 "
  "\003(\0132\024.CMsgConsumableUsage\"\262\001\n\032CMsgMatchE"
  "ventActionGrants\022\?\n\rplayer_grants\030\001 \003(\0132"
  "(.CMsgMatchEventActionGrants.PlayerGrant"
  "s\032S\n\014PlayerGrants\022\022\n\naccount_id\030\001 \001(\r\022/\n"
  "\017actions_granted\030\003 \003(\0132\026.CMsgPendingEven"
  "tAward\"e\n\027CMsgCustomGameWhitelist\022\017\n\007ver"
  "sion\030\001 \001(\r\022\036\n\026custom_games_whitelist\030\002 \003"
  "(\004\022\031\n\021disable_whitelist\030\003 \001(\010\"\360\001\n\036CMsgCu"
  "stomGameWhitelistForEdit\022I\n\021whitelist_en"
  "tries\030\001 \003(\0132..CMsgCustomGameWhitelistFor"
  "Edit.WhitelistEntry\032\202\001\n\016WhitelistEntry\022\026"
  "\n\016custom_game_id\030\001 \001(\004\022X\n\017whitelist_stat"
  "e\030\002 \001(\0162\032.ECustomGameWhitelistState:#CUS"
  "TOM_GAME_WHITELIST_STATE_UNKNOWN\"\240\001\n\031CMs"
  "gPlayerRecentMatchInfo\022\020\n\010match_id\030\001 \001(\004"
  "\022\021\n\ttimestamp\030\002 \001(\r\022\020\n\010duration\030\003 \001(\r\022\013\n"
  "\003win\030\004 \001(\010\022\017\n\007hero_id\030\005 \001(\r\022\r\n\005kills\030\006 \001"
  "(\r\022\016\n\006deaths\030\007 \001(\r\022\017\n\007assists\030\010 \001(\r\"5\n\025C"
  "MsgPlayerMatchRecord\022\014\n\004wins\030\001 \001(\r\022\016\n\006lo"
  "sses\030\002 \001(\r\"F\n\035CMsgPlayerRecentMatchOutco"
  "mes\022\020\n\010outcomes\030\001 \001(\r\022\023\n\013match_count\030\002 \001"
  "(\r\"A\n\030CMsgPlayerRecentCommends\022\020\n\010commen"
  "ds\030\001 \001(\r\022\023\n\013match_count\030\002 \001(\r\"\373\002\n\037CMsgPl"
  "ayerRecentAccomplishments\0227\n\017recent_outc"
  "omes\030\001 \001(\0132\036.CMsgPlayerRecentMatchOutcom"
  "es\022,\n\014total_record\030\002 \001(\0132\026.CMsgPlayerMat"
  "chRecord\022\031\n\021prediction_streak\030\003 \001(\r\022\036\n\026p"
  "lus_prediction_streak\030\004 \001(\r\0222\n\017recent_co"
  "mmends\030\005 \001(\0132\031.CMsgPlayerRecentCommends\022"
  "\035\n\025first_match_timestamp\030\006 \001(\r\022.\n\nlast_m"
  "atch\030\007 \001(\0132\032.CMsgPlayerRecentMatchInfo\0223"
  "\n\013recent_mvps\030\010 \001(\0132\036.CMsgPlayerRecentMa"
  "tchOutcomes\"\274\001\n#CMsgPlayerHeroRecentAcco"
  "mplishments\0227\n\017recent_outcomes\030\001 \001(\0132\036.C"
  "MsgPlayerRecentMatchOutcomes\022,\n\014total_re"
  "cord\030\002 \001(\0132\026.CMsgPlayerMatchRecord\022.\n\nla"
  "st_match\030\003 \001(\0132\032.CMsgPlayerRecentMatchIn"
  "fo\"\241\001\n\031CMsgRecentAccomplishments\022@\n\026play"
  "er_accomplishments\030\001 \001(\0132 .CMsgPlayerRec"
  "entAccomplishments\022B\n\024hero_accomplishmen"
  "ts\030\002 \001(\0132$.CMsgPlayerHeroRecentAccomplis"
  "hments\"M\n&CMsgRequestPlayerRecentAccompl"
  "ishments\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007hero_id\030"
  "\002 \001(\r\"W\n0CMsgServerToGCRequestPlayerRece"
  "ntAccomplishments\022\022\n\naccount_id\030\001 \001(\r\022\017\n"
  "\007hero_id\030\002 \001(\r\"\235\002\n.CMsgRequestPlayerRece"
  "ntAccomplishmentsResponse\022[\n\006result\030\001 \001("
  "\01629.CMsgRequestPlayerRecentAccomplishmen"
  "tsResponse.EResponse:\020k_eInternalError\022:"
  "\n\026player_accomplishments\030\002 \001(\0132\032.CMsgRec"
  "entAccomplishments\"R\n\tEResponse\022\024\n\020k_eIn"
  "ternalError\020\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooB"
  "usy\020\002\022\017\n\013k_eDisabled\020\003\"\261\002\n8CMsgServerToG"
  "CRequestPlayerRecentAccomplishmentsRespo"
  "nse\022e\n\006result\030\001 \001(\0162C.CMsgServerToGCRequ"
  "estPlayerRecentAccomplishmentsResponse.E"
  "Response:\020k_eInternalError\022:\n\026player_acc"
  "omplishments\030\002 \001(\0132\032.CMsgRecentAccomplis"
  "hments\"R\n\tEResponse\022\024\n\020k_eInternalError\020"
  "\000\022\016\n\nk_eSuccess\020\001\022\016\n\nk_eTooBusy\020\002\022\017\n\013k_e"
  "Disabled\020\003\"Q\n\030CMsgArcanaVoteMatchVotes\022\020"
  "\n\010match_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\022\022\n\nvot"
  "e_count\030\003 \001(\r\"\235\001\n(CMsgGCtoGCAssociatedEx"
  "ploiterAccountInfo\022\022\n\naccount_id\030\001 \001(\r\022\035"
  "\n\025num_matches_to_search\030\002 \001(\r\022\036\n\026min_sha"
  "red_match_count\030\003 \001(\r\022\036\n\026num_additional_"
  "players\030\004 \001(\r\"\264\002\n0CMsgGCtoGCAssociatedEx"
  "ploiterAccountInfoResponse\022K\n\010accounts\030\001"
  " \003(\01329.CMsgGCtoGCAssociatedExploiterAcco"
  "untInfoResponse.Account\032\262\001\n\007Account\022\022\n\na"
  "ccount_id\030\001 \001(\r\022\032\n\022num_common_matches\030\002 "
  "\001(\r\022\035\n\025earliest_common_match\030\003 \001(\r\022\033\n\023la"
  "test_common_match\030\004 \001(\r\022\022\n\ngeneration\030\005 "
  "\001(\r\022\017\n\007persona\030\006 \001(\t\022\026\n\016already_banned\030\007"
  " \001(\010\"\235\002\n\020CMsgPullTabsData\022%\n\005slots\030\001 \003(\013"
  "2\026.CMsgPullTabsData.Slot\022+\n\010jackpots\030\002 \003"
  "(\0132\031.CMsgPullTabsData.Jackpot\022\022\n\nlast_bo"
  "ard\030\003 \001(\r\032`\n\004Slot\022\020\n\010event_id\030\001 \001(\r\022\020\n\010b"
  "oard_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\021\n\taction"
  "_id\030\004 \001(\r\022\020\n\010redeemed\030\005 \001(\010\032\?\n\007Jackpot\022\020"
  "\n\010board_id\030\001 \001(\r\022\021\n\taction_id\030\002 \001(\r\022\017\n\007h"
  "ero_id\030\003 \001(\r\"\273\002\n\022CMsgUnderDraftData\0222\n\013b"
  "ench_slots\030\001 \003(\0132\035.CMsgUnderDraftData.Be"
  "nchSlot\0220\n\nshop_slots\030\002 \003(\0132\034.CMsgUnderD"
  "raftData.ShopSlot\022\014\n\004gold\030\003 \001(\r\022\022\n\ntotal"
  "_gold\030\004 \001(\r\022\026\n\016not_restorable\030\005 \001(\010\032<\n\tB"
  "enchSlot\022\017\n\007slot_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001"
  "(\r\022\r\n\005stars\030\003 \001(\r\032G\n\010ShopSlot\022\017\n\007slot_id"
  "\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\022\031\n\021is_special_re"
  "ward\030\003 \001(\010\"F\n\023CMsgPlayerTitleData\022\r\n\005tit"
  "le\030\001 \003(\r\022\020\n\010event_id\030\002 \003(\r\022\016\n\006active\030\003 \001"
  "(\r\"\350\001\n\026CMsgDOTATriviaQuestion\022\023\n\013questio"
  "n_id\030\001 \001(\r\022Y\n\010category\030\002 \001(\0162\034.EDOTATriv"
  "iaQuestionCategory:)k_EDOTATriviaQuestio"
  "nCategory_AbilityIcon\022\021\n\ttimestamp\030\003 \001(\r"
  "\022\026\n\016question_value\030\004 \001(\t\022\025\n\ranswer_value"
  "s\030\005 \003(\t\022\034\n\024correct_answer_index\030\006 \001(\r\"W\n"
  "$CMsgDOTATriviaQuestionAnswersSummary\022\031\n"
  "\021summary_available\030\001 \001(\010\022\024\n\014picked_count"
  "\030\002 \003(\r\"\177\n\031CMsgGameDataSpecialValues\022\014\n\004n"
  "ame\030\001 \001(\t\022\024\n\014values_float\030\002 \003(\002\022\022\n\nvalue"
  "s_int\030\003 \003(\005\022\025\n\ris_percentage\030\004 \001(\010\022\023\n\013he"
  "ading_loc\030\005 \001(\t\"\305\006\n\031CMsgGameDataAbilityO"
  "rItem\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010name_"
  "loc\030\005 \001(\t\022\020\n\010desc_loc\030\006 \001(\t\022\020\n\010lore_loc\030"
  "\007 \001(\t\022\021\n\tnotes_loc\030\010 \003(\t\022\021\n\tshard_loc\030\t "
  "\001(\t\022\023\n\013scepter_loc\030\n \001(\t\022\014\n\004type\030\024 \001(\r\022\020"
  "\n\010behavior\030\025 \001(\004\022\023\n\013target_team\030\026 \001(\r\022\023\n"
  "\013target_type\030\027 \001(\r\022\r\n\005flags\030\030 \001(\r\022\016\n\006dam"
  "age\030\031 \001(\r\022\020\n\010immunity\030\032 \001(\r\022\023\n\013dispellab"
  "le\030\033 \001(\r\022\021\n\tmax_level\030\034 \001(\r\022\023\n\013cast_rang"
  "es\030\036 \003(\r\022\023\n\013cast_points\030\037 \003(\002\022\025\n\rchannel"
  "_times\030  \003(\002\022\021\n\tcooldowns\030! \003(\002\022\021\n\tdurat"
  "ions\030\" \003(\002\022\017\n\007damages\030# \003(\r\022\022\n\nmana_cost"
  "s\030$ \003(\r\022\022\n\ngold_costs\030% \003(\r\0222\n\016special_v"
  "alues\030( \003(\0132\032.CMsgGameDataSpecialValues\022"
  "\017\n\007is_item\0302 \001(\010\022\033\n\023ability_has_scepter\030"
  "< \001(\010\022\031\n\021ability_has_shard\030= \001(\010\022%\n\035abil"
  "ity_is_granted_by_scepter\030> \001(\010\022#\n\033abili"
  "ty_is_granted_by_shard\030\? \001(\010\022\021\n\titem_cos"
  "t\030F \001(\r\022\034\n\024item_initial_charges\030G \001(\r\022\031\n"
  "\021item_neutral_tier\030H \001(\r\022\026\n\016item_stock_m"
  "ax\030I \001(\r\022\027\n\017item_stock_time\030J \001(\002\022\024\n\014ite"
  "m_quality\030U \001(\r\"\360\005\n\020CMsgGameDataHero\022\n\n\002"
  "id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010order_id\030\003 \001(\r"
  "\022\020\n\010name_loc\030\005 \001(\t\022\017\n\007bio_loc\030\006 \001(\t\022\020\n\010h"
  "ype_loc\030\007 \001(\t\022\024\n\014npe_desc_loc\030\010 \001(\t\022\020\n\010s"
  "tr_base\030\n \001(\r\022\020\n\010str_gain\030\013 \001(\002\022\020\n\010agi_b"
  "ase\030\014 \001(\r\022\020\n\010agi_gain\030\r \001(\002\022\020\n\010int_base\030"
  "\016 \001(\r\022\020\n\010int_gain\030\017 \001(\002\022\024\n\014primary_attr\030"
  "\024 \001(\r\022\022\n\ncomplexity\030\025 \001(\r\022\031\n\021attack_capa"
  "bility\030\026 \001(\r\022\023\n\013role_levels\030\027 \003(\r\022\022\n\ndam"
  "age_min\030\030 \001(\r\022\022\n\ndamage_max\030\031 \001(\r\022\023\n\013att"
  "ack_rate\030\032 \001(\002\022\024\n\014attack_range\030\033 \001(\r\022\030\n\020"
  "projectile_speed\030\034 \001(\r\022\r\n\005armor\030\035 \001(\002\022\030\n"
  "\020magic_resistance\030\036 \001(\r\022\026\n\016movement_spee"
  "d\030\037 \001(\r\022\021\n\tturn_rate\030  \001(\002\022\027\n\017sight_rang"
  "e_day\030! \001(\r\022\031\n\021sight_range_night\030\" \001(\r\022\022"
  "\n\nmax_health\030# \001(\r\022\024\n\014health_regen\030$ \001(\002"
  "\022\020\n\010max_mana\030% \001(\r\022\022\n\nmana_regen\030& \001(\002\022-"
  "\n\tabilities\030( \003(\0132\032.CMsgGameDataAbilityO"
  "rItem\022+\n\007talents\030) \003(\0132\032.CMsgGameDataAbi"
  "lityOrItem\"F\n\025CMsgGameDataAbilities\022-\n\ta"
  "bilities\030\001 \003(\0132\032.CMsgGameDataAbilityOrIt"
  "em\">\n\021CMsgGameDataItems\022)\n\005items\030\001 \003(\0132\032"
  ".CMsgGameDataAbilityOrItem\"7\n\022CMsgGameDa"
  "taHeroes\022!\n\006heroes\030\001 \003(\0132\021.CMsgGameDataH"
  "ero\"\302\001\n\024CMsgGameDataHeroList\022.\n\006heroes\030\001"
  " \003(\0132\036.CMsgGameDataHeroList.HeroInfo\032z\n\010"
  "HeroInfo\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010na"
  "me_loc\030\003 \001(\t\022\030\n\020name_english_loc\030\004 \001(\t\022\024"
  "\n\014primary_attr\030\005 \001(\r\022\022\n\ncomplexity\030\006 \001(\r"
  "\"\326\001\n\033CMsgGameDataItemAbilityList\022C\n\ritem"
  "abilities\030\001 \003(\0132,.CMsgGameDataItemAbilit"
  "yList.ItemAbilityInfo\032r\n\017ItemAbilityInfo"
  "\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010name_loc\030\003"
  " \001(\t\022\030\n\020name_english_loc\030\004 \001(\t\022\031\n\021neutra"
  "l_item_tier\030\005 \001(\005*U\n\021ESpecialPingValue\022\037"
  "\n\032k_ESpecialPingValue_NoData\020\376\177\022\037\n\032k_ESp"
  "ecialPingValue_Failed\020\377\177*\206\005\n\022EDOTAGCSess"
  "ionNeed\022 \n\034k_EDOTAGCSessionNeed_Unknown\020"
  "\000\022,\n(k_EDOTAGCSessionNeed_UserNoSessionN"
  "eeded\020d\022)\n%k_EDOTAGCSessionNeed_UserInOn"
  "lineGame\020e\022(\n$k_EDOTAGCSessionNeed_UserI"
  "nLocalGame\020f\022-\n)k_EDOTAGCSessionNeed_Use"
  "rInUIWasConnected\020g\022/\n+k_EDOTAGCSessionN"
  "eed_UserInUINeverConnected\020h\022&\n\"k_EDOTAG"
  "CSessionNeed_UserTutorials\020i\0221\n-k_EDOTAG"
  "CSessionNeed_UserInUIWasConnectedIdle\020j\022"
  "3\n/k_EDOTAGCSessionNeed_UserInUINeverCon"
  "nectedIdle\020k\022*\n%k_EDOTAGCSessionNeed_Gam"
  "eServerOnline\020\310\001\022)\n$k_EDOTAGCSessionNeed"
  "_GameServerLocal\020\311\001\022(\n#k_EDOTAGCSessionN"
  "eed_GameServerIdle\020\312\001\022)\n$k_EDOTAGCSessio"
  "nNeed_GameServerRelay\020\313\001\022/\n*k_EDOTAGCSes"
  "sionNeed_GameServerLocalUpload\020\314\001*\366\001\n\025DO"
  "TA_TournamentEvents\022\022\n\016TE_FIRST_BLOOD\020\000\022"
  "\017\n\013TE_GAME_END\020\001\022\021\n\rTE_MULTI_KILL\020\002\022\020\n\014T"
  "E_HERO_DENY\020\003\022\021\n\rTE_AEGIS_DENY\020\004\022\023\n\017TE_A"
  "EGIS_STOLEN\020\005\022\016\n\nTE_GODLIKE\020\006\022\023\n\017TE_COUR"
  "IER_KILL\020\007\022\017\n\013TE_ECHOSLAM\020\010\022\r\n\tTE_RAPIER"
  "\020\t\022\023\n\017TE_EARLY_ROSHAN\020\n\022\021\n\rTE_BLACK_HOLE"
  "\020\013*\215\003\n\027EBroadcastTimelineEvent\022(\n$EBroad"
  "castTimelineEvent_MatchStarted\020\001\022,\n(EBro"
  "adcastTimelineEvent_GameStateChanged\020\002\022&"
  "\n\"EBroadcastTimelineEvent_TowerDeath\020\003\022)"
  "\n%EBroadcastTimelineEvent_BarracksDeath\020"
  "\004\022(\n$EBroadcastTimelineEvent_AncientDeat"
  "h\020\005\022\'\n#EBroadcastTimelineEvent_RoshanDea"
  "th\020\006\022%\n!EBroadcastTimelineEvent_HeroDeat"
  "h\020\007\022%\n!EBroadcastTimelineEvent_TeamFight"
  "\020\010\022&\n\"EBroadcastTimelineEvent_FirstBlood"
  "\020\t*\230\001\n\031ECustomGameWhitelistState\022\'\n#CUST"
  "OM_GAME_WHITELIST_STATE_UNKNOWN\020\000\022(\n$CUS"
  "TOM_GAME_WHITELIST_STATE_APPROVED\020\001\022(\n$C"
  "USTOM_GAME_WHITELIST_STATE_REJECTED\020\002*\232\007"
  "\n\033EDOTATriviaQuestionCategory\022-\n)k_EDOTA"
  "TriviaQuestionCategory_AbilityIcon\020\000\0221\n-"
  "k_EDOTATriviaQuestionCategory_AbilityCoo"
  "ldown\020\001\0220\n,k_EDOTATriviaQuestionCategory"
  "_HeroAttributes\020\002\0223\n/k_EDOTATriviaQuesti"
  "onCategory_HeroMovementSpeed\020\003\022,\n(k_EDOT"
  "ATriviaQuestionCategory_TalentTree\020\004\022+\n\'"
  "k_EDOTATriviaQuestionCategory_HeroStats\020"
  "\005\022+\n\'k_EDOTATriviaQuestionCategory_ItemP"
  "rice\020\006\022.\n*k_EDOTATriviaQuestionCategory_"
  "AbilitySound\020\007\022/\n+k_EDOTATriviaQuestionC"
  "ategory_InvokerSpells\020\010\0221\n-k_EDOTATrivia"
  "QuestionCategory_AbilityManaCost\020\t\0221\n-k_"
  "EDOTATriviaQuestionCategory_HeroAttackSo"
  "und\020\n\022-\n)k_EDOTATriviaQuestionCategory_A"
  "bilityName\020\013\0220\n,k_EDOTATriviaQuestionCat"
  "egory_ItemComponents\020\014\022*\n&k_EDOTATriviaQ"
  "uestionCategory_ItemLore\020\r\022.\n*k_EDOTATri"
  "viaQuestionCategory_ItemPassives\020\016\0226\n2k_"
  "EDOTATriviaQuestionCategory_STATIC_QUEST"
  "IONS_END\020\017\0229\n5k_EDOTATriviaQuestionCateg"
  "ory_DYNAMIC_QUESTIONS_START\020c\0223\n/k_EDOTA"
  "TriviaQuestionCategory_Dynamic_ItemBuild"
  "\020d*\251\001\n\024EOverwatchConviction\022\037\n\033k_EOverwa"
  "tchConviction_None\020\000\022$\n k_EOverwatchConv"
  "iction_NotGuilty\020\001\022\'\n#k_EOverwatchConvic"
  "tion_GuiltUnclear\020\002\022!\n\035k_EOverwatchConvi"
  "ction_Guilty\020\003*t\n\020EHeroRelicRarity\022&\n\031HE"
  "RO_RELIC_RARITY_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\034\n\030HE"
  "RO_RELIC_RARITY_COMMON\020\000\022\032\n\026HERO_RELIC_R"
  "ARITY_RARE\020\001B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fcommon_2eproto_deps[3] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
  &::descriptor_table_gcsdk_5fgcmessages_2eproto,
  &::descriptor_table_steammessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_2eproto = {
  false, false, 35579, descriptor_table_protodef_dota_5fgcmessages_5fcommon_2eproto, "dota_gcmessages_common.proto", 
  &descriptor_table_dota_5fgcmessages_5fcommon_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_2eproto_deps, 3, 162,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fcommon_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return descriptor_table_dota_5fgcmessages_5fcommon_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[0];
}
bool CMsgDOTAProfileCard_EStatID_IsValid(int value) {
  switch (value) {
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Wins;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Commends;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesPlayed;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_FirstMatchDate;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PreviousSeasonRank;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesMVP;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MIN;
constexpr CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MAX;
constexpr int CMsgDOTAProfileCard::EStatID_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[1];
}
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Success;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Dropped;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_NotFound;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_CantReroll;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_ServerError;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MIN;
constexpr CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MAX;
constexpr int CMsgGCRerollPlayerChallengeResponse::EResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[2];
}
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::CreepGoldEarned;
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::KillGoldEarned;
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::DeathAndBuybackGoldLost;
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::XPEarned;
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MIN;
constexpr CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MAX;
constexpr int CMsgDOTARealtimeGameStats_GraphData::eStat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[3];
}
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::BotLane;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::MidLane;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::TopLane;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Jungle;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Ancients;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Other;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MIN;
constexpr CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MAX;
constexpr int CMsgDOTARealtimeGameStats_GraphData::eLocation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[4];
}
bool CMsgDOTASeasonRewards_ERewardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::EconItem;
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheel;
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::AbilityEffect;
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::Other;
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheelPointsBased;
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MIN;
constexpr CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MAX;
constexpr int CMsgDOTASeasonRewards::ERewardType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_ERawValueType_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[5];
}
bool CMsgInGamePrediction_ERawValueType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction::Number;
constexpr CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction::Time;
constexpr CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction::ERawValueType_t_MIN;
constexpr CMsgInGamePrediction_ERawValueType_t CMsgInGamePrediction::ERawValueType_t_MAX;
constexpr int CMsgInGamePrediction::ERawValueType_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_EPredictionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[6];
}
bool CMsgInGamePrediction_EPredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::Generic;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::Hero;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::Team;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::Player;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::Special;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::YesNo;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::QualifiersTeam;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::EPredictionType_MIN;
constexpr CMsgInGamePrediction_EPredictionType CMsgInGamePrediction::EPredictionType_MAX;
constexpr int CMsgInGamePrediction::EPredictionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_EResolutionType_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[7];
}
bool CMsgInGamePrediction_EResolutionType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::InvalidQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::FirstToPassQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::LastToPassQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::LastRemainingQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::MaxToPassQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::MinToPassQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::SumQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::MaxTeamSumToPassQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::MinTeamSumToPassQuery;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::EResolutionType_t_MIN;
constexpr CMsgInGamePrediction_EResolutionType_t CMsgInGamePrediction::EResolutionType_t_MAX;
constexpr int CMsgInGamePrediction::EResolutionType_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgInGamePrediction_ERandomSelectionGroup_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[8];
}
bool CMsgInGamePrediction_ERandomSelectionGroup_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::EarlyGame;
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::MidGame;
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::LateGame;
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::Count;
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::ERandomSelectionGroup_t_MIN;
constexpr CMsgInGamePrediction_ERandomSelectionGroup_t CMsgInGamePrediction::ERandomSelectionGroup_t_MAX;
constexpr int CMsgInGamePrediction::ERandomSelectionGroup_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTASeasonPredictions_Prediction_EPredictionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[9];
}
bool CMsgDOTASeasonPredictions_Prediction_EPredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::Generic;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::Hero;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::Team;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::Player;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::Special;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::YesNo;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::QualifiersTeam;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::EPredictionType_MIN;
constexpr CMsgDOTASeasonPredictions_Prediction_EPredictionType CMsgDOTASeasonPredictions_Prediction::EPredictionType_MAX;
constexpr int CMsgDOTASeasonPredictions_Prediction::EPredictionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTASeasonPredictions_Prediction_EAnswerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[10];
}
bool CMsgDOTASeasonPredictions_Prediction_EAnswerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::SingleInt;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::SingleFloat;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::MultipleInt;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::MultipleFloat;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::AnswerTeam;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::SingleTime;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::MultipleTime;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::NoAnswer;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::EAnswerType_MIN;
constexpr CMsgDOTASeasonPredictions_Prediction_EAnswerType CMsgDOTASeasonPredictions_Prediction::EAnswerType_MAX;
constexpr int CMsgDOTASeasonPredictions_Prediction::EAnswerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAMatch_Player_HeroDamageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[11];
}
bool CMsgDOTAMatch_Player_HeroDamageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player::HERO_DAMAGE_PHYSICAL;
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player::HERO_DAMAGE_MAGICAL;
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player::HERO_DAMAGE_PURE;
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player::HeroDamageType_MIN;
constexpr CMsgDOTAMatch_Player_HeroDamageType CMsgDOTAMatch_Player::HeroDamageType_MAX;
constexpr int CMsgDOTAMatch_Player::HeroDamageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[12];
}
bool CMsgDOTAMatch_ReplayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_AVAILABLE;
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_NOT_RECORDED;
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_EXPIRED;
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MIN;
constexpr CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MAX;
constexpr int CMsgDOTAMatch::ReplayState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[13];
}
bool CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgRequestPlayerRecentAccomplishmentsResponse::k_eInternalError;
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgRequestPlayerRecentAccomplishmentsResponse::k_eSuccess;
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgRequestPlayerRecentAccomplishmentsResponse::k_eTooBusy;
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgRequestPlayerRecentAccomplishmentsResponse::k_eDisabled;
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgRequestPlayerRecentAccomplishmentsResponse::EResponse_MIN;
constexpr CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgRequestPlayerRecentAccomplishmentsResponse::EResponse_MAX;
constexpr int CMsgRequestPlayerRecentAccomplishmentsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[14];
}
bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::k_eInternalError;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::k_eSuccess;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::k_eTooBusy;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::k_eDisabled;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::EResponse_MIN;
constexpr CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::EResponse_MAX;
constexpr int CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::EResponse_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESpecialPingValue_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[15];
}
bool ESpecialPingValue_IsValid(int value) {
  switch (value) {
    case 16382:
    case 16383:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTAGCSessionNeed_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[16];
}
bool EDOTAGCSessionNeed_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_TournamentEvents_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[17];
}
bool DOTA_TournamentEvents_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBroadcastTimelineEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[18];
}
bool EBroadcastTimelineEvent_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECustomGameWhitelistState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[19];
}
bool ECustomGameWhitelistState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDOTATriviaQuestionCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[20];
}
bool EDOTATriviaQuestionCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 99:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOverwatchConviction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[21];
}
bool EOverwatchConviction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EHeroRelicRarity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_2eproto[22];
}
bool EHeroRelicRarity_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CSODOTAGameAccountClient_RoleHandicap::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAGameAccountClient_RoleHandicap>()._has_bits_);
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handicap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSODOTAGameAccountClient_RoleHandicap::CSODOTAGameAccountClient_RoleHandicap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAGameAccountClient.RoleHandicap)
}
CSODOTAGameAccountClient_RoleHandicap::CSODOTAGameAccountClient_RoleHandicap(const CSODOTAGameAccountClient_RoleHandicap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&role_, &from.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&handicap_) -
    reinterpret_cast<char*>(&role_)) + sizeof(handicap_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAGameAccountClient.RoleHandicap)
}

void CSODOTAGameAccountClient_RoleHandicap::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&role_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&handicap_) -
    reinterpret_cast<char*>(&role_)) + sizeof(handicap_));
}

CSODOTAGameAccountClient_RoleHandicap::~CSODOTAGameAccountClient_RoleHandicap() {
  // @@protoc_insertion_point(destructor:CSODOTAGameAccountClient.RoleHandicap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAGameAccountClient_RoleHandicap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSODOTAGameAccountClient_RoleHandicap::ArenaDtor(void* object) {
  CSODOTAGameAccountClient_RoleHandicap* _this = reinterpret_cast< CSODOTAGameAccountClient_RoleHandicap* >(object);
  (void)_this;
}
void CSODOTAGameAccountClient_RoleHandicap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAGameAccountClient_RoleHandicap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAGameAccountClient_RoleHandicap::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAGameAccountClient.RoleHandicap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handicap_) -
        reinterpret_cast<char*>(&role_)) + sizeof(handicap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAGameAccountClient_RoleHandicap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_role(&has_bits);
          role_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float handicap = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_handicap(&has_bits);
          handicap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAGameAccountClient_RoleHandicap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAGameAccountClient.RoleHandicap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 role = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_role(), target);
  }

  // optional float handicap = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_handicap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAGameAccountClient.RoleHandicap)
  return target;
}

size_t CSODOTAGameAccountClient_RoleHandicap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAGameAccountClient.RoleHandicap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 role = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_role());
    }

    // optional float handicap = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAGameAccountClient_RoleHandicap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAGameAccountClient.RoleHandicap)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAGameAccountClient_RoleHandicap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAGameAccountClient_RoleHandicap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAGameAccountClient.RoleHandicap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAGameAccountClient.RoleHandicap)
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient_RoleHandicap::MergeFrom(const CSODOTAGameAccountClient_RoleHandicap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAGameAccountClient.RoleHandicap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000002u) {
      handicap_ = from.handicap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAGameAccountClient_RoleHandicap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAGameAccountClient.RoleHandicap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient_RoleHandicap::CopyFrom(const CSODOTAGameAccountClient_RoleHandicap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAGameAccountClient.RoleHandicap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient_RoleHandicap::IsInitialized() const {
  return true;
}

void CSODOTAGameAccountClient_RoleHandicap::InternalSwap(CSODOTAGameAccountClient_RoleHandicap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAGameAccountClient_RoleHandicap, handicap_)
      + sizeof(CSODOTAGameAccountClient_RoleHandicap::handicap_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAGameAccountClient_RoleHandicap, role_)>(
          reinterpret_cast<char*>(&role_),
          reinterpret_cast<char*>(&other->role_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAGameAccountClient_RoleHandicap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAGameAccountClient::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAGameAccountClient>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_initial_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_leaver_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_secondary_leaver_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_low_priority_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_prevent_text_chat_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_prevent_voice_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_prevent_public_text_chat_until_date(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_prevent_new_player_chat_until_date(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_last_abandoned_game_date(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_last_secondary_abandoned_game_date(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_leaver_penalty_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_completed_game_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_account_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_account_disabled_count(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_match_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_match_disabled_count(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_shutdownlawterminatetimestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_low_priority_games_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_competitive_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_competitive_calibration_games_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_solo_competitive_2019_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_solo_competitive_2019_calibration_games_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_recruitment_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_has_new_notifications(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_is_league_admin(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_casual_games_played(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_solo_competitive_games_played(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_party_competitive_games_played(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_casual_1v1_games_played(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_curr_all_hero_challenge_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_play_time_points(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_play_time_level(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_player_behavior_seq_num_last_report(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_player_behavior_score_last_report(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_player_behavior_report_old_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tourney_recent_participation_date(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_anchored_phone_number_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_ranked_matchmaking_ban_until_date(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_recent_game_time_1(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_recent_game_time_2(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_recent_game_time_3(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_favorite_team_packed(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_recent_report_time(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_custom_game_disabled_until_date(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_recent_win_time_1(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_recent_win_time_2(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_recent_win_time_3(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_coach_rating(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_queue_points(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_gauntlet_tier(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_gauntlet_wins(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_gauntlet_losses(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_gauntlet_recent_time(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_event_mode_recent_time(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_mmr_recalibration_time(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
};

CSODOTAGameAccountClient::CSODOTAGameAccountClient(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  role_handicaps_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAGameAccountClient)
}
CSODOTAGameAccountClient::CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      role_handicaps_(from.role_handicaps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&prevent_new_player_chat_until_date_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(prevent_new_player_chat_until_date_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&prevent_new_player_chat_until_date_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(prevent_new_player_chat_until_date_));
}

CSODOTAGameAccountClient::~CSODOTAGameAccountClient() {
  // @@protoc_insertion_point(destructor:CSODOTAGameAccountClient)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAGameAccountClient::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSODOTAGameAccountClient::ArenaDtor(void* object) {
  CSODOTAGameAccountClient* _this = reinterpret_cast< CSODOTAGameAccountClient* >(object);
  (void)_this;
}
void CSODOTAGameAccountClient::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAGameAccountClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAGameAccountClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_handicaps_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_priority_until_date_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(low_priority_until_date_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&prevent_text_chat_until_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_disabled_until_date_) -
        reinterpret_cast<char*>(&prevent_text_chat_until_date_)) + sizeof(match_disabled_until_date_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&match_disabled_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recruitment_level_) -
        reinterpret_cast<char*>(&match_disabled_count_)) + sizeof(recruitment_level_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&secondary_leaver_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_behavior_report_old_data_) -
        reinterpret_cast<char*>(&secondary_leaver_count_)) + sizeof(player_behavior_report_old_data_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&casual_1v1_games_played_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tourney_skill_level_) -
        reinterpret_cast<char*>(&casual_1v1_games_played_)) + sizeof(tourney_skill_level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tourney_recent_participation_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favorite_team_packed_) -
        reinterpret_cast<char*>(&tourney_recent_participation_date_)) + sizeof(favorite_team_packed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&recent_report_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gauntlet_tier_) -
        reinterpret_cast<char*>(&recent_report_time_)) + sizeof(gauntlet_tier_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&gauntlet_wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&prevent_new_player_chat_until_date_) -
        reinterpret_cast<char*>(&gauntlet_wins_)) + sizeof(prevent_new_player_chat_until_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAGameAccountClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&_has_bits_);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wins(&_has_bits_);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_losses(&_has_bits_);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_xp(&_has_bits_);
          xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 initial_skill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_initial_skill(&_has_bits_);
          initial_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaver_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_leaver_count(&_has_bits_);
          leaver_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 low_priority_until_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_low_priority_until_date(&_has_bits_);
          low_priority_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prevent_text_chat_until_date = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_prevent_text_chat_until_date(&_has_bits_);
          prevent_text_chat_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prevent_voice_until_date = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_prevent_voice_until_date(&_has_bits_);
          prevent_voice_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_abandoned_game_date = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_last_abandoned_game_date(&_has_bits_);
          last_abandoned_game_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaver_penalty_count = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_leaver_penalty_count(&_has_bits_);
          leaver_penalty_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 completed_game_streak = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_completed_game_streak(&_has_bits_);
          completed_game_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_disabled_until_date = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_account_disabled_until_date(&_has_bits_);
          account_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_disabled_count = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_account_disabled_count(&_has_bits_);
          account_disabled_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_disabled_until_date = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_match_disabled_until_date(&_has_bits_);
          match_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_disabled_count = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_match_disabled_count(&_has_bits_);
          match_disabled_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_shutdownlawterminatetimestamp(&_has_bits_);
          shutdownlawterminatetimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 low_priority_games_remaining = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_low_priority_games_remaining(&_has_bits_);
          low_priority_games_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 competitive_rank = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_competitive_rank(&_has_bits_);
          competitive_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 competitive_calibration_games_remaining = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_competitive_calibration_games_remaining(&_has_bits_);
          competitive_calibration_games_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 solo_competitive_2019_rank = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_solo_competitive_2019_rank(&_has_bits_);
          solo_competitive_2019_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 solo_competitive_2019_calibration_games_remaining = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_solo_competitive_2019_calibration_games_remaining(&_has_bits_);
          solo_competitive_2019_calibration_games_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recruitment_level = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_recruitment_level(&_has_bits_);
          recruitment_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_new_notifications = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_has_new_notifications(&_has_bits_);
          has_new_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_league_admin = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_league_admin(&_has_bits_);
          is_league_admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 secondary_leaver_count = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_secondary_leaver_count(&_has_bits_);
          secondary_leaver_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_last_secondary_abandoned_game_date(&_has_bits_);
          last_secondary_abandoned_game_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 casual_games_played = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_casual_games_played(&_has_bits_);
          casual_games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 solo_competitive_games_played = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_solo_competitive_games_played(&_has_bits_);
          solo_competitive_games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 party_competitive_games_played = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_party_competitive_games_played(&_has_bits_);
          party_competitive_games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 casual_1v1_games_played = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_casual_1v1_games_played(&_has_bits_);
          casual_1v1_games_played_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 curr_all_hero_challenge_id = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_curr_all_hero_challenge_id(&_has_bits_);
          curr_all_hero_challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 play_time_points = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_play_time_points(&_has_bits_);
          play_time_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_flags = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_account_flags(&_has_bits_);
          account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 play_time_level = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_play_time_level(&_has_bits_);
          play_time_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_behavior_seq_num_last_report = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_player_behavior_seq_num_last_report(&_has_bits_);
          player_behavior_seq_num_last_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_behavior_score_last_report = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_player_behavior_score_last_report(&_has_bits_);
          player_behavior_score_last_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool player_behavior_report_old_data = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_player_behavior_report_old_data(&_has_bits_);
          player_behavior_report_old_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_skill_level = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tourney_skill_level(&_has_bits_);
          tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tourney_recent_participation_date = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_tourney_recent_participation_date(&_has_bits_);
          tourney_recent_participation_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prevent_public_text_chat_until_date = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_prevent_public_text_chat_until_date(&_has_bits_);
          prevent_public_text_chat_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 anchored_phone_number_id = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_anchored_phone_number_id(&_has_bits_);
          anchored_phone_number_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ranked_matchmaking_ban_until_date = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ranked_matchmaking_ban_until_date(&_has_bits_);
          ranked_matchmaking_ban_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_game_time_1 = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_recent_game_time_1(&_has_bits_);
          recent_game_time_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_game_time_2 = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_recent_game_time_2(&_has_bits_);
          recent_game_time_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_game_time_3 = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_recent_game_time_3(&_has_bits_);
          recent_game_time_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 favorite_team_packed = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_favorite_team_packed(&_has_bits_);
          favorite_team_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_report_time = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_recent_report_time(&_has_bits_);
          recent_report_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_game_disabled_until_date = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_custom_game_disabled_until_date(&_has_bits_);
          custom_game_disabled_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_win_time_1 = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_recent_win_time_1(&_has_bits_);
          recent_win_time_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_win_time_2 = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_recent_win_time_2(&_has_bits_);
          recent_win_time_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 recent_win_time_3 = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_recent_win_time_3(&_has_bits_);
          recent_win_time_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coach_rating = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_coach_rating(&_has_bits_);
          coach_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 queue_points = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_queue_points(&_has_bits_);
          queue_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSODOTAGameAccountClient.RoleHandicap role_handicaps = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_role_handicaps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<922>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_tier = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_gauntlet_tier(&_has_bits_);
          gauntlet_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_wins = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_gauntlet_wins(&_has_bits_);
          gauntlet_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_losses = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_gauntlet_losses(&_has_bits_);
          gauntlet_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_recent_time = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_gauntlet_recent_time(&_has_bits_);
          gauntlet_recent_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_mode_recent_time = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_event_mode_recent_time(&_has_bits_);
          event_mode_recent_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mmr_recalibration_time = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_mmr_recalibration_time(&_has_bits_);
          mmr_recalibration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prevent_new_player_chat_until_date = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_prevent_new_player_chat_until_date(&_has_bits_);
          prevent_new_player_chat_until_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAGameAccountClient::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAGameAccountClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wins(), target);
  }

  // optional uint32 losses = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_losses(), target);
  }

  // optional uint32 xp = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_xp(), target);
  }

  // optional uint32 level = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_level(), target);
  }

  // optional uint32 initial_skill = 14;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_initial_skill(), target);
  }

  // optional uint32 leaver_count = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_leaver_count(), target);
  }

  // optional uint32 low_priority_until_date = 18;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_low_priority_until_date(), target);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_prevent_text_chat_until_date(), target);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_prevent_voice_until_date(), target);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_last_abandoned_game_date(), target);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_leaver_penalty_count(), target);
  }

  // optional uint32 completed_game_streak = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_completed_game_streak(), target);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_account_disabled_until_date(), target);
  }

  // optional uint32 account_disabled_count = 39;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_account_disabled_count(), target);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_count = 42;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_match_disabled_count(), target);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(47, this->_internal_shutdownlawterminatetimestamp(), target);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_low_priority_games_remaining(), target);
  }

  // optional uint32 competitive_rank = 49;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_competitive_rank(), target);
  }

  // optional uint32 competitive_calibration_games_remaining = 51;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_competitive_calibration_games_remaining(), target);
  }

  // optional uint32 solo_competitive_2019_rank = 52;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_solo_competitive_2019_rank(), target);
  }

  // optional uint32 solo_competitive_2019_calibration_games_remaining = 54;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_solo_competitive_2019_calibration_games_remaining(), target);
  }

  // optional uint32 recruitment_level = 55;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_recruitment_level(), target);
  }

  // optional bool has_new_notifications = 56;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_has_new_notifications(), target);
  }

  // optional bool is_league_admin = 57;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_is_league_admin(), target);
  }

  // optional uint32 secondary_leaver_count = 58;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_secondary_leaver_count(), target);
  }

  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_last_secondary_abandoned_game_date(), target);
  }

  // optional uint32 casual_games_played = 60;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_casual_games_played(), target);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_solo_competitive_games_played(), target);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_party_competitive_games_played(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 casual_1v1_games_played = 65;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(65, this->_internal_casual_1v1_games_played(), target);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(67, this->_internal_curr_all_hero_challenge_id(), target);
  }

  // optional uint32 play_time_points = 68;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(68, this->_internal_play_time_points(), target);
  }

  // optional uint32 account_flags = 69;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(69, this->_internal_account_flags(), target);
  }

  // optional uint32 play_time_level = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_play_time_level(), target);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_player_behavior_seq_num_last_report(), target);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(72, this->_internal_player_behavior_score_last_report(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool player_behavior_report_old_data = 73;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(73, this->_internal_player_behavior_report_old_data(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 tourney_skill_level = 74;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_tourney_skill_level(), target);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(85, this->_internal_tourney_recent_participation_date(), target);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(86, this->_internal_prevent_public_text_chat_until_date(), target);
  }

  // optional uint64 anchored_phone_number_id = 88;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(88, this->_internal_anchored_phone_number_id(), target);
  }

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(89, this->_internal_ranked_matchmaking_ban_until_date(), target);
  }

  // optional uint32 recent_game_time_1 = 90;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(90, this->_internal_recent_game_time_1(), target);
  }

  // optional uint32 recent_game_time_2 = 91;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(91, this->_internal_recent_game_time_2(), target);
  }

  // optional uint32 recent_game_time_3 = 92;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(92, this->_internal_recent_game_time_3(), target);
  }

  // optional uint64 favorite_team_packed = 103;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(103, this->_internal_favorite_team_packed(), target);
  }

  // optional uint32 recent_report_time = 104;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(104, this->_internal_recent_report_time(), target);
  }

  // optional uint32 custom_game_disabled_until_date = 105;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(105, this->_internal_custom_game_disabled_until_date(), target);
  }

  // optional uint32 recent_win_time_1 = 106;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(106, this->_internal_recent_win_time_1(), target);
  }

  // optional uint32 recent_win_time_2 = 107;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(107, this->_internal_recent_win_time_2(), target);
  }

  // optional uint32 recent_win_time_3 = 108;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(108, this->_internal_recent_win_time_3(), target);
  }

  // optional uint32 coach_rating = 109;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(109, this->_internal_coach_rating(), target);
  }

  // optional uint32 queue_points = 114;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(114, this->_internal_queue_points(), target);
  }

  // repeated .CSODOTAGameAccountClient.RoleHandicap role_handicaps = 115;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_role_handicaps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(115, this->_internal_role_handicaps(i), target, stream);
  }

  // optional uint32 gauntlet_tier = 116;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(116, this->_internal_gauntlet_tier(), target);
  }

  // optional uint32 gauntlet_wins = 117;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(117, this->_internal_gauntlet_wins(), target);
  }

  // optional uint32 gauntlet_losses = 118;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(118, this->_internal_gauntlet_losses(), target);
  }

  // optional uint32 gauntlet_recent_time = 119;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(119, this->_internal_gauntlet_recent_time(), target);
  }

  // optional uint32 event_mode_recent_time = 120;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(120, this->_internal_event_mode_recent_time(), target);
  }

  // optional uint32 mmr_recalibration_time = 121;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(121, this->_internal_mmr_recalibration_time(), target);
  }

  // optional uint32 prevent_new_player_chat_until_date = 122;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(122, this->_internal_prevent_new_player_chat_until_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAGameAccountClient)
  return target;
}

size_t CSODOTAGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAGameAccountClient)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSODOTAGameAccountClient.RoleHandicap role_handicaps = 115;
  total_size += 2UL * this->_internal_role_handicaps_size();
  for (const auto& msg : this->role_handicaps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint32 losses = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

    // optional uint32 xp = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp());
    }

    // optional uint32 level = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 initial_skill = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_initial_skill());
    }

    // optional uint32 leaver_count = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaver_count());
    }

    // optional uint32 low_priority_until_date = 18;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_low_priority_until_date());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 prevent_text_chat_until_date = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prevent_text_chat_until_date());
    }

    // optional uint32 prevent_voice_until_date = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prevent_voice_until_date());
    }

    // optional uint32 last_abandoned_game_date = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_abandoned_game_date());
    }

    // optional uint32 leaver_penalty_count = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaver_penalty_count());
    }

    // optional uint32 completed_game_streak = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completed_game_streak());
    }

    // optional uint32 account_disabled_until_date = 38;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_disabled_until_date());
    }

    // optional uint32 account_disabled_count = 39;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_disabled_count());
    }

    // optional uint32 match_disabled_until_date = 41;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_disabled_until_date());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 match_disabled_count = 42;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_disabled_count());
    }

    // optional uint32 shutdownlawterminatetimestamp = 47;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_shutdownlawterminatetimestamp());
    }

    // optional uint32 low_priority_games_remaining = 48;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_low_priority_games_remaining());
    }

    // optional uint32 competitive_rank = 49;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_competitive_rank());
    }

    // optional uint32 competitive_calibration_games_remaining = 51;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_competitive_calibration_games_remaining());
    }

    // optional uint32 solo_competitive_2019_rank = 52;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solo_competitive_2019_rank());
    }

    // optional uint32 solo_competitive_2019_calibration_games_remaining = 54;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solo_competitive_2019_calibration_games_remaining());
    }

    // optional uint32 recruitment_level = 55;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recruitment_level());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 secondary_leaver_count = 58;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_secondary_leaver_count());
    }

    // optional uint32 last_secondary_abandoned_game_date = 59;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_secondary_abandoned_game_date());
    }

    // optional uint32 casual_games_played = 60;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_casual_games_played());
    }

    // optional uint32 solo_competitive_games_played = 61;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_solo_competitive_games_played());
    }

    // optional uint32 party_competitive_games_played = 62;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_party_competitive_games_played());
    }

    // optional bool has_new_notifications = 56;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_league_admin = 57;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool player_behavior_report_old_data = 73;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 casual_1v1_games_played = 65;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_casual_1v1_games_played());
    }

    // optional uint32 curr_all_hero_challenge_id = 67;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_curr_all_hero_challenge_id());
    }

    // optional uint32 play_time_points = 68;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_play_time_points());
    }

    // optional uint32 account_flags = 69;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_flags());
    }

    // optional uint32 play_time_level = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_play_time_level());
    }

    // optional uint32 player_behavior_seq_num_last_report = 71;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_behavior_seq_num_last_report());
    }

    // optional uint32 player_behavior_score_last_report = 72;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_behavior_score_last_report());
    }

    // optional uint32 tourney_skill_level = 74;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_skill_level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 tourney_recent_participation_date = 85;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tourney_recent_participation_date());
    }

    // optional uint32 prevent_public_text_chat_until_date = 86;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prevent_public_text_chat_until_date());
    }

    // optional uint64 anchored_phone_number_id = 88;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_anchored_phone_number_id());
    }

    // optional uint32 ranked_matchmaking_ban_until_date = 89;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ranked_matchmaking_ban_until_date());
    }

    // optional uint32 recent_game_time_1 = 90;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_game_time_1());
    }

    // optional uint32 recent_game_time_2 = 91;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_game_time_2());
    }

    // optional uint32 recent_game_time_3 = 92;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_game_time_3());
    }

    // optional uint64 favorite_team_packed = 103;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_favorite_team_packed());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 recent_report_time = 104;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_report_time());
    }

    // optional uint32 custom_game_disabled_until_date = 105;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_game_disabled_until_date());
    }

    // optional uint32 recent_win_time_1 = 106;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_win_time_1());
    }

    // optional uint32 recent_win_time_2 = 107;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_win_time_2());
    }

    // optional uint32 recent_win_time_3 = 108;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_recent_win_time_3());
    }

    // optional uint32 coach_rating = 109;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coach_rating());
    }

    // optional uint32 queue_points = 114;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_queue_points());
    }

    // optional uint32 gauntlet_tier = 116;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_tier());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional uint32 gauntlet_wins = 117;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_wins());
    }

    // optional uint32 gauntlet_losses = 118;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_losses());
    }

    // optional uint32 gauntlet_recent_time = 119;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_recent_time());
    }

    // optional uint32 event_mode_recent_time = 120;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_mode_recent_time());
    }

    // optional uint32 mmr_recalibration_time = 121;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr_recalibration_time());
    }

    // optional uint32 prevent_new_player_chat_until_date = 122;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prevent_new_player_chat_until_date());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAGameAccountClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAGameAccountClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAGameAccountClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAGameAccountClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAGameAccountClient)
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient::MergeFrom(const CSODOTAGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_handicaps_.MergeFrom(from.role_handicaps_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000008u) {
      xp_ = from.xp_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_skill_ = from.initial_skill_;
    }
    if (cached_has_bits & 0x00000040u) {
      leaver_count_ = from.leaver_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_priority_until_date_ = from.low_priority_until_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      prevent_text_chat_until_date_ = from.prevent_text_chat_until_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      prevent_voice_until_date_ = from.prevent_voice_until_date_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_abandoned_game_date_ = from.last_abandoned_game_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      leaver_penalty_count_ = from.leaver_penalty_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      completed_game_streak_ = from.completed_game_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      account_disabled_until_date_ = from.account_disabled_until_date_;
    }
    if (cached_has_bits & 0x00004000u) {
      account_disabled_count_ = from.account_disabled_count_;
    }
    if (cached_has_bits & 0x00008000u) {
      match_disabled_until_date_ = from.match_disabled_until_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      match_disabled_count_ = from.match_disabled_count_;
    }
    if (cached_has_bits & 0x00020000u) {
      shutdownlawterminatetimestamp_ = from.shutdownlawterminatetimestamp_;
    }
    if (cached_has_bits & 0x00040000u) {
      low_priority_games_remaining_ = from.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x00080000u) {
      competitive_rank_ = from.competitive_rank_;
    }
    if (cached_has_bits & 0x00100000u) {
      competitive_calibration_games_remaining_ = from.competitive_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x00200000u) {
      solo_competitive_2019_rank_ = from.solo_competitive_2019_rank_;
    }
    if (cached_has_bits & 0x00400000u) {
      solo_competitive_2019_calibration_games_remaining_ = from.solo_competitive_2019_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x00800000u) {
      recruitment_level_ = from.recruitment_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      secondary_leaver_count_ = from.secondary_leaver_count_;
    }
    if (cached_has_bits & 0x02000000u) {
      last_secondary_abandoned_game_date_ = from.last_secondary_abandoned_game_date_;
    }
    if (cached_has_bits & 0x04000000u) {
      casual_games_played_ = from.casual_games_played_;
    }
    if (cached_has_bits & 0x08000000u) {
      solo_competitive_games_played_ = from.solo_competitive_games_played_;
    }
    if (cached_has_bits & 0x10000000u) {
      party_competitive_games_played_ = from.party_competitive_games_played_;
    }
    if (cached_has_bits & 0x20000000u) {
      has_new_notifications_ = from.has_new_notifications_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_league_admin_ = from.is_league_admin_;
    }
    if (cached_has_bits & 0x80000000u) {
      player_behavior_report_old_data_ = from.player_behavior_report_old_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      casual_1v1_games_played_ = from.casual_1v1_games_played_;
    }
    if (cached_has_bits & 0x00000002u) {
      curr_all_hero_challenge_id_ = from.curr_all_hero_challenge_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      play_time_points_ = from.play_time_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00000010u) {
      play_time_level_ = from.play_time_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      player_behavior_seq_num_last_report_ = from.player_behavior_seq_num_last_report_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_behavior_score_last_report_ = from.player_behavior_score_last_report_;
    }
    if (cached_has_bits & 0x00000080u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tourney_recent_participation_date_ = from.tourney_recent_participation_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      prevent_public_text_chat_until_date_ = from.prevent_public_text_chat_until_date_;
    }
    if (cached_has_bits & 0x00000400u) {
      anchored_phone_number_id_ = from.anchored_phone_number_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      ranked_matchmaking_ban_until_date_ = from.ranked_matchmaking_ban_until_date_;
    }
    if (cached_has_bits & 0x00001000u) {
      recent_game_time_1_ = from.recent_game_time_1_;
    }
    if (cached_has_bits & 0x00002000u) {
      recent_game_time_2_ = from.recent_game_time_2_;
    }
    if (cached_has_bits & 0x00004000u) {
      recent_game_time_3_ = from.recent_game_time_3_;
    }
    if (cached_has_bits & 0x00008000u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      recent_report_time_ = from.recent_report_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      custom_game_disabled_until_date_ = from.custom_game_disabled_until_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      recent_win_time_1_ = from.recent_win_time_1_;
    }
    if (cached_has_bits & 0x00080000u) {
      recent_win_time_2_ = from.recent_win_time_2_;
    }
    if (cached_has_bits & 0x00100000u) {
      recent_win_time_3_ = from.recent_win_time_3_;
    }
    if (cached_has_bits & 0x00200000u) {
      coach_rating_ = from.coach_rating_;
    }
    if (cached_has_bits & 0x00400000u) {
      queue_points_ = from.queue_points_;
    }
    if (cached_has_bits & 0x00800000u) {
      gauntlet_tier_ = from.gauntlet_tier_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      gauntlet_wins_ = from.gauntlet_wins_;
    }
    if (cached_has_bits & 0x02000000u) {
      gauntlet_losses_ = from.gauntlet_losses_;
    }
    if (cached_has_bits & 0x04000000u) {
      gauntlet_recent_time_ = from.gauntlet_recent_time_;
    }
    if (cached_has_bits & 0x08000000u) {
      event_mode_recent_time_ = from.event_mode_recent_time_;
    }
    if (cached_has_bits & 0x10000000u) {
      mmr_recalibration_time_ = from.mmr_recalibration_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      prevent_new_player_chat_until_date_ = from.prevent_new_player_chat_until_date_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CSODOTAGameAccountClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::CopyFrom(const CSODOTAGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient::IsInitialized() const {
  return true;
}

void CSODOTAGameAccountClient::InternalSwap(CSODOTAGameAccountClient* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  role_handicaps_.InternalSwap(&other->role_handicaps_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_new_player_chat_until_date_)
      + sizeof(CSODOTAGameAccountClient::prevent_new_player_chat_until_date_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAGameAccountClient, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAGameAccountClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAGameAccountPlus::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAGameAccountPlus>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_plus_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_plus_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepaid_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prepaid_time_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_next_payment_date(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steam_agreement_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CSODOTAGameAccountPlus::CSODOTAGameAccountPlus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAGameAccountPlus)
}
CSODOTAGameAccountPlus::CSODOTAGameAccountPlus(const CSODOTAGameAccountPlus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_payment_date_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(next_payment_date_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAGameAccountPlus)
}

void CSODOTAGameAccountPlus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_payment_date_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(next_payment_date_));
}

CSODOTAGameAccountPlus::~CSODOTAGameAccountPlus() {
  // @@protoc_insertion_point(destructor:CSODOTAGameAccountPlus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAGameAccountPlus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSODOTAGameAccountPlus::ArenaDtor(void* object) {
  CSODOTAGameAccountPlus* _this = reinterpret_cast< CSODOTAGameAccountPlus* >(object);
  (void)_this;
}
void CSODOTAGameAccountPlus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAGameAccountPlus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAGameAccountPlus::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAGameAccountPlus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&next_payment_date_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(next_payment_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAGameAccountPlus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 original_start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_original_start_date(&has_bits);
          original_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 plus_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_plus_flags(&has_bits);
          plus_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 plus_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_plus_status(&has_bits);
          plus_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prepaid_time_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prepaid_time_start(&has_bits);
          prepaid_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prepaid_time_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_prepaid_time_balance(&has_bits);
          prepaid_time_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 next_payment_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_next_payment_date(&has_bits);
          next_payment_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_agreement_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_steam_agreement_id(&has_bits);
          steam_agreement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAGameAccountPlus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAGameAccountPlus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 original_start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_original_start_date(), target);
  }

  // optional uint32 plus_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_plus_flags(), target);
  }

  // optional uint32 plus_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_plus_status(), target);
  }

  // optional uint32 prepaid_time_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_prepaid_time_start(), target);
  }

  // optional uint32 prepaid_time_balance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prepaid_time_balance(), target);
  }

  // optional fixed32 next_payment_date = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(7, this->_internal_next_payment_date(), target);
  }

  // optional fixed64 steam_agreement_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(8, this->_internal_steam_agreement_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAGameAccountPlus)
  return target;
}

size_t CSODOTAGameAccountPlus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAGameAccountPlus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 original_start_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_original_start_date());
    }

    // optional uint32 plus_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_plus_flags());
    }

    // optional uint32 plus_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_plus_status());
    }

    // optional uint32 prepaid_time_start = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prepaid_time_start());
    }

    // optional uint32 prepaid_time_balance = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prepaid_time_balance());
    }

    // optional fixed64 steam_agreement_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional fixed32 next_payment_date = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAGameAccountPlus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAGameAccountPlus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAGameAccountPlus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAGameAccountPlus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAGameAccountPlus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAGameAccountPlus)
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountPlus::MergeFrom(const CSODOTAGameAccountPlus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAGameAccountPlus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      original_start_date_ = from.original_start_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      plus_flags_ = from.plus_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      plus_status_ = from.plus_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepaid_time_start_ = from.prepaid_time_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      prepaid_time_balance_ = from.prepaid_time_balance_;
    }
    if (cached_has_bits & 0x00000040u) {
      steam_agreement_id_ = from.steam_agreement_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      next_payment_date_ = from.next_payment_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAGameAccountPlus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAGameAccountPlus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountPlus::CopyFrom(const CSODOTAGameAccountPlus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAGameAccountPlus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountPlus::IsInitialized() const {
  return true;
}

void CSODOTAGameAccountPlus::InternalSwap(CSODOTAGameAccountPlus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAGameAccountPlus, next_payment_date_)
      + sizeof(CSODOTAGameAccountPlus::next_payment_date_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAGameAccountPlus, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAGameAccountPlus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_badge_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}
CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_badge_xp_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_badge_xp_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_badge_xp_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_badge_xp_));
}

CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::~CMsgLobbyPlayerPlusSubscriptionData_HeroBadge() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::ArenaDtor(void* object) {
  CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* _this = reinterpret_cast< CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* >(object);
  (void)_this;
}
void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_badge_xp_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_badge_xp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_badge_xp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_badge_xp(&has_bits);
          hero_badge_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 hero_badge_xp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_badge_xp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  return target;
}

size_t CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 hero_badge_xp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_badge_xp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyPlayerPlusSubscriptionData_HeroBadge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::MergeFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_badge_xp_ = from.hero_badge_xp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData_HeroBadge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyPlayerPlusSubscriptionData.HeroBadge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::IsInitialized() const {
  return true;
}

void CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::InternalSwap(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, hero_badge_xp_)
      + sizeof(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::hero_badge_xp_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyPlayerPlusSubscriptionData_HeroBadge, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyPlayerPlusSubscriptionData_HeroBadge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyPlayerPlusSubscriptionData::_Internal {
 public:
};

CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  hero_badges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyPlayerPlusSubscriptionData)
}
CMsgLobbyPlayerPlusSubscriptionData::CMsgLobbyPlayerPlusSubscriptionData(const CMsgLobbyPlayerPlusSubscriptionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      hero_badges_(from.hero_badges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyPlayerPlusSubscriptionData)
}

void CMsgLobbyPlayerPlusSubscriptionData::SharedCtor() {
}

CMsgLobbyPlayerPlusSubscriptionData::~CMsgLobbyPlayerPlusSubscriptionData() {
  // @@protoc_insertion_point(destructor:CMsgLobbyPlayerPlusSubscriptionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyPlayerPlusSubscriptionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyPlayerPlusSubscriptionData::ArenaDtor(void* object) {
  CMsgLobbyPlayerPlusSubscriptionData* _this = reinterpret_cast< CMsgLobbyPlayerPlusSubscriptionData* >(object);
  (void)_this;
}
void CMsgLobbyPlayerPlusSubscriptionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyPlayerPlusSubscriptionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyPlayerPlusSubscriptionData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyPlayerPlusSubscriptionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_badges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyPlayerPlusSubscriptionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hero_badges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyPlayerPlusSubscriptionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyPlayerPlusSubscriptionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_badges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hero_badges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyPlayerPlusSubscriptionData)
  return target;
}

size_t CMsgLobbyPlayerPlusSubscriptionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyPlayerPlusSubscriptionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyPlayerPlusSubscriptionData.HeroBadge hero_badges = 1;
  total_size += 1UL * this->_internal_hero_badges_size();
  for (const auto& msg : this->hero_badges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyPlayerPlusSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlayerPlusSubscriptionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyPlayerPlusSubscriptionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyPlayerPlusSubscriptionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyPlayerPlusSubscriptionData)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(const CMsgLobbyPlayerPlusSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyPlayerPlusSubscriptionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hero_badges_.MergeFrom(from.hero_badges_);
}

void CMsgLobbyPlayerPlusSubscriptionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyPlayerPlusSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlayerPlusSubscriptionData::CopyFrom(const CMsgLobbyPlayerPlusSubscriptionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyPlayerPlusSubscriptionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlayerPlusSubscriptionData::IsInitialized() const {
  return true;
}

void CMsgLobbyPlayerPlusSubscriptionData::InternalSwap(CMsgLobbyPlayerPlusSubscriptionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hero_badges_.InternalSwap(&other->hero_badges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyPlayerPlusSubscriptionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventPoints_ChatWheelMessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_ChatWheelMessageRange>()._has_bits_);
  static void set_has_message_id_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_id_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.ChatWheelMessageRange)
}
CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange(const CMsgLobbyEventPoints_ChatWheelMessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_id_start_, &from.message_id_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.ChatWheelMessageRange)
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_id_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
}

CMsgLobbyEventPoints_ChatWheelMessageRange::~CMsgLobbyEventPoints_ChatWheelMessageRange() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.ChatWheelMessageRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::ArenaDtor(void* object) {
  CMsgLobbyEventPoints_ChatWheelMessageRange* _this = reinterpret_cast< CMsgLobbyEventPoints_ChatWheelMessageRange* >(object);
  (void)_this;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&message_id_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_end_) -
        reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_ChatWheelMessageRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 message_id_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_id_start(&has_bits);
          message_id_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_id_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_message_id_end(&has_bits);
          message_id_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventPoints_ChatWheelMessageRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id_start(), target);
  }

  // optional uint32 message_id_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_id_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.ChatWheelMessageRange)
  return target;
}

size_t CMsgLobbyEventPoints_ChatWheelMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 message_id_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id_start());
    }

    // optional uint32 message_id_end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id_end());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_ChatWheelMessageRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventPoints_ChatWheelMessageRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventPoints.ChatWheelMessageRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventPoints.ChatWheelMessageRange)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::MergeFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_start_ = from.message_id_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_end_ = from.message_id_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::CopyFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_ChatWheelMessageRange::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::InternalSwap(CMsgLobbyEventPoints_ChatWheelMessageRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_end_)
      + sizeof(CMsgLobbyEventPoints_ChatWheelMessageRange::message_id_end_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_start_)>(
          reinterpret_cast<char*>(&message_id_start_),
          reinterpret_cast<char*>(&other->message_id_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_ChatWheelMessageRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventPoints_PingWheelMessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_PingWheelMessageRange>()._has_bits_);
  static void set_has_message_id_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_id_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventPoints_PingWheelMessageRange::CMsgLobbyEventPoints_PingWheelMessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.PingWheelMessageRange)
}
CMsgLobbyEventPoints_PingWheelMessageRange::CMsgLobbyEventPoints_PingWheelMessageRange(const CMsgLobbyEventPoints_PingWheelMessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&message_id_start_, &from.message_id_start_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.PingWheelMessageRange)
}

void CMsgLobbyEventPoints_PingWheelMessageRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&message_id_start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
}

CMsgLobbyEventPoints_PingWheelMessageRange::~CMsgLobbyEventPoints_PingWheelMessageRange() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.PingWheelMessageRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventPoints_PingWheelMessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyEventPoints_PingWheelMessageRange::ArenaDtor(void* object) {
  CMsgLobbyEventPoints_PingWheelMessageRange* _this = reinterpret_cast< CMsgLobbyEventPoints_PingWheelMessageRange* >(object);
  (void)_this;
}
void CMsgLobbyEventPoints_PingWheelMessageRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventPoints_PingWheelMessageRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventPoints_PingWheelMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&message_id_start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_end_) -
        reinterpret_cast<char*>(&message_id_start_)) + sizeof(message_id_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_PingWheelMessageRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 message_id_start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_message_id_start(&has_bits);
          message_id_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 message_id_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_message_id_end(&has_bits);
          message_id_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventPoints_PingWheelMessageRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_message_id_start(), target);
  }

  // optional uint32 message_id_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_message_id_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.PingWheelMessageRange)
  return target;
}

size_t CMsgLobbyEventPoints_PingWheelMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 message_id_start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id_start());
    }

    // optional uint32 message_id_end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_message_id_end());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_PingWheelMessageRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_PingWheelMessageRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventPoints_PingWheelMessageRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventPoints.PingWheelMessageRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventPoints.PingWheelMessageRange)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_PingWheelMessageRange::MergeFrom(const CMsgLobbyEventPoints_PingWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_start_ = from.message_id_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_end_ = from.message_id_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_PingWheelMessageRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_PingWheelMessageRange::CopyFrom(const CMsgLobbyEventPoints_PingWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.PingWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_PingWheelMessageRange::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_PingWheelMessageRange::InternalSwap(CMsgLobbyEventPoints_PingWheelMessageRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_PingWheelMessageRange, message_id_end_)
      + sizeof(CMsgLobbyEventPoints_PingWheelMessageRange::message_id_end_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_PingWheelMessageRange, message_id_start_)>(
          reinterpret_cast<char*>(&message_id_start_),
          reinterpret_cast<char*>(&other->message_id_start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_PingWheelMessageRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventPoints_PeriodicResourceValues::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_PeriodicResourceValues>()._has_bits_);
  static void set_has_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventPoints_PeriodicResourceValues::CMsgLobbyEventPoints_PeriodicResourceValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.PeriodicResourceValues)
}
CMsgLobbyEventPoints_PeriodicResourceValues::CMsgLobbyEventPoints_PeriodicResourceValues(const CMsgLobbyEventPoints_PeriodicResourceValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&remaining_, &from.remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&remaining_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.PeriodicResourceValues)
}

void CMsgLobbyEventPoints_PeriodicResourceValues::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&remaining_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&remaining_)) + sizeof(max_));
}

CMsgLobbyEventPoints_PeriodicResourceValues::~CMsgLobbyEventPoints_PeriodicResourceValues() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.PeriodicResourceValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventPoints_PeriodicResourceValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyEventPoints_PeriodicResourceValues::ArenaDtor(void* object) {
  CMsgLobbyEventPoints_PeriodicResourceValues* _this = reinterpret_cast< CMsgLobbyEventPoints_PeriodicResourceValues* >(object);
  (void)_this;
}
void CMsgLobbyEventPoints_PeriodicResourceValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventPoints_PeriodicResourceValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventPoints_PeriodicResourceValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_) -
        reinterpret_cast<char*>(&remaining_)) + sizeof(max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_PeriodicResourceValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 remaining = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_remaining(&has_bits);
          remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_max(&has_bits);
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventPoints_PeriodicResourceValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 remaining = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_remaining(), target);
  }

  // optional uint32 max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.PeriodicResourceValues)
  return target;
}

size_t CMsgLobbyEventPoints_PeriodicResourceValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 remaining = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_remaining());
    }

    // optional uint32 max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_PeriodicResourceValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventPoints_PeriodicResourceValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventPoints.PeriodicResourceValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventPoints.PeriodicResourceValues)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(const CMsgLobbyEventPoints_PeriodicResourceValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      remaining_ = from.remaining_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_ = from.max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_PeriodicResourceValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_PeriodicResourceValues::CopyFrom(const CMsgLobbyEventPoints_PeriodicResourceValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.PeriodicResourceValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_PeriodicResourceValues::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_PeriodicResourceValues::InternalSwap(CMsgLobbyEventPoints_PeriodicResourceValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_PeriodicResourceValues, max_)
      + sizeof(CMsgLobbyEventPoints_PeriodicResourceValues::max_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_PeriodicResourceValues, remaining_)>(
          reinterpret_cast<char*>(&remaining_),
          reinterpret_cast<char*>(&other->remaining_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_PeriodicResourceValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventPoints_EventGameCustomActions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_EventGameCustomActions>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_times_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventPoints_EventGameCustomActions::CMsgLobbyEventPoints_EventGameCustomActions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.EventGameCustomActions)
}
CMsgLobbyEventPoints_EventGameCustomActions::CMsgLobbyEventPoints_EventGameCustomActions(const CMsgLobbyEventPoints_EventGameCustomActions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_granted_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(times_granted_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.EventGameCustomActions)
}

void CMsgLobbyEventPoints_EventGameCustomActions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_granted_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(times_granted_));
}

CMsgLobbyEventPoints_EventGameCustomActions::~CMsgLobbyEventPoints_EventGameCustomActions() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.EventGameCustomActions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventPoints_EventGameCustomActions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyEventPoints_EventGameCustomActions::ArenaDtor(void* object) {
  CMsgLobbyEventPoints_EventGameCustomActions* _this = reinterpret_cast< CMsgLobbyEventPoints_EventGameCustomActions* >(object);
  (void)_this;
}
void CMsgLobbyEventPoints_EventGameCustomActions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventPoints_EventGameCustomActions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventPoints_EventGameCustomActions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.EventGameCustomActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_granted_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(times_granted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_EventGameCustomActions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 times_granted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_times_granted(&has_bits);
          times_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventPoints_EventGameCustomActions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.EventGameCustomActions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional uint32 times_granted = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_times_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.EventGameCustomActions)
  return target;
}

size_t CMsgLobbyEventPoints_EventGameCustomActions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.EventGameCustomActions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

    // optional uint32 times_granted = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_times_granted());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_EventGameCustomActions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventPoints.EventGameCustomActions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_EventGameCustomActions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventPoints_EventGameCustomActions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventPoints.EventGameCustomActions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventPoints.EventGameCustomActions)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_EventGameCustomActions::MergeFrom(const CMsgLobbyEventPoints_EventGameCustomActions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.EventGameCustomActions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_granted_ = from.times_granted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_EventGameCustomActions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventPoints.EventGameCustomActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_EventGameCustomActions::CopyFrom(const CMsgLobbyEventPoints_EventGameCustomActions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.EventGameCustomActions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_EventGameCustomActions::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_EventGameCustomActions::InternalSwap(CMsgLobbyEventPoints_EventGameCustomActions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_EventGameCustomActions, times_granted_)
      + sizeof(CMsgLobbyEventPoints_EventGameCustomActions::times_granted_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_EventGameCustomActions, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_EventGameCustomActions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventPoints_AccountPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints_AccountPoints>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_normal_points(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_premium_points(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_active_effects_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgLobbyPlayerPlusSubscriptionData& plus_subscription_data(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_plus_subscription_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgLobbyEventPoints_PeriodicResourceValues& wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_wager_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgLobbyEventPoints_PeriodicResourceValues& rank_wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_rank_wager_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgLobbyEventPoints_PeriodicResourceValues& tip_tokens(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_tip_tokens(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgLobbyEventPoints_PeriodicResourceValues& periodic_point_adjustments(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_periodic_point_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wager_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgLobbyEventPoints_PeriodicResourceValues& bounties(const CMsgLobbyEventPoints_AccountPoints* msg);
  static void set_has_bounties(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tip_amount_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_active_event_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_teleport_fx_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const ::CMsgLobbyPlayerPlusSubscriptionData&
CMsgLobbyEventPoints_AccountPoints::_Internal::plus_subscription_data(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->plus_subscription_data_;
}
const ::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::_Internal::wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->wager_tokens_;
}
const ::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::_Internal::rank_wager_tokens(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->rank_wager_tokens_;
}
const ::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::_Internal::tip_tokens(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->tip_tokens_;
}
const ::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::_Internal::periodic_point_adjustments(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->periodic_point_adjustments_;
}
const ::CMsgLobbyEventPoints_PeriodicResourceValues&
CMsgLobbyEventPoints_AccountPoints::_Internal::bounties(const CMsgLobbyEventPoints_AccountPoints* msg) {
  return *msg->bounties_;
}
CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  unlocked_chat_wheel_message_ranges_(arena),
  unlocked_ping_wheel_message_ranges_(arena),
  event_game_custom_actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints.AccountPoints)
}
CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      unlocked_chat_wheel_message_ranges_(from.unlocked_chat_wheel_message_ranges_),
      unlocked_ping_wheel_message_ranges_(from.unlocked_ping_wheel_message_ranges_),
      event_game_custom_actions_(from.event_game_custom_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plus_subscription_data()) {
    plus_subscription_data_ = new ::CMsgLobbyPlayerPlusSubscriptionData(*from.plus_subscription_data_);
  } else {
    plus_subscription_data_ = nullptr;
  }
  if (from._internal_has_wager_tokens()) {
    wager_tokens_ = new ::CMsgLobbyEventPoints_PeriodicResourceValues(*from.wager_tokens_);
  } else {
    wager_tokens_ = nullptr;
  }
  if (from._internal_has_rank_wager_tokens()) {
    rank_wager_tokens_ = new ::CMsgLobbyEventPoints_PeriodicResourceValues(*from.rank_wager_tokens_);
  } else {
    rank_wager_tokens_ = nullptr;
  }
  if (from._internal_has_tip_tokens()) {
    tip_tokens_ = new ::CMsgLobbyEventPoints_PeriodicResourceValues(*from.tip_tokens_);
  } else {
    tip_tokens_ = nullptr;
  }
  if (from._internal_has_periodic_point_adjustments()) {
    periodic_point_adjustments_ = new ::CMsgLobbyEventPoints_PeriodicResourceValues(*from.periodic_point_adjustments_);
  } else {
    periodic_point_adjustments_ = nullptr;
  }
  if (from._internal_has_bounties()) {
    bounties_ = new ::CMsgLobbyEventPoints_PeriodicResourceValues(*from.bounties_);
  } else {
    bounties_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&teleport_fx_level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(teleport_fx_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plus_subscription_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&teleport_fx_level_) -
    reinterpret_cast<char*>(&plus_subscription_data_)) + sizeof(teleport_fx_level_));
}

CMsgLobbyEventPoints_AccountPoints::~CMsgLobbyEventPoints_AccountPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints.AccountPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventPoints_AccountPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plus_subscription_data_;
  if (this != internal_default_instance()) delete wager_tokens_;
  if (this != internal_default_instance()) delete rank_wager_tokens_;
  if (this != internal_default_instance()) delete tip_tokens_;
  if (this != internal_default_instance()) delete periodic_point_adjustments_;
  if (this != internal_default_instance()) delete bounties_;
}

void CMsgLobbyEventPoints_AccountPoints::ArenaDtor(void* object) {
  CMsgLobbyEventPoints_AccountPoints* _this = reinterpret_cast< CMsgLobbyEventPoints_AccountPoints* >(object);
  (void)_this;
}
void CMsgLobbyEventPoints_AccountPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventPoints_AccountPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventPoints_AccountPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints.AccountPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlocked_chat_wheel_message_ranges_.Clear();
  unlocked_ping_wheel_message_ranges_.Clear();
  event_game_custom_actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(plus_subscription_data_ != nullptr);
      plus_subscription_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(wager_tokens_ != nullptr);
      wager_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(rank_wager_tokens_ != nullptr);
      rank_wager_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tip_tokens_ != nullptr);
      tip_tokens_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(periodic_point_adjustments_ != nullptr);
      periodic_point_adjustments_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(bounties_ != nullptr);
      bounties_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&normal_points_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(normal_points_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&premium_points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teleport_fx_level_) -
        reinterpret_cast<char*>(&premium_points_)) + sizeof(teleport_fx_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints_AccountPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 normal_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_normal_points(&has_bits);
          normal_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 premium_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_premium_points(&has_bits);
          premium_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool owned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_owned(&has_bits);
          owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 active_effects_mask = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_active_effects_mask(&has_bits);
          active_effects_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unlocked_chat_wheel_message_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_plus_subscription_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_wager_tokens(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_rank_wager_tokens(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tip_tokens(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_periodic_point_adjustments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_unlocked_ping_wheel_message_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 wager_streak = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_wager_streak(&has_bits);
          wager_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLobbyEventPoints.PeriodicResourceValues bounties = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.EventGameCustomActions event_game_custom_actions = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_game_custom_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 tip_amount_index = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tip_amount_index(&has_bits);
          tip_amount_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_event_season_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_active_event_season_id(&has_bits);
          active_event_season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teleport_fx_level = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_teleport_fx_level(&has_bits);
          teleport_fx_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventPoints_AccountPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints.AccountPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_normal_points(), target);
  }

  // optional uint32 premium_points = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_premium_points(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_owned(), target);
  }

  // optional uint64 active_effects_mask = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_active_effects_mask(), target);
  }

  // repeated .CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_chat_wheel_message_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_unlocked_chat_wheel_message_ranges(i), target, stream);
  }

  // optional .CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::plus_subscription_data(this), target, stream);
  }

  // optional .CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::wager_tokens(this), target, stream);
  }

  // optional .CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::rank_wager_tokens(this), target, stream);
  }

  // optional .CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::tip_tokens(this), target, stream);
  }

  // optional .CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::periodic_point_adjustments(this), target, stream);
  }

  // repeated .CMsgLobbyEventPoints.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unlocked_ping_wheel_message_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_unlocked_ping_wheel_message_ranges(i), target, stream);
  }

  // optional uint32 wager_streak = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_wager_streak(), target);
  }

  // optional .CMsgLobbyEventPoints.PeriodicResourceValues bounties = 24;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::bounties(this), target, stream);
  }

  // repeated .CMsgLobbyEventPoints.EventGameCustomActions event_game_custom_actions = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_game_custom_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_event_game_custom_actions(i), target, stream);
  }

  // optional uint32 tip_amount_index = 26;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tip_amount_index(), target);
  }

  // optional uint32 active_event_season_id = 27;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_active_event_season_id(), target);
  }

  // optional uint32 teleport_fx_level = 28;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_teleport_fx_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints.AccountPoints)
  return target;
}

size_t CMsgLobbyEventPoints_AccountPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints.AccountPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  total_size += 1UL * this->_internal_unlocked_chat_wheel_message_ranges_size();
  for (const auto& msg : this->unlocked_chat_wheel_message_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgLobbyEventPoints.PingWheelMessageRange unlocked_ping_wheel_message_ranges = 22;
  total_size += 2UL * this->_internal_unlocked_ping_wheel_message_ranges_size();
  for (const auto& msg : this->unlocked_ping_wheel_message_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgLobbyEventPoints.EventGameCustomActions event_game_custom_actions = 25;
  total_size += 2UL * this->_internal_event_game_custom_actions_size();
  for (const auto& msg : this->event_game_custom_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgLobbyPlayerPlusSubscriptionData plus_subscription_data = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plus_subscription_data_);
    }

    // optional .CMsgLobbyEventPoints.PeriodicResourceValues wager_tokens = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *wager_tokens_);
    }

    // optional .CMsgLobbyEventPoints.PeriodicResourceValues rank_wager_tokens = 18;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rank_wager_tokens_);
    }

    // optional .CMsgLobbyEventPoints.PeriodicResourceValues tip_tokens = 19;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tip_tokens_);
    }

    // optional .CMsgLobbyEventPoints.PeriodicResourceValues periodic_point_adjustments = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *periodic_point_adjustments_);
    }

    // optional .CMsgLobbyEventPoints.PeriodicResourceValues bounties = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bounties_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 normal_points = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_normal_points());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 premium_points = 3;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_premium_points());
    }

    // optional bool owned = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional uint64 active_effects_mask = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_active_effects_mask());
    }

    // optional uint32 wager_streak = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager_streak());
    }

    // optional uint32 tip_amount_index = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tip_amount_index());
    }

    // optional uint32 active_event_season_id = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_event_season_id());
    }

    // optional uint32 teleport_fx_level = 28;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teleport_fx_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_AccountPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventPoints_AccountPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventPoints.AccountPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventPoints.AccountPoints)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlocked_chat_wheel_message_ranges_.MergeFrom(from.unlocked_chat_wheel_message_ranges_);
  unlocked_ping_wheel_message_ranges_.MergeFrom(from.unlocked_ping_wheel_message_ranges_);
  event_game_custom_actions_.MergeFrom(from.event_game_custom_actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_plus_subscription_data()->::CMsgLobbyPlayerPlusSubscriptionData::MergeFrom(from._internal_plus_subscription_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_wager_tokens()->::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from._internal_wager_tokens());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_rank_wager_tokens()->::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from._internal_rank_wager_tokens());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tip_tokens()->::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from._internal_tip_tokens());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_periodic_point_adjustments()->::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from._internal_periodic_point_adjustments());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_bounties()->::CMsgLobbyEventPoints_PeriodicResourceValues::MergeFrom(from._internal_bounties());
    }
    if (cached_has_bits & 0x00000040u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      normal_points_ = from.normal_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      premium_points_ = from.premium_points_;
    }
    if (cached_has_bits & 0x00000200u) {
      owned_ = from.owned_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_effects_mask_ = from.active_effects_mask_;
    }
    if (cached_has_bits & 0x00000800u) {
      wager_streak_ = from.wager_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      tip_amount_index_ = from.tip_amount_index_;
    }
    if (cached_has_bits & 0x00002000u) {
      active_event_season_id_ = from.active_event_season_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      teleport_fx_level_ = from.teleport_fx_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_AccountPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_AccountPoints::InternalSwap(CMsgLobbyEventPoints_AccountPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unlocked_chat_wheel_message_ranges_.InternalSwap(&other->unlocked_chat_wheel_message_ranges_);
  unlocked_ping_wheel_message_ranges_.InternalSwap(&other->unlocked_ping_wheel_message_ranges_);
  event_game_custom_actions_.InternalSwap(&other->event_game_custom_actions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, teleport_fx_level_)
      + sizeof(CMsgLobbyEventPoints_AccountPoints::teleport_fx_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, plus_subscription_data_)>(
          reinterpret_cast<char*>(&plus_subscription_data_),
          reinterpret_cast<char*>(&other->plus_subscription_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints_AccountPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventPoints>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLobbyEventPoints::CMsgLobbyEventPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventPoints)
}
CMsgLobbyEventPoints::CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      account_points_(from.account_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::SharedCtor() {
event_id_ = 0u;
}

CMsgLobbyEventPoints::~CMsgLobbyEventPoints() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyEventPoints::ArenaDtor(void* object) {
  CMsgLobbyEventPoints* _this = reinterpret_cast< CMsgLobbyEventPoints* >(object);
  (void)_this;
}
void CMsgLobbyEventPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_points_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_account_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_account_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_account_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventPoints)
  return target;
}

size_t CMsgLobbyEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyEventPoints.AccountPoints account_points = 2;
  total_size += 1UL * this->_internal_account_points_size();
  for (const auto& msg : this->account_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 event_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventPoints)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints::MergeFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_points_.MergeFrom(from.account_points_);
  if (from._internal_has_event_id()) {
    _internal_set_event_id(from._internal_event_id());
  }
}

void CMsgLobbyEventPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints::CopyFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints::InternalSwap(CMsgLobbyEventPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_points_.InternalSwap(&other->account_points_);
  swap(event_id_, other->event_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventPoints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyEventGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyEventGameData>()._has_bits_);
  static void set_has_game_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_window_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgLobbyEventGameData::CMsgLobbyEventGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyEventGameData)
}
CMsgLobbyEventGameData::CMsgLobbyEventGameData(const CMsgLobbyEventGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_seed_, &from.game_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_window_start_time_) -
    reinterpret_cast<char*>(&game_seed_)) + sizeof(event_window_start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyEventGameData)
}

void CMsgLobbyEventGameData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_seed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_window_start_time_) -
    reinterpret_cast<char*>(&game_seed_)) + sizeof(event_window_start_time_));
}

CMsgLobbyEventGameData::~CMsgLobbyEventGameData() {
  // @@protoc_insertion_point(destructor:CMsgLobbyEventGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyEventGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyEventGameData::ArenaDtor(void* object) {
  CMsgLobbyEventGameData* _this = reinterpret_cast< CMsgLobbyEventGameData* >(object);
  (void)_this;
}
void CMsgLobbyEventGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyEventGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyEventGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyEventGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&game_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_window_start_time_) -
        reinterpret_cast<char*>(&game_seed_)) + sizeof(event_window_start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyEventGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 game_seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_seed(&has_bits);
          game_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_window_start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_window_start_time(&has_bits);
          event_window_start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyEventGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyEventGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_seed = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_seed(), target);
  }

  // optional uint32 event_window_start_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_window_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyEventGameData)
  return target;
}

size_t CMsgLobbyEventGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyEventGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 game_seed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_seed());
    }

    // optional uint32 event_window_start_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_window_start_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyEventGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyEventGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyEventGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyEventGameData)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventGameData::MergeFrom(const CMsgLobbyEventGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyEventGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      game_seed_ = from.game_seed_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_window_start_time_ = from.event_window_start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventGameData::CopyFrom(const CMsgLobbyEventGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyEventGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventGameData::IsInitialized() const {
  return true;
}

void CMsgLobbyEventGameData::InternalSwap(CMsgLobbyEventGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyEventGameData, event_window_start_time_)
      + sizeof(CMsgLobbyEventGameData::event_window_start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyEventGameData, game_seed_)>(
          reinterpret_cast<char*>(&game_seed_),
          reinterpret_cast<char*>(&other->game_seed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyEventGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyGauntletProgress_AccountProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLobbyGauntletProgress_AccountProgress>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gauntlet_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gauntlet_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gauntlet_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgLobbyGauntletProgress_AccountProgress::CMsgLobbyGauntletProgress_AccountProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyGauntletProgress.AccountProgress)
}
CMsgLobbyGauntletProgress_AccountProgress::CMsgLobbyGauntletProgress_AccountProgress(const CMsgLobbyGauntletProgress_AccountProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gauntlet_losses_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(gauntlet_losses_));
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyGauntletProgress.AccountProgress)
}

void CMsgLobbyGauntletProgress_AccountProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gauntlet_losses_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(gauntlet_losses_));
}

CMsgLobbyGauntletProgress_AccountProgress::~CMsgLobbyGauntletProgress_AccountProgress() {
  // @@protoc_insertion_point(destructor:CMsgLobbyGauntletProgress.AccountProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyGauntletProgress_AccountProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyGauntletProgress_AccountProgress::ArenaDtor(void* object) {
  CMsgLobbyGauntletProgress_AccountProgress* _this = reinterpret_cast< CMsgLobbyGauntletProgress_AccountProgress* >(object);
  (void)_this;
}
void CMsgLobbyGauntletProgress_AccountProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyGauntletProgress_AccountProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyGauntletProgress_AccountProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyGauntletProgress.AccountProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gauntlet_losses_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(gauntlet_losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyGauntletProgress_AccountProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_tier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gauntlet_tier(&has_bits);
          gauntlet_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_wins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gauntlet_wins(&has_bits);
          gauntlet_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_losses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gauntlet_losses(&has_bits);
          gauntlet_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyGauntletProgress_AccountProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyGauntletProgress.AccountProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 gauntlet_tier = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gauntlet_tier(), target);
  }

  // optional uint32 gauntlet_wins = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gauntlet_wins(), target);
  }

  // optional uint32 gauntlet_losses = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_gauntlet_losses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyGauntletProgress.AccountProgress)
  return target;
}

size_t CMsgLobbyGauntletProgress_AccountProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyGauntletProgress.AccountProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 gauntlet_tier = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_tier());
    }

    // optional uint32 gauntlet_wins = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_wins());
    }

    // optional uint32 gauntlet_losses = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_losses());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyGauntletProgress_AccountProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyGauntletProgress.AccountProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyGauntletProgress_AccountProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyGauntletProgress_AccountProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyGauntletProgress.AccountProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyGauntletProgress.AccountProgress)
    MergeFrom(*source);
  }
}

void CMsgLobbyGauntletProgress_AccountProgress::MergeFrom(const CMsgLobbyGauntletProgress_AccountProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyGauntletProgress.AccountProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      gauntlet_tier_ = from.gauntlet_tier_;
    }
    if (cached_has_bits & 0x00000004u) {
      gauntlet_wins_ = from.gauntlet_wins_;
    }
    if (cached_has_bits & 0x00000008u) {
      gauntlet_losses_ = from.gauntlet_losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyGauntletProgress_AccountProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyGauntletProgress.AccountProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyGauntletProgress_AccountProgress::CopyFrom(const CMsgLobbyGauntletProgress_AccountProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyGauntletProgress.AccountProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyGauntletProgress_AccountProgress::IsInitialized() const {
  return true;
}

void CMsgLobbyGauntletProgress_AccountProgress::InternalSwap(CMsgLobbyGauntletProgress_AccountProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLobbyGauntletProgress_AccountProgress, gauntlet_losses_)
      + sizeof(CMsgLobbyGauntletProgress_AccountProgress::gauntlet_losses_)
      - PROTOBUF_FIELD_OFFSET(CMsgLobbyGauntletProgress_AccountProgress, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyGauntletProgress_AccountProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyGauntletProgress::_Internal {
 public:
};

CMsgLobbyGauntletProgress::CMsgLobbyGauntletProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyGauntletProgress)
}
CMsgLobbyGauntletProgress::CMsgLobbyGauntletProgress(const CMsgLobbyGauntletProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyGauntletProgress)
}

void CMsgLobbyGauntletProgress::SharedCtor() {
}

CMsgLobbyGauntletProgress::~CMsgLobbyGauntletProgress() {
  // @@protoc_insertion_point(destructor:CMsgLobbyGauntletProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyGauntletProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyGauntletProgress::ArenaDtor(void* object) {
  CMsgLobbyGauntletProgress* _this = reinterpret_cast< CMsgLobbyGauntletProgress* >(object);
  (void)_this;
}
void CMsgLobbyGauntletProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyGauntletProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyGauntletProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyGauntletProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyGauntletProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgLobbyGauntletProgress.AccountProgress accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyGauntletProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyGauntletProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgLobbyGauntletProgress.AccountProgress accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyGauntletProgress)
  return target;
}

size_t CMsgLobbyGauntletProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyGauntletProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyGauntletProgress.AccountProgress accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyGauntletProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyGauntletProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyGauntletProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyGauntletProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyGauntletProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyGauntletProgress)
    MergeFrom(*source);
  }
}

void CMsgLobbyGauntletProgress::MergeFrom(const CMsgLobbyGauntletProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyGauntletProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void CMsgLobbyGauntletProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyGauntletProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyGauntletProgress::CopyFrom(const CMsgLobbyGauntletProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyGauntletProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyGauntletProgress::IsInitialized() const {
  return true;
}

void CMsgLobbyGauntletProgress::InternalSwap(CMsgLobbyGauntletProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyGauntletProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLocalServerGuildData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLocalServerGuildData>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_guild_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_guild_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_guild_primary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_guild_secondary_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_guild_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_guild_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_guild_weekly_percentile(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgLocalServerGuildData::CMsgLocalServerGuildData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLocalServerGuildData)
}
CMsgLocalServerGuildData::CMsgLocalServerGuildData(const CMsgLocalServerGuildData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guild_weekly_percentile_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_weekly_percentile_));
  // @@protoc_insertion_point(copy_constructor:CMsgLocalServerGuildData)
}

void CMsgLocalServerGuildData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&guild_weekly_percentile_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_weekly_percentile_));
}

CMsgLocalServerGuildData::~CMsgLocalServerGuildData() {
  // @@protoc_insertion_point(destructor:CMsgLocalServerGuildData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLocalServerGuildData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLocalServerGuildData::ArenaDtor(void* object) {
  CMsgLocalServerGuildData* _this = reinterpret_cast< CMsgLocalServerGuildData* >(object);
  (void)_this;
}
void CMsgLocalServerGuildData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLocalServerGuildData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLocalServerGuildData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLocalServerGuildData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&guild_flags_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(guild_flags_));
  }
  guild_weekly_percentile_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLocalServerGuildData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_guild_points(&has_bits);
          guild_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 guild_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_guild_logo(&has_bits);
          guild_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_primary_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_guild_primary_color(&has_bits);
          guild_primary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_secondary_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_guild_secondary_color(&has_bits);
          guild_secondary_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_pattern = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_guild_pattern(&has_bits);
          guild_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_flags = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_guild_flags(&has_bits);
          guild_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 guild_weekly_percentile = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_guild_weekly_percentile(&has_bits);
          guild_weekly_percentile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLocalServerGuildData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLocalServerGuildData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 guild_points = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_guild_points(), target);
  }

  // optional uint64 guild_logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_guild_logo(), target);
  }

  // optional uint32 guild_primary_color = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_guild_primary_color(), target);
  }

  // optional uint32 guild_secondary_color = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_guild_secondary_color(), target);
  }

  // optional uint32 guild_pattern = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_guild_pattern(), target);
  }

  // optional uint32 guild_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_guild_flags(), target);
  }

  // optional uint32 guild_weekly_percentile = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_guild_weekly_percentile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLocalServerGuildData)
  return target;
}

size_t CMsgLocalServerGuildData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLocalServerGuildData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint64 guild_logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_guild_logo());
    }

    // optional uint32 guild_points = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_points());
    }

    // optional uint32 guild_primary_color = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_primary_color());
    }

    // optional uint32 guild_secondary_color = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_secondary_color());
    }

    // optional uint32 guild_pattern = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_pattern());
    }

    // optional uint32 guild_flags = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_flags());
    }

  }
  // optional uint32 guild_weekly_percentile = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_guild_weekly_percentile());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLocalServerGuildData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLocalServerGuildData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLocalServerGuildData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLocalServerGuildData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLocalServerGuildData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLocalServerGuildData)
    MergeFrom(*source);
  }
}

void CMsgLocalServerGuildData::MergeFrom(const CMsgLocalServerGuildData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLocalServerGuildData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      guild_logo_ = from.guild_logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      guild_points_ = from.guild_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      guild_primary_color_ = from.guild_primary_color_;
    }
    if (cached_has_bits & 0x00000020u) {
      guild_secondary_color_ = from.guild_secondary_color_;
    }
    if (cached_has_bits & 0x00000040u) {
      guild_pattern_ = from.guild_pattern_;
    }
    if (cached_has_bits & 0x00000080u) {
      guild_flags_ = from.guild_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_guild_weekly_percentile(from._internal_guild_weekly_percentile());
  }
}

void CMsgLocalServerGuildData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLocalServerGuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLocalServerGuildData::CopyFrom(const CMsgLocalServerGuildData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLocalServerGuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLocalServerGuildData::IsInitialized() const {
  return true;
}

void CMsgLocalServerGuildData::InternalSwap(CMsgLocalServerGuildData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLocalServerGuildData, guild_weekly_percentile_)
      + sizeof(CMsgLocalServerGuildData::guild_weekly_percentile_)
      - PROTOBUF_FIELD_OFFSET(CMsgLocalServerGuildData, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLocalServerGuildData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLocalServerFakeLobbyData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLocalServerFakeLobbyData>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_primary_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_favorite_team(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_favorite_team_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgLocalServerGuildData& guild_info(const CMsgLocalServerFakeLobbyData* msg);
  static void set_has_guild_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teleport_fx_level(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgLocalServerGuildData&
CMsgLocalServerFakeLobbyData::_Internal::guild_info(const CMsgLocalServerFakeLobbyData* msg) {
  return *msg->guild_info_;
}
CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  event_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLocalServerFakeLobbyData)
}
CMsgLocalServerFakeLobbyData::CMsgLocalServerFakeLobbyData(const CMsgLocalServerFakeLobbyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      event_points_(from.event_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guild_info()) {
    guild_info_ = new ::CMsgLocalServerGuildData(*from.guild_info_);
  } else {
    guild_info_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&teleport_fx_level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(teleport_fx_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgLocalServerFakeLobbyData)
}

void CMsgLocalServerFakeLobbyData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&teleport_fx_level_) -
    reinterpret_cast<char*>(&guild_info_)) + sizeof(teleport_fx_level_));
}

CMsgLocalServerFakeLobbyData::~CMsgLocalServerFakeLobbyData() {
  // @@protoc_insertion_point(destructor:CMsgLocalServerFakeLobbyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLocalServerFakeLobbyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete guild_info_;
}

void CMsgLocalServerFakeLobbyData::ArenaDtor(void* object) {
  CMsgLocalServerFakeLobbyData* _this = reinterpret_cast< CMsgLocalServerFakeLobbyData* >(object);
  (void)_this;
}
void CMsgLocalServerFakeLobbyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLocalServerFakeLobbyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLocalServerFakeLobbyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLocalServerFakeLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(guild_info_ != nullptr);
    guild_info_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teleport_fx_level_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(teleport_fx_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLocalServerFakeLobbyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLobbyEventPoints event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_plus_subscriber(&has_bits);
          is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_primary_event_id(&has_bits);
          primary_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 favorite_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_favorite_team(&has_bits);
          favorite_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 favorite_team_quality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_favorite_team_quality(&has_bits);
          favorite_team_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgLocalServerGuildData guild_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_guild_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teleport_fx_level = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_teleport_fx_level(&has_bits);
          teleport_fx_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLocalServerFakeLobbyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLocalServerFakeLobbyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgLobbyEventPoints event_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_event_points(i), target, stream);
  }

  // optional bool is_plus_subscriber = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 primary_event_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_primary_event_id(), target);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_favorite_team(), target);
  }

  // optional uint32 favorite_team_quality = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_favorite_team_quality(), target);
  }

  // optional .CMsgLocalServerGuildData guild_info = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::guild_info(this), target, stream);
  }

  // optional uint32 teleport_fx_level = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_teleport_fx_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLocalServerFakeLobbyData)
  return target;
}

size_t CMsgLocalServerFakeLobbyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLocalServerFakeLobbyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLobbyEventPoints event_points = 2;
  total_size += 1UL * this->_internal_event_points_size();
  for (const auto& msg : this->event_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgLocalServerGuildData guild_info = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *guild_info_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool is_plus_subscriber = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 primary_event_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_event_id());
    }

    // optional uint32 favorite_team = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorite_team());
    }

    // optional uint32 favorite_team_quality = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_favorite_team_quality());
    }

    // optional uint32 teleport_fx_level = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teleport_fx_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLocalServerFakeLobbyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLocalServerFakeLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLocalServerFakeLobbyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLocalServerFakeLobbyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLocalServerFakeLobbyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLocalServerFakeLobbyData)
    MergeFrom(*source);
  }
}

void CMsgLocalServerFakeLobbyData::MergeFrom(const CMsgLocalServerFakeLobbyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLocalServerFakeLobbyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_points_.MergeFrom(from.event_points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_guild_info()->::CMsgLocalServerGuildData::MergeFrom(from._internal_guild_info());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    if (cached_has_bits & 0x00000008u) {
      primary_event_id_ = from.primary_event_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      favorite_team_ = from.favorite_team_;
    }
    if (cached_has_bits & 0x00000020u) {
      favorite_team_quality_ = from.favorite_team_quality_;
    }
    if (cached_has_bits & 0x00000040u) {
      teleport_fx_level_ = from.teleport_fx_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLocalServerFakeLobbyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLocalServerFakeLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLocalServerFakeLobbyData::CopyFrom(const CMsgLocalServerFakeLobbyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLocalServerFakeLobbyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLocalServerFakeLobbyData::IsInitialized() const {
  return true;
}

void CMsgLocalServerFakeLobbyData::InternalSwap(CMsgLocalServerFakeLobbyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_points_.InternalSwap(&other->event_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgLocalServerFakeLobbyData, teleport_fx_level_)
      + sizeof(CMsgLocalServerFakeLobbyData::teleport_fx_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgLocalServerFakeLobbyData, guild_info_)>(
          reinterpret_cast<char*>(&guild_info_),
          reinterpret_cast<char*>(&other->guild_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLocalServerFakeLobbyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBattleCupVictory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBattleCupVictory>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valid_until(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_division_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgBattleCupVictory::CMsgBattleCupVictory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBattleCupVictory)
}
CMsgBattleCupVictory::CMsgBattleCupVictory(const CMsgBattleCupVictory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(trophy_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgBattleCupVictory)
}

void CMsgBattleCupVictory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(trophy_id_));
}

CMsgBattleCupVictory::~CMsgBattleCupVictory() {
  // @@protoc_insertion_point(destructor:CMsgBattleCupVictory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBattleCupVictory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBattleCupVictory::ArenaDtor(void* object) {
  CMsgBattleCupVictory* _this = reinterpret_cast< CMsgBattleCupVictory* >(object);
  (void)_this;
}
void CMsgBattleCupVictory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBattleCupVictory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBattleCupVictory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBattleCupVictory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&streak_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(streak_));
  }
  trophy_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBattleCupVictory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 win_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_win_date(&has_bits);
          win_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 valid_until = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_valid_until(&has_bits);
          valid_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skill_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_skill_level(&has_bits);
          skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tournament_id(&has_bits);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 division_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_division_id(&has_bits);
          division_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 streak = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_streak(&has_bits);
          streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trophy_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_trophy_id(&has_bits);
          trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBattleCupVictory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBattleCupVictory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 win_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_win_date(), target);
  }

  // optional uint32 valid_until = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_valid_until(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_skill_level(), target);
  }

  // optional uint32 tournament_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tournament_id(), target);
  }

  // optional uint32 division_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_division_id(), target);
  }

  // optional uint32 team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_team_id(), target);
  }

  // optional uint32 streak = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_streak(), target);
  }

  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_trophy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBattleCupVictory)
  return target;
}

size_t CMsgBattleCupVictory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBattleCupVictory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 win_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_win_date());
    }

    // optional uint32 valid_until = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_valid_until());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skill_level());
    }

    // optional uint32 tournament_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 division_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_division_id());
    }

    // optional uint32 team_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 streak = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_streak());
    }

  }
  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trophy_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBattleCupVictory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBattleCupVictory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBattleCupVictory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBattleCupVictory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBattleCupVictory)
    MergeFrom(*source);
  }
}

void CMsgBattleCupVictory::MergeFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_date_ = from.win_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_until_ = from.valid_until_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_trophy_id(from._internal_trophy_id());
  }
}

void CMsgBattleCupVictory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBattleCupVictory::CopyFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleCupVictory::IsInitialized() const {
  return true;
}

void CMsgBattleCupVictory::InternalSwap(CMsgBattleCupVictory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBattleCupVictory, trophy_id_)
      + sizeof(CMsgBattleCupVictory::trophy_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBattleCupVictory, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBattleCupVictory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLobbyBattleCupVictoryList::_Internal {
 public:
};

CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  winners_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLobbyBattleCupVictoryList)
}
CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      winners_(from.winners_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLobbyBattleCupVictoryList)
}

void CMsgLobbyBattleCupVictoryList::SharedCtor() {
}

CMsgLobbyBattleCupVictoryList::~CMsgLobbyBattleCupVictoryList() {
  // @@protoc_insertion_point(destructor:CMsgLobbyBattleCupVictoryList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLobbyBattleCupVictoryList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLobbyBattleCupVictoryList::ArenaDtor(void* object) {
  CMsgLobbyBattleCupVictoryList* _this = reinterpret_cast< CMsgLobbyBattleCupVictoryList* >(object);
  (void)_this;
}
void CMsgLobbyBattleCupVictoryList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLobbyBattleCupVictoryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLobbyBattleCupVictoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLobbyBattleCupVictoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  winners_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLobbyBattleCupVictoryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgBattleCupVictory winners = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_winners(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLobbyBattleCupVictoryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLobbyBattleCupVictoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBattleCupVictory winners = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_winners_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_winners(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLobbyBattleCupVictoryList)
  return target;
}

size_t CMsgLobbyBattleCupVictoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLobbyBattleCupVictoryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBattleCupVictory winners = 1;
  total_size += 1UL * this->_internal_winners_size();
  for (const auto& msg : this->winners_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLobbyBattleCupVictoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyBattleCupVictoryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLobbyBattleCupVictoryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLobbyBattleCupVictoryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLobbyBattleCupVictoryList)
    MergeFrom(*source);
  }
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const CMsgLobbyBattleCupVictoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLobbyBattleCupVictoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winners_.MergeFrom(from.winners_);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLobbyBattleCupVictoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const CMsgLobbyBattleCupVictoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLobbyBattleCupVictoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyBattleCupVictoryList::IsInitialized() const {
  return true;
}

void CMsgLobbyBattleCupVictoryList::InternalSwap(CMsgLobbyBattleCupVictoryList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  winners_.InternalSwap(&other->winners_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLobbyBattleCupVictoryList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABroadcastNotification::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABroadcastNotification>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABroadcastNotification)
}
CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTABroadcastNotification::~CMsgDOTABroadcastNotification() {
  // @@protoc_insertion_point(destructor:CMsgDOTABroadcastNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABroadcastNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABroadcastNotification::ArenaDtor(void* object) {
  CMsgDOTABroadcastNotification* _this = reinterpret_cast< CMsgDOTABroadcastNotification* >(object);
  (void)_this;
}
void CMsgDOTABroadcastNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABroadcastNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABroadcastNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABroadcastNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABroadcastNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTABroadcastNotification.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABroadcastNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABroadcastNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTABroadcastNotification.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABroadcastNotification)
  return target;
}

size_t CMsgDOTABroadcastNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABroadcastNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABroadcastNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABroadcastNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABroadcastNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABroadcastNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABroadcastNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABroadcastNotification)
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastNotification::MergeFrom(const CMsgDOTABroadcastNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABroadcastNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void CMsgDOTABroadcastNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABroadcastNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::CopyFrom(const CMsgDOTABroadcastNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABroadcastNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastNotification::IsInitialized() const {
  return true;
}

void CMsgDOTABroadcastNotification::InternalSwap(CMsgDOTABroadcastNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABroadcastNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemHeroStatue::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemHeroStatue>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status_effect_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sequence_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inscription(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tournament_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CProtoItemHeroStatue::CProtoItemHeroStatue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wearable_(arena),
  style_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemHeroStatue)
}
CProtoItemHeroStatue::CProtoItemHeroStatue(const CProtoItemHeroStatue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wearable_(from.wearable_),
      style_(from.style_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sequence_name()) {
    sequence_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_name(), 
      GetArena());
  }
  inscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inscription()) {
    inscription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inscription(), 
      GetArena());
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_drop_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(tournament_drop_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::SharedCtor() {
sequence_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
inscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tournament_drop_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(tournament_drop_));
}

CProtoItemHeroStatue::~CProtoItemHeroStatue() {
  // @@protoc_insertion_point(destructor:CProtoItemHeroStatue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemHeroStatue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemHeroStatue::ArenaDtor(void* object) {
  CProtoItemHeroStatue* _this = reinterpret_cast< CProtoItemHeroStatue* >(object);
  (void)_this;
}
void CProtoItemHeroStatue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemHeroStatue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemHeroStatue::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemHeroStatue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wearable_.Clear();
  style_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequence_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      inscription_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_drop_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(tournament_drop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemHeroStatue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status_effect_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_status_effect_index(&has_bits);
          status_effect_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sequence_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sequence_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemHeroStatue.sequence_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cycle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_cycle(&has_bits);
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 wearable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wearable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wearable(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_inscription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemHeroStatue.inscription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_style(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_style(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool tournament_drop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_tournament_drop(&has_bits);
          tournament_drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemHeroStatue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemHeroStatue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequence_name().data(), static_cast<int>(this->_internal_sequence_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemHeroStatue.sequence_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequence_name(), target);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cycle(), target);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0, n = this->_internal_wearable_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_wearable(i), target);
  }

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inscription().data(), static_cast<int>(this->_internal_inscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemHeroStatue.inscription");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_inscription(), target);
  }

  // repeated uint32 style = 7;
  for (int i = 0, n = this->_internal_style_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_style(i), target);
  }

  // optional bool tournament_drop = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_tournament_drop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemHeroStatue)
  return target;
}

size_t CProtoItemHeroStatue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemHeroStatue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wearable = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wearable_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wearable_size());
    total_size += data_size;
  }

  // repeated uint32 style = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->style_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_style_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string sequence_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sequence_name());
    }

    // optional string inscription = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inscription());
    }

    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status_effect_index());
    }

    // optional float cycle = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool tournament_drop = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemHeroStatue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemHeroStatue)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemHeroStatue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemHeroStatue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemHeroStatue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemHeroStatue)
    MergeFrom(*source);
  }
}

void CProtoItemHeroStatue::MergeFrom(const CProtoItemHeroStatue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemHeroStatue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sequence_name(from._internal_sequence_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_inscription(from._internal_inscription());
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_effect_index_ = from.status_effect_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      cycle_ = from.cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      tournament_drop_ = from.tournament_drop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemHeroStatue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemHeroStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemHeroStatue::CopyFrom(const CProtoItemHeroStatue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemHeroStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemHeroStatue::IsInitialized() const {
  return true;
}

void CProtoItemHeroStatue::InternalSwap(CProtoItemHeroStatue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wearable_.InternalSwap(&other->wearable_);
  style_.InternalSwap(&other->style_);
  sequence_name_.Swap(&other->sequence_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inscription_.Swap(&other->inscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemHeroStatue, tournament_drop_)
      + sizeof(CProtoItemHeroStatue::tournament_drop_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemHeroStatue, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemHeroStatue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CProtoItemTeamShowcase::_Internal {
 public:
  using HasBits = decltype(std::declval<CProtoItemTeamShowcase>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status_effect_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sequence_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inscription(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CProtoItemTeamShowcase::CProtoItemTeamShowcase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wearable_(arena),
  style_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CProtoItemTeamShowcase)
}
CProtoItemTeamShowcase::CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wearable_(from.wearable_),
      style_(from.style_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sequence_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sequence_name()) {
    sequence_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sequence_name(), 
      GetArena());
  }
  inscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inscription()) {
    inscription_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_inscription(), 
      GetArena());
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(cycle_));
  // @@protoc_insertion_point(copy_constructor:CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::SharedCtor() {
sequence_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
inscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(cycle_));
}

CProtoItemTeamShowcase::~CProtoItemTeamShowcase() {
  // @@protoc_insertion_point(destructor:CProtoItemTeamShowcase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CProtoItemTeamShowcase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sequence_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemTeamShowcase::ArenaDtor(void* object) {
  CProtoItemTeamShowcase* _this = reinterpret_cast< CProtoItemTeamShowcase* >(object);
  (void)_this;
}
void CProtoItemTeamShowcase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CProtoItemTeamShowcase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CProtoItemTeamShowcase::Clear() {
// @@protoc_insertion_point(message_clear_start:CProtoItemTeamShowcase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wearable_.Clear();
  style_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sequence_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      inscription_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cycle_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(cycle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CProtoItemTeamShowcase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status_effect_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_status_effect_index(&has_bits);
          status_effect_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sequence_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sequence_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemTeamShowcase.sequence_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cycle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_cycle(&has_bits);
          cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 wearable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wearable(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wearable(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inscription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_inscription();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CProtoItemTeamShowcase.inscription");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_style(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_style(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CProtoItemTeamShowcase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CProtoItemTeamShowcase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sequence_name().data(), static_cast<int>(this->_internal_sequence_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemTeamShowcase.sequence_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sequence_name(), target);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cycle(), target);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0, n = this->_internal_wearable_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_wearable(i), target);
  }

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inscription().data(), static_cast<int>(this->_internal_inscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CProtoItemTeamShowcase.inscription");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_inscription(), target);
  }

  // repeated uint32 style = 7;
  for (int i = 0, n = this->_internal_style_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_style(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CProtoItemTeamShowcase)
  return target;
}

size_t CProtoItemTeamShowcase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CProtoItemTeamShowcase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wearable = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wearable_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wearable_size());
    total_size += data_size;
  }

  // repeated uint32 style = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->style_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_style_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string sequence_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sequence_name());
    }

    // optional string inscription = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_inscription());
    }

    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status_effect_index());
    }

    // optional float cycle = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CProtoItemTeamShowcase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CProtoItemTeamShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemTeamShowcase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CProtoItemTeamShowcase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CProtoItemTeamShowcase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CProtoItemTeamShowcase)
    MergeFrom(*source);
  }
}

void CProtoItemTeamShowcase::MergeFrom(const CProtoItemTeamShowcase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CProtoItemTeamShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sequence_name(from._internal_sequence_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_inscription(from._internal_inscription());
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_effect_index_ = from.status_effect_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      cycle_ = from.cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemTeamShowcase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CProtoItemTeamShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemTeamShowcase::CopyFrom(const CProtoItemTeamShowcase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CProtoItemTeamShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemTeamShowcase::IsInitialized() const {
  return true;
}

void CProtoItemTeamShowcase::InternalSwap(CProtoItemTeamShowcase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wearable_.InternalSwap(&other->wearable_);
  style_.InternalSwap(&other->style_);
  sequence_name_.Swap(&other->sequence_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inscription_.Swap(&other->inscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CProtoItemTeamShowcase, cycle_)
      + sizeof(CProtoItemTeamShowcase::cycle_)
      - PROTOBUF_FIELD_OFFSET(CProtoItemTeamShowcase, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CProtoItemTeamShowcase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMatchPlayerAbilityUpgrade::_Internal {
 public:
  using HasBits = decltype(std::declval<CMatchPlayerAbilityUpgrade>()._has_bits_);
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMatchPlayerAbilityUpgrade)
}
CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_, &from.ability_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&ability_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ability_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&ability_)) + sizeof(time_));
}

CMatchPlayerAbilityUpgrade::~CMatchPlayerAbilityUpgrade() {
  // @@protoc_insertion_point(destructor:CMatchPlayerAbilityUpgrade)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMatchPlayerAbilityUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMatchPlayerAbilityUpgrade::ArenaDtor(void* object) {
  CMatchPlayerAbilityUpgrade* _this = reinterpret_cast< CMatchPlayerAbilityUpgrade* >(object);
  (void)_this;
}
void CMatchPlayerAbilityUpgrade::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMatchPlayerAbilityUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMatchPlayerAbilityUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:CMatchPlayerAbilityUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&ability_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMatchPlayerAbilityUpgrade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability(&has_bits);
          ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchPlayerAbilityUpgrade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchPlayerAbilityUpgrade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability(), target);
  }

  // optional uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchPlayerAbilityUpgrade)
  return target;
}

size_t CMatchPlayerAbilityUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMatchPlayerAbilityUpgrade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability());
    }

    // optional uint32 time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMatchPlayerAbilityUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerAbilityUpgrade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchPlayerAbilityUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMatchPlayerAbilityUpgrade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMatchPlayerAbilityUpgrade)
    MergeFrom(*source);
  }
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const CMatchPlayerAbilityUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMatchPlayerAbilityUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_ = from.ability_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMatchPlayerAbilityUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const CMatchPlayerAbilityUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMatchPlayerAbilityUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerAbilityUpgrade::IsInitialized() const {
  return true;
}

void CMatchPlayerAbilityUpgrade::InternalSwap(CMatchPlayerAbilityUpgrade* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, time_)
      + sizeof(CMatchPlayerAbilityUpgrade::time_)
      - PROTOBUF_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, ability_)>(
          reinterpret_cast<char*>(&ability_),
          reinterpret_cast<char*>(&other->ability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchPlayerAbilityUpgrade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMatchPlayerTimedStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMatchPlayerTimedStats>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bounty_rune_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_range_creep_upgrade_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_observer_wards_dewarded(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_reliable_gold_earned(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_gold_loss_prevented(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_hero_kill_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_creep_kill_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_building_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_other_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_comeback_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_experimental_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_experimental2_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_creep_deny_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tp_scrolls_purchased_1(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tp_scrolls_purchased_2(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tp_scrolls_purchased_3(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tp_scrolls_purchased_4(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tp_scrolls_purchased_5(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_neutral_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_courier_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_roshan_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_income_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_custom_stats_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_custom_stats_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_custom_stats_3(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_custom_stats_4(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_custom_stats_5(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_item_value(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
};

CMatchPlayerTimedStats::CMatchPlayerTimedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMatchPlayerTimedStats)
}
CMatchPlayerTimedStats::CMatchPlayerTimedStats(const CMatchPlayerTimedStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&rampages_) -
    reinterpret_cast<char*>(&time_)) + sizeof(rampages_));
  // @@protoc_insertion_point(copy_constructor:CMatchPlayerTimedStats)
}

void CMatchPlayerTimedStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rampages_) -
    reinterpret_cast<char*>(&time_)) + sizeof(rampages_));
}

CMatchPlayerTimedStats::~CMatchPlayerTimedStats() {
  // @@protoc_insertion_point(destructor:CMatchPlayerTimedStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMatchPlayerTimedStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMatchPlayerTimedStats::ArenaDtor(void* object) {
  CMatchPlayerTimedStats* _this = reinterpret_cast< CMatchPlayerTimedStats* >(object);
  (void)_this;
}
void CMatchPlayerTimedStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMatchPlayerTimedStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMatchPlayerTimedStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMatchPlayerTimedStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&denies_) -
        reinterpret_cast<char*>(&time_)) + sizeof(denies_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bounty_rune_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&building_gold_) -
        reinterpret_cast<char*>(&bounty_rune_gold_)) + sizeof(building_gold_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&other_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tp_scrolls_purchased_3_) -
        reinterpret_cast<char*>(&other_gold_)) + sizeof(tp_scrolls_purchased_3_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tp_scrolls_purchased_4_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_stats_2_) -
        reinterpret_cast<char*>(&tp_scrolls_purchased_4_)) + sizeof(custom_stats_2_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&custom_stats_3_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&triple_kills_) -
        reinterpret_cast<char*>(&custom_stats_3_)) + sizeof(triple_kills_));
  }
  rampages_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMatchPlayerTimedStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&_has_bits_);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kills(&_has_bits_);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deaths(&_has_bits_);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_assists(&_has_bits_);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_net_worth(&_has_bits_);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_xp(&_has_bits_);
          xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_hits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_last_hits(&_has_bits_);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_denies(&_has_bits_);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_rune_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_bounty_rune_gold(&_has_bits_);
          bounty_rune_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 range_creep_upgrade_gold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_range_creep_upgrade_gold(&_has_bits_);
          range_creep_upgrade_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 observer_wards_dewarded = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_observer_wards_dewarded(&_has_bits_);
          observer_wards_dewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reliable_gold_earned = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_reliable_gold_earned(&_has_bits_);
          reliable_gold_earned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_loss_prevented = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_gold_loss_prevented(&_has_bits_);
          gold_loss_prevented_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_kill_gold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_hero_kill_gold(&_has_bits_);
          hero_kill_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creep_kill_gold = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_creep_kill_gold(&_has_bits_);
          creep_kill_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 building_gold = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_building_gold(&_has_bits_);
          building_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 other_gold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_other_gold(&_has_bits_);
          other_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 comeback_gold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_comeback_gold(&_has_bits_);
          comeback_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 experimental_gold = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_experimental_gold(&_has_bits_);
          experimental_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 experimental2_gold = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_experimental2_gold(&_has_bits_);
          experimental2_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 creep_deny_gold = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_creep_deny_gold(&_has_bits_);
          creep_deny_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tp_scrolls_purchased_1 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tp_scrolls_purchased_1(&_has_bits_);
          tp_scrolls_purchased_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tp_scrolls_purchased_2 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tp_scrolls_purchased_2(&_has_bits_);
          tp_scrolls_purchased_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tp_scrolls_purchased_3 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_tp_scrolls_purchased_3(&_has_bits_);
          tp_scrolls_purchased_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tp_scrolls_purchased_4 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tp_scrolls_purchased_4(&_has_bits_);
          tp_scrolls_purchased_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tp_scrolls_purchased_5 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tp_scrolls_purchased_5(&_has_bits_);
          tp_scrolls_purchased_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 neutral_gold = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_neutral_gold(&_has_bits_);
          neutral_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 courier_gold = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_courier_gold(&_has_bits_);
          courier_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roshan_gold = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_roshan_gold(&_has_bits_);
          roshan_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 income_gold = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_income_gold(&_has_bits_);
          income_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_stats_1 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_custom_stats_1(&_has_bits_);
          custom_stats_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_stats_2 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_custom_stats_2(&_has_bits_);
          custom_stats_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_stats_3 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_custom_stats_3(&_has_bits_);
          custom_stats_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_stats_4 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_custom_stats_4(&_has_bits_);
          custom_stats_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_stats_5 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_custom_stats_5(&_has_bits_);
          custom_stats_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_value = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_value(&_has_bits_);
          item_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_gold_spent = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_support_gold_spent(&_has_bits_);
          support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_camps_stacked(&_has_bits_);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_placed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_wards_placed(&_has_bits_);
          wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_triple_kills(&_has_bits_);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rampages = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rampages(&_has_bits_);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchPlayerTimedStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchPlayerTimedStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_assists(), target);
  }

  // optional uint32 net_worth = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_net_worth(), target);
  }

  // optional uint32 xp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_xp(), target);
  }

  // optional uint32 last_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_denies(), target);
  }

  // optional uint32 bounty_rune_gold = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_bounty_rune_gold(), target);
  }

  // optional uint32 range_creep_upgrade_gold = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_range_creep_upgrade_gold(), target);
  }

  // optional uint32 observer_wards_dewarded = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_observer_wards_dewarded(), target);
  }

  // optional uint32 reliable_gold_earned = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_reliable_gold_earned(), target);
  }

  // optional uint32 gold_loss_prevented = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_gold_loss_prevented(), target);
  }

  // optional uint32 hero_kill_gold = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_hero_kill_gold(), target);
  }

  // optional uint32 creep_kill_gold = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_creep_kill_gold(), target);
  }

  // optional uint32 building_gold = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_building_gold(), target);
  }

  // optional uint32 other_gold = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_other_gold(), target);
  }

  // optional uint32 comeback_gold = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_comeback_gold(), target);
  }

  // optional uint32 experimental_gold = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_experimental_gold(), target);
  }

  // optional uint32 experimental2_gold = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_experimental2_gold(), target);
  }

  // optional uint32 creep_deny_gold = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_creep_deny_gold(), target);
  }

  // optional uint32 tp_scrolls_purchased_1 = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_tp_scrolls_purchased_1(), target);
  }

  // optional uint32 tp_scrolls_purchased_2 = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tp_scrolls_purchased_2(), target);
  }

  // optional uint32 tp_scrolls_purchased_3 = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_tp_scrolls_purchased_3(), target);
  }

  // optional uint32 tp_scrolls_purchased_4 = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tp_scrolls_purchased_4(), target);
  }

  // optional uint32 tp_scrolls_purchased_5 = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tp_scrolls_purchased_5(), target);
  }

  // optional uint32 neutral_gold = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_neutral_gold(), target);
  }

  // optional uint32 courier_gold = 28;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_courier_gold(), target);
  }

  // optional uint32 roshan_gold = 29;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_roshan_gold(), target);
  }

  // optional uint32 income_gold = 30;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_income_gold(), target);
  }

  // optional uint32 custom_stats_1 = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_custom_stats_1(), target);
  }

  // optional uint32 custom_stats_2 = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_custom_stats_2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_stats_3 = 33;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_custom_stats_3(), target);
  }

  // optional uint32 custom_stats_4 = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_custom_stats_4(), target);
  }

  // optional uint32 custom_stats_5 = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_custom_stats_5(), target);
  }

  // optional uint32 item_value = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_item_value(), target);
  }

  // optional uint32 support_gold_spent = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_support_gold_spent(), target);
  }

  // optional uint32 camps_stacked = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_camps_stacked(), target);
  }

  // optional uint32 wards_placed = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_wards_placed(), target);
  }

  // optional uint32 triple_kills = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_triple_kills(), target);
  }

  // optional uint32 rampages = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_rampages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchPlayerTimedStats)
  return target;
}

size_t CMatchPlayerTimedStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMatchPlayerTimedStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 net_worth = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 xp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp());
    }

    // optional uint32 last_hits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 bounty_rune_gold = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_rune_gold());
    }

    // optional uint32 range_creep_upgrade_gold = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_range_creep_upgrade_gold());
    }

    // optional uint32 observer_wards_dewarded = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_dewarded());
    }

    // optional uint32 reliable_gold_earned = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reliable_gold_earned());
    }

    // optional uint32 gold_loss_prevented = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_loss_prevented());
    }

    // optional uint32 hero_kill_gold = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_kill_gold());
    }

    // optional uint32 creep_kill_gold = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep_kill_gold());
    }

    // optional uint32 building_gold = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_building_gold());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 other_gold = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_other_gold());
    }

    // optional uint32 comeback_gold = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_comeback_gold());
    }

    // optional uint32 experimental_gold = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_experimental_gold());
    }

    // optional uint32 experimental2_gold = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_experimental2_gold());
    }

    // optional uint32 creep_deny_gold = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep_deny_gold());
    }

    // optional uint32 tp_scrolls_purchased_1 = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tp_scrolls_purchased_1());
    }

    // optional uint32 tp_scrolls_purchased_2 = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tp_scrolls_purchased_2());
    }

    // optional uint32 tp_scrolls_purchased_3 = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tp_scrolls_purchased_3());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 tp_scrolls_purchased_4 = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tp_scrolls_purchased_4());
    }

    // optional uint32 tp_scrolls_purchased_5 = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tp_scrolls_purchased_5());
    }

    // optional uint32 neutral_gold = 27;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_neutral_gold());
    }

    // optional uint32 courier_gold = 28;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_courier_gold());
    }

    // optional uint32 roshan_gold = 29;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roshan_gold());
    }

    // optional uint32 income_gold = 30;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_income_gold());
    }

    // optional uint32 custom_stats_1 = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_stats_1());
    }

    // optional uint32 custom_stats_2 = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_stats_2());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 custom_stats_3 = 33;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_stats_3());
    }

    // optional uint32 custom_stats_4 = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_stats_4());
    }

    // optional uint32 custom_stats_5 = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_stats_5());
    }

    // optional uint32 item_value = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_value());
    }

    // optional uint32 support_gold_spent = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold_spent());
    }

    // optional uint32 camps_stacked = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 wards_placed = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_placed());
    }

    // optional uint32 triple_kills = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_triple_kills());
    }

  }
  // optional uint32 rampages = 41;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rampages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchPlayerTimedStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMatchPlayerTimedStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerTimedStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchPlayerTimedStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMatchPlayerTimedStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMatchPlayerTimedStats)
    MergeFrom(*source);
  }
}

void CMatchPlayerTimedStats::MergeFrom(const CMatchPlayerTimedStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMatchPlayerTimedStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000020u) {
      xp_ = from.xp_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000080u) {
      denies_ = from.denies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bounty_rune_gold_ = from.bounty_rune_gold_;
    }
    if (cached_has_bits & 0x00000200u) {
      range_creep_upgrade_gold_ = from.range_creep_upgrade_gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      observer_wards_dewarded_ = from.observer_wards_dewarded_;
    }
    if (cached_has_bits & 0x00000800u) {
      reliable_gold_earned_ = from.reliable_gold_earned_;
    }
    if (cached_has_bits & 0x00001000u) {
      gold_loss_prevented_ = from.gold_loss_prevented_;
    }
    if (cached_has_bits & 0x00002000u) {
      hero_kill_gold_ = from.hero_kill_gold_;
    }
    if (cached_has_bits & 0x00004000u) {
      creep_kill_gold_ = from.creep_kill_gold_;
    }
    if (cached_has_bits & 0x00008000u) {
      building_gold_ = from.building_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      other_gold_ = from.other_gold_;
    }
    if (cached_has_bits & 0x00020000u) {
      comeback_gold_ = from.comeback_gold_;
    }
    if (cached_has_bits & 0x00040000u) {
      experimental_gold_ = from.experimental_gold_;
    }
    if (cached_has_bits & 0x00080000u) {
      experimental2_gold_ = from.experimental2_gold_;
    }
    if (cached_has_bits & 0x00100000u) {
      creep_deny_gold_ = from.creep_deny_gold_;
    }
    if (cached_has_bits & 0x00200000u) {
      tp_scrolls_purchased_1_ = from.tp_scrolls_purchased_1_;
    }
    if (cached_has_bits & 0x00400000u) {
      tp_scrolls_purchased_2_ = from.tp_scrolls_purchased_2_;
    }
    if (cached_has_bits & 0x00800000u) {
      tp_scrolls_purchased_3_ = from.tp_scrolls_purchased_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tp_scrolls_purchased_4_ = from.tp_scrolls_purchased_4_;
    }
    if (cached_has_bits & 0x02000000u) {
      tp_scrolls_purchased_5_ = from.tp_scrolls_purchased_5_;
    }
    if (cached_has_bits & 0x04000000u) {
      neutral_gold_ = from.neutral_gold_;
    }
    if (cached_has_bits & 0x08000000u) {
      courier_gold_ = from.courier_gold_;
    }
    if (cached_has_bits & 0x10000000u) {
      roshan_gold_ = from.roshan_gold_;
    }
    if (cached_has_bits & 0x20000000u) {
      income_gold_ = from.income_gold_;
    }
    if (cached_has_bits & 0x40000000u) {
      custom_stats_1_ = from.custom_stats_1_;
    }
    if (cached_has_bits & 0x80000000u) {
      custom_stats_2_ = from.custom_stats_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      custom_stats_3_ = from.custom_stats_3_;
    }
    if (cached_has_bits & 0x00000002u) {
      custom_stats_4_ = from.custom_stats_4_;
    }
    if (cached_has_bits & 0x00000004u) {
      custom_stats_5_ = from.custom_stats_5_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_value_ = from.item_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      support_gold_spent_ = from.support_gold_spent_;
    }
    if (cached_has_bits & 0x00000020u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00000040u) {
      wards_placed_ = from.wards_placed_;
    }
    if (cached_has_bits & 0x00000080u) {
      triple_kills_ = from.triple_kills_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_rampages(from._internal_rampages());
  }
}

void CMatchPlayerTimedStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMatchPlayerTimedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerTimedStats::CopyFrom(const CMatchPlayerTimedStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMatchPlayerTimedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerTimedStats::IsInitialized() const {
  return true;
}

void CMatchPlayerTimedStats::InternalSwap(CMatchPlayerTimedStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMatchPlayerTimedStats, rampages_)
      + sizeof(CMatchPlayerTimedStats::rampages_)
      - PROTOBUF_FIELD_OFFSET(CMatchPlayerTimedStats, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchPlayerTimedStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMatchTeamTimedStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMatchTeamTimedStats>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enemy_towers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enemy_barracks_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_enemy_towers_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enemy_barracks_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMatchTeamTimedStats::CMatchTeamTimedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMatchTeamTimedStats)
}
CMatchTeamTimedStats::CMatchTeamTimedStats(const CMatchTeamTimedStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemy_barracks_status_) -
    reinterpret_cast<char*>(&time_)) + sizeof(enemy_barracks_status_));
  // @@protoc_insertion_point(copy_constructor:CMatchTeamTimedStats)
}

void CMatchTeamTimedStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enemy_barracks_status_) -
    reinterpret_cast<char*>(&time_)) + sizeof(enemy_barracks_status_));
}

CMatchTeamTimedStats::~CMatchTeamTimedStats() {
  // @@protoc_insertion_point(destructor:CMatchTeamTimedStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMatchTeamTimedStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMatchTeamTimedStats::ArenaDtor(void* object) {
  CMatchTeamTimedStats* _this = reinterpret_cast< CMatchTeamTimedStats* >(object);
  (void)_this;
}
void CMatchTeamTimedStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMatchTeamTimedStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMatchTeamTimedStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMatchTeamTimedStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&enemy_barracks_status_) -
        reinterpret_cast<char*>(&time_)) + sizeof(enemy_barracks_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMatchTeamTimedStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemy_towers_killed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enemy_towers_killed(&has_bits);
          enemy_towers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemy_barracks_killed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_enemy_barracks_killed(&has_bits);
          enemy_barracks_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemy_towers_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_enemy_towers_status(&has_bits);
          enemy_towers_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enemy_barracks_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_enemy_barracks_status(&has_bits);
          enemy_barracks_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchTeamTimedStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchTeamTimedStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time(), target);
  }

  // optional uint32 enemy_towers_killed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enemy_towers_killed(), target);
  }

  // optional uint32 enemy_barracks_killed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_enemy_barracks_killed(), target);
  }

  // optional uint32 enemy_towers_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_enemy_towers_status(), target);
  }

  // optional uint32 enemy_barracks_status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_enemy_barracks_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchTeamTimedStats)
  return target;
}

size_t CMatchTeamTimedStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMatchTeamTimedStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time());
    }

    // optional uint32 enemy_towers_killed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemy_towers_killed());
    }

    // optional uint32 enemy_barracks_killed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemy_barracks_killed());
    }

    // optional uint32 enemy_towers_status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemy_towers_status());
    }

    // optional uint32 enemy_barracks_status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enemy_barracks_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchTeamTimedStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMatchTeamTimedStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchTeamTimedStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchTeamTimedStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMatchTeamTimedStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMatchTeamTimedStats)
    MergeFrom(*source);
  }
}

void CMatchTeamTimedStats::MergeFrom(const CMatchTeamTimedStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMatchTeamTimedStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000002u) {
      enemy_towers_killed_ = from.enemy_towers_killed_;
    }
    if (cached_has_bits & 0x00000004u) {
      enemy_barracks_killed_ = from.enemy_barracks_killed_;
    }
    if (cached_has_bits & 0x00000008u) {
      enemy_towers_status_ = from.enemy_towers_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      enemy_barracks_status_ = from.enemy_barracks_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchTeamTimedStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMatchTeamTimedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchTeamTimedStats::CopyFrom(const CMatchTeamTimedStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMatchTeamTimedStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchTeamTimedStats::IsInitialized() const {
  return true;
}

void CMatchTeamTimedStats::InternalSwap(CMatchTeamTimedStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMatchTeamTimedStats, enemy_barracks_status_)
      + sizeof(CMatchTeamTimedStats::enemy_barracks_status_)
      - PROTOBUF_FIELD_OFFSET(CMatchTeamTimedStats, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchTeamTimedStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMatchAdditionalUnitInventory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMatchAdditionalUnitInventory>()._has_bits_);
  static void set_has_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMatchAdditionalUnitInventory)
}
CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit_name()) {
    unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::SharedCtor() {
unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMatchAdditionalUnitInventory::~CMatchAdditionalUnitInventory() {
  // @@protoc_insertion_point(destructor:CMatchAdditionalUnitInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMatchAdditionalUnitInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMatchAdditionalUnitInventory::ArenaDtor(void* object) {
  CMatchAdditionalUnitInventory* _this = reinterpret_cast< CMatchAdditionalUnitInventory* >(object);
  (void)_this;
}
void CMatchAdditionalUnitInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMatchAdditionalUnitInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMatchAdditionalUnitInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMatchAdditionalUnitInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unit_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMatchAdditionalUnitInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unit_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMatchAdditionalUnitInventory.unit_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchAdditionalUnitInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchAdditionalUnitInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit_name().data(), static_cast<int>(this->_internal_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMatchAdditionalUnitInventory.unit_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unit_name(), target);
  }

  // repeated uint32 items = 2;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchAdditionalUnitInventory)
  return target;
}

size_t CMatchAdditionalUnitInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMatchAdditionalUnitInventory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 items = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  // optional string unit_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unit_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchAdditionalUnitInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMatchAdditionalUnitInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchAdditionalUnitInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchAdditionalUnitInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMatchAdditionalUnitInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMatchAdditionalUnitInventory)
    MergeFrom(*source);
  }
}

void CMatchAdditionalUnitInventory::MergeFrom(const CMatchAdditionalUnitInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMatchAdditionalUnitInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from._internal_has_unit_name()) {
    _internal_set_unit_name(from._internal_unit_name());
  }
}

void CMatchAdditionalUnitInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMatchAdditionalUnitInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::CopyFrom(const CMatchAdditionalUnitInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMatchAdditionalUnitInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchAdditionalUnitInventory::IsInitialized() const {
  return true;
}

void CMatchAdditionalUnitInventory::InternalSwap(CMatchAdditionalUnitInventory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  unit_name_.Swap(&other->unit_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchAdditionalUnitInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMatchPlayerPermanentBuff::_Internal {
 public:
  using HasBits = decltype(std::declval<CMatchPlayerPermanentBuff>()._has_bits_);
  static void set_has_permanent_buff(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grant_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMatchPlayerPermanentBuff)
}
CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&permanent_buff_, &from.permanent_buff_,
    static_cast<size_t>(reinterpret_cast<char*>(&grant_time_) -
    reinterpret_cast<char*>(&permanent_buff_)) + sizeof(grant_time_));
  // @@protoc_insertion_point(copy_constructor:CMatchPlayerPermanentBuff)
}

void CMatchPlayerPermanentBuff::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&permanent_buff_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&grant_time_) -
    reinterpret_cast<char*>(&permanent_buff_)) + sizeof(grant_time_));
}

CMatchPlayerPermanentBuff::~CMatchPlayerPermanentBuff() {
  // @@protoc_insertion_point(destructor:CMatchPlayerPermanentBuff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMatchPlayerPermanentBuff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMatchPlayerPermanentBuff::ArenaDtor(void* object) {
  CMatchPlayerPermanentBuff* _this = reinterpret_cast< CMatchPlayerPermanentBuff* >(object);
  (void)_this;
}
void CMatchPlayerPermanentBuff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMatchPlayerPermanentBuff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMatchPlayerPermanentBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:CMatchPlayerPermanentBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&permanent_buff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grant_time_) -
        reinterpret_cast<char*>(&permanent_buff_)) + sizeof(grant_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMatchPlayerPermanentBuff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 permanent_buff = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_permanent_buff(&has_bits);
          permanent_buff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stack_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stack_count(&has_bits);
          stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grant_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_grant_time(&has_bits);
          grant_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchPlayerPermanentBuff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchPlayerPermanentBuff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permanent_buff = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_permanent_buff(), target);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stack_count(), target);
  }

  // optional uint32 grant_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_grant_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchPlayerPermanentBuff)
  return target;
}

size_t CMatchPlayerPermanentBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMatchPlayerPermanentBuff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 permanent_buff = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_permanent_buff());
    }

    // optional uint32 stack_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stack_count());
    }

    // optional uint32 grant_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grant_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchPlayerPermanentBuff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMatchPlayerPermanentBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerPermanentBuff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchPlayerPermanentBuff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMatchPlayerPermanentBuff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMatchPlayerPermanentBuff)
    MergeFrom(*source);
  }
}

void CMatchPlayerPermanentBuff::MergeFrom(const CMatchPlayerPermanentBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMatchPlayerPermanentBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      permanent_buff_ = from.permanent_buff_;
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      grant_time_ = from.grant_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerPermanentBuff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMatchPlayerPermanentBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerPermanentBuff::CopyFrom(const CMatchPlayerPermanentBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMatchPlayerPermanentBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerPermanentBuff::IsInitialized() const {
  return true;
}

void CMatchPlayerPermanentBuff::InternalSwap(CMatchPlayerPermanentBuff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMatchPlayerPermanentBuff, grant_time_)
      + sizeof(CMatchPlayerPermanentBuff::grant_time_)
      - PROTOBUF_FIELD_OFFSET(CMatchPlayerPermanentBuff, permanent_buff_)>(
          reinterpret_cast<char*>(&permanent_buff_),
          reinterpret_cast<char*>(&other->permanent_buff_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchPlayerPermanentBuff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMatchHeroSelectEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMatchHeroSelectEvent>()._has_bits_);
  static void set_has_is_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMatchHeroSelectEvent::CMatchHeroSelectEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMatchHeroSelectEvent)
}
CMatchHeroSelectEvent::CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_pick_, &from.is_pick_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_pick_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
}

CMatchHeroSelectEvent::~CMatchHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:CMatchHeroSelectEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMatchHeroSelectEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMatchHeroSelectEvent::ArenaDtor(void* object) {
  CMatchHeroSelectEvent* _this = reinterpret_cast< CMatchHeroSelectEvent* >(object);
  (void)_this;
}
void CMatchHeroSelectEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMatchHeroSelectEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMatchHeroSelectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMatchHeroSelectEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&is_pick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&is_pick_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMatchHeroSelectEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_pick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_pick(&has_bits);
          is_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMatchHeroSelectEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMatchHeroSelectEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_pick(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMatchHeroSelectEvent)
  return target;
}

size_t CMatchHeroSelectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMatchHeroSelectEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool is_pick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMatchHeroSelectEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMatchHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchHeroSelectEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMatchHeroSelectEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMatchHeroSelectEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMatchHeroSelectEvent)
    MergeFrom(*source);
  }
}

void CMatchHeroSelectEvent::MergeFrom(const CMatchHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMatchHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      is_pick_ = from.is_pick_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchHeroSelectEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMatchHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::CopyFrom(const CMatchHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMatchHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchHeroSelectEvent::IsInitialized() const {
  return true;
}

void CMatchHeroSelectEvent::InternalSwap(CMatchHeroSelectEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMatchHeroSelectEvent, hero_id_)
      + sizeof(CMatchHeroSelectEvent::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMatchHeroSelectEvent, is_pick_)>(
          reinterpret_cast<char*>(&is_pick_),
          reinterpret_cast<char*>(&other->is_pick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMatchHeroSelectEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CPartySearchClientParty::_Internal {
 public:
  using HasBits = decltype(std::declval<CPartySearchClientParty>()._has_bits_);
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_beacon_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CPartySearchClientParty::CPartySearchClientParty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  party_members_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CPartySearchClientParty)
}
CPartySearchClientParty::CPartySearchClientParty(const CPartySearchClientParty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      party_members_(from.party_members_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&beacon_type_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(beacon_type_));
  // @@protoc_insertion_point(copy_constructor:CPartySearchClientParty)
}

void CPartySearchClientParty::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&party_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&beacon_type_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(beacon_type_));
}

CPartySearchClientParty::~CPartySearchClientParty() {
  // @@protoc_insertion_point(destructor:CPartySearchClientParty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CPartySearchClientParty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CPartySearchClientParty::ArenaDtor(void* object) {
  CPartySearchClientParty* _this = reinterpret_cast< CPartySearchClientParty* >(object);
  (void)_this;
}
void CPartySearchClientParty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CPartySearchClientParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CPartySearchClientParty::Clear() {
// @@protoc_insertion_point(message_clear_start:CPartySearchClientParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  party_members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&beacon_type_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(beacon_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPartySearchClientParty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 party_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_party_id(&has_bits);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 beacon_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_beacon_type(&has_bits);
          beacon_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 party_members = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_party_members(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_party_members(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CPartySearchClientParty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CPartySearchClientParty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_party_id(), target);
  }

  // optional int32 beacon_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_beacon_type(), target);
  }

  // repeated fixed32 party_members = 3;
  for (int i = 0, n = this->_internal_party_members_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_party_members(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CPartySearchClientParty)
  return target;
}

size_t CPartySearchClientParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CPartySearchClientParty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 party_members = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_party_members_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_party_members_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 party_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 beacon_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_beacon_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CPartySearchClientParty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CPartySearchClientParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CPartySearchClientParty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CPartySearchClientParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CPartySearchClientParty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CPartySearchClientParty)
    MergeFrom(*source);
  }
}

void CPartySearchClientParty::MergeFrom(const CPartySearchClientParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CPartySearchClientParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  party_members_.MergeFrom(from.party_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      beacon_type_ = from.beacon_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CPartySearchClientParty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CPartySearchClientParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CPartySearchClientParty::CopyFrom(const CPartySearchClientParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CPartySearchClientParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPartySearchClientParty::IsInitialized() const {
  return true;
}

void CPartySearchClientParty::InternalSwap(CPartySearchClientParty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  party_members_.InternalSwap(&other->party_members_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPartySearchClientParty, beacon_type_)
      + sizeof(CPartySearchClientParty::beacon_type_)
      - PROTOBUF_FIELD_OFFSET(CPartySearchClientParty, party_id_)>(
          reinterpret_cast<char*>(&party_id_),
          reinterpret_cast<char*>(&other->party_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPartySearchClientParty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProcessFantasyScheduledEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProcessFantasyScheduledEvent>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fantasy_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_season(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_reference_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProcessFantasyScheduledEvent)
}
CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&reference_data_) -
    reinterpret_cast<char*>(&event_)) + sizeof(reference_data_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reference_data_) -
    reinterpret_cast<char*>(&event_)) + sizeof(reference_data_));
}

CMsgDOTAProcessFantasyScheduledEvent::~CMsgDOTAProcessFantasyScheduledEvent() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProcessFantasyScheduledEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProcessFantasyScheduledEvent::ArenaDtor(void* object) {
  CMsgDOTAProcessFantasyScheduledEvent* _this = reinterpret_cast< CMsgDOTAProcessFantasyScheduledEvent* >(object);
  (void)_this;
}
void CMsgDOTAProcessFantasyScheduledEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProcessFantasyScheduledEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProcessFantasyScheduledEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProcessFantasyScheduledEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reference_data_) -
        reinterpret_cast<char*>(&event_)) + sizeof(reference_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProcessFantasyScheduledEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event(&has_bits);
          event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fantasy_league_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_fantasy_league_id(&has_bits);
          fantasy_league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 season = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_season(&has_bits);
          season_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reference_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_reference_data(&has_bits);
          reference_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProcessFantasyScheduledEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProcessFantasyScheduledEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fantasy_league_id(), target);
  }

  // optional uint32 season = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_season(), target);
  }

  // optional uint32 reference_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_reference_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProcessFantasyScheduledEvent)
  return target;
}

size_t CMsgDOTAProcessFantasyScheduledEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProcessFantasyScheduledEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 event = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 fantasy_league_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fantasy_league_id());
    }

    // optional uint32 season = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_season());
    }

    // optional uint32 reference_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reference_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProcessFantasyScheduledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProcessFantasyScheduledEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProcessFantasyScheduledEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProcessFantasyScheduledEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProcessFantasyScheduledEvent)
    MergeFrom(*source);
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProcessFantasyScheduledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000010u) {
      reference_data_ = from.reference_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProcessFantasyScheduledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProcessFantasyScheduledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProcessFantasyScheduledEvent::IsInitialized() const {
  return true;
}

void CMsgDOTAProcessFantasyScheduledEvent::InternalSwap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, reference_data_)
      + sizeof(CMsgDOTAProcessFantasyScheduledEvent::reference_data_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProcessFantasyScheduledEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAHasItemQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAHasItemQuery>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAHasItemQuery)
}
CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
}

CMsgDOTAHasItemQuery::~CMsgDOTAHasItemQuery() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAHasItemQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAHasItemQuery::ArenaDtor(void* object) {
  CMsgDOTAHasItemQuery* _this = reinterpret_cast< CMsgDOTAHasItemQuery* >(object);
  (void)_this;
}
void CMsgDOTAHasItemQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAHasItemQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAHasItemQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAHasItemQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAHasItemQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAHasItemQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemQuery)
  return target;
}

size_t CMsgDOTAHasItemQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAHasItemQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAHasItemQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAHasItemQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAHasItemQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAHasItemQuery)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemQuery::MergeFrom(const CMsgDOTAHasItemQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAHasItemQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAHasItemQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAHasItemQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemQuery::CopyFrom(const CMsgDOTAHasItemQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAHasItemQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemQuery::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemQuery::InternalSwap(CMsgDOTAHasItemQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAHasItemQuery, account_id_)
      + sizeof(CMsgDOTAHasItemQuery::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAHasItemQuery, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAHasItemQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAHasItemResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAHasItemResponse>()._has_bits_);
  static void set_has_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAHasItemResponse)
}
CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  has_item_ = from.has_item_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::SharedCtor() {
has_item_ = false;
}

CMsgDOTAHasItemResponse::~CMsgDOTAHasItemResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAHasItemResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAHasItemResponse::ArenaDtor(void* object) {
  CMsgDOTAHasItemResponse* _this = reinterpret_cast< CMsgDOTAHasItemResponse* >(object);
  (void)_this;
}
void CMsgDOTAHasItemResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAHasItemResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAHasItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAHasItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_item_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAHasItemResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_item(&has_bits);
          has_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAHasItemResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_item(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemResponse)
  return target;
}

size_t CMsgDOTAHasItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAHasItemResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_item = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAHasItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAHasItemResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAHasItemResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAHasItemResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemResponse::MergeFrom(const CMsgDOTAHasItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAHasItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_has_item()) {
    _internal_set_has_item(from._internal_has_item());
  }
}

void CMsgDOTAHasItemResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAHasItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemResponse::CopyFrom(const CMsgDOTAHasItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAHasItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemResponse::InternalSwap(CMsgDOTAHasItemResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_item_, other->has_item_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAHasItemResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCIsProQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCIsProQuery>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCIsProQuery::CMsgGCIsProQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCIsProQuery)
}
CMsgGCIsProQuery::CMsgGCIsProQuery(const CMsgGCIsProQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCIsProQuery)
}

void CMsgGCIsProQuery::SharedCtor() {
account_id_ = 0u;
}

CMsgGCIsProQuery::~CMsgGCIsProQuery() {
  // @@protoc_insertion_point(destructor:CMsgGCIsProQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCIsProQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCIsProQuery::ArenaDtor(void* object) {
  CMsgGCIsProQuery* _this = reinterpret_cast< CMsgGCIsProQuery* >(object);
  (void)_this;
}
void CMsgGCIsProQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCIsProQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCIsProQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCIsProQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCIsProQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCIsProQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCIsProQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCIsProQuery)
  return target;
}

size_t CMsgGCIsProQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCIsProQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCIsProQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCIsProQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIsProQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCIsProQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCIsProQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCIsProQuery)
    MergeFrom(*source);
  }
}

void CMsgGCIsProQuery::MergeFrom(const CMsgGCIsProQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCIsProQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgGCIsProQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCIsProQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIsProQuery::CopyFrom(const CMsgGCIsProQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCIsProQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIsProQuery::IsInitialized() const {
  return true;
}

void CMsgGCIsProQuery::InternalSwap(CMsgGCIsProQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCIsProQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCIsProResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCIsProResponse>()._has_bits_);
  static void set_has_is_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCIsProResponse::CMsgGCIsProResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCIsProResponse)
}
CMsgGCIsProResponse::CMsgGCIsProResponse(const CMsgGCIsProResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_pro_ = from.is_pro_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCIsProResponse)
}

void CMsgGCIsProResponse::SharedCtor() {
is_pro_ = false;
}

CMsgGCIsProResponse::~CMsgGCIsProResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCIsProResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCIsProResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCIsProResponse::ArenaDtor(void* object) {
  CMsgGCIsProResponse* _this = reinterpret_cast< CMsgGCIsProResponse* >(object);
  (void)_this;
}
void CMsgGCIsProResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCIsProResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCIsProResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCIsProResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_pro_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCIsProResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is_pro = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_pro(&has_bits);
          is_pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCIsProResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCIsProResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pro = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_pro(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCIsProResponse)
  return target;
}

size_t CMsgGCIsProResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCIsProResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool is_pro = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCIsProResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCIsProResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIsProResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCIsProResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCIsProResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCIsProResponse)
    MergeFrom(*source);
  }
}

void CMsgGCIsProResponse::MergeFrom(const CMsgGCIsProResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCIsProResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_is_pro()) {
    _internal_set_is_pro(from._internal_is_pro());
  }
}

void CMsgGCIsProResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCIsProResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIsProResponse::CopyFrom(const CMsgGCIsProResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCIsProResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIsProResponse::IsInitialized() const {
  return true;
}

void CMsgGCIsProResponse::InternalSwap(CMsgGCIsProResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(is_pro_, other->is_pro_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCIsProResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAHasItemDefsQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAHasItemDefsQuery>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  itemdef_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAHasItemDefsQuery)
}
CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      itemdef_ids_(from.itemdef_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::SharedCtor() {
account_id_ = 0u;
}

CMsgDOTAHasItemDefsQuery::~CMsgDOTAHasItemDefsQuery() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemDefsQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAHasItemDefsQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAHasItemDefsQuery::ArenaDtor(void* object) {
  CMsgDOTAHasItemDefsQuery* _this = reinterpret_cast< CMsgDOTAHasItemDefsQuery* >(object);
  (void)_this;
}
void CMsgDOTAHasItemDefsQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAHasItemDefsQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAHasItemDefsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAHasItemDefsQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemdef_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAHasItemDefsQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 itemdef_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_itemdef_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_itemdef_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAHasItemDefsQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemDefsQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0, n = this->_internal_itemdef_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemdef_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemDefsQuery)
  return target;
}

size_t CMsgDOTAHasItemDefsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAHasItemDefsQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 itemdef_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->itemdef_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_itemdef_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAHasItemDefsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAHasItemDefsQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAHasItemDefsQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAHasItemDefsQuery)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const CMsgDOTAHasItemDefsQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAHasItemDefsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdef_ids_.MergeFrom(from.itemdef_ids_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAHasItemDefsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const CMsgDOTAHasItemDefsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAHasItemDefsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsQuery::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemDefsQuery::InternalSwap(CMsgDOTAHasItemDefsQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemdef_ids_.InternalSwap(&other->itemdef_ids_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAHasItemDefsQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAHasItemDefsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAHasItemDefsResponse>()._has_bits_);
  static void set_has_has_items(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAHasItemDefsResponse)
}
CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  has_items_ = from.has_items_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::SharedCtor() {
has_items_ = false;
}

CMsgDOTAHasItemDefsResponse::~CMsgDOTAHasItemDefsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAHasItemDefsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAHasItemDefsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAHasItemDefsResponse::ArenaDtor(void* object) {
  CMsgDOTAHasItemDefsResponse* _this = reinterpret_cast< CMsgDOTAHasItemDefsResponse* >(object);
  (void)_this;
}
void CMsgDOTAHasItemDefsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAHasItemDefsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAHasItemDefsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAHasItemDefsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  has_items_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAHasItemDefsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool has_items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_has_items(&has_bits);
          has_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAHasItemDefsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAHasItemDefsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_items = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAHasItemDefsResponse)
  return target;
}

size_t CMsgDOTAHasItemDefsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAHasItemDefsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool has_items = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAHasItemDefsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAHasItemDefsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAHasItemDefsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAHasItemDefsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const CMsgDOTAHasItemDefsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAHasItemDefsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_has_items()) {
    _internal_set_has_items(from._internal_has_items());
  }
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAHasItemDefsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const CMsgDOTAHasItemDefsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAHasItemDefsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemDefsResponse::InternalSwap(CMsgDOTAHasItemDefsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_items_, other->has_items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAHasItemDefsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCGetPlayerCardItemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPlayerCardItemInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_all_for_event(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_card_item_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPlayerCardItemInfo)
}
CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      player_card_item_ids_(from.player_card_item_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&all_for_event_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(all_for_event_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPlayerCardItemInfo)
}

void CMsgGCGetPlayerCardItemInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&all_for_event_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(all_for_event_));
}

CMsgGCGetPlayerCardItemInfo::~CMsgGCGetPlayerCardItemInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPlayerCardItemInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCGetPlayerCardItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCGetPlayerCardItemInfo::ArenaDtor(void* object) {
  CMsgGCGetPlayerCardItemInfo* _this = reinterpret_cast< CMsgGCGetPlayerCardItemInfo* >(object);
  (void)_this;
}
void CMsgGCGetPlayerCardItemInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPlayerCardItemInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPlayerCardItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPlayerCardItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_card_item_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&all_for_event_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(all_for_event_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPlayerCardItemInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 player_card_item_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_player_card_item_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_player_card_item_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 all_for_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_all_for_event(&has_bits);
          all_for_event_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCGetPlayerCardItemInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPlayerCardItemInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint64 player_card_item_ids = 2;
  for (int i = 0, n = this->_internal_player_card_item_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_player_card_item_ids(i), target);
  }

  // optional uint32 all_for_event = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_all_for_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPlayerCardItemInfo)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPlayerCardItemInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 player_card_item_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->player_card_item_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_player_card_item_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 all_for_event = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_all_for_event());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCGetPlayerCardItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCGetPlayerCardItemInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCGetPlayerCardItemInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCGetPlayerCardItemInfo)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPlayerCardItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_item_ids_.MergeFrom(from.player_card_item_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      all_for_event_ = from.all_for_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCGetPlayerCardItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPlayerCardItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfo::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfo::InternalSwap(CMsgGCGetPlayerCardItemInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  player_card_item_ids_.InternalSwap(&other->player_card_item_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, all_for_event_)
      + sizeof(CMsgGCGetPlayerCardItemInfo::all_for_event_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPlayerCardItemInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>()._has_bits_);
  static void set_has_player_card_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packed_bonuses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}
CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_card_item_id_, &from.player_card_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&player_card_item_id_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_card_item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&player_card_item_id_)) + sizeof(account_id_));
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::ArenaDtor(void* object) {
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* _this = reinterpret_cast< CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* >(object);
  (void)_this;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_card_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&player_card_item_id_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 player_card_item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_card_item_id(&has_bits);
          player_card_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 packed_bonuses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_packed_bonuses(&has_bits);
          packed_bonuses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 player_card_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_player_card_item_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint64 packed_bonuses = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_packed_bonuses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 player_card_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_player_card_item_id());
    }

    // optional uint64 packed_bonuses = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_packed_bonuses());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_card_item_id_ = from.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      packed_bonuses_ = from.packed_bonuses_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InternalSwap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, account_id_)
      + sizeof(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, player_card_item_id_)>(
          reinterpret_cast<char*>(&player_card_item_id_),
          reinterpret_cast<char*>(&other->player_card_item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCGetPlayerCardItemInfoResponse::_Internal {
 public:
};

CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_card_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPlayerCardItemInfoResponse)
}
CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_card_infos_(from.player_card_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPlayerCardItemInfoResponse)
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedCtor() {
}

CMsgGCGetPlayerCardItemInfoResponse::~CMsgGCGetPlayerCardItemInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPlayerCardItemInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCGetPlayerCardItemInfoResponse::ArenaDtor(void* object) {
  CMsgGCGetPlayerCardItemInfoResponse* _this = reinterpret_cast< CMsgGCGetPlayerCardItemInfoResponse* >(object);
  (void)_this;
}
void CMsgGCGetPlayerCardItemInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPlayerCardItemInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPlayerCardItemInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPlayerCardItemInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_card_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPlayerCardItemInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_card_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCGetPlayerCardItemInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPlayerCardItemInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_card_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_card_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPlayerCardItemInfoResponse)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPlayerCardItemInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  total_size += 1UL * this->_internal_player_card_infos_size();
  for (const auto& msg : this->player_card_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCGetPlayerCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCGetPlayerCardItemInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCGetPlayerCardItemInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCGetPlayerCardItemInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPlayerCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_infos_.MergeFrom(from.player_card_infos_);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCGetPlayerCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPlayerCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse::InternalSwap(CMsgGCGetPlayerCardItemInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_card_infos_.InternalSwap(&other->player_card_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPlayerCardItemInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToGCFantasySetMatchLeague::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToGCFantasySetMatchLeague>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToGCFantasySetMatchLeague)
}
CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
}

CMsgGCToGCFantasySetMatchLeague::~CMsgGCToGCFantasySetMatchLeague() {
  // @@protoc_insertion_point(destructor:CMsgGCToGCFantasySetMatchLeague)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToGCFantasySetMatchLeague::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToGCFantasySetMatchLeague::ArenaDtor(void* object) {
  CMsgGCToGCFantasySetMatchLeague* _this = reinterpret_cast< CMsgGCToGCFantasySetMatchLeague* >(object);
  (void)_this;
}
void CMsgGCToGCFantasySetMatchLeague::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToGCFantasySetMatchLeague::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToGCFantasySetMatchLeague::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToGCFantasySetMatchLeague)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToGCFantasySetMatchLeague::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToGCFantasySetMatchLeague::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToGCFantasySetMatchLeague)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToGCFantasySetMatchLeague)
  return target;
}

size_t CMsgGCToGCFantasySetMatchLeague::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToGCFantasySetMatchLeague)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToGCFantasySetMatchLeague)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCFantasySetMatchLeague* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToGCFantasySetMatchLeague>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToGCFantasySetMatchLeague)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToGCFantasySetMatchLeague)
    MergeFrom(*source);
  }
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToGCFantasySetMatchLeague)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToGCFantasySetMatchLeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToGCFantasySetMatchLeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFantasySetMatchLeague::IsInitialized() const {
  return true;
}

void CMsgGCToGCFantasySetMatchLeague::InternalSwap(CMsgGCToGCFantasySetMatchLeague* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, league_id_)
      + sizeof(CMsgGCToGCFantasySetMatchLeague::league_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToGCFantasySetMatchLeague::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAMapLocationState::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAMapLocationState>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CSODOTAMapLocationState::CSODOTAMapLocationState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAMapLocationState)
}
CSODOTAMapLocationState::CSODOTAMapLocationState(const CSODOTAMapLocationState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(completed_));
}

CSODOTAMapLocationState::~CSODOTAMapLocationState() {
  // @@protoc_insertion_point(destructor:CSODOTAMapLocationState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAMapLocationState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSODOTAMapLocationState::ArenaDtor(void* object) {
  CSODOTAMapLocationState* _this = reinterpret_cast< CSODOTAMapLocationState* >(object);
  (void)_this;
}
void CSODOTAMapLocationState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAMapLocationState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAMapLocationState::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAMapLocationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAMapLocationState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 location_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_location_id(&has_bits);
          location_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAMapLocationState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAMapLocationState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional int32 location_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_location_id(), target);
  }

  // optional bool completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAMapLocationState)
  return target;
}

size_t CSODOTAMapLocationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAMapLocationState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional int32 location_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_location_id());
    }

    // optional bool completed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAMapLocationState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAMapLocationState)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAMapLocationState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAMapLocationState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAMapLocationState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAMapLocationState)
    MergeFrom(*source);
  }
}

void CSODOTAMapLocationState::MergeFrom(const CSODOTAMapLocationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAMapLocationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_id_ = from.location_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAMapLocationState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAMapLocationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAMapLocationState::CopyFrom(const CSODOTAMapLocationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAMapLocationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAMapLocationState::IsInitialized() const {
  return true;
}

void CSODOTAMapLocationState::InternalSwap(CSODOTAMapLocationState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAMapLocationState, completed_)
      + sizeof(CSODOTAMapLocationState::completed_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAMapLocationState, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAMapLocationState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeagueAdminList::_Internal {
 public:
};

CMsgLeagueAdminList::CMsgLeagueAdminList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  account_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeagueAdminList)
}
CMsgLeagueAdminList::CMsgLeagueAdminList(const CMsgLeagueAdminList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::SharedCtor() {
}

CMsgLeagueAdminList::~CMsgLeagueAdminList() {
  // @@protoc_insertion_point(destructor:CMsgLeagueAdminList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeagueAdminList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeagueAdminList::ArenaDtor(void* object) {
  CMsgLeagueAdminList* _this = reinterpret_cast< CMsgLeagueAdminList* >(object);
  (void)_this;
}
void CMsgLeagueAdminList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeagueAdminList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeagueAdminList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeagueAdminList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeagueAdminList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 account_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeagueAdminList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeagueAdminList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->_internal_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeagueAdminList)
  return target;
}

size_t CMsgLeagueAdminList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeagueAdminList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeagueAdminList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeagueAdminList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeagueAdminList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeagueAdminList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeagueAdminList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeagueAdminList)
    MergeFrom(*source);
  }
}

void CMsgLeagueAdminList::MergeFrom(const CMsgLeagueAdminList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeagueAdminList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgLeagueAdminList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeagueAdminList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueAdminList::CopyFrom(const CMsgLeagueAdminList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeagueAdminList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueAdminList::IsInitialized() const {
  return true;
}

void CMsgLeagueAdminList::InternalSwap(CMsgLeagueAdminList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  account_ids_.InternalSwap(&other->account_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeagueAdminList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCompendiumTimestampedData::_Internal {
 public:
  using HasBits = decltype(std::declval<CCompendiumTimestampedData>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_xpm(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CCompendiumTimestampedData::CCompendiumTimestampedData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_purchases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCompendiumTimestampedData)
}
CCompendiumTimestampedData::CCompendiumTimestampedData(const CCompendiumTimestampedData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_purchases_(from.item_purchases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&deaths_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(deaths_));
  // @@protoc_insertion_point(copy_constructor:CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deaths_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(deaths_));
}

CCompendiumTimestampedData::~CCompendiumTimestampedData() {
  // @@protoc_insertion_point(destructor:CCompendiumTimestampedData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCompendiumTimestampedData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCompendiumTimestampedData::ArenaDtor(void* object) {
  CCompendiumTimestampedData* _this = reinterpret_cast< CCompendiumTimestampedData* >(object);
  (void)_this;
}
void CCompendiumTimestampedData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCompendiumTimestampedData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCompendiumTimestampedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CCompendiumTimestampedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_purchases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deaths_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(deaths_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCompendiumTimestampedData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gpm(&has_bits);
          gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xpm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_xpm(&has_bits);
          xpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 item_purchases = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_purchases(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_purchases(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCompendiumTimestampedData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumTimestampedData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_game_time(), target);
  }

  // optional uint32 gpm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gpm(), target);
  }

  // optional uint32 xpm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_xpm(), target);
  }

  // optional uint32 kills = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_deaths(), target);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0, n = this->_internal_item_purchases_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_item_purchases(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumTimestampedData)
  return target;
}

size_t CCompendiumTimestampedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCompendiumTimestampedData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_purchases = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_purchases_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_purchases_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 game_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_time());
    }

    // optional uint32 gpm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpm());
    }

    // optional uint32 xpm = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xpm());
    }

    // optional uint32 kills = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompendiumTimestampedData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCompendiumTimestampedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumTimestampedData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCompendiumTimestampedData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCompendiumTimestampedData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCompendiumTimestampedData)
    MergeFrom(*source);
  }
}

void CCompendiumTimestampedData::MergeFrom(const CCompendiumTimestampedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCompendiumTimestampedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_purchases_.MergeFrom(from.item_purchases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000004u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      deaths_ = from.deaths_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCompendiumTimestampedData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCompendiumTimestampedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumTimestampedData::CopyFrom(const CCompendiumTimestampedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCompendiumTimestampedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumTimestampedData::IsInitialized() const {
  return true;
}

void CCompendiumTimestampedData::InternalSwap(CCompendiumTimestampedData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_purchases_.InternalSwap(&other->item_purchases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CCompendiumTimestampedData, deaths_)
      + sizeof(CCompendiumTimestampedData::deaths_)
      - PROTOBUF_FIELD_OFFSET(CCompendiumTimestampedData, game_time_)>(
          reinterpret_cast<char*>(&game_time_),
          reinterpret_cast<char*>(&other->game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CCompendiumTimestampedData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCompendiumGameTimeline::_Internal {
 public:
};

CCompendiumGameTimeline::CCompendiumGameTimeline(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  data_(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCompendiumGameTimeline)
}
CCompendiumGameTimeline::CCompendiumGameTimeline(const CCompendiumGameTimeline& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::SharedCtor() {
}

CCompendiumGameTimeline::~CCompendiumGameTimeline() {
  // @@protoc_insertion_point(destructor:CCompendiumGameTimeline)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCompendiumGameTimeline::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCompendiumGameTimeline::ArenaDtor(void* object) {
  CCompendiumGameTimeline* _this = reinterpret_cast< CCompendiumGameTimeline* >(object);
  (void)_this;
}
void CCompendiumGameTimeline::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCompendiumGameTimeline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCompendiumGameTimeline::Clear() {
// @@protoc_insertion_point(message_clear_start:CCompendiumGameTimeline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  tags_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCompendiumGameTimeline::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCompendiumTimestampedData data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CCompendiumGameTimeline.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCompendiumGameTimeline::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumGameTimeline)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_data(i), target, stream);
  }

  // repeated string tags = 2;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CCompendiumGameTimeline.tags");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumGameTimeline)
  return target;
}

size_t CCompendiumGameTimeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCompendiumGameTimeline)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCompendiumTimestampedData data = 1;
  total_size += 1UL * this->_internal_data_size();
  for (const auto& msg : this->data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string tags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompendiumGameTimeline::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCompendiumGameTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumGameTimeline* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCompendiumGameTimeline>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCompendiumGameTimeline)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCompendiumGameTimeline)
    MergeFrom(*source);
  }
}

void CCompendiumGameTimeline::MergeFrom(const CCompendiumGameTimeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCompendiumGameTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  tags_.MergeFrom(from.tags_);
}

void CCompendiumGameTimeline::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCompendiumGameTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameTimeline::CopyFrom(const CCompendiumGameTimeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCompendiumGameTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameTimeline::IsInitialized() const {
  return true;
}

void CCompendiumGameTimeline::InternalSwap(CCompendiumGameTimeline* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
  tags_.InternalSwap(&other->tags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCompendiumGameTimeline::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CCompendiumGameList::_Internal {
 public:
};

CCompendiumGameList::CCompendiumGameList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CCompendiumGameList)
}
CCompendiumGameList::CCompendiumGameList(const CCompendiumGameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      games_(from.games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CCompendiumGameList)
}

void CCompendiumGameList::SharedCtor() {
}

CCompendiumGameList::~CCompendiumGameList() {
  // @@protoc_insertion_point(destructor:CCompendiumGameList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CCompendiumGameList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CCompendiumGameList::ArenaDtor(void* object) {
  CCompendiumGameList* _this = reinterpret_cast< CCompendiumGameList* >(object);
  (void)_this;
}
void CCompendiumGameList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CCompendiumGameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CCompendiumGameList::Clear() {
// @@protoc_insertion_point(message_clear_start:CCompendiumGameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CCompendiumGameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CCompendiumGameTimeline games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CCompendiumGameList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CCompendiumGameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CCompendiumGameList)
  return target;
}

size_t CCompendiumGameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CCompendiumGameList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCompendiumGameTimeline games = 1;
  total_size += 1UL * this->_internal_games_size();
  for (const auto& msg : this->games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CCompendiumGameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CCompendiumGameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumGameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CCompendiumGameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CCompendiumGameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CCompendiumGameList)
    MergeFrom(*source);
  }
}

void CCompendiumGameList::MergeFrom(const CCompendiumGameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CCompendiumGameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CCompendiumGameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CCompendiumGameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameList::CopyFrom(const CCompendiumGameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CCompendiumGameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameList::IsInitialized() const {
  return true;
}

void CCompendiumGameList::InternalSwap(CCompendiumGameList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  games_.InternalSwap(&other->games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CCompendiumGameList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CAdditionalEquipSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CAdditionalEquipSlot>()._has_bits_);
  static void set_has_class_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CAdditionalEquipSlot::CAdditionalEquipSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CAdditionalEquipSlot)
}
CAdditionalEquipSlot::CAdditionalEquipSlot(const CAdditionalEquipSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&class_id_, &from.class_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&class_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
}

CAdditionalEquipSlot::~CAdditionalEquipSlot() {
  // @@protoc_insertion_point(destructor:CAdditionalEquipSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CAdditionalEquipSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CAdditionalEquipSlot::ArenaDtor(void* object) {
  CAdditionalEquipSlot* _this = reinterpret_cast< CAdditionalEquipSlot* >(object);
  (void)_this;
}
void CAdditionalEquipSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CAdditionalEquipSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CAdditionalEquipSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CAdditionalEquipSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&class_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&def_index_) -
        reinterpret_cast<char*>(&class_id_)) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CAdditionalEquipSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 class_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_class_id(&has_bits);
          class_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 def_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CAdditionalEquipSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CAdditionalEquipSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_def_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CAdditionalEquipSlot)
  return target;
}

size_t CAdditionalEquipSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CAdditionalEquipSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 class_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_class_id());
    }

    // optional uint32 slot_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_def_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CAdditionalEquipSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CAdditionalEquipSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CAdditionalEquipSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CAdditionalEquipSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CAdditionalEquipSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CAdditionalEquipSlot)
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlot::MergeFrom(const CAdditionalEquipSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CAdditionalEquipSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAdditionalEquipSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CAdditionalEquipSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlot::CopyFrom(const CAdditionalEquipSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CAdditionalEquipSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlot::IsInitialized() const {
  return true;
}

void CAdditionalEquipSlot::InternalSwap(CAdditionalEquipSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CAdditionalEquipSlot, def_index_)
      + sizeof(CAdditionalEquipSlot::def_index_)
      - PROTOBUF_FIELD_OFFSET(CAdditionalEquipSlot, class_id_)>(
          reinterpret_cast<char*>(&class_id_),
          reinterpret_cast<char*>(&other->class_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CAdditionalEquipSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot_Trophy::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Trophy>()._has_bits_);
  static void set_has_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trophy_score(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Trophy)
}
CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trophy_id_, &from.trophy_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trophy_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
}

CMsgDOTAProfileCard_Slot_Trophy::~CMsgDOTAProfileCard_Slot_Trophy() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Trophy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Trophy::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Trophy* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Trophy* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Trophy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Trophy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Trophy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&trophy_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trophy_score_) -
        reinterpret_cast<char*>(&trophy_id_)) + sizeof(trophy_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Trophy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 trophy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trophy_id(&has_bits);
          trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trophy_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_trophy_score(&has_bits);
          trophy_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot_Trophy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Trophy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_trophy_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Trophy)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Trophy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 trophy_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trophy_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Trophy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Trophy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot.Trophy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot.Trophy)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      trophy_score_ = from.trophy_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Trophy::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Trophy::InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_score_)
      + sizeof(CMsgDOTAProfileCard_Slot_Trophy::trophy_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_id_)>(
          reinterpret_cast<char*>(&trophy_id_),
          reinterpret_cast<char*>(&other->trophy_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Trophy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot_Stat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Stat>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stat_score(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Stat)
}
CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_score_, &from.stat_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_id_) -
    reinterpret_cast<char*>(&stat_score_)) + sizeof(stat_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::SharedCtor() {
stat_score_ = 0u;
stat_id_ = 3;
}

CMsgDOTAProfileCard_Slot_Stat::~CMsgDOTAProfileCard_Slot_Stat() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Stat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot_Stat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Stat::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Stat* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Stat* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Stat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Stat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    stat_score_ = 0u;
    stat_id_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Stat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAProfileCard_EStatID_IsValid(val))) {
            _internal_set_stat_id(static_cast<::CMsgDOTAProfileCard_EStatID>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 stat_score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stat_score(&has_bits);
          stat_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot_Stat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Stat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Stat)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Stat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_score = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat_score());
    }

    // optional .CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_Wins];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stat_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Stat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Stat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot.Stat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot.Stat)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_score_ = from.stat_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_id_ = from.stat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Stat::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Stat::InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stat_score_, other->stat_score_);
  swap(stat_id_, other->stat_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Stat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Item>()._has_bits_);
  static void set_has_serialized_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Item)
}
CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  serialized_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_item()) {
    serialized_item_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serialized_item(), 
      GetArena());
  }
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::SharedCtor() {
serialized_item_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAProfileCard_Slot_Item::~CMsgDOTAProfileCard_Slot_Item() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  serialized_item_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProfileCard_Slot_Item::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Item* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Item* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_item_.ClearNonDefaultToEmpty();
  }
  item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes serialized_item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_serialized_item();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_serialized_item(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Item)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes serialized_item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_serialized_item());
    }

    // optional uint64 item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot.Item)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serialized_item(from._internal_serialized_item());
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Item::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Item::InternalSwap(CMsgDOTAProfileCard_Slot_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  serialized_item_.Swap(&other->serialized_item_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(item_id_, other->item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Hero>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Hero)
}
CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
}

CMsgDOTAProfileCard_Slot_Hero::~CMsgDOTAProfileCard_Slot_Hero() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Hero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Hero::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Hero* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Hero* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Hero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_losses_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(hero_losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_wins = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_wins(&has_bits);
          hero_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_losses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_losses(&has_bits);
          hero_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot_Hero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 hero_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_wins(), target);
  }

  // optional uint32 hero_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_losses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Hero)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Hero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 hero_wins = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_wins());
    }

    // optional uint32 hero_losses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_losses());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Hero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Hero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot.Hero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot.Hero)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_wins_ = from.hero_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_losses_ = from.hero_losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Hero::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Hero::InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_losses_)
      + sizeof(CMsgDOTAProfileCard_Slot_Hero::hero_losses_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Hero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot_Emoticon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Emoticon>()._has_bits_);
  static void set_has_emoticon_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}
CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  emoticon_id_ = from.emoticon_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedCtor() {
emoticon_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Emoticon::~CMsgDOTAProfileCard_Slot_Emoticon() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Emoticon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Emoticon::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Emoticon* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Emoticon* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Emoticon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Emoticon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Emoticon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  emoticon_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Emoticon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 emoticon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_emoticon_id(&has_bits);
          emoticon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot_Emoticon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Emoticon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 emoticon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_emoticon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Emoticon)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Emoticon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 emoticon_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_emoticon_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Emoticon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Emoticon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot.Emoticon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot.Emoticon)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_emoticon_id()) {
    _internal_set_emoticon_id(from._internal_emoticon_id());
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Emoticon::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Emoticon::InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(emoticon_id_, other->emoticon_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Emoticon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot_Team>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot.Team)
}
CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot.Team)
}

void CMsgDOTAProfileCard_Slot_Team::SharedCtor() {
team_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Team::~CMsgDOTAProfileCard_Slot_Team() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProfileCard_Slot_Team::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot_Team* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot_Team* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot.Team)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_team_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team_id()) {
    _internal_set_team_id(from._internal_team_id());
  }
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Team::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Team::InternalSwap(CMsgDOTAProfileCard_Slot_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard_Slot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard_Slot>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Trophy& trophy(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_trophy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Stat& stat(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Item& item(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Hero& hero(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Emoticon& emoticon(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_emoticon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgDOTAProfileCard_Slot_Team& team(const CMsgDOTAProfileCard_Slot* msg);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgDOTAProfileCard_Slot_Trophy&
CMsgDOTAProfileCard_Slot::_Internal::trophy(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->trophy_;
}
const ::CMsgDOTAProfileCard_Slot_Stat&
CMsgDOTAProfileCard_Slot::_Internal::stat(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->stat_;
}
const ::CMsgDOTAProfileCard_Slot_Item&
CMsgDOTAProfileCard_Slot::_Internal::item(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->item_;
}
const ::CMsgDOTAProfileCard_Slot_Hero&
CMsgDOTAProfileCard_Slot::_Internal::hero(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->hero_;
}
const ::CMsgDOTAProfileCard_Slot_Emoticon&
CMsgDOTAProfileCard_Slot::_Internal::emoticon(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->emoticon_;
}
const ::CMsgDOTAProfileCard_Slot_Team&
CMsgDOTAProfileCard_Slot::_Internal::team(const CMsgDOTAProfileCard_Slot* msg) {
  return *msg->team_;
}
CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard.Slot)
}
CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trophy()) {
    trophy_ = new ::CMsgDOTAProfileCard_Slot_Trophy(*from.trophy_);
  } else {
    trophy_ = nullptr;
  }
  if (from._internal_has_stat()) {
    stat_ = new ::CMsgDOTAProfileCard_Slot_Stat(*from.stat_);
  } else {
    stat_ = nullptr;
  }
  if (from._internal_has_item()) {
    item_ = new ::CMsgDOTAProfileCard_Slot_Item(*from.item_);
  } else {
    item_ = nullptr;
  }
  if (from._internal_has_hero()) {
    hero_ = new ::CMsgDOTAProfileCard_Slot_Hero(*from.hero_);
  } else {
    hero_ = nullptr;
  }
  if (from._internal_has_emoticon()) {
    emoticon_ = new ::CMsgDOTAProfileCard_Slot_Emoticon(*from.emoticon_);
  } else {
    emoticon_ = nullptr;
  }
  if (from._internal_has_team()) {
    team_ = new ::CMsgDOTAProfileCard_Slot_Team(*from.team_);
  } else {
    team_ = nullptr;
  }
  slot_id_ = from.slot_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trophy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&trophy_)) + sizeof(slot_id_));
}

CMsgDOTAProfileCard_Slot::~CMsgDOTAProfileCard_Slot() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard.Slot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard_Slot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete trophy_;
  if (this != internal_default_instance()) delete stat_;
  if (this != internal_default_instance()) delete item_;
  if (this != internal_default_instance()) delete hero_;
  if (this != internal_default_instance()) delete emoticon_;
  if (this != internal_default_instance()) delete team_;
}

void CMsgDOTAProfileCard_Slot::ArenaDtor(void* object) {
  CMsgDOTAProfileCard_Slot* _this = reinterpret_cast< CMsgDOTAProfileCard_Slot* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard_Slot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard_Slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(trophy_ != nullptr);
      trophy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stat_ != nullptr);
      stat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(item_ != nullptr);
      item_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(hero_ != nullptr);
      hero_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(emoticon_ != nullptr);
      emoticon_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(team_ != nullptr);
      team_->Clear();
    }
  }
  slot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard_Slot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_trophy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_emoticon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard_Slot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::trophy(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stat(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::item(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::hero(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::emoticon(this), target, stream);
  }

  // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::team(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard.Slot)
  return target;
}

size_t CMsgDOTAProfileCard_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard.Slot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trophy_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Stat stat = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *stat_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Item item = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *item_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Hero hero = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hero_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *emoticon_);
    }

    // optional .CMsgDOTAProfileCard.Slot.Team team = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_);
    }

    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard_Slot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard.Slot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard.Slot)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_trophy()->::CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(from._internal_trophy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_stat()->::CMsgDOTAProfileCard_Slot_Stat::MergeFrom(from._internal_stat());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_item()->::CMsgDOTAProfileCard_Slot_Item::MergeFrom(from._internal_item());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_hero()->::CMsgDOTAProfileCard_Slot_Hero::MergeFrom(from._internal_hero());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_emoticon()->::CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(from._internal_emoticon());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_team()->::CMsgDOTAProfileCard_Slot_Team::MergeFrom(from._internal_team());
    }
    if (cached_has_bits & 0x00000040u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot::InternalSwap(CMsgDOTAProfileCard_Slot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, slot_id_)
      + sizeof(CMsgDOTAProfileCard_Slot::slot_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, trophy_)>(
          reinterpret_cast<char*>(&trophy_),
          reinterpret_cast<char*>(&other->trophy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard_Slot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProfileCard::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProfileCard>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_badge_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgBattleCupVictory& recent_battle_cup_victory(const CMsgDOTAProfileCard* msg);
  static void set_has_recent_battle_cup_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rank_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_leaderboard_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_plus_subscriber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_plus_original_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank_tier_score(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_previous_rank_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rank_tier_mmr_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_leaderboard_rank_core(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_rank_tier_peak(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_favorite_team_packed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

const ::CMsgBattleCupVictory&
CMsgDOTAProfileCard::_Internal::recent_battle_cup_victory(const CMsgDOTAProfileCard* msg) {
  return *msg->recent_battle_cup_victory_;
}
CMsgDOTAProfileCard::CMsgDOTAProfileCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProfileCard)
}
CMsgDOTAProfileCard::CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recent_battle_cup_victory()) {
    recent_battle_cup_victory_ = new ::CMsgBattleCupVictory(*from.recent_battle_cup_victory_);
  } else {
    recent_battle_cup_victory_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(favorite_team_packed_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recent_battle_cup_victory_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&recent_battle_cup_victory_)) + sizeof(favorite_team_packed_));
}

CMsgDOTAProfileCard::~CMsgDOTAProfileCard() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProfileCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProfileCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete recent_battle_cup_victory_;
}

void CMsgDOTAProfileCard::ArenaDtor(void* object) {
  CMsgDOTAProfileCard* _this = reinterpret_cast< CMsgDOTAProfileCard* >(object);
  (void)_this;
}
void CMsgDOTAProfileCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProfileCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProfileCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(recent_battle_cup_victory_ != nullptr);
    recent_battle_cup_victory_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_plus_subscriber_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_plus_subscriber_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&plus_original_start_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&favorite_team_packed_) -
        reinterpret_cast<char*>(&plus_original_start_date_)) + sizeof(favorite_team_packed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProfileCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAProfileCard.Slot slots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 badge_points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_badge_points(&has_bits);
          badge_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_event_points(&has_bits);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_battle_cup_victory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_tier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_rank_tier(&has_bits);
          rank_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaderboard_rank = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_leaderboard_rank(&has_bits);
          leaderboard_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_plus_subscriber = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_plus_subscriber(&has_bits);
          is_plus_subscriber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 plus_original_start_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_plus_original_start_date(&has_bits);
          plus_original_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_tier_score = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_rank_tier_score(&has_bits);
          rank_tier_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 previous_rank_tier = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_previous_rank_tier(&has_bits);
          previous_rank_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_tier_mmr_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_rank_tier_mmr_type(&has_bits);
          rank_tier_mmr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaderboard_rank_core = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_leaderboard_rank_core(&has_bits);
          leaderboard_rank_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank_tier_peak = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_rank_tier_peak(&has_bits);
          rank_tier_peak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 title = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_title(&has_bits);
          title_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 favorite_team_packed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_favorite_team_packed(&has_bits);
          favorite_team_packed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProfileCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProfileCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_slots(i), target, stream);
  }

  // optional uint32 badge_points = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_badge_points(), target);
  }

  // optional uint32 event_points = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_event_points(), target);
  }

  // optional uint32 event_id = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_event_id(), target);
  }

  // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::recent_battle_cup_victory(this), target, stream);
  }

  // optional uint32 rank_tier = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rank_tier(), target);
  }

  // optional uint32 leaderboard_rank = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_leaderboard_rank(), target);
  }

  // optional bool is_plus_subscriber = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_plus_subscriber(), target);
  }

  // optional uint32 plus_original_start_date = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_plus_original_start_date(), target);
  }

  // optional uint32 rank_tier_score = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_rank_tier_score(), target);
  }

  // optional uint32 previous_rank_tier = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_previous_rank_tier(), target);
  }

  // optional uint32 rank_tier_mmr_type = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rank_tier_mmr_type(), target);
  }

  // optional uint32 leaderboard_rank_core = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_leaderboard_rank_core(), target);
  }

  // optional uint32 rank_tier_peak = 21;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_rank_tier_peak(), target);
  }

  // optional uint32 title = 23;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_title(), target);
  }

  // optional uint64 favorite_team_packed = 24;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(24, this->_internal_favorite_team_packed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProfileCard)
  return target;
}

size_t CMsgDOTAProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProfileCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAProfileCard.Slot slots = 3;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBattleCupVictory recent_battle_cup_victory = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_battle_cup_victory_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 badge_points = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badge_points());
    }

    // optional uint32 event_points = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_points());
    }

    // optional uint32 event_id = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 rank_tier = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_tier());
    }

    // optional uint32 leaderboard_rank = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaderboard_rank());
    }

    // optional bool is_plus_subscriber = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 plus_original_start_date = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_plus_original_start_date());
    }

    // optional uint32 rank_tier_score = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_tier_score());
    }

    // optional uint32 previous_rank_tier = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_previous_rank_tier());
    }

    // optional uint32 rank_tier_mmr_type = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_tier_mmr_type());
    }

    // optional uint32 leaderboard_rank_core = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaderboard_rank_core());
    }

    // optional uint32 rank_tier_peak = 21;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank_tier_peak());
    }

    // optional uint32 title = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_title());
    }

    // optional uint64 favorite_team_packed = 24;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_favorite_team_packed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProfileCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProfileCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProfileCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProfileCard)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard::MergeFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_recent_battle_cup_victory()->::CMsgBattleCupVictory::MergeFrom(from._internal_recent_battle_cup_victory());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      badge_points_ = from.badge_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      rank_tier_ = from.rank_tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      leaderboard_rank_ = from.leaderboard_rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_plus_subscriber_ = from.is_plus_subscriber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      plus_original_start_date_ = from.plus_original_start_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      rank_tier_score_ = from.rank_tier_score_;
    }
    if (cached_has_bits & 0x00000400u) {
      previous_rank_tier_ = from.previous_rank_tier_;
    }
    if (cached_has_bits & 0x00000800u) {
      rank_tier_mmr_type_ = from.rank_tier_mmr_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      leaderboard_rank_core_ = from.leaderboard_rank_core_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_tier_peak_ = from.rank_tier_peak_;
    }
    if (cached_has_bits & 0x00004000u) {
      title_ = from.title_;
    }
    if (cached_has_bits & 0x00008000u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard::CopyFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard::InternalSwap(CMsgDOTAProfileCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slots_.InternalSwap(&other->slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard, favorite_team_packed_)
      + sizeof(CMsgDOTAProfileCard::favorite_team_packed_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProfileCard, recent_battle_cup_victory_)>(
          reinterpret_cast<char*>(&recent_battle_cup_victory_),
          reinterpret_cast<char*>(&other->recent_battle_cup_victory_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProfileCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSODOTAPlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CSODOTAPlayerChallenge>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_int_param_0(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_int_param_1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_created_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_challenge_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_complete_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_quest_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_max_quest_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_template_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSODOTAPlayerChallenge)
}
CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&template_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(template_id_));
  // @@protoc_insertion_point(copy_constructor:CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&template_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(template_id_));
}

CSODOTAPlayerChallenge::~CSODOTAPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CSODOTAPlayerChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSODOTAPlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSODOTAPlayerChallenge::ArenaDtor(void* object) {
  CSODOTAPlayerChallenge* _this = reinterpret_cast< CSODOTAPlayerChallenge* >(object);
  (void)_this;
}
void CSODOTAPlayerChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSODOTAPlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSODOTAPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CSODOTAPlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sequence_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(sequence_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&challenge_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&challenge_tier_)) + sizeof(hero_id_));
  }
  template_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSODOTAPlayerChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.key_field) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 2 [(.key_field) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot_id = 3 [(.key_field) = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 int_param_0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_int_param_0(&has_bits);
          int_param_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 int_param_1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_int_param_1(&has_bits);
          int_param_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 created_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_created_time(&has_bits);
          created_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 completed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_tier = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_challenge_tier(&has_bits);
          challenge_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attempts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_attempts(&has_bits);
          attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 complete_limit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_complete_limit(&has_bits);
          complete_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quest_rank = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_quest_rank(&has_bits);
          quest_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_quest_rank = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_max_quest_rank(&has_bits);
          max_quest_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 instance_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 template_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_template_id(&has_bits);
          template_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSODOTAPlayerChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSODOTAPlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 event_id = 2 [(.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint32 slot_id = 3 [(.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot_id(), target);
  }

  // optional uint32 int_param_0 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_int_param_0(), target);
  }

  // optional uint32 int_param_1 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_int_param_1(), target);
  }

  // optional uint32 created_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_created_time(), target);
  }

  // optional uint32 completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_completed(), target);
  }

  // optional uint32 sequence_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_sequence_id(), target);
  }

  // optional uint32 challenge_tier = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_challenge_tier(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_flags(), target);
  }

  // optional uint32 attempts = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_attempts(), target);
  }

  // optional uint32 complete_limit = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_complete_limit(), target);
  }

  // optional uint32 quest_rank = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_quest_rank(), target);
  }

  // optional uint32 max_quest_rank = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_max_quest_rank(), target);
  }

  // optional uint32 instance_id = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_instance_id(), target);
  }

  // optional uint32 hero_id = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_hero_id(), target);
  }

  // optional uint32 template_id = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_template_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSODOTAPlayerChallenge)
  return target;
}

size_t CSODOTAPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSODOTAPlayerChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 event_id = 2 [(.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 slot_id = 3 [(.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 int_param_0 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_param_0());
    }

    // optional uint32 int_param_1 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_param_1());
    }

    // optional uint32 created_time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_created_time());
    }

    // optional uint32 completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completed());
    }

    // optional uint32 sequence_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sequence_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 challenge_tier = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_tier());
    }

    // optional uint32 flags = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 attempts = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attempts());
    }

    // optional uint32 complete_limit = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_complete_limit());
    }

    // optional uint32 quest_rank = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quest_rank());
    }

    // optional uint32 max_quest_rank = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_quest_rank());
    }

    // optional uint32 instance_id = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_instance_id());
    }

    // optional uint32 hero_id = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  // optional uint32 template_id = 18;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_template_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSODOTAPlayerChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSODOTAPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPlayerChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSODOTAPlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSODOTAPlayerChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSODOTAPlayerChallenge)
    MergeFrom(*source);
  }
}

void CSODOTAPlayerChallenge::MergeFrom(const CSODOTAPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSODOTAPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_param_0_ = from.int_param_0_;
    }
    if (cached_has_bits & 0x00000010u) {
      int_param_1_ = from.int_param_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      created_time_ = from.created_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      completed_ = from.completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      challenge_tier_ = from.challenge_tier_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      attempts_ = from.attempts_;
    }
    if (cached_has_bits & 0x00000800u) {
      complete_limit_ = from.complete_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      quest_rank_ = from.quest_rank_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_quest_rank_ = from.max_quest_rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_template_id(from._internal_template_id());
  }
}

void CSODOTAPlayerChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSODOTAPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPlayerChallenge::CopyFrom(const CSODOTAPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSODOTAPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPlayerChallenge::IsInitialized() const {
  return true;
}

void CSODOTAPlayerChallenge::InternalSwap(CSODOTAPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSODOTAPlayerChallenge, template_id_)
      + sizeof(CSODOTAPlayerChallenge::template_id_)
      - PROTOBUF_FIELD_OFFSET(CSODOTAPlayerChallenge, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSODOTAPlayerChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCRerollPlayerChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCRerollPlayerChallenge>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCRerollPlayerChallenge)
}
CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
}

CMsgClientToGCRerollPlayerChallenge::~CMsgClientToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCRerollPlayerChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCRerollPlayerChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCRerollPlayerChallenge::ArenaDtor(void* object) {
  CMsgClientToGCRerollPlayerChallenge* _this = reinterpret_cast< CMsgClientToGCRerollPlayerChallenge* >(object);
  (void)_this;
}
void CMsgClientToGCRerollPlayerChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCRerollPlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCRerollPlayerChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 sequence_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sequence_id(&has_bits);
          sequence_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCRerollPlayerChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCRerollPlayerChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sequence_id(), target);
  }

  // optional uint32 hero_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgClientToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCRerollPlayerChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .EEvent event_id = 1 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 sequence_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sequence_id());
    }

    // optional uint32 hero_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRerollPlayerChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCRerollPlayerChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCRerollPlayerChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCRerollPlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgClientToGCRerollPlayerChallenge::InternalSwap(CMsgClientToGCRerollPlayerChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, hero_id_)
      + sizeof(CMsgClientToGCRerollPlayerChallenge::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCRerollPlayerChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCRerollPlayerChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRerollPlayerChallengeResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCRerollPlayerChallengeResponse)
}
CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::SharedCtor() {
result_ = 0;
}

CMsgGCRerollPlayerChallengeResponse::~CMsgGCRerollPlayerChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCRerollPlayerChallengeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCRerollPlayerChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCRerollPlayerChallengeResponse::ArenaDtor(void* object) {
  CMsgGCRerollPlayerChallengeResponse* _this = reinterpret_cast< CMsgGCRerollPlayerChallengeResponse* >(object);
  (void)_this;
}
void CMsgGCRerollPlayerChallengeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRerollPlayerChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRerollPlayerChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRerollPlayerChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRerollPlayerChallengeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgGCRerollPlayerChallengeResponse_EResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCRerollPlayerChallengeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRerollPlayerChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRerollPlayerChallengeResponse)
  return target;
}

size_t CMsgGCRerollPlayerChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRerollPlayerChallengeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCRerollPlayerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRerollPlayerChallengeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCRerollPlayerChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCRerollPlayerChallengeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCRerollPlayerChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRerollPlayerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCRerollPlayerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRerollPlayerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRerollPlayerChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgGCRerollPlayerChallengeResponse::InternalSwap(CMsgGCRerollPlayerChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRerollPlayerChallengeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCTopCustomGamesList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCTopCustomGamesList>()._has_bits_);
  static void set_has_game_of_the_day(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_custom_games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCTopCustomGamesList)
}
CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      top_custom_games_(from.top_custom_games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_of_the_day_ = from.game_of_the_day_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::SharedCtor() {
game_of_the_day_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCTopCustomGamesList::~CMsgGCTopCustomGamesList() {
  // @@protoc_insertion_point(destructor:CMsgGCTopCustomGamesList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCTopCustomGamesList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCTopCustomGamesList::ArenaDtor(void* object) {
  CMsgGCTopCustomGamesList* _this = reinterpret_cast< CMsgGCTopCustomGamesList* >(object);
  (void)_this;
}
void CMsgGCTopCustomGamesList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCTopCustomGamesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCTopCustomGamesList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCTopCustomGamesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_custom_games_.Clear();
  game_of_the_day_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCTopCustomGamesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 top_custom_games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_top_custom_games(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_top_custom_games(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 game_of_the_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_of_the_day(&has_bits);
          game_of_the_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCTopCustomGamesList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCTopCustomGamesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  for (int i = 0, n = this->_internal_top_custom_games_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_top_custom_games(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_of_the_day = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_game_of_the_day(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCTopCustomGamesList)
  return target;
}

size_t CMsgGCTopCustomGamesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCTopCustomGamesList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->top_custom_games_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_top_custom_games_size());
    total_size += data_size;
  }

  // optional uint64 game_of_the_day = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_game_of_the_day());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCTopCustomGamesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCTopCustomGamesList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCTopCustomGamesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCTopCustomGamesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCTopCustomGamesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCTopCustomGamesList)
    MergeFrom(*source);
  }
}

void CMsgGCTopCustomGamesList::MergeFrom(const CMsgGCTopCustomGamesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCTopCustomGamesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_custom_games_.MergeFrom(from.top_custom_games_);
  if (from._internal_has_game_of_the_day()) {
    _internal_set_game_of_the_day(from._internal_game_of_the_day());
  }
}

void CMsgGCTopCustomGamesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCTopCustomGamesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTopCustomGamesList::CopyFrom(const CMsgGCTopCustomGamesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCTopCustomGamesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTopCustomGamesList::IsInitialized() const {
  return true;
}

void CMsgGCTopCustomGamesList::InternalSwap(CMsgGCTopCustomGamesList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  top_custom_games_.InternalSwap(&other->top_custom_games_);
  swap(game_of_the_day_, other->game_of_the_day_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCTopCustomGamesList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_TeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_TeamDetails>()._has_bits_);
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_only_team(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cheers(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.TeamDetails)
}
CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
}

CMsgDOTARealtimeGameStats_TeamDetails::~CMsgDOTARealtimeGameStats_TeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.TeamDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_TeamDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_TeamDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_TeamDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_TeamDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_TeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_TeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.TeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&only_team_) -
        reinterpret_cast<char*>(&team_number_)) + sizeof(only_team_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&cheers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&cheers_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_TeamDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStats.TeamDetails.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool only_team = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_only_team(&has_bits);
          only_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheers = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_cheers(&has_bits);
          cheers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStats.TeamDetails.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_TeamDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.TeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_team_logo(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_score(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_players(i), target, stream);
  }

  // optional bool only_team = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_only_team(), target);
  }

  // optional uint32 cheers = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cheers(), target);
  }

  // optional uint32 net_worth = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_net_worth(), target);
  }

  // optional string team_tag = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.TeamDetails.team_tag");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_team_tag(), target);
  }

  // optional string team_logo_url = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.TeamDetails.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_team_logo_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.TeamDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_TeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.TeamDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_logo_url = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional uint32 team_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_number());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional fixed64 team_logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional bool only_team = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 cheers = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheers());
    }

    // optional uint32 net_worth = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_TeamDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_TeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.TeamDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.TeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000008u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      only_team_ = from.only_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      cheers_ = from.cheers_;
    }
    if (cached_has_bits & 0x00000200u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_TeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, net_worth_)
      + sizeof(CMsgDOTARealtimeGameStats_TeamDetails::net_worth_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_number_)>(
          reinterpret_cast<char*>(&team_number_),
          reinterpret_cast<char*>(&other->team_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_TeamDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_ItemDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_ItemDetails>()._has_bits_);
  static void set_has_item_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_stackcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.ItemDetails)
}
CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&item_ability_id_, &from.item_ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stackcount_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(stackcount_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stackcount_) -
    reinterpret_cast<char*>(&item_ability_id_)) + sizeof(stackcount_));
}

CMsgDOTARealtimeGameStats_ItemDetails::~CMsgDOTARealtimeGameStats_ItemDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.ItemDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_ItemDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_ItemDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_ItemDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_ItemDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_ItemDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_ItemDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.ItemDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&item_ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stackcount_) -
        reinterpret_cast<char*>(&item_ability_id_)) + sizeof(stackcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_ItemDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_ability_id(&has_bits);
          item_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStats.ItemDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sold(&has_bits);
          sold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stackcount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_stackcount(&has_bits);
          stackcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_ItemDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.ItemDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_ability_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.ItemDetails.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_time(), target);
  }

  // optional bool sold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sold(), target);
  }

  // optional uint32 stackcount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_stackcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.ItemDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_ItemDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.ItemDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 item_ability_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_ability_id());
    }

    // optional int32 time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_time());
    }

    // optional bool sold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 stackcount = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stackcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.ItemDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_ItemDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_ItemDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.ItemDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.ItemDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.ItemDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      item_ability_id_ = from.item_ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sold_ = from.sold_;
    }
    if (cached_has_bits & 0x00000010u) {
      stackcount_ = from.stackcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.ItemDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.ItemDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_ItemDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_ItemDetails::InternalSwap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, stackcount_)
      + sizeof(CMsgDOTARealtimeGameStats_ItemDetails::stackcount_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, item_ability_id_)>(
          reinterpret_cast<char*>(&item_ability_id_),
          reinterpret_cast<char*>(&other->item_ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_ItemDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_AbilityDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_AbilityDetails>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cooldown_max(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.AbilityDetails)
}
CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_max_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cooldown_max_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_max_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cooldown_max_));
}

CMsgDOTARealtimeGameStats_AbilityDetails::~CMsgDOTARealtimeGameStats_AbilityDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.AbilityDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_AbilityDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_AbilityDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_AbilityDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_AbilityDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_max_) -
        reinterpret_cast<char*>(&id_)) + sizeof(cooldown_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_AbilityDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStats.AbilityDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cooldown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_cooldown(&has_bits);
          cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cooldown_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_cooldown_max(&has_bits);
          cooldown_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_AbilityDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.AbilityDetails.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_level(), target);
  }

  // optional float cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_cooldown(), target);
  }

  // optional float cooldown_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_cooldown_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.AbilityDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_AbilityDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 level = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional float cooldown = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float cooldown_max = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_AbilityDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.AbilityDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.AbilityDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_ = from.cooldown_;
    }
    if (cached_has_bits & 0x00000010u) {
      cooldown_max_ = from.cooldown_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.AbilityDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::InternalSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_max_)
      + sizeof(CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_AbilityDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_HeroToHeroStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_HeroToHeroStats>()._has_bits_);
  static void set_has_victimid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}
CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victimid_, &from.victimid_,
    static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&victimid_)) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victimid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&victimid_)) + sizeof(assists_));
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::~CMsgDOTARealtimeGameStats_HeroToHeroStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_HeroToHeroStats* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_HeroToHeroStats* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&victimid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&victimid_)) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_HeroToHeroStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 victimid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_victimid(&has_bits);
          victimid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_HeroToHeroStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victimid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_victimid(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_kills(), target);
  }

  // optional uint32 assists = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_HeroToHeroStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 victimid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victimid());
    }

    // optional uint32 kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 assists = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_HeroToHeroStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_HeroToHeroStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.HeroToHeroStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.HeroToHeroStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      victimid_ = from.victimid_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::InternalSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, assists_)
      + sizeof(CMsgDOTARealtimeGameStats_HeroToHeroStats::assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, victimid_)>(
          reinterpret_cast<char*>(&victimid_),
          reinterpret_cast<char*>(&other->victimid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_HeroToHeroStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_AbilityList::_Internal {
 public:
};

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.AbilityList)
}
CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      id_(from.id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedCtor() {
}

CMsgDOTARealtimeGameStats_AbilityList::~CMsgDOTARealtimeGameStats_AbilityList() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.AbilityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_AbilityList::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_AbilityList* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_AbilityList* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_AbilityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_AbilityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_AbilityList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.AbilityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_AbilityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_AbilityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.AbilityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  for (int i = 0, n = this->_internal_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.AbilityList)
  return target;
}

size_t CMsgDOTARealtimeGameStats_AbilityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.AbilityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_id_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.AbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_AbilityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.AbilityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.AbilityList)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.AbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.AbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.AbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityList::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_AbilityList::InternalSwap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.InternalSwap(&other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_AbilityList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_PlayerDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_PlayerDetails>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_healthpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_maxhealthpoints(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_healthregenrate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_manapoints(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_maxmanapoints(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_manaregenrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_agility(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_base_intelligence(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_base_armor(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_base_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_base_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_agility(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_intelligence(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_movespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_death_count(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_assists_count(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_denies_count(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_lh_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_gold_per_min(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_xp_per_min(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_net_gold(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ultimate_cooldown(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_has_buyback(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_has_ultimate(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_has_ultimate_mana(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
};

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abilities_(arena),
  items_(arena),
  stashitems_(arena),
  itemshoppinglist_(arena),
  levelpoints_(arena),
  hero_to_hero_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.PlayerDetails)
}
CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      items_(from.items_),
      stashitems_(from.stashitems_),
      itemshoppinglist_(from.itemshoppinglist_),
      levelpoints_(from.levelpoints_),
      hero_to_hero_stats_(from.hero_to_hero_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&has_ultimate_mana_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(has_ultimate_mana_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_ultimate_mana_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(has_ultimate_mana_));
}

CMsgDOTARealtimeGameStats_PlayerDetails::~CMsgDOTARealtimeGameStats_PlayerDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.PlayerDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_PlayerDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_PlayerDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_PlayerDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_PlayerDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  items_.Clear();
  stashitems_.Clear();
  itemshoppinglist_.Clear();
  levelpoints_.Clear();
  hero_to_hero_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&healthregenrate_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(healthregenrate_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&manapoints_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&base_movespeed_) -
        reinterpret_cast<char*>(&manapoints_)) + sizeof(base_movespeed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&base_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_damage_) -
        reinterpret_cast<char*>(&base_damage_)) + sizeof(hero_damage_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&tower_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_healing_) -
        reinterpret_cast<char*>(&tower_damage_)) + sizeof(hero_healing_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&gold_per_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultimate_cooldown_) -
        reinterpret_cast<char*>(&gold_per_min_)) + sizeof(ultimate_cooldown_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&has_buyback_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&has_ultimate_mana_) -
        reinterpret_cast<char*>(&has_buyback_)) + sizeof(has_ultimate_mana_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_PlayerDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&_has_bits_);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 playerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&_has_bits_);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStats.PlayerDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team(&_has_bits_);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heroid(&_has_bits_);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healthpoints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_healthpoints(&_has_bits_);
          healthpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxhealthpoints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_maxhealthpoints(&_has_bits_);
          maxhealthpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float healthregenrate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_healthregenrate(&_has_bits_);
          healthregenrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 manapoints = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_manapoints(&_has_bits_);
          manapoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 maxmanapoints = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_maxmanapoints(&_has_bits_);
          maxmanapoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float manaregenrate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_manaregenrate(&_has_bits_);
          manaregenrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_strength = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_base_strength(&_has_bits_);
          base_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_agility = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_base_agility(&_has_bits_);
          base_agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_intelligence = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_base_intelligence(&_has_bits_);
          base_intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 base_armor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_base_armor(&_has_bits_);
          base_armor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_movespeed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_base_movespeed(&_has_bits_);
          base_movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_damage = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_base_damage(&_has_bits_);
          base_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strength = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_strength(&_has_bits_);
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 agility = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_agility(&_has_bits_);
          agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intelligence = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_intelligence(&_has_bits_);
          intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 armor = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_armor(&_has_bits_);
          armor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 movespeed = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_movespeed(&_has_bits_);
          movespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_damage(&_has_bits_);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_hero_damage(&_has_bits_);
          hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tower_damage(&_has_bits_);
          tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kill_count = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_kill_count(&_has_bits_);
          kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 death_count = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_death_count(&_has_bits_);
          death_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists_count = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_assists_count(&_has_bits_);
          assists_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies_count = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_denies_count(&_has_bits_);
          denies_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lh_count = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_lh_count(&_has_bits_);
          lh_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_healing = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_healing(&_has_bits_);
          hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_per_min = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gold_per_min(&_has_bits_);
          gold_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_per_min = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_xp_per_min(&_has_bits_);
          xp_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_gold = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_net_gold(&_has_bits_);
          net_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_gold(&_has_bits_);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_x(&_has_bits_);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_y(&_has_bits_);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 respawn_time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_respawn_time(&_has_bits_);
          respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ultimate_cooldown = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ultimate_cooldown(&_has_bits_);
          ultimate_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_buyback = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_has_buyback(&_has_bits_);
          has_buyback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_stashitems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<354>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_itemshoppinglist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<362>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_levelpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<370>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_to_hero_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool has_ultimate = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_has_ultimate(&_has_bits_);
          has_ultimate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_ultimate_mana = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_has_ultimate_mana(&_has_bits_);
          has_ultimate_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_PlayerDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStats.PlayerDetails.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heroid(), target);
  }

  // optional uint32 healthpoints = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_healthpoints(), target);
  }

  // optional uint32 maxhealthpoints = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_maxhealthpoints(), target);
  }

  // optional float healthregenrate = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_healthregenrate(), target);
  }

  // optional uint32 manapoints = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_manapoints(), target);
  }

  // optional uint32 maxmanapoints = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_maxmanapoints(), target);
  }

  // optional float manaregenrate = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_manaregenrate(), target);
  }

  // optional uint32 base_strength = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_base_strength(), target);
  }

  // optional uint32 base_agility = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_base_agility(), target);
  }

  // optional uint32 base_intelligence = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_base_intelligence(), target);
  }

  // optional int32 base_armor = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_base_armor(), target);
  }

  // optional uint32 base_movespeed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_base_movespeed(), target);
  }

  // optional uint32 base_damage = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_base_damage(), target);
  }

  // optional uint32 strength = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_strength(), target);
  }

  // optional uint32 agility = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_agility(), target);
  }

  // optional uint32 intelligence = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_intelligence(), target);
  }

  // optional int32 armor = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_armor(), target);
  }

  // optional uint32 movespeed = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_movespeed(), target);
  }

  // optional uint32 damage = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_damage(), target);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tower_damage(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_abilities(i), target, stream);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_level(), target);
  }

  // optional uint32 kill_count = 28;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_kill_count(), target);
  }

  // optional uint32 death_count = 29;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_death_count(), target);
  }

  // optional uint32 assists_count = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_assists_count(), target);
  }

  // optional uint32 denies_count = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_denies_count(), target);
  }

  // optional uint32 lh_count = 32;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_lh_count(), target);
  }

  // optional uint32 hero_healing = 33;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_hero_healing(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 gold_per_min = 34;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_gold_per_min(), target);
  }

  // optional uint32 xp_per_min = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_xp_per_min(), target);
  }

  // optional uint32 net_gold = 36;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_net_gold(), target);
  }

  // optional uint32 gold = 37;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_gold(), target);
  }

  // optional float x = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_x(), target);
  }

  // optional float y = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_y(), target);
  }

  // optional int32 respawn_time = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_respawn_time(), target);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_ultimate_cooldown(), target);
  }

  // optional bool has_buyback = 42;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(42, this->_internal_has_buyback(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_items(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stashitems_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, this->_internal_stashitems(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemshoppinglist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, this->_internal_itemshoppinglist(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_levelpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, this->_internal_levelpoints(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_to_hero_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, this->_internal_hero_to_hero_stats(i), target, stream);
  }

  // optional bool has_ultimate = 48;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(48, this->_internal_has_ultimate(), target);
  }

  // optional bool has_ultimate_mana = 49;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(49, this->_internal_has_ultimate_mana(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.PlayerDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_PlayerDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  total_size += 2UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  total_size += 2UL * this->_internal_stashitems_size();
  for (const auto& msg : this->stashitems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  total_size += 2UL * this->_internal_itemshoppinglist_size();
  for (const auto& msg : this->itemshoppinglist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  total_size += 2UL * this->_internal_levelpoints_size();
  for (const auto& msg : this->levelpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  total_size += 2UL * this->_internal_hero_to_hero_stats_size();
  for (const auto& msg : this->hero_to_hero_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 playerid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_playerid());
    }

    // optional uint32 team = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 heroid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 healthpoints = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healthpoints());
    }

    // optional uint32 maxhealthpoints = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxhealthpoints());
    }

    // optional float healthregenrate = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 manapoints = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_manapoints());
    }

    // optional uint32 maxmanapoints = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_maxmanapoints());
    }

    // optional float manaregenrate = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 base_strength = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_strength());
    }

    // optional uint32 base_agility = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_agility());
    }

    // optional uint32 base_intelligence = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_intelligence());
    }

    // optional int32 base_armor = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_base_armor());
    }

    // optional uint32 base_movespeed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_movespeed());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 base_damage = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_damage());
    }

    // optional uint32 strength = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strength());
    }

    // optional uint32 agility = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_agility());
    }

    // optional uint32 intelligence = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_intelligence());
    }

    // optional int32 armor = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_armor());
    }

    // optional uint32 movespeed = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_movespeed());
    }

    // optional uint32 damage = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

    // optional uint32 hero_damage = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_damage());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 tower_damage = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_damage());
    }

    // optional uint32 level = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 kill_count = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kill_count());
    }

    // optional uint32 death_count = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_death_count());
    }

    // optional uint32 assists_count = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists_count());
    }

    // optional uint32 denies_count = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies_count());
    }

    // optional uint32 lh_count = 32;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lh_count());
    }

    // optional uint32 hero_healing = 33;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_healing());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 gold_per_min = 34;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_per_min());
    }

    // optional uint32 xp_per_min = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_per_min());
    }

    // optional uint32 net_gold = 36;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_gold());
    }

    // optional uint32 gold = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional float x = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float y = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional int32 respawn_time = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_respawn_time());
    }

    // optional uint32 ultimate_cooldown = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ultimate_cooldown());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool has_buyback = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate = 48;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate_mana = 49;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PlayerDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_PlayerDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.PlayerDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.PlayerDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  stashitems_.MergeFrom(from.stashitems_);
  itemshoppinglist_.MergeFrom(from.itemshoppinglist_);
  levelpoints_.MergeFrom(from.levelpoints_);
  hero_to_hero_stats_.MergeFrom(from.hero_to_hero_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      healthpoints_ = from.healthpoints_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxhealthpoints_ = from.maxhealthpoints_;
    }
    if (cached_has_bits & 0x00000080u) {
      healthregenrate_ = from.healthregenrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      manapoints_ = from.manapoints_;
    }
    if (cached_has_bits & 0x00000200u) {
      maxmanapoints_ = from.maxmanapoints_;
    }
    if (cached_has_bits & 0x00000400u) {
      manaregenrate_ = from.manaregenrate_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_strength_ = from.base_strength_;
    }
    if (cached_has_bits & 0x00001000u) {
      base_agility_ = from.base_agility_;
    }
    if (cached_has_bits & 0x00002000u) {
      base_intelligence_ = from.base_intelligence_;
    }
    if (cached_has_bits & 0x00004000u) {
      base_armor_ = from.base_armor_;
    }
    if (cached_has_bits & 0x00008000u) {
      base_movespeed_ = from.base_movespeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      base_damage_ = from.base_damage_;
    }
    if (cached_has_bits & 0x00020000u) {
      strength_ = from.strength_;
    }
    if (cached_has_bits & 0x00040000u) {
      agility_ = from.agility_;
    }
    if (cached_has_bits & 0x00080000u) {
      intelligence_ = from.intelligence_;
    }
    if (cached_has_bits & 0x00100000u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00200000u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00400000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00800000u) {
      hero_damage_ = from.hero_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x04000000u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      death_count_ = from.death_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      assists_count_ = from.assists_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      denies_count_ = from.denies_count_;
    }
    if (cached_has_bits & 0x40000000u) {
      lh_count_ = from.lh_count_;
    }
    if (cached_has_bits & 0x80000000u) {
      hero_healing_ = from.hero_healing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_gold_ = from.net_gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      ultimate_cooldown_ = from.ultimate_cooldown_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      has_buyback_ = from.has_buyback_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_ultimate_ = from.has_ultimate_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_ultimate_mana_ = from.has_ultimate_mana_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  abilities_.InternalSwap(&other->abilities_);
  items_.InternalSwap(&other->items_);
  stashitems_.InternalSwap(&other->stashitems_);
  itemshoppinglist_.InternalSwap(&other->itemshoppinglist_);
  levelpoints_.InternalSwap(&other->levelpoints_);
  hero_to_hero_stats_.InternalSwap(&other->hero_to_hero_stats_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_mana_)
      + sizeof(CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_PlayerDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_BuildingDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_BuildingDetails>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.BuildingDetails)
}
CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
}

CMsgDOTARealtimeGameStats_BuildingDetails::~CMsgDOTARealtimeGameStats_BuildingDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.BuildingDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_BuildingDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_BuildingDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_BuildingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destroyed_) -
        reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_BuildingDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float heading = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tier(&has_bits);
          tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool destroyed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_destroyed(&has_bits);
          destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_BuildingDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team(), target);
  }

  // optional float heading = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_heading(), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lane(), target);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tier(), target);
  }

  // optional uint32 type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_type(), target);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_x(), target);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_y(), target);
  }

  // optional bool destroyed = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_destroyed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.BuildingDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_BuildingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional float heading = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 lane = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional uint32 tier = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tier());
    }

    // optional uint32 type = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional float x = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BuildingDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_BuildingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.BuildingDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.BuildingDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, destroyed_)
      + sizeof(CMsgDOTARealtimeGameStats_BuildingDetails::destroyed_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_BuildingDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_KillDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_KillDetails>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_death_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.KillDetails)
}
CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&killer_player_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(killer_player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&killer_player_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(killer_player_id_));
}

CMsgDOTARealtimeGameStats_KillDetails::~CMsgDOTARealtimeGameStats_KillDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.KillDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_KillDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_KillDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_KillDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_KillDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_KillDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_KillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.KillDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killer_player_id_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(killer_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_KillDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 death_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_death_time(&has_bits);
          death_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killer_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_killer_player_id(&has_bits);
          killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_KillDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.KillDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 death_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_death_time(), target);
  }

  // optional uint32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_killer_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.KillDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_KillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.KillDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional int32 death_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_death_time());
    }

    // optional uint32 killer_player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killer_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_KillDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_KillDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.KillDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.KillDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      death_time_ = from.death_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      killer_player_id_ = from.killer_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_KillDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_KillDetails::InternalSwap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, killer_player_id_)
      + sizeof(CMsgDOTARealtimeGameStats_KillDetails::killer_player_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_KillDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_BroadcasterDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_BroadcasterDetails>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selected_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_selected_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}
CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&selected_graph_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(selected_graph_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&selected_graph_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(selected_graph_));
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::~CMsgDOTARealtimeGameStats_BroadcasterDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_BroadcasterDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_BroadcasterDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&selected_graph_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(selected_graph_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_BroadcasterDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selected_hero = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_selected_hero(&has_bits);
          selected_hero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 selected_graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_selected_graph(&has_bits);
          selected_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_BroadcasterDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 selected_hero = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_selected_hero(), target);
  }

  // optional uint32 selected_graph = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_selected_graph(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_BroadcasterDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_id());
    }

    // optional uint32 selected_hero = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selected_hero());
    }

    // optional uint32 selected_graph = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selected_graph());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BroadcasterDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_BroadcasterDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.BroadcasterDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.BroadcasterDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      selected_hero_ = from.selected_hero_;
    }
    if (cached_has_bits & 0x00000004u) {
      selected_graph_ = from.selected_graph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::InternalSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_graph_)
      + sizeof(CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_graph_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_BroadcasterDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_PickBanDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_PickBanDetails>()._has_bits_);
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.PickBanDetails)
}
CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_, &from.hero_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_)) + sizeof(team_));
}

CMsgDOTARealtimeGameStats_PickBanDetails::~CMsgDOTARealtimeGameStats_PickBanDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.PickBanDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_PickBanDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_PickBanDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_PickBanDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_PickBanDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero(&has_bits);
          hero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_PickBanDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.PickBanDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_PickBanDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero());
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PickBanDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_PickBanDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.PickBanDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.PickBanDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_ = from.hero_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::InternalSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, team_)
      + sizeof(CMsgDOTARealtimeGameStats_PickBanDetails::team_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, hero_)>(
          reinterpret_cast<char*>(&hero_),
          reinterpret_cast<char*>(&other->hero_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_PickBanDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_MatchDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats_MatchDetails>()._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_of_day(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_nightstalker_night(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_teamid_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_teamid_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_single_team(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cheers_peak(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picks_(arena),
  bans_(arena),
  kills_(arena),
  broadcasters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.MatchDetails)
}
CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picks_(from.picks_),
      bans_(from.bans_),
      kills_(from.kills_),
      broadcasters_(from.broadcasters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
}

CMsgDOTARealtimeGameStats_MatchDetails::~CMsgDOTARealtimeGameStats_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.MatchDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_MatchDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_MatchDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_MatchDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_MatchDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_MatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.MatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picks_.Clear();
  bans_.Clear();
  kills_.Clear();
  broadcasters_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_nightstalker_night_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(is_nightstalker_night_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&single_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_state_) -
        reinterpret_cast<char*>(&single_team_)) + sizeof(game_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_MatchDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time_of_day = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_time_of_day(&has_bits);
          time_of_day_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_nightstalker_night = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_nightstalker_night(&has_bits);
          is_nightstalker_night_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid_radiant = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_teamid_radiant(&has_bits);
          teamid_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teamid_dire = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_teamid_dire(&has_bits);
          teamid_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcasters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool single_team = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_single_team(&has_bits);
          single_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cheers_peak = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_cheers_peak(&has_bits);
          cheers_peak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_league_node_id(&has_bits);
          league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_state = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_game_state(&has_bits);
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_MatchDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.MatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional float time_of_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_time_of_day(), target);
  }

  // optional bool is_nightstalker_night = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_nightstalker_night(), target);
  }

  // optional int32 game_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_game_time(), target);
  }

  // optional uint32 teamid_radiant = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_teamid_radiant(), target);
  }

  // optional uint32 teamid_dire = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_teamid_dire(), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_picks(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_bans(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_kills(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcasters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_broadcasters(i), target, stream);
  }

  // optional uint32 game_mode = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_game_mode(), target);
  }

  // optional uint32 league_id = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_league_id(), target);
  }

  // optional bool single_team = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_single_team(), target);
  }

  // optional uint32 cheers_peak = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_cheers_peak(), target);
  }

  // optional uint32 league_node_id = 18;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_league_node_id(), target);
  }

  // optional uint32 game_state = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_game_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.MatchDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.MatchDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  total_size += 1UL * this->_internal_picks_size();
  for (const auto& msg : this->picks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  total_size += 1UL * this->_internal_bans_size();
  for (const auto& msg : this->bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  total_size += 1UL * this->_internal_kills_size();
  for (const auto& msg : this->kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  total_size += 1UL * this->_internal_broadcasters_size();
  for (const auto& msg : this->broadcasters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional float time_of_day = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional int32 game_time = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_time());
    }

    // optional uint32 teamid_radiant = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid_radiant());
    }

    // optional uint32 teamid_dire = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teamid_dire());
    }

    // optional bool is_nightstalker_night = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional bool single_team = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional uint32 game_mode = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint32 league_id = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 cheers_peak = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cheers_peak());
    }

    // optional uint32 league_node_id = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

    // optional uint32 game_state = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_MatchDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_MatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.MatchDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  kills_.MergeFrom(from.kills_);
  broadcasters_.MergeFrom(from.broadcasters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      teamid_radiant_ = from.teamid_radiant_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_dire_ = from.teamid_dire_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_nightstalker_night_ = from.is_nightstalker_night_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      single_team_ = from.single_team_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      cheers_peak_ = from.cheers_peak_;
    }
    if (cached_has_bits & 0x00001000u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      game_state_ = from.game_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picks_.InternalSwap(&other->picks_);
  bans_.InternalSwap(&other->bans_);
  kills_.InternalSwap(&other->kills_);
  broadcasters_.InternalSwap(&other->broadcasters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_state_)
      + sizeof(CMsgDOTARealtimeGameStats_MatchDetails::game_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, server_steam_id_)>(
          reinterpret_cast<char*>(&server_steam_id_),
          reinterpret_cast<char*>(&other->server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_MatchDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_GraphData_LocationStats::_Internal {
 public:
};

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}
CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedCtor() {
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::~CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_GraphData_LocationStats* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_GraphData_LocationStats* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_GraphData_LocationStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_stats(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_GraphData_LocationStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  for (int i = 0, n = this->_internal_stats_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stats(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData_LocationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->stats_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stats_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_LocationStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_GraphData_LocationStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_GraphData_LocationStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_Internal {
 public:
};

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  loc_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      loc_stats_(from.loc_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedCtor() {
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loc_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_loc_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_loc_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_loc_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  total_size += 1UL * this->_internal_loc_stats_size();
  for (const auto& msg : this->loc_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loc_stats_.MergeFrom(from.loc_stats_);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  loc_stats_.InternalSwap(&other->loc_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats_GraphData::_Internal {
 public:
};

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graph_gold_(arena),
  graph_xp_(arena),
  graph_kill_(arena),
  graph_tower_(arena),
  graph_rax_(arena),
  team_loc_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats.GraphData)
}
CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graph_gold_(from.graph_gold_),
      graph_xp_(from.graph_xp_),
      graph_kill_(from.graph_kill_),
      graph_tower_(from.graph_tower_),
      graph_rax_(from.graph_rax_),
      team_loc_stats_(from.team_loc_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::SharedCtor() {
}

CMsgDOTARealtimeGameStats_GraphData::~CMsgDOTARealtimeGameStats_GraphData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats.GraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats_GraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStats_GraphData::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats_GraphData* _this = reinterpret_cast< CMsgDOTARealtimeGameStats_GraphData* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats_GraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats_GraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats_GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats.GraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_gold_.Clear();
  graph_xp_.Clear();
  graph_kill_.Clear();
  graph_tower_.Clear();
  graph_rax_.Clear();
  team_loc_stats_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats_GraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 graph_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_graph_gold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 graph_xp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_xp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_graph_xp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 graph_kill = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_kill(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_graph_kill(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 graph_tower = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_tower(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_graph_tower(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 graph_rax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_rax(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_graph_rax(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_team_loc_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats_GraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats.GraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  for (int i = 0, n = this->_internal_graph_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_graph_gold(i), target);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0, n = this->_internal_graph_xp_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_graph_xp(i), target);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0, n = this->_internal_graph_kill_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_graph_kill(i), target);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0, n = this->_internal_graph_tower_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_graph_tower(i), target);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0, n = this->_internal_graph_rax_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_graph_rax(i), target);
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_team_loc_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_team_loc_stats(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats.GraphData)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats.GraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->graph_gold_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_gold_size());
    total_size += data_size;
  }

  // repeated int32 graph_xp = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->graph_xp_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_xp_size());
    total_size += data_size;
  }

  // repeated int32 graph_kill = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->graph_kill_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_kill_size());
    total_size += data_size;
  }

  // repeated int32 graph_tower = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->graph_tower_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_tower_size());
    total_size += data_size;
  }

  // repeated int32 graph_rax = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->graph_rax_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_rax_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  total_size += 1UL * this->_internal_team_loc_stats_size();
  for (const auto& msg : this->team_loc_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats_GraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats.GraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats.GraphData)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_gold_.MergeFrom(from.graph_gold_);
  graph_xp_.MergeFrom(from.graph_xp_);
  graph_kill_.MergeFrom(from.graph_kill_);
  graph_tower_.MergeFrom(from.graph_tower_);
  graph_rax_.MergeFrom(from.graph_rax_);
  team_loc_stats_.MergeFrom(from.team_loc_stats_);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData::InternalSwap(CMsgDOTARealtimeGameStats_GraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graph_gold_.InternalSwap(&other->graph_gold_);
  graph_xp_.InternalSwap(&other->graph_xp_);
  graph_kill_.InternalSwap(&other->graph_kill_);
  graph_tower_.InternalSwap(&other->graph_tower_);
  graph_rax_.InternalSwap(&other->graph_rax_);
  team_loc_stats_.InternalSwap(&other->team_loc_stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats_GraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStats>()._has_bits_);
  static const ::CMsgDOTARealtimeGameStats_MatchDetails& match(const CMsgDOTARealtimeGameStats* msg);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTARealtimeGameStats_GraphData& graph_data(const CMsgDOTARealtimeGameStats* msg);
  static void set_has_graph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delta_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgDOTARealtimeGameStats_MatchDetails&
CMsgDOTARealtimeGameStats::_Internal::match(const CMsgDOTARealtimeGameStats* msg) {
  return *msg->match_;
}
const ::CMsgDOTARealtimeGameStats_GraphData&
CMsgDOTARealtimeGameStats::_Internal::graph_data(const CMsgDOTARealtimeGameStats* msg) {
  return *msg->graph_data_;
}
CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  buildings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStats)
}
CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match()) {
    match_ = new ::CMsgDOTARealtimeGameStats_MatchDetails(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from._internal_has_graph_data()) {
    graph_data_ = new ::CMsgDOTARealtimeGameStats_GraphData(*from.graph_data_);
  } else {
    graph_data_ = nullptr;
  }
  delta_frame_ = from.delta_frame_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delta_frame_) -
    reinterpret_cast<char*>(&match_)) + sizeof(delta_frame_));
}

CMsgDOTARealtimeGameStats::~CMsgDOTARealtimeGameStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete graph_data_;
}

void CMsgDOTARealtimeGameStats::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStats* _this = reinterpret_cast< CMsgDOTARealtimeGameStats* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  buildings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(graph_data_ != nullptr);
      graph_data_->Clear();
    }
  }
  delta_frame_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delta_frame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_delta_frame(&has_bits);
          delta_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match(this), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teams(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buildings(i), target, stream);
  }

  // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::graph_data(this), target, stream);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_delta_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgDOTARealtimeGameStats.MatchDetails match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional .CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *graph_data_);
    }

    // optional bool delta_frame = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats::MergeFrom(const CMsgDOTARealtimeGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match()->::CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(from._internal_match());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_graph_data()->::CMsgDOTARealtimeGameStats_GraphData::MergeFrom(from._internal_graph_data());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_frame_ = from.delta_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats::CopyFrom(const CMsgDOTARealtimeGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats::InternalSwap(CMsgDOTARealtimeGameStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  buildings_.InternalSwap(&other->buildings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats, delta_frame_)
      + sizeof(CMsgDOTARealtimeGameStats::delta_frame_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStats, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse_TeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStatsTerse_TeamDetails>()._has_bits_);
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}
CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::~CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse_TeamDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse_TeamDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&team_number_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_team_logo(&has_bits);
          team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_score(&has_bits);
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse_TeamDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_team_logo(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_score(), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_players(i), target, stream);
  }

  // optional uint32 net_worth = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_net_worth(), target);
  }

  // optional string team_tag = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_tag");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_team_tag(), target);
  }

  // optional string team_logo_url = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_team_logo_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional string team_logo_url = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional uint32 team_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_number());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional fixed64 team_logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_score());
    }

    // optional uint32 net_worth = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_TeamDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_TeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000008u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000080u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, net_worth_)
      + sizeof(CMsgDOTARealtimeGameStatsTerse_TeamDetails::net_worth_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_number_)>(
          reinterpret_cast<char*>(&team_number_),
          reinterpret_cast<char*>(&other->team_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse_TeamDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStatsTerse_PlayerDetails>()._has_bits_);
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heroid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_death_count(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_assists_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_denies_count(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lh_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abilities_(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&accountid_, &from.accountid_,
    static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(net_worth_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&accountid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&net_worth_) -
    reinterpret_cast<char*>(&accountid_)) + sizeof(net_worth_));
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::~CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse_PlayerDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&accountid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&death_count_) -
        reinterpret_cast<char*>(&accountid_)) + sizeof(death_count_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&assists_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&net_worth_) -
        reinterpret_cast<char*>(&assists_count_)) + sizeof(net_worth_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 accountid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_accountid(&has_bits);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 playerid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heroid(&has_bits);
          heroid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kill_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_kill_count(&has_bits);
          kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 death_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_death_count(&has_bits);
          death_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_assists_count(&has_bits);
          assists_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_denies_count(&has_bits);
          denies_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lh_count = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lh_count(&has_bits);
          lh_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_gold(&has_bits);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_net_worth(&has_bits);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 abilities = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_abilities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_abilities(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_playerid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heroid(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 kill_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_kill_count(), target);
  }

  // optional uint32 death_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_death_count(), target);
  }

  // optional uint32 assists_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_assists_count(), target);
  }

  // optional uint32 denies_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_denies_count(), target);
  }

  // optional uint32 lh_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_lh_count(), target);
  }

  // optional uint32 gold = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_gold(), target);
  }

  // optional float x = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_x(), target);
  }

  // optional float y = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_y(), target);
  }

  // optional uint32 net_worth = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_net_worth(), target);
  }

  // repeated uint32 abilities = 16;
  for (int i = 0, n = this->_internal_abilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_abilities(i), target);
  }

  // repeated uint32 items = 17;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_items(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 abilities = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->abilities_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_abilities_size());
    total_size += data_size;
  }

  // repeated uint32 items = 17;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 accountid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 playerid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_playerid());
    }

    // optional uint32 team = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional uint32 heroid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroid());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 kill_count = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kill_count());
    }

    // optional uint32 death_count = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_death_count());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 assists_count = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists_count());
    }

    // optional uint32 denies_count = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies_count());
    }

    // optional uint32 lh_count = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lh_count());
    }

    // optional uint32 gold = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional float x = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float y = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional uint32 net_worth = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      death_count_ = from.death_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      assists_count_ = from.assists_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      denies_count_ = from.denies_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      lh_count_ = from.lh_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00001000u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00002000u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00004000u) {
      net_worth_ = from.net_worth_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  abilities_.InternalSwap(&other->abilities_);
  items_.InternalSwap(&other->items_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, net_worth_)
      + sizeof(CMsgDOTARealtimeGameStatsTerse_PlayerDetails::net_worth_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, accountid_)>(
          reinterpret_cast<char*>(&accountid_),
          reinterpret_cast<char*>(&other->accountid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse_PlayerDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStatsTerse_BuildingDetails>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lane(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}
CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::~CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse_BuildingDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&destroyed_) -
        reinterpret_cast<char*>(&team_)) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float heading = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lane(&has_bits);
          lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tier(&has_bits);
          tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool destroyed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_destroyed(&has_bits);
          destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team(), target);
  }

  // optional float heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_heading(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type(), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_lane(), target);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tier(), target);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_x(), target);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_y(), target);
  }

  // optional bool destroyed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_destroyed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

    // optional float heading = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 lane = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane());
    }

    // optional uint32 tier = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tier());
    }

    // optional float x = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float y = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, destroyed_)
      + sizeof(CMsgDOTARealtimeGameStatsTerse_BuildingDetails::destroyed_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse_BuildingDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStatsTerse_PickBanDetails>()._has_bits_);
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CMsgDOTARealtimeGameStatsTerse_PickBanDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
}
CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CMsgDOTARealtimeGameStatsTerse_PickBanDetails(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_, &from.hero_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_)) + sizeof(team_));
}

CMsgDOTARealtimeGameStatsTerse_PickBanDetails::~CMsgDOTARealtimeGameStatsTerse_PickBanDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse_PickBanDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse_PickBanDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_) -
        reinterpret_cast<char*>(&hero_)) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero(&has_bits);
          hero_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team(&has_bits);
          team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse_PickBanDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_PickBanDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero());
    }

    // optional uint32 team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_PickBanDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_PickBanDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_ = from.hero_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PickBanDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PickBanDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_PickBanDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PickBanDetails, team_)
      + sizeof(CMsgDOTARealtimeGameStatsTerse_PickBanDetails::team_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PickBanDetails, hero_)>(
          reinterpret_cast<char*>(&hero_),
          reinterpret_cast<char*>(&other->hero_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse_PickBanDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse_MatchDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStatsTerse_MatchDetails>()._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_matchid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_league_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  steam_broadcaster_account_ids_(arena),
  picks_(arena),
  bans_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}
CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      steam_broadcaster_account_ids_(from.steam_broadcaster_account_ids_),
      picks_(from.picks_),
      bans_(from.bans_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_state_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::~CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse_MatchDetails* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse_MatchDetails* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_broadcaster_account_ids_.Clear();
  picks_.Clear();
  bans_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_state_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(game_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse_MatchDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 matchid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_matchid(&has_bits);
          matchid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 steam_broadcaster_account_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_broadcaster_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_steam_broadcaster_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_node_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_league_node_id(&has_bits);
          league_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_game_state(&has_bits);
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_picks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse_MatchDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_game_time(), target);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0, n = this->_internal_steam_broadcaster_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_steam_broadcaster_account_ids(i), target);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_game_mode(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_league_id(), target);
  }

  // optional uint32 league_node_id = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_league_node_id(), target);
  }

  // optional uint32 game_state = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_game_state(), target);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_picks(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_bans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 steam_broadcaster_account_ids = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->steam_broadcaster_account_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steam_broadcaster_account_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails picks = 11;
  total_size += 1UL * this->_internal_picks_size();
  for (const auto& msg : this->picks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.PickBanDetails bans = 12;
  total_size += 1UL * this->_internal_bans_size();
  for (const auto& msg : this->bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_matchid());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional int32 game_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_time());
    }

    // optional uint32 game_mode = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint32 league_id = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 league_node_id = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_node_id());
    }

    // optional uint32 game_state = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_MatchDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_MatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steam_broadcaster_account_ids_.MergeFrom(from.steam_broadcaster_account_ids_);
  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_node_id_ = from.league_node_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_state_ = from.game_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  steam_broadcaster_account_ids_.InternalSwap(&other->steam_broadcaster_account_ids_);
  picks_.InternalSwap(&other->picks_);
  bans_.InternalSwap(&other->bans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_state_)
      + sizeof(CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, server_steam_id_)>(
          reinterpret_cast<char*>(&server_steam_id_),
          reinterpret_cast<char*>(&other->server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse_MatchDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse_GraphData::_Internal {
 public:
};

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  graph_gold_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
}
CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      graph_gold_(from.graph_gold_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedCtor() {
}

CMsgDOTARealtimeGameStatsTerse_GraphData::~CMsgDOTARealtimeGameStatsTerse_GraphData() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse.GraphData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse_GraphData* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse_GraphData* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  graph_gold_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse_GraphData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 graph_gold = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_graph_gold(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse_GraphData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  for (int i = 0, n = this->_internal_graph_gold_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_graph_gold(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse.GraphData)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->graph_gold_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_gold_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_GraphData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse_GraphData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse.GraphData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse.GraphData)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_gold_.MergeFrom(from.graph_gold_);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::InternalSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  graph_gold_.InternalSwap(&other->graph_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse_GraphData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTARealtimeGameStatsTerse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTARealtimeGameStatsTerse>()._has_bits_);
  static const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails& match(const CMsgDOTARealtimeGameStatsTerse* msg);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTARealtimeGameStatsTerse_GraphData& graph_data(const CMsgDOTARealtimeGameStatsTerse* msg);
  static void set_has_graph_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_delta_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgDOTARealtimeGameStatsTerse_MatchDetails&
CMsgDOTARealtimeGameStatsTerse::_Internal::match(const CMsgDOTARealtimeGameStatsTerse* msg) {
  return *msg->match_;
}
const ::CMsgDOTARealtimeGameStatsTerse_GraphData&
CMsgDOTARealtimeGameStatsTerse::_Internal::graph_data(const CMsgDOTARealtimeGameStatsTerse* msg) {
  return *msg->graph_data_;
}
CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  buildings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTARealtimeGameStatsTerse)
}
CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match()) {
    match_ = new ::CMsgDOTARealtimeGameStatsTerse_MatchDetails(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from._internal_has_graph_data()) {
    graph_data_ = new ::CMsgDOTARealtimeGameStatsTerse_GraphData(*from.graph_data_);
  } else {
    graph_data_ = nullptr;
  }
  delta_frame_ = from.delta_frame_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delta_frame_) -
    reinterpret_cast<char*>(&match_)) + sizeof(delta_frame_));
}

CMsgDOTARealtimeGameStatsTerse::~CMsgDOTARealtimeGameStatsTerse() {
  // @@protoc_insertion_point(destructor:CMsgDOTARealtimeGameStatsTerse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTARealtimeGameStatsTerse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete graph_data_;
}

void CMsgDOTARealtimeGameStatsTerse::ArenaDtor(void* object) {
  CMsgDOTARealtimeGameStatsTerse* _this = reinterpret_cast< CMsgDOTARealtimeGameStatsTerse* >(object);
  (void)_this;
}
void CMsgDOTARealtimeGameStatsTerse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTARealtimeGameStatsTerse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTARealtimeGameStatsTerse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTARealtimeGameStatsTerse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  buildings_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(graph_data_ != nullptr);
      graph_data_->Clear();
    }
  }
  delta_frame_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTARealtimeGameStatsTerse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delta_frame = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_delta_frame(&has_bits);
          delta_frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTARealtimeGameStatsTerse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTARealtimeGameStatsTerse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match(this), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teams(i), target, stream);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buildings(i), target, stream);
  }

  // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::graph_data(this), target, stream);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_delta_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTARealtimeGameStatsTerse)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTARealtimeGameStatsTerse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional .CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *graph_data_);
    }

    // optional bool delta_frame = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTARealtimeGameStatsTerse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTARealtimeGameStatsTerse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTARealtimeGameStatsTerse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTARealtimeGameStatsTerse)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTARealtimeGameStatsTerse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match()->::CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(from._internal_match());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_graph_data()->::CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(from._internal_graph_data());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_frame_ = from.delta_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTARealtimeGameStatsTerse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTARealtimeGameStatsTerse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse::InternalSwap(CMsgDOTARealtimeGameStatsTerse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  buildings_.InternalSwap(&other->buildings_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, delta_frame_)
      + sizeof(CMsgDOTARealtimeGameStatsTerse::delta_frame_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTARealtimeGameStatsTerse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABroadcastTimelineEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABroadcastTimelineEvent>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTABroadcastTimelineEvent::CMsgDOTABroadcastTimelineEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABroadcastTimelineEvent)
}
CMsgDOTABroadcastTimelineEvent::CMsgDOTABroadcastTimelineEvent(const CMsgDOTABroadcastTimelineEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  string_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_data()) {
    string_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_data(), 
      GetArena());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(event_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABroadcastTimelineEvent)
}

void CMsgDOTABroadcastTimelineEvent::SharedCtor() {
string_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
event_ = 1;
}

CMsgDOTABroadcastTimelineEvent::~CMsgDOTABroadcastTimelineEvent() {
  // @@protoc_insertion_point(destructor:CMsgDOTABroadcastTimelineEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABroadcastTimelineEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  string_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABroadcastTimelineEvent::ArenaDtor(void* object) {
  CMsgDOTABroadcastTimelineEvent* _this = reinterpret_cast< CMsgDOTABroadcastTimelineEvent* >(object);
  (void)_this;
}
void CMsgDOTABroadcastTimelineEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABroadcastTimelineEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABroadcastTimelineEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABroadcastTimelineEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_data_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&data_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(data_));
    event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABroadcastTimelineEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EBroadcastTimelineEvent_IsValid(val))) {
            _internal_set_event(static_cast<::EBroadcastTimelineEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional fixed32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_data(&has_bits);
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTABroadcastTimelineEvent.string_data");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABroadcastTimelineEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABroadcastTimelineEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  // optional fixed32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 data = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data(), target);
  }

  // optional string string_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_data().data(), static_cast<int>(this->_internal_string_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTABroadcastTimelineEvent.string_data");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABroadcastTimelineEvent)
  return target;
}

size_t CMsgDOTABroadcastTimelineEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABroadcastTimelineEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string_data = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_data());
    }

    // optional fixed32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 data = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_data());
    }

    // optional .EBroadcastTimelineEvent event = 1 [default = EBroadcastTimelineEvent_MatchStarted];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABroadcastTimelineEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABroadcastTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABroadcastTimelineEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABroadcastTimelineEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABroadcastTimelineEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABroadcastTimelineEvent)
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastTimelineEvent::MergeFrom(const CMsgDOTABroadcastTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABroadcastTimelineEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_string_data(from._internal_string_data());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_ = from.event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABroadcastTimelineEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABroadcastTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastTimelineEvent::CopyFrom(const CMsgDOTABroadcastTimelineEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABroadcastTimelineEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastTimelineEvent::IsInitialized() const {
  return true;
}

void CMsgDOTABroadcastTimelineEvent::InternalSwap(CMsgDOTABroadcastTimelineEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_data_.Swap(&other->string_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTABroadcastTimelineEvent, data_)
      + sizeof(CMsgDOTABroadcastTimelineEvent::data_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTABroadcastTimelineEvent, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABroadcastTimelineEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientMatchGroupsVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientMatchGroupsVersion>()._has_bits_);
  static void set_has_matchgroups_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientMatchGroupsVersion)
}
CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  matchgroups_version_ = from.matchgroups_version_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientMatchGroupsVersion)
}

void CMsgGCToClientMatchGroupsVersion::SharedCtor() {
matchgroups_version_ = 0u;
}

CMsgGCToClientMatchGroupsVersion::~CMsgGCToClientMatchGroupsVersion() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientMatchGroupsVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientMatchGroupsVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientMatchGroupsVersion::ArenaDtor(void* object) {
  CMsgGCToClientMatchGroupsVersion* _this = reinterpret_cast< CMsgGCToClientMatchGroupsVersion* >(object);
  (void)_this;
}
void CMsgGCToClientMatchGroupsVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientMatchGroupsVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientMatchGroupsVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientMatchGroupsVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matchgroups_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientMatchGroupsVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 matchgroups_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_matchgroups_version(&has_bits);
          matchgroups_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientMatchGroupsVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientMatchGroupsVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matchgroups_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_matchgroups_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientMatchGroupsVersion)
  return target;
}

size_t CMsgGCToClientMatchGroupsVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientMatchGroupsVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 matchgroups_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matchgroups_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientMatchGroupsVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientMatchGroupsVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientMatchGroupsVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientMatchGroupsVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientMatchGroupsVersion)
    MergeFrom(*source);
  }
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const CMsgGCToClientMatchGroupsVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientMatchGroupsVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_matchgroups_version()) {
    _internal_set_matchgroups_version(from._internal_matchgroups_version());
  }
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientMatchGroupsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const CMsgGCToClientMatchGroupsVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientMatchGroupsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientMatchGroupsVersion::IsInitialized() const {
  return true;
}

void CMsgGCToClientMatchGroupsVersion::InternalSwap(CMsgGCToClientMatchGroupsVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(matchgroups_version_, other->matchgroups_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientMatchGroupsVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASDOHeroStatsHistory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASDOHeroStatsHistory>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_won(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_xpm(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASDOHeroStatsHistory)
}
CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASDOHeroStatsHistory)
}

void CMsgDOTASDOHeroStatsHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
}

CMsgDOTASDOHeroStatsHistory::~CMsgDOTASDOHeroStatsHistory() {
  // @@protoc_insertion_point(destructor:CMsgDOTASDOHeroStatsHistory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASDOHeroStatsHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASDOHeroStatsHistory::ArenaDtor(void* object) {
  CMsgDOTASDOHeroStatsHistory* _this = reinterpret_cast< CMsgDOTASDOHeroStatsHistory* >(object);
  (void)_this;
}
void CMsgDOTASDOHeroStatsHistory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASDOHeroStatsHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASDOHeroStatsHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASDOHeroStatsHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&kills_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(kills_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&deaths_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&deaths_)) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASDOHeroStatsHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool won = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_won(&has_bits);
          won_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gpm = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_gpm(&has_bits);
          gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 xpm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_xpm(&has_bits);
          xpm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASDOHeroStatsHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASDOHeroStatsHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game_mode(), target);
  }

  // optional uint32 lobby_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lobby_type(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_time(), target);
  }

  // optional bool won = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_won(), target);
  }

  // optional uint32 gpm = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_gpm(), target);
  }

  // optional uint32 xpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_xpm(), target);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASDOHeroStatsHistory)
  return target;
}

size_t CMsgDOTASDOHeroStatsHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASDOHeroStatsHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 game_mode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint32 lobby_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_type());
    }

    // optional uint32 start_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional bool won = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 gpm = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gpm());
    }

    // optional uint32 xpm = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xpm());
    }

    // optional uint32 kills = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 deaths = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASDOHeroStatsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASDOHeroStatsHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASDOHeroStatsHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASDOHeroStatsHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASDOHeroStatsHistory)
    MergeFrom(*source);
  }
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const CMsgDOTASDOHeroStatsHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASDOHeroStatsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      won_ = from.won_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000040u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000200u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASDOHeroStatsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const CMsgDOTASDOHeroStatsHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASDOHeroStatsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASDOHeroStatsHistory::IsInitialized() const {
  return true;
}

void CMsgDOTASDOHeroStatsHistory::InternalSwap(CMsgDOTASDOHeroStatsHistory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, assists_)
      + sizeof(CMsgDOTASDOHeroStatsHistory::assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASDOHeroStatsHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonRewards_Reward::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeasonRewards_Reward>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemdef(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_importance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeat_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reward_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_effect_index(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonRewards.Reward)
}
CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward(const CMsgDOTASeasonRewards_Reward& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArena());
  }
  ::memcpy(&itemdef_, &from.itemdef_,
    static_cast<size_t>(reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&itemdef_)) + sizeof(effect_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonRewards.Reward)
}

void CMsgDOTASeasonRewards_Reward::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&itemdef_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&itemdef_)) + sizeof(effect_index_));
}

CMsgDOTASeasonRewards_Reward::~CMsgDOTASeasonRewards_Reward() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonRewards.Reward)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonRewards_Reward::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonRewards_Reward::ArenaDtor(void* object) {
  CMsgDOTASeasonRewards_Reward* _this = reinterpret_cast< CMsgDOTASeasonRewards_Reward* >(object);
  (void)_this;
}
void CMsgDOTASeasonRewards_Reward::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonRewards_Reward::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonRewards_Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonRewards.Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      image_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&itemdef_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_id_) -
        reinterpret_cast<char*>(&itemdef_)) + sizeof(action_id_));
  }
  effect_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonRewards_Reward::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonRewards.Reward.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 itemdef = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemdef(&has_bits);
          itemdef_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 importance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_importance(&has_bits);
          importance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 base_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_base_level(&has_bits);
          base_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeat_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_repeat_level(&has_bits);
          repeat_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTASeasonRewards_ERewardType_IsValid(val))) {
            _internal_set_reward_type(static_cast<::CMsgDOTASeasonRewards_ERewardType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string image = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonRewards.Reward.image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 action_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 effect_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_effect_index(&has_bits);
          effect_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonRewards_Reward::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonRewards.Reward)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonRewards.Reward.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 itemdef = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_itemdef(), target);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_importance(), target);
  }

  // optional uint32 base_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_base_level(), target);
  }

  // optional uint32 repeat_level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_repeat_level(), target);
  }

  // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_reward_type(), target);
  }

  // optional string image = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonRewards.Reward.image");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_image(), target);
  }

  // optional uint32 action_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_action_id(), target);
  }

  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_effect_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonRewards.Reward)
  return target;
}

size_t CMsgDOTASeasonRewards_Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonRewards.Reward)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string image = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
    }

    // optional uint32 itemdef = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_itemdef());
    }

    // optional uint32 importance = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_importance());
    }

    // optional uint32 base_level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_base_level());
    }

    // optional uint32 repeat_level = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeat_level());
    }

    // optional .CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_type());
    }

    // optional uint32 action_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

  }
  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_effect_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonRewards.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonRewards_Reward* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonRewards_Reward>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonRewards.Reward)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonRewards.Reward)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const CMsgDOTASeasonRewards_Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonRewards.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000004u) {
      itemdef_ = from.itemdef_;
    }
    if (cached_has_bits & 0x00000008u) {
      importance_ = from.importance_;
    }
    if (cached_has_bits & 0x00000010u) {
      base_level_ = from.base_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeat_level_ = from.repeat_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      reward_type_ = from.reward_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_effect_index(from._internal_effect_index());
  }
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonRewards.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const CMsgDOTASeasonRewards_Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonRewards.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards_Reward::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonRewards_Reward::InternalSwap(CMsgDOTASeasonRewards_Reward* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, effect_index_)
      + sizeof(CMsgDOTASeasonRewards_Reward::effect_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, itemdef_)>(
          reinterpret_cast<char*>(&itemdef_),
          reinterpret_cast<char*>(&other->itemdef_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonRewards_Reward::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonRewards::_Internal {
 public:
};

CMsgDOTASeasonRewards::CMsgDOTASeasonRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rewards_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonRewards)
}
CMsgDOTASeasonRewards::CMsgDOTASeasonRewards(const CMsgDOTASeasonRewards& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonRewards)
}

void CMsgDOTASeasonRewards::SharedCtor() {
}

CMsgDOTASeasonRewards::~CMsgDOTASeasonRewards() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonRewards)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonRewards::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASeasonRewards::ArenaDtor(void* object) {
  CMsgDOTASeasonRewards* _this = reinterpret_cast< CMsgDOTASeasonRewards* >(object);
  (void)_this;
}
void CMsgDOTASeasonRewards::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonRewards::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rewards_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonRewards::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonRewards::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonRewards)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rewards(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonRewards)
  return target;
}

size_t CMsgDOTASeasonRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonRewards)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTASeasonRewards.Reward rewards = 1;
  total_size += 1UL * this->_internal_rewards_size();
  for (const auto& msg : this->rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonRewards::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonRewards* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonRewards>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonRewards)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonRewards)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards::MergeFrom(const CMsgDOTASeasonRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
}

void CMsgDOTASeasonRewards::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards::CopyFrom(const CMsgDOTASeasonRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonRewards::InternalSwap(CMsgDOTASeasonRewards* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rewards_.InternalSwap(&other->rewards_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonRewards::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonAchievements_Achievement::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeasonAchievements_Achievement>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_grants(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_normal_points(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tracking_achievement(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_achievement_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_achievement_level(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonAchievements.Achievement)
}
CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement(const CMsgDOTASeasonAchievements_Achievement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_image()) {
    image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image(), 
      GetArena());
  }
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&achievement_level_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(achievement_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonAchievements.Achievement)
}

void CMsgDOTASeasonAchievements_Achievement::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&achievement_level_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(achievement_level_));
}

CMsgDOTASeasonAchievements_Achievement::~CMsgDOTASeasonAchievements_Achievement() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonAchievements.Achievement)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonAchievements_Achievement::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonAchievements_Achievement::ArenaDtor(void* object) {
  CMsgDOTASeasonAchievements_Achievement* _this = reinterpret_cast< CMsgDOTASeasonAchievements_Achievement* >(object);
  (void)_this;
}
void CMsgDOTASeasonAchievements_Achievement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonAchievements_Achievement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonAchievements_Achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonAchievements.Achievement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      image_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&achievement_goal_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(achievement_goal_));
  }
  achievement_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonAchievements_Achievement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonAchievements.Achievement.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonAchievements.Achievement.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string image = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonAchievements.Achievement.image");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 action_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_grants = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_grants(&has_bits);
          max_grants_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 normal_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_normal_points(&has_bits);
          normal_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tracking_achievement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_tracking_achievement(&has_bits);
          tracking_achievement_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 achievement_goal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_achievement_goal(&has_bits);
          achievement_goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 achievement_level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_achievement_level(&has_bits);
          achievement_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonAchievements_Achievement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonAchievements.Achievement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonAchievements.Achievement.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonAchievements.Achievement.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image().data(), static_cast<int>(this->_internal_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonAchievements.Achievement.image");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_image(), target);
  }

  // optional uint32 action_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_action_id(), target);
  }

  // optional uint32 max_grants = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_grants(), target);
  }

  // optional uint32 normal_points = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_normal_points(), target);
  }

  // optional uint32 tracking_achievement = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_tracking_achievement(), target);
  }

  // optional uint32 achievement_goal = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_achievement_goal(), target);
  }

  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_achievement_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonAchievements.Achievement)
  return target;
}

size_t CMsgDOTASeasonAchievements_Achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonAchievements.Achievement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string image = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
    }

    // optional uint32 action_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

    // optional uint32 max_grants = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_grants());
    }

    // optional uint32 normal_points = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_normal_points());
    }

    // optional uint32 tracking_achievement = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tracking_achievement());
    }

    // optional uint32 achievement_goal = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_achievement_goal());
    }

  }
  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_achievement_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonAchievements.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements_Achievement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonAchievements_Achievement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonAchievements.Achievement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonAchievements.Achievement)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonAchievements.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_grants_ = from.max_grants_;
    }
    if (cached_has_bits & 0x00000020u) {
      normal_points_ = from.normal_points_;
    }
    if (cached_has_bits & 0x00000040u) {
      tracking_achievement_ = from.tracking_achievement_;
    }
    if (cached_has_bits & 0x00000080u) {
      achievement_goal_ = from.achievement_goal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_achievement_level(from._internal_achievement_level());
  }
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonAchievements.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonAchievements.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements_Achievement::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonAchievements_Achievement::InternalSwap(CMsgDOTASeasonAchievements_Achievement* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_.Swap(&other->image_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, achievement_level_)
      + sizeof(CMsgDOTASeasonAchievements_Achievement::achievement_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonAchievements_Achievement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonAchievements::_Internal {
 public:
};

CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  achievements_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonAchievements)
}
CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements(const CMsgDOTASeasonAchievements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      achievements_(from.achievements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonAchievements)
}

void CMsgDOTASeasonAchievements::SharedCtor() {
}

CMsgDOTASeasonAchievements::~CMsgDOTASeasonAchievements() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonAchievements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonAchievements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASeasonAchievements::ArenaDtor(void* object) {
  CMsgDOTASeasonAchievements* _this = reinterpret_cast< CMsgDOTASeasonAchievements* >(object);
  (void)_this;
}
void CMsgDOTASeasonAchievements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonAchievements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonAchievements::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonAchievements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievements_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonAchievements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonAchievements::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonAchievements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_achievements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonAchievements)
  return target;
}

size_t CMsgDOTASeasonAchievements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonAchievements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTASeasonAchievements.Achievement achievements = 1;
  total_size += 1UL * this->_internal_achievements_size();
  for (const auto& msg : this->achievements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonAchievements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonAchievements)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonAchievements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonAchievements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonAchievements)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements::MergeFrom(const CMsgDOTASeasonAchievements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonAchievements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  achievements_.MergeFrom(from.achievements_);
}

void CMsgDOTASeasonAchievements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonAchievements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements::CopyFrom(const CMsgDOTASeasonAchievements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonAchievements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonAchievements::InternalSwap(CMsgDOTASeasonAchievements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  achievements_.InternalSwap(&other->achievements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonAchievements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPredictionChoice::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPredictionChoice>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_raw_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_raw_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgPredictionChoice::CMsgPredictionChoice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPredictionChoice)
}
CMsgPredictionChoice::CMsgPredictionChoice(const CMsgPredictionChoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_raw_value_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_raw_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgPredictionChoice)
}

void CMsgPredictionChoice::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_raw_value_) -
    reinterpret_cast<char*>(&value_)) + sizeof(max_raw_value_));
}

CMsgPredictionChoice::~CMsgPredictionChoice() {
  // @@protoc_insertion_point(destructor:CMsgPredictionChoice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPredictionChoice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgPredictionChoice::ArenaDtor(void* object) {
  CMsgPredictionChoice* _this = reinterpret_cast< CMsgPredictionChoice* >(object);
  (void)_this;
}
void CMsgPredictionChoice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPredictionChoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPredictionChoice::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPredictionChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_raw_value_) -
        reinterpret_cast<char*>(&value_)) + sizeof(max_raw_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPredictionChoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgPredictionChoice.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_raw_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_raw_value(&has_bits);
          min_raw_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_raw_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_raw_value(&has_bits);
          max_raw_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPredictionChoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPredictionChoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgPredictionChoice.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 min_raw_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_raw_value(), target);
  }

  // optional uint32 max_raw_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_raw_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPredictionChoice)
  return target;
}

size_t CMsgPredictionChoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPredictionChoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

    // optional uint32 min_raw_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_raw_value());
    }

    // optional uint32 max_raw_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_raw_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPredictionChoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPredictionChoice)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPredictionChoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPredictionChoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPredictionChoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPredictionChoice)
    MergeFrom(*source);
  }
}

void CMsgPredictionChoice::MergeFrom(const CMsgPredictionChoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPredictionChoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_raw_value_ = from.min_raw_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_raw_value_ = from.max_raw_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPredictionChoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPredictionChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPredictionChoice::CopyFrom(const CMsgPredictionChoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPredictionChoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPredictionChoice::IsInitialized() const {
  return true;
}

void CMsgPredictionChoice::InternalSwap(CMsgPredictionChoice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPredictionChoice, max_raw_value_)
      + sizeof(CMsgPredictionChoice::max_raw_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgPredictionChoice, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPredictionChoice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgInGamePrediction_QueryKeyValues::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInGamePrediction_QueryKeyValues>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgInGamePrediction_QueryKeyValues::CMsgInGamePrediction_QueryKeyValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgInGamePrediction.QueryKeyValues)
}
CMsgInGamePrediction_QueryKeyValues::CMsgInGamePrediction_QueryKeyValues(const CMsgInGamePrediction_QueryKeyValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgInGamePrediction.QueryKeyValues)
}

void CMsgInGamePrediction_QueryKeyValues::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgInGamePrediction_QueryKeyValues::~CMsgInGamePrediction_QueryKeyValues() {
  // @@protoc_insertion_point(destructor:CMsgInGamePrediction.QueryKeyValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgInGamePrediction_QueryKeyValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgInGamePrediction_QueryKeyValues::ArenaDtor(void* object) {
  CMsgInGamePrediction_QueryKeyValues* _this = reinterpret_cast< CMsgInGamePrediction_QueryKeyValues* >(object);
  (void)_this;
}
void CMsgInGamePrediction_QueryKeyValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInGamePrediction_QueryKeyValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInGamePrediction_QueryKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInGamePrediction.QueryKeyValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInGamePrediction_QueryKeyValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgInGamePrediction.QueryKeyValues.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgInGamePrediction.QueryKeyValues.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInGamePrediction_QueryKeyValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInGamePrediction.QueryKeyValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgInGamePrediction.QueryKeyValues.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgInGamePrediction.QueryKeyValues.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInGamePrediction.QueryKeyValues)
  return target;
}

size_t CMsgInGamePrediction_QueryKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInGamePrediction.QueryKeyValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInGamePrediction_QueryKeyValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgInGamePrediction.QueryKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInGamePrediction_QueryKeyValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgInGamePrediction_QueryKeyValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgInGamePrediction.QueryKeyValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgInGamePrediction.QueryKeyValues)
    MergeFrom(*source);
  }
}

void CMsgInGamePrediction_QueryKeyValues::MergeFrom(const CMsgInGamePrediction_QueryKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInGamePrediction.QueryKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
}

void CMsgInGamePrediction_QueryKeyValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgInGamePrediction.QueryKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInGamePrediction_QueryKeyValues::CopyFrom(const CMsgInGamePrediction_QueryKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInGamePrediction.QueryKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInGamePrediction_QueryKeyValues::IsInitialized() const {
  return true;
}

void CMsgInGamePrediction_QueryKeyValues::InternalSwap(CMsgInGamePrediction_QueryKeyValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInGamePrediction_QueryKeyValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgInGamePrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgInGamePrediction>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_question(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_query_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_answer_resolution_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_points_to_grant(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_reward_action(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_debug_force_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_raw_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgInGamePrediction::CMsgInGamePrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  choices_(arena),
  required_heroes_(arena),
  query_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgInGamePrediction)
}
CMsgInGamePrediction::CMsgInGamePrediction(const CMsgInGamePrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      choices_(from.choices_),
      required_heroes_(from.required_heroes_),
      query_values_(from.query_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  question_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_question()) {
    question_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_question(), 
      GetArena());
  }
  query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query_name()) {
    query_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_name(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&raw_value_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(raw_value_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgInGamePrediction)
}

void CMsgInGamePrediction::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
question_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&raw_value_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(raw_value_type_));
}

CMsgInGamePrediction::~CMsgInGamePrediction() {
  // @@protoc_insertion_point(destructor:CMsgInGamePrediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgInGamePrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  question_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgInGamePrediction::ArenaDtor(void* object) {
  CMsgInGamePrediction* _this = reinterpret_cast< CMsgInGamePrediction* >(object);
  (void)_this;
}
void CMsgInGamePrediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgInGamePrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgInGamePrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgInGamePrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  required_heroes_.Clear();
  query_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      question_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      query_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&points_to_grant_) -
        reinterpret_cast<char*>(&id_)) + sizeof(points_to_grant_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&reward_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raw_value_type_) -
        reinterpret_cast<char*>(&reward_action_)) + sizeof(raw_value_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgInGamePrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgInGamePrediction.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgInGamePrediction.EPredictionType type = 3 [default = Generic];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgInGamePrediction_EPredictionType_IsValid(val))) {
            _internal_set_type(static_cast<::CMsgInGamePrediction_EPredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgInGamePrediction.ERandomSelectionGroup_t group = 4 [default = EarlyGame];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgInGamePrediction_ERandomSelectionGroup_t_IsValid(val))) {
            _internal_set_group(static_cast<::CMsgInGamePrediction_ERandomSelectionGroup_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string question = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_question();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgInGamePrediction.question");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPredictionChoice choices = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string required_heroes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_required_heroes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgInGamePrediction.required_heroes");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string query_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_query_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgInGamePrediction.query_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgInGamePrediction.QueryKeyValues query_values = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_query_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgInGamePrediction.EResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgInGamePrediction_EResolutionType_t_IsValid(val))) {
            _internal_set_answer_resolution_type(static_cast<::CMsgInGamePrediction_EResolutionType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 points_to_grant = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_points_to_grant(&has_bits);
          points_to_grant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward_action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_reward_action(&has_bits);
          reward_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 debug_force_selection = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_debug_force_selection(&has_bits);
          debug_force_selection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgInGamePrediction.ERawValueType_t raw_value_type = 14 [default = Number];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgInGamePrediction_ERawValueType_t_IsValid(val))) {
            _internal_set_raw_value_type(static_cast<::CMsgInGamePrediction_ERawValueType_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(14, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgInGamePrediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgInGamePrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgInGamePrediction.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .CMsgInGamePrediction.EPredictionType type = 3 [default = Generic];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // optional .CMsgInGamePrediction.ERandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_group(), target);
  }

  // optional string question = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_question().data(), static_cast<int>(this->_internal_question().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgInGamePrediction.question");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_question(), target);
  }

  // repeated .CMsgPredictionChoice choices = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_choices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_choices(i), target, stream);
  }

  // repeated string required_heroes = 7;
  for (int i = 0, n = this->_internal_required_heroes_size(); i < n; i++) {
    const auto& s = this->_internal_required_heroes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgInGamePrediction.required_heroes");
    target = stream->WriteString(7, s, target);
  }

  // optional string query_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query_name().data(), static_cast<int>(this->_internal_query_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgInGamePrediction.query_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_query_name(), target);
  }

  // repeated .CMsgInGamePrediction.QueryKeyValues query_values = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_query_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_query_values(i), target, stream);
  }

  // optional .CMsgInGamePrediction.EResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_answer_resolution_type(), target);
  }

  // optional uint32 points_to_grant = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_points_to_grant(), target);
  }

  // optional uint32 reward_action = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_reward_action(), target);
  }

  // optional uint32 debug_force_selection = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_debug_force_selection(), target);
  }

  // optional .CMsgInGamePrediction.ERawValueType_t raw_value_type = 14 [default = Number];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_raw_value_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgInGamePrediction)
  return target;
}

size_t CMsgInGamePrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgInGamePrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPredictionChoice choices = 6;
  total_size += 1UL * this->_internal_choices_size();
  for (const auto& msg : this->choices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string required_heroes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(required_heroes_.size());
  for (int i = 0, n = required_heroes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      required_heroes_.Get(i));
  }

  // repeated .CMsgInGamePrediction.QueryKeyValues query_values = 9;
  total_size += 1UL * this->_internal_query_values_size();
  for (const auto& msg : this->query_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string question = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_question());
    }

    // optional string query_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional .CMsgInGamePrediction.EPredictionType type = 3 [default = Generic];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional .CMsgInGamePrediction.ERandomSelectionGroup_t group = 4 [default = EarlyGame];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_group());
    }

    // optional .CMsgInGamePrediction.EResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_answer_resolution_type());
    }

    // optional uint32 points_to_grant = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points_to_grant());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 reward_action = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward_action());
    }

    // optional uint32 debug_force_selection = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_debug_force_selection());
    }

    // optional .CMsgInGamePrediction.ERawValueType_t raw_value_type = 14 [default = Number];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_raw_value_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInGamePrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgInGamePrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInGamePrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgInGamePrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgInGamePrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgInGamePrediction)
    MergeFrom(*source);
  }
}

void CMsgInGamePrediction::MergeFrom(const CMsgInGamePrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgInGamePrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  required_heroes_.MergeFrom(from.required_heroes_);
  query_values_.MergeFrom(from.query_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_question(from._internal_question());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_query_name(from._internal_query_name());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00000040u) {
      answer_resolution_type_ = from.answer_resolution_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      points_to_grant_ = from.points_to_grant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      reward_action_ = from.reward_action_;
    }
    if (cached_has_bits & 0x00000200u) {
      debug_force_selection_ = from.debug_force_selection_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_value_type_ = from.raw_value_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInGamePrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgInGamePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInGamePrediction::CopyFrom(const CMsgInGamePrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgInGamePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInGamePrediction::IsInitialized() const {
  return true;
}

void CMsgInGamePrediction::InternalSwap(CMsgInGamePrediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  choices_.InternalSwap(&other->choices_);
  required_heroes_.InternalSwap(&other->required_heroes_);
  query_values_.InternalSwap(&other->query_values_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  question_.Swap(&other->question_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_name_.Swap(&other->query_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgInGamePrediction, raw_value_type_)
      + sizeof(CMsgInGamePrediction::raw_value_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgInGamePrediction, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgInGamePrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonPredictions_Prediction_Answers::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeasonPredictions_Prediction_Answers>()._has_bits_);
  static void set_has_answer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTASeasonPredictions_Prediction_Answers::CMsgDOTASeasonPredictions_Prediction_Answers(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonPredictions.Prediction.Answers)
}
CMsgDOTASeasonPredictions_Prediction_Answers::CMsgDOTASeasonPredictions_Prediction_Answers(const CMsgDOTASeasonPredictions_Prediction_Answers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  answer_id_ = from.answer_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.Prediction.Answers)
}

void CMsgDOTASeasonPredictions_Prediction_Answers::SharedCtor() {
answer_id_ = 0u;
}

CMsgDOTASeasonPredictions_Prediction_Answers::~CMsgDOTASeasonPredictions_Prediction_Answers() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.Prediction.Answers)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonPredictions_Prediction_Answers::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASeasonPredictions_Prediction_Answers::ArenaDtor(void* object) {
  CMsgDOTASeasonPredictions_Prediction_Answers* _this = reinterpret_cast< CMsgDOTASeasonPredictions_Prediction_Answers* >(object);
  (void)_this;
}
void CMsgDOTASeasonPredictions_Prediction_Answers::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonPredictions_Prediction_Answers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonPredictions_Prediction_Answers::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonPredictions_Prediction_Answers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 answer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_answer_id(&has_bits);
          answer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonPredictions_Prediction_Answers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 answer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_answer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.Prediction.Answers)
  return target;
}

size_t CMsgDOTASeasonPredictions_Prediction_Answers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 answer_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_answer_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_Prediction_Answers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Prediction_Answers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonPredictions_Prediction_Answers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonPredictions.Prediction.Answers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonPredictions.Prediction.Answers)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Prediction_Answers::MergeFrom(const CMsgDOTASeasonPredictions_Prediction_Answers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_answer_id()) {
    _internal_set_answer_id(from._internal_answer_id());
  }
}

void CMsgDOTASeasonPredictions_Prediction_Answers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Prediction_Answers::CopyFrom(const CMsgDOTASeasonPredictions_Prediction_Answers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonPredictions.Prediction.Answers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Prediction_Answers::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Prediction_Answers::InternalSwap(CMsgDOTASeasonPredictions_Prediction_Answers* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(answer_id_, other->answer_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonPredictions_Prediction_Answers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonPredictions_Prediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeasonPredictions_Prediction>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_question(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lock_date(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_answer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_answer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_query_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lock_on_selection_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lock_on_selection_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lock_on_selection_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_use_answer_value_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_reward_event(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  choices_(arena),
  answers_(arena),
  phases_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonPredictions.Prediction)
}
CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      choices_(from.choices_),
      answers_(from.answers_),
      phases_(from.phases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  question_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_question()) {
    question_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_question(), 
      GetArena());
  }
  query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_query_name()) {
    query_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query_name(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_event_) -
    reinterpret_cast<char*>(&type_)) + sizeof(reward_event_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions.Prediction)
}

void CMsgDOTASeasonPredictions_Prediction::SharedCtor() {
question_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
query_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_event_) -
    reinterpret_cast<char*>(&type_)) + sizeof(reward_event_));
}

CMsgDOTASeasonPredictions_Prediction::~CMsgDOTASeasonPredictions_Prediction() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions.Prediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonPredictions_Prediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  question_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_Prediction::ArenaDtor(void* object) {
  CMsgDOTASeasonPredictions_Prediction* _this = reinterpret_cast< CMsgDOTASeasonPredictions_Prediction* >(object);
  (void)_this;
}
void CMsgDOTASeasonPredictions_Prediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonPredictions_Prediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonPredictions_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonPredictions.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  choices_.Clear();
  answers_.Clear();
  phases_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      question_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      query_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&answer_type_) -
        reinterpret_cast<char*>(&type_)) + sizeof(answer_type_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&answer_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_event_) -
        reinterpret_cast<char*>(&answer_id_)) + sizeof(reward_event_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonPredictions_Prediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTASeasonPredictions.Prediction.EPredictionType type = 1 [default = Generic];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTASeasonPredictions_Prediction_EPredictionType_IsValid(val))) {
            _internal_set_type(static_cast<::CMsgDOTASeasonPredictions_Prediction_EPredictionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string question = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_question();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonPredictions.Prediction.question");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPredictionChoice choices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_choices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 selection_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_selection_id(&has_bits);
          selection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_start_date(&has_bits);
          start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lock_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lock_date(&has_bits);
          lock_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reward = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_reward(&has_bits);
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeasonPredictions.Prediction.EAnswerType answer_type = 8 [default = SingleInt];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTASeasonPredictions_Prediction_EAnswerType_IsValid(val))) {
            _internal_set_answer_type(static_cast<::CMsgDOTASeasonPredictions_Prediction_EAnswerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 answer_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_answer_id(&has_bits);
          answer_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTASeasonPredictions.Prediction.Answers answers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_answers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string query_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_query_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeasonPredictions.Prediction.query_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lock_on_selection_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_lock_on_selection_id(&has_bits);
          lock_on_selection_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lock_on_selection_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_lock_on_selection_value(&has_bits);
          lock_on_selection_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool lock_on_selection_set = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_lock_on_selection_set(&has_bits);
          lock_on_selection_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_answer_value_ranges = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_use_answer_value_ranges(&has_bits);
          use_answer_value_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueRegion region = 17 [default = LEAGUE_REGION_UNSET];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueRegion_IsValid(val))) {
            _internal_set_region(static_cast<::ELeagueRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .ELeaguePhase phases = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::ELeaguePhase_IsValid(val))) {
              _internal_add_phases(static_cast<::ELeaguePhase>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_phases(), ptr, ctx, ::ELeaguePhase_IsValid, &_internal_metadata_, 18);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent reward_event = 19 [default = EVENT_ID_NONE];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_reward_event(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(19, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonPredictions_Prediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions.Prediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTASeasonPredictions.Prediction.EPredictionType type = 1 [default = Generic];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional string question = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_question().data(), static_cast<int>(this->_internal_question().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonPredictions.Prediction.question");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_question(), target);
  }

  // repeated .CMsgPredictionChoice choices = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_choices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_choices(i), target, stream);
  }

  // optional uint32 selection_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_selection_id(), target);
  }

  // optional uint32 start_date = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_start_date(), target);
  }

  // optional uint32 lock_date = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lock_date(), target);
  }

  // optional uint32 reward = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_reward(), target);
  }

  // optional .CMsgDOTASeasonPredictions.Prediction.EAnswerType answer_type = 8 [default = SingleInt];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_answer_type(), target);
  }

  // optional uint32 answer_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_answer_id(), target);
  }

  // repeated .CMsgDOTASeasonPredictions.Prediction.Answers answers = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_answers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_answers(i), target, stream);
  }

  // optional string query_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_query_name().data(), static_cast<int>(this->_internal_query_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeasonPredictions.Prediction.query_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_query_name(), target);
  }

  // optional uint32 lock_on_selection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_lock_on_selection_id(), target);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_lock_on_selection_value(), target);
  }

  // optional bool lock_on_selection_set = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_lock_on_selection_set(), target);
  }

  // optional bool use_answer_value_ranges = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_use_answer_value_ranges(), target);
  }

  // optional .ELeagueRegion region = 17 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_region(), target);
  }

  // repeated .ELeaguePhase phases = 18;
  for (int i = 0, n = this->_internal_phases_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        18, this->_internal_phases(i), target);
  }

  // optional .EEvent reward_event = 19 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->_internal_reward_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions.Prediction)
  return target;
}

size_t CMsgDOTASeasonPredictions_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonPredictions.Prediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPredictionChoice choices = 3;
  total_size += 1UL * this->_internal_choices_size();
  for (const auto& msg : this->choices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTASeasonPredictions.Prediction.Answers answers = 10;
  total_size += 1UL * this->_internal_answers_size();
  for (const auto& msg : this->answers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ELeaguePhase phases = 18;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_phases_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_phases(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string question = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_question());
    }

    // optional string query_name = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_query_name());
    }

    // optional .CMsgDOTASeasonPredictions.Prediction.EPredictionType type = 1 [default = Generic];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 selection_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_selection_id());
    }

    // optional uint32 start_date = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_date());
    }

    // optional uint32 lock_date = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lock_date());
    }

    // optional uint32 reward = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reward());
    }

    // optional .CMsgDOTASeasonPredictions.Prediction.EAnswerType answer_type = 8 [default = SingleInt];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_answer_type());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 answer_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_answer_id());
    }

    // optional uint32 lock_on_selection_id = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lock_on_selection_id());
    }

    // optional uint32 lock_on_selection_value = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lock_on_selection_value());
    }

    // optional bool lock_on_selection_set = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool use_answer_value_ranges = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional .ELeagueRegion region = 17 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_region());
    }

    // optional .EEvent reward_event = 19 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reward_event());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonPredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Prediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonPredictions_Prediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonPredictions.Prediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonPredictions.Prediction)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonPredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  answers_.MergeFrom(from.answers_);
  phases_.MergeFrom(from.phases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_question(from._internal_question());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_query_name(from._internal_query_name());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_id_ = from.selection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_date_ = from.start_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      lock_date_ = from.lock_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000080u) {
      answer_type_ = from.answer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      answer_id_ = from.answer_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      lock_on_selection_id_ = from.lock_on_selection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      lock_on_selection_value_ = from.lock_on_selection_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      lock_on_selection_set_ = from.lock_on_selection_set_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_answer_value_ranges_ = from.use_answer_value_ranges_;
    }
    if (cached_has_bits & 0x00002000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00004000u) {
      reward_event_ = from.reward_event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonPredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonPredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Prediction::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Prediction::InternalSwap(CMsgDOTASeasonPredictions_Prediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  choices_.InternalSwap(&other->choices_);
  answers_.InternalSwap(&other->answers_);
  phases_.InternalSwap(&other->phases_);
  question_.Swap(&other->question_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  query_name_.Swap(&other->query_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, reward_event_)
      + sizeof(CMsgDOTASeasonPredictions_Prediction::reward_event_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonPredictions_Prediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeasonPredictions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeasonPredictions>()._has_bits_);
  static void set_has_in_game_prediction_count_per_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_in_game_prediction_voting_period_minutes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predictions_(arena),
  in_game_predictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeasonPredictions)
}
CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_),
      in_game_predictions_(from.in_game_predictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&in_game_prediction_count_per_game_, &from.in_game_prediction_count_per_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
    reinterpret_cast<char*>(&in_game_prediction_count_per_game_)) + sizeof(in_game_prediction_voting_period_minutes_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeasonPredictions)
}

void CMsgDOTASeasonPredictions::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&in_game_prediction_count_per_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
    reinterpret_cast<char*>(&in_game_prediction_count_per_game_)) + sizeof(in_game_prediction_voting_period_minutes_));
}

CMsgDOTASeasonPredictions::~CMsgDOTASeasonPredictions() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeasonPredictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeasonPredictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTASeasonPredictions::ArenaDtor(void* object) {
  CMsgDOTASeasonPredictions* _this = reinterpret_cast< CMsgDOTASeasonPredictions* >(object);
  (void)_this;
}
void CMsgDOTASeasonPredictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeasonPredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeasonPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeasonPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  in_game_predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&in_game_prediction_count_per_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
        reinterpret_cast<char*>(&in_game_prediction_count_per_game_)) + sizeof(in_game_prediction_voting_period_minutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeasonPredictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgInGamePrediction in_game_predictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_in_game_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 in_game_prediction_count_per_game = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_game_prediction_count_per_game(&has_bits);
          in_game_prediction_count_per_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 in_game_prediction_voting_period_minutes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_in_game_prediction_voting_period_minutes(&has_bits);
          in_game_prediction_voting_period_minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeasonPredictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeasonPredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_predictions(i), target, stream);
  }

  // repeated .CMsgInGamePrediction in_game_predictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_in_game_predictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_in_game_predictions(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 in_game_prediction_count_per_game = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_in_game_prediction_count_per_game(), target);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_in_game_prediction_voting_period_minutes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeasonPredictions)
  return target;
}

size_t CMsgDOTASeasonPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeasonPredictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTASeasonPredictions.Prediction predictions = 1;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgInGamePrediction in_game_predictions = 2;
  total_size += 1UL * this->_internal_in_game_predictions_size();
  for (const auto& msg : this->in_game_predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 in_game_prediction_count_per_game = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_game_prediction_count_per_game());
    }

    // optional uint32 in_game_prediction_voting_period_minutes = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_in_game_prediction_voting_period_minutes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeasonPredictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeasonPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeasonPredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeasonPredictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeasonPredictions)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions::MergeFrom(const CMsgDOTASeasonPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeasonPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  in_game_predictions_.MergeFrom(from.in_game_predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      in_game_prediction_count_per_game_ = from.in_game_prediction_count_per_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_prediction_voting_period_minutes_ = from.in_game_prediction_voting_period_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeasonPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions::CopyFrom(const CMsgDOTASeasonPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeasonPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions::InternalSwap(CMsgDOTASeasonPredictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predictions_.InternalSwap(&other->predictions_);
  in_game_predictions_.InternalSwap(&other->in_game_predictions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_prediction_voting_period_minutes_)
      + sizeof(CMsgDOTASeasonPredictions::in_game_prediction_voting_period_minutes_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_prediction_count_per_game_)>(
          reinterpret_cast<char*>(&in_game_prediction_count_per_game_),
          reinterpret_cast<char*>(&other->in_game_prediction_count_per_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeasonPredictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAvailablePredictions_MatchPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAvailablePredictions_MatchPrediction>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAvailablePredictions_MatchPrediction::CMsgAvailablePredictions_MatchPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  predictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAvailablePredictions.MatchPrediction)
}
CMsgAvailablePredictions_MatchPrediction::CMsgAvailablePredictions_MatchPrediction(const CMsgAvailablePredictions_MatchPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  match_id_ = from.match_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgAvailablePredictions.MatchPrediction)
}

void CMsgAvailablePredictions_MatchPrediction::SharedCtor() {
match_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgAvailablePredictions_MatchPrediction::~CMsgAvailablePredictions_MatchPrediction() {
  // @@protoc_insertion_point(destructor:CMsgAvailablePredictions.MatchPrediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAvailablePredictions_MatchPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAvailablePredictions_MatchPrediction::ArenaDtor(void* object) {
  CMsgAvailablePredictions_MatchPrediction* _this = reinterpret_cast< CMsgAvailablePredictions_MatchPrediction* >(object);
  (void)_this;
}
void CMsgAvailablePredictions_MatchPrediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAvailablePredictions_MatchPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAvailablePredictions_MatchPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAvailablePredictions.MatchPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAvailablePredictions_MatchPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgInGamePrediction predictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAvailablePredictions_MatchPrediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAvailablePredictions.MatchPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // repeated .CMsgInGamePrediction predictions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_predictions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAvailablePredictions.MatchPrediction)
  return target;
}

size_t CMsgAvailablePredictions_MatchPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAvailablePredictions.MatchPrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgInGamePrediction predictions = 2;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint64 match_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAvailablePredictions_MatchPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAvailablePredictions.MatchPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAvailablePredictions_MatchPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAvailablePredictions_MatchPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAvailablePredictions.MatchPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAvailablePredictions.MatchPrediction)
    MergeFrom(*source);
  }
}

void CMsgAvailablePredictions_MatchPrediction::MergeFrom(const CMsgAvailablePredictions_MatchPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAvailablePredictions.MatchPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  if (from._internal_has_match_id()) {
    _internal_set_match_id(from._internal_match_id());
  }
}

void CMsgAvailablePredictions_MatchPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAvailablePredictions.MatchPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAvailablePredictions_MatchPrediction::CopyFrom(const CMsgAvailablePredictions_MatchPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAvailablePredictions.MatchPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAvailablePredictions_MatchPrediction::IsInitialized() const {
  return true;
}

void CMsgAvailablePredictions_MatchPrediction::InternalSwap(CMsgAvailablePredictions_MatchPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predictions_.InternalSwap(&other->predictions_);
  swap(match_id_, other->match_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAvailablePredictions_MatchPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgAvailablePredictions::_Internal {
 public:
};

CMsgAvailablePredictions::CMsgAvailablePredictions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_predictions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgAvailablePredictions)
}
CMsgAvailablePredictions::CMsgAvailablePredictions(const CMsgAvailablePredictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_predictions_(from.match_predictions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAvailablePredictions)
}

void CMsgAvailablePredictions::SharedCtor() {
}

CMsgAvailablePredictions::~CMsgAvailablePredictions() {
  // @@protoc_insertion_point(destructor:CMsgAvailablePredictions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgAvailablePredictions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgAvailablePredictions::ArenaDtor(void* object) {
  CMsgAvailablePredictions* _this = reinterpret_cast< CMsgAvailablePredictions* >(object);
  (void)_this;
}
void CMsgAvailablePredictions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAvailablePredictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAvailablePredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAvailablePredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_predictions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAvailablePredictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgAvailablePredictions.MatchPrediction match_predictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgAvailablePredictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAvailablePredictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgAvailablePredictions.MatchPrediction match_predictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_predictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_match_predictions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAvailablePredictions)
  return target;
}

size_t CMsgAvailablePredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAvailablePredictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAvailablePredictions.MatchPrediction match_predictions = 1;
  total_size += 1UL * this->_internal_match_predictions_size();
  for (const auto& msg : this->match_predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAvailablePredictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgAvailablePredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAvailablePredictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgAvailablePredictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgAvailablePredictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgAvailablePredictions)
    MergeFrom(*source);
  }
}

void CMsgAvailablePredictions::MergeFrom(const CMsgAvailablePredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAvailablePredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_predictions_.MergeFrom(from.match_predictions_);
}

void CMsgAvailablePredictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgAvailablePredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAvailablePredictions::CopyFrom(const CMsgAvailablePredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAvailablePredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAvailablePredictions::IsInitialized() const {
  return true;
}

void CMsgAvailablePredictions::InternalSwap(CMsgAvailablePredictions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_predictions_.InternalSwap(&other->match_predictions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAvailablePredictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeagueWatchedGames_Series::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeagueWatchedGames_Series>()._has_bits_);
  static void set_has_node_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLeagueWatchedGames_Series::CMsgLeagueWatchedGames_Series(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeagueWatchedGames.Series)
}
CMsgLeagueWatchedGames_Series::CMsgLeagueWatchedGames_Series(const CMsgLeagueWatchedGames_Series& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_(from.game_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLeagueWatchedGames.Series)
}

void CMsgLeagueWatchedGames_Series::SharedCtor() {
node_id_ = 0u;
}

CMsgLeagueWatchedGames_Series::~CMsgLeagueWatchedGames_Series() {
  // @@protoc_insertion_point(destructor:CMsgLeagueWatchedGames.Series)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeagueWatchedGames_Series::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeagueWatchedGames_Series::ArenaDtor(void* object) {
  CMsgLeagueWatchedGames_Series* _this = reinterpret_cast< CMsgLeagueWatchedGames_Series* >(object);
  (void)_this;
}
void CMsgLeagueWatchedGames_Series::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeagueWatchedGames_Series::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeagueWatchedGames_Series::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeagueWatchedGames.Series)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_.Clear();
  node_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeagueWatchedGames_Series::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_node_id(&has_bits);
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_game(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_game(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeagueWatchedGames_Series::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeagueWatchedGames.Series)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // repeated uint32 game = 2;
  for (int i = 0, n = this->_internal_game_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_game(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeagueWatchedGames.Series)
  return target;
}

size_t CMsgLeagueWatchedGames_Series::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeagueWatchedGames.Series)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 game = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->game_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_game_size());
    total_size += data_size;
  }

  // optional uint32 node_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeagueWatchedGames_Series::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeagueWatchedGames.Series)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeagueWatchedGames_Series* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeagueWatchedGames_Series>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeagueWatchedGames.Series)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeagueWatchedGames.Series)
    MergeFrom(*source);
  }
}

void CMsgLeagueWatchedGames_Series::MergeFrom(const CMsgLeagueWatchedGames_Series& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeagueWatchedGames.Series)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_.MergeFrom(from.game_);
  if (from._internal_has_node_id()) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void CMsgLeagueWatchedGames_Series::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeagueWatchedGames.Series)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueWatchedGames_Series::CopyFrom(const CMsgLeagueWatchedGames_Series& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeagueWatchedGames.Series)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueWatchedGames_Series::IsInitialized() const {
  return true;
}

void CMsgLeagueWatchedGames_Series::InternalSwap(CMsgLeagueWatchedGames_Series* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_.InternalSwap(&other->game_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeagueWatchedGames_Series::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeagueWatchedGames_League::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgLeagueWatchedGames_League>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgLeagueWatchedGames_League::CMsgLeagueWatchedGames_League(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeagueWatchedGames.League)
}
CMsgLeagueWatchedGames_League::CMsgLeagueWatchedGames_League(const CMsgLeagueWatchedGames_League& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      series_(from.series_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgLeagueWatchedGames.League)
}

void CMsgLeagueWatchedGames_League::SharedCtor() {
league_id_ = 0u;
}

CMsgLeagueWatchedGames_League::~CMsgLeagueWatchedGames_League() {
  // @@protoc_insertion_point(destructor:CMsgLeagueWatchedGames.League)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeagueWatchedGames_League::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeagueWatchedGames_League::ArenaDtor(void* object) {
  CMsgLeagueWatchedGames_League* _this = reinterpret_cast< CMsgLeagueWatchedGames_League* >(object);
  (void)_this;
}
void CMsgLeagueWatchedGames_League::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeagueWatchedGames_League::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeagueWatchedGames_League::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeagueWatchedGames.League)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeagueWatchedGames_League::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgLeagueWatchedGames.Series series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeagueWatchedGames_League::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeagueWatchedGames.League)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // repeated .CMsgLeagueWatchedGames.Series series = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_series(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeagueWatchedGames.League)
  return target;
}

size_t CMsgLeagueWatchedGames_League::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeagueWatchedGames.League)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLeagueWatchedGames.Series series = 2;
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeagueWatchedGames_League::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeagueWatchedGames.League)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeagueWatchedGames_League* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeagueWatchedGames_League>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeagueWatchedGames.League)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeagueWatchedGames.League)
    MergeFrom(*source);
  }
}

void CMsgLeagueWatchedGames_League::MergeFrom(const CMsgLeagueWatchedGames_League& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeagueWatchedGames.League)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_.MergeFrom(from.series_);
  if (from._internal_has_league_id()) {
    _internal_set_league_id(from._internal_league_id());
  }
}

void CMsgLeagueWatchedGames_League::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeagueWatchedGames.League)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueWatchedGames_League::CopyFrom(const CMsgLeagueWatchedGames_League& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeagueWatchedGames.League)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueWatchedGames_League::IsInitialized() const {
  return true;
}

void CMsgLeagueWatchedGames_League::InternalSwap(CMsgLeagueWatchedGames_League* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  series_.InternalSwap(&other->series_);
  swap(league_id_, other->league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeagueWatchedGames_League::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgLeagueWatchedGames::_Internal {
 public:
};

CMsgLeagueWatchedGames::CMsgLeagueWatchedGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  leagues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgLeagueWatchedGames)
}
CMsgLeagueWatchedGames::CMsgLeagueWatchedGames(const CMsgLeagueWatchedGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      leagues_(from.leagues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgLeagueWatchedGames)
}

void CMsgLeagueWatchedGames::SharedCtor() {
}

CMsgLeagueWatchedGames::~CMsgLeagueWatchedGames() {
  // @@protoc_insertion_point(destructor:CMsgLeagueWatchedGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgLeagueWatchedGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgLeagueWatchedGames::ArenaDtor(void* object) {
  CMsgLeagueWatchedGames* _this = reinterpret_cast< CMsgLeagueWatchedGames* >(object);
  (void)_this;
}
void CMsgLeagueWatchedGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgLeagueWatchedGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgLeagueWatchedGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgLeagueWatchedGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  leagues_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgLeagueWatchedGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgLeagueWatchedGames.League leagues = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leagues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgLeagueWatchedGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgLeagueWatchedGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgLeagueWatchedGames.League leagues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_leagues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_leagues(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgLeagueWatchedGames)
  return target;
}

size_t CMsgLeagueWatchedGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgLeagueWatchedGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgLeagueWatchedGames.League leagues = 1;
  total_size += 1UL * this->_internal_leagues_size();
  for (const auto& msg : this->leagues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeagueWatchedGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgLeagueWatchedGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeagueWatchedGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgLeagueWatchedGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgLeagueWatchedGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgLeagueWatchedGames)
    MergeFrom(*source);
  }
}

void CMsgLeagueWatchedGames::MergeFrom(const CMsgLeagueWatchedGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgLeagueWatchedGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  leagues_.MergeFrom(from.leagues_);
}

void CMsgLeagueWatchedGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgLeagueWatchedGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueWatchedGames::CopyFrom(const CMsgLeagueWatchedGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgLeagueWatchedGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueWatchedGames::IsInitialized() const {
  return true;
}

void CMsgLeagueWatchedGames::InternalSwap(CMsgLeagueWatchedGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  leagues_.InternalSwap(&other->leagues_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgLeagueWatchedGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_Player_CustomGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_Player_CustomGameData>()._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_winner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.Player.CustomGameData)
}
CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.Player.CustomGameData)
}

void CMsgDOTAMatch_Player_CustomGameData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dota_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
}

CMsgDOTAMatch_Player_CustomGameData::~CMsgDOTAMatch_Player_CustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.Player.CustomGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_Player_CustomGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAMatch_Player_CustomGameData::ArenaDtor(void* object) {
  CMsgDOTAMatch_Player_CustomGameData* _this = reinterpret_cast< CMsgDOTAMatch_Player_CustomGameData* >(object);
  (void)_this;
}
void CMsgDOTAMatch_Player_CustomGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_Player_CustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_Player_CustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.Player.CustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winner_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_Player_CustomGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool winner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_winner(&has_bits);
          winner_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_Player_CustomGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.Player.CustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.Player.CustomGameData)
  return target;
}

size_t CMsgDOTAMatch_Player_CustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.Player.CustomGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dota_team());
    }

    // optional bool winner = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.Player.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player_CustomGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_Player_CustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.Player.CustomGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.Player.CustomGameData)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.Player.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.Player.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.Player.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player_CustomGameData::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player_CustomGameData::InternalSwap(CMsgDOTAMatch_Player_CustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, winner_)
      + sizeof(CMsgDOTAMatch_Player_CustomGameData::winner_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, dota_team_)>(
          reinterpret_cast<char*>(&dota_team_),
          reinterpret_cast<char*>(&other->dota_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_Player_CustomGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_Player_HeroDamageReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_Player_HeroDamageReceived>()._has_bits_);
  static void set_has_pre_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_post_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_damage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAMatch_Player_HeroDamageReceived::CMsgDOTAMatch_Player_HeroDamageReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.Player.HeroDamageReceived)
}
CMsgDOTAMatch_Player_HeroDamageReceived::CMsgDOTAMatch_Player_HeroDamageReceived(const CMsgDOTAMatch_Player_HeroDamageReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pre_reduction_, &from.pre_reduction_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_type_) -
    reinterpret_cast<char*>(&pre_reduction_)) + sizeof(damage_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.Player.HeroDamageReceived)
}

void CMsgDOTAMatch_Player_HeroDamageReceived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pre_reduction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_type_) -
    reinterpret_cast<char*>(&pre_reduction_)) + sizeof(damage_type_));
}

CMsgDOTAMatch_Player_HeroDamageReceived::~CMsgDOTAMatch_Player_HeroDamageReceived() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.Player.HeroDamageReceived)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_Player_HeroDamageReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAMatch_Player_HeroDamageReceived::ArenaDtor(void* object) {
  CMsgDOTAMatch_Player_HeroDamageReceived* _this = reinterpret_cast< CMsgDOTAMatch_Player_HeroDamageReceived* >(object);
  (void)_this;
}
void CMsgDOTAMatch_Player_HeroDamageReceived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_Player_HeroDamageReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_Player_HeroDamageReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&pre_reduction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_type_) -
        reinterpret_cast<char*>(&pre_reduction_)) + sizeof(damage_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_Player_HeroDamageReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pre_reduction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pre_reduction(&has_bits);
          pre_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 post_reduction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_post_reduction(&has_bits);
          post_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatch.Player.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAMatch_Player_HeroDamageType_IsValid(val))) {
            _internal_set_damage_type(static_cast<::CMsgDOTAMatch_Player_HeroDamageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_Player_HeroDamageReceived::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pre_reduction = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pre_reduction(), target);
  }

  // optional uint32 post_reduction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_post_reduction(), target);
  }

  // optional .CMsgDOTAMatch.Player.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_damage_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.Player.HeroDamageReceived)
  return target;
}

size_t CMsgDOTAMatch_Player_HeroDamageReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 pre_reduction = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pre_reduction());
    }

    // optional uint32 post_reduction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_post_reduction());
    }

    // optional .CMsgDOTAMatch.Player.HeroDamageType damage_type = 3 [default = HERO_DAMAGE_PHYSICAL];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_damage_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_Player_HeroDamageReceived::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player_HeroDamageReceived* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_Player_HeroDamageReceived>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.Player.HeroDamageReceived)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.Player.HeroDamageReceived)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player_HeroDamageReceived::MergeFrom(const CMsgDOTAMatch_Player_HeroDamageReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      pre_reduction_ = from.pre_reduction_;
    }
    if (cached_has_bits & 0x00000002u) {
      post_reduction_ = from.post_reduction_;
    }
    if (cached_has_bits & 0x00000004u) {
      damage_type_ = from.damage_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player_HeroDamageReceived::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player_HeroDamageReceived::CopyFrom(const CMsgDOTAMatch_Player_HeroDamageReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.Player.HeroDamageReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player_HeroDamageReceived::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player_HeroDamageReceived::InternalSwap(CMsgDOTAMatch_Player_HeroDamageReceived* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Player_HeroDamageReceived, damage_type_)
      + sizeof(CMsgDOTAMatch_Player_HeroDamageReceived::damage_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Player_HeroDamageReceived, pre_reduction_)>(
          reinterpret_cast<char*>(&pre_reduction_),
          reinterpret_cast<char*>(&other->pre_reduction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_Player_HeroDamageReceived::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_0(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_item_1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_item_2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_item_3(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_item_4(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_item_5(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_item_6(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_item_7(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_item_8(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_item_9(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_expected_team_contribution(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_scaled_metric(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_previous_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_rank_change(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mmr_type(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_rank_tier_updated(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_leaver_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_gold_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_xp_per_min(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tower_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_hero_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_time_last_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_player_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_support_ability_value(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_feeding_detected(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_search_rank(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_search_rank_uncertainty(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_rank_uncertainty_change(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_hero_play_count(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_party_id(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_scaled_hero_damage(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_scaled_tower_damage(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_scaled_hero_healing(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_scaled_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_scaled_deaths(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_scaled_assists(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_claimed_farm_gold(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_support_gold(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_claimed_denies(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_claimed_misses(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_misses(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_pro_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgDOTAMatch_Player_CustomGameData& custom_game_data(const CMsgDOTAMatch_Player* msg);
  static void set_has_custom_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_active_plus_subscription(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_bot_difficulty(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_hero_pick_order(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_hero_was_randomed(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_hero_was_dota_plus_suggestion(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_seconds_dead(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_gold_lost_to_death(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_outposts_captured(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
};

const ::CMsgDOTAMatch_Player_CustomGameData&
CMsgDOTAMatch_Player::_Internal::custom_game_data(const CMsgDOTAMatch_Player* msg) {
  return *msg->custom_game_data_;
}
CMsgDOTAMatch_Player::CMsgDOTAMatch_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ability_upgrades_(arena),
  additional_units_inventory_(arena),
  permanent_buffs_(arena),
  hero_damage_received_(arena),
  hero_damage_dealt_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.Player)
}
CMsgDOTAMatch_Player::CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      additional_units_inventory_(from.additional_units_inventory_),
      permanent_buffs_(from.permanent_buffs_),
      hero_damage_received_(from.hero_damage_received_),
      hero_damage_dealt_(from.hero_damage_dealt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_player_name()) {
    player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_player_name(), 
      GetArena());
  }
  pro_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pro_name()) {
    pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pro_name(), 
      GetArena());
  }
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_real_name()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArena());
  }
  if (from._internal_has_custom_game_data()) {
    custom_game_data_ = new ::CMsgDOTAMatch_Player_CustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bounty_runes_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(bounty_runes_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.Player)
}

void CMsgDOTAMatch_Player::SharedCtor() {
player_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pro_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&custom_game_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bounty_runes_) -
    reinterpret_cast<char*>(&custom_game_data_)) + sizeof(bounty_runes_));
}

CMsgDOTAMatch_Player::~CMsgDOTAMatch_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  player_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pro_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgDOTAMatch_Player::ArenaDtor(void* object) {
  CMsgDOTAMatch_Player* _this = reinterpret_cast< CMsgDOTAMatch_Player* >(object);
  (void)_this;
}
void CMsgDOTAMatch_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  hero_damage_received_.Clear();
  hero_damage_dealt_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      player_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      pro_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      real_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(custom_game_data_ != nullptr);
      custom_game_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_0_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(item_0_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&item_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&previous_rank_) -
        reinterpret_cast<char*>(&item_1_)) + sizeof(previous_rank_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&rank_change_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&denies_) -
        reinterpret_cast<char*>(&rank_change_)) + sizeof(denies_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&gold_per_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_last_seen_) -
        reinterpret_cast<char*>(&gold_per_min_)) + sizeof(time_last_seen_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&support_ability_value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaled_deaths_) -
        reinterpret_cast<char*>(&support_ability_value_)) + sizeof(scaled_deaths_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&scaled_assists_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_tier_updated_) -
        reinterpret_cast<char*>(&scaled_assists_)) + sizeof(rank_tier_updated_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&feeding_detected_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_6_) -
        reinterpret_cast<char*>(&feeding_detected_)) + sizeof(item_6_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&item_7_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmr_type_) -
        reinterpret_cast<char*>(&item_7_)) + sizeof(mmr_type_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&lane_selection_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bounty_runes_) -
        reinterpret_cast<char*>(&lane_selection_flags_)) + sizeof(bounty_runes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&_has_bits_);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_slot(&_has_bits_);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&_has_bits_);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_0 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_0(&_has_bits_);
          item_0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_item_1(&_has_bits_);
          item_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_item_2(&_has_bits_);
          item_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_item_3(&_has_bits_);
          item_3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_item_4(&_has_bits_);
          item_4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_5 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_item_5(&_has_bits_);
          item_5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float expected_team_contribution = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_expected_team_contribution(&_has_bits_);
          expected_team_contribution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scaled_metric = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_scaled_metric(&_has_bits_);
          scaled_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 previous_rank = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_previous_rank(&_has_bits_);
          previous_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 rank_change = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_rank_change(&_has_bits_);
          rank_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_kills(&_has_bits_);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_deaths(&_has_bits_);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_assists(&_has_bits_);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leaver_status = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_leaver_status(&_has_bits_);
          leaver_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_gold(&_has_bits_);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_hits = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_last_hits(&_has_bits_);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_denies(&_has_bits_);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_per_min = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_gold_per_min(&_has_bits_);
          gold_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 XP_per_min = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_xp_per_min(&_has_bits_);
          xp_per_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_spent = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_gold_spent(&_has_bits_);
          gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_damage = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_hero_damage(&_has_bits_);
          hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_tower_damage(&_has_bits_);
          tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_healing = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_hero_healing(&_has_bits_);
          hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_last_seen = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_time_last_seen(&_has_bits_);
          time_last_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string player_name = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_player_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.Player.player_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_ability_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_support_ability_value(&_has_bits_);
          support_ability_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool feeding_detected = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_feeding_detected(&_has_bits_);
          feeding_detected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 search_rank = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_search_rank(&_has_bits_);
          search_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 search_rank_uncertainty = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_search_rank_uncertainty(&_has_bits_);
          search_rank_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rank_uncertainty_change = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rank_uncertainty_change(&_has_bits_);
          rank_uncertainty_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_play_count = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_play_count(&_has_bits_);
          hero_play_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 party_id = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_party_id(&_has_bits_);
          party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional float scaled_kills = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_scaled_kills(&_has_bits_);
          scaled_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scaled_deaths = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_scaled_deaths(&_has_bits_);
          scaled_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float scaled_assists = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_scaled_assists(&_has_bits_);
          scaled_assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_farm_gold = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_claimed_farm_gold(&_has_bits_);
          claimed_farm_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_gold = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_support_gold(&_has_bits_);
          support_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_denies = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_claimed_denies(&_has_bits_);
          claimed_denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_misses = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_claimed_misses(&_has_bits_);
          claimed_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 misses = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_misses(&_has_bits_);
          misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ability_upgrades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<378>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_additional_units_inventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active_plus_subscription = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_active_plus_subscription(&_has_bits_);
          active_plus_subscription_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_net_worth(&_has_bits_);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scaled_hero_damage = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_scaled_hero_damage(&_has_bits_);
          scaled_hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scaled_tower_damage = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_scaled_tower_damage(&_has_bits_);
          scaled_tower_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scaled_hero_healing = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_scaled_hero_healing(&_has_bits_);
          scaled_hero_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_permanent_buffs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 bot_difficulty = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_bot_difficulty(&_has_bits_);
          bot_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_6 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_item_6(&_has_bits_);
          item_6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_7 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_item_7(&_has_bits_);
          item_7_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_8 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_item_8(&_has_bits_);
          item_8_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_pick_order = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_hero_pick_order(&_has_bits_);
          hero_pick_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool hero_was_randomed = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_hero_was_randomed(&_has_bits_);
          hero_was_randomed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool rank_tier_updated = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rank_tier_updated(&_has_bits_);
          rank_tier_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_received = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_damage_received(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<538>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool hero_was_dota_plus_suggestion = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_was_dota_plus_suggestion(&_has_bits_);
          hero_was_dota_plus_suggestion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 seconds_dead = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_seconds_dead(&_has_bits_);
          seconds_dead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gold_lost_to_death = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gold_lost_to_death(&_has_bits_);
          gold_lost_to_death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pro_name = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pro_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.Player.pro_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string real_name = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.Player.real_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mmr_type = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mmr_type(&_has_bits_);
          mmr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_lane_selection_flags(&_has_bits_);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_9 = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_item_9(&_has_bits_);
          item_9_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_runes = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_bounty_runes(&_has_bits_);
          bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outposts_captured = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_outposts_captured(&_has_bits_);
          outposts_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_dealt = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_hero_damage_dealt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<634>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 item_0 = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_item_0(), target);
  }

  // optional uint32 item_1 = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_item_1(), target);
  }

  // optional uint32 item_2 = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_item_2(), target);
  }

  // optional uint32 item_3 = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_item_3(), target);
  }

  // optional uint32 item_4 = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_item_4(), target);
  }

  // optional uint32 item_5 = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_item_5(), target);
  }

  // optional float expected_team_contribution = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_expected_team_contribution(), target);
  }

  // optional float scaled_metric = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_scaled_metric(), target);
  }

  // optional uint32 previous_rank = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_previous_rank(), target);
  }

  // optional sint32 rank_change = 13;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(13, this->_internal_rank_change(), target);
  }

  // optional uint32 kills = 14;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_assists(), target);
  }

  // optional uint32 leaver_status = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_leaver_status(), target);
  }

  // optional uint32 gold = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_gold(), target);
  }

  // optional uint32 last_hits = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 20;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_denies(), target);
  }

  // optional uint32 gold_per_min = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_gold_per_min(), target);
  }

  // optional uint32 XP_per_min = 22;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_xp_per_min(), target);
  }

  // optional uint32 gold_spent = 23;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_gold_spent(), target);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_tower_damage(), target);
  }

  // optional uint32 hero_healing = 26;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_hero_healing(), target);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_level(), target);
  }

  // optional uint32 time_last_seen = 28;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_time_last_seen(), target);
  }

  // optional string player_name = 29;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.Player.player_name");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_player_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 support_ability_value = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_support_ability_value(), target);
  }

  // optional bool feeding_detected = 32;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_feeding_detected(), target);
  }

  // optional uint32 search_rank = 34;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_search_rank(), target);
  }

  // optional uint32 search_rank_uncertainty = 35;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_search_rank_uncertainty(), target);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_rank_uncertainty_change(), target);
  }

  // optional uint32 hero_play_count = 37;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_hero_play_count(), target);
  }

  // optional fixed64 party_id = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(38, this->_internal_party_id(), target);
  }

  // optional float scaled_kills = 39;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(39, this->_internal_scaled_kills(), target);
  }

  // optional float scaled_deaths = 40;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_scaled_deaths(), target);
  }

  // optional float scaled_assists = 41;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(41, this->_internal_scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_support_gold(), target);
  }

  // optional uint32 claimed_denies = 44;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 45;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(45, this->_internal_claimed_misses(), target);
  }

  // optional uint32 misses = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_misses(), target);
  }

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ability_upgrades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, this->_internal_ability_upgrades(i), target, stream);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_additional_units_inventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_additional_units_inventory(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::custom_game_data(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool active_plus_subscription = 51;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(51, this->_internal_active_plus_subscription(), target);
  }

  // optional uint32 net_worth = 52;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_net_worth(), target);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(54, this->_internal_scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(55, this->_internal_scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_scaled_hero_healing(), target);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permanent_buffs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, this->_internal_permanent_buffs(i), target, stream);
  }

  // optional uint32 bot_difficulty = 58;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(58, this->_internal_bot_difficulty(), target);
  }

  // optional uint32 item_6 = 59;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(59, this->_internal_item_6(), target);
  }

  // optional uint32 item_7 = 60;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_item_7(), target);
  }

  // optional uint32 item_8 = 61;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_item_8(), target);
  }

  // optional uint32 hero_pick_order = 63;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(63, this->_internal_hero_pick_order(), target);
  }

  // optional bool hero_was_randomed = 64;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_hero_was_randomed(), target);
  }

  // optional bool rank_tier_updated = 66;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(66, this->_internal_rank_tier_updated(), target);
  }

  // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_received = 67;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_damage_received_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, this->_internal_hero_damage_received(i), target, stream);
  }

  // optional bool hero_was_dota_plus_suggestion = 69;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(69, this->_internal_hero_was_dota_plus_suggestion(), target);
  }

  // optional uint32 seconds_dead = 70;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_seconds_dead(), target);
  }

  // optional uint32 gold_lost_to_death = 71;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_gold_lost_to_death(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string pro_name = 72;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pro_name().data(), static_cast<int>(this->_internal_pro_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.Player.pro_name");
    target = stream->WriteStringMaybeAliased(
        72, this->_internal_pro_name(), target);
  }

  // optional string real_name = 73;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.Player.real_name");
    target = stream->WriteStringMaybeAliased(
        73, this->_internal_real_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 mmr_type = 74;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(74, this->_internal_mmr_type(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 lane_selection_flags = 75;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(75, this->_internal_lane_selection_flags(), target);
  }

  // optional uint32 item_9 = 76;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(76, this->_internal_item_9(), target);
  }

  // optional uint32 bounty_runes = 77;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(77, this->_internal_bounty_runes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 outposts_captured = 78;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(78, this->_internal_outposts_captured(), target);
  }

  // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_dealt = 79;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hero_damage_dealt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, this->_internal_hero_damage_dealt(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.Player)
  return target;
}

size_t CMsgDOTAMatch_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  total_size += 2UL * this->_internal_ability_upgrades_size();
  for (const auto& msg : this->ability_upgrades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMatchAdditionalUnitInventory additional_units_inventory = 48;
  total_size += 2UL * this->_internal_additional_units_inventory_size();
  for (const auto& msg : this->additional_units_inventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMatchPlayerPermanentBuff permanent_buffs = 57;
  total_size += 2UL * this->_internal_permanent_buffs_size();
  for (const auto& msg : this->permanent_buffs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_received = 67;
  total_size += 2UL * this->_internal_hero_damage_received_size();
  for (const auto& msg : this->hero_damage_received_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAMatch.Player.HeroDamageReceived hero_damage_dealt = 79;
  total_size += 2UL * this->_internal_hero_damage_dealt_size();
  for (const auto& msg : this->hero_damage_dealt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string player_name = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_player_name());
    }

    // optional string pro_name = 72;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pro_name());
    }

    // optional string real_name = 73;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional .CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 item_0 = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_0());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 item_1 = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_1());
    }

    // optional uint32 item_2 = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_2());
    }

    // optional uint32 item_3 = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_3());
    }

    // optional uint32 item_4 = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_4());
    }

    // optional uint32 item_5 = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_5());
    }

    // optional float expected_team_contribution = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float scaled_metric = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 previous_rank = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_previous_rank());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional sint32 rank_change = 13;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_rank_change());
    }

    // optional uint32 kills = 14;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 leaver_status = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leaver_status());
    }

    // optional uint32 gold = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional uint32 last_hits = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 20;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 gold_per_min = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_per_min());
    }

    // optional uint32 XP_per_min = 22;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_per_min());
    }

    // optional uint32 gold_spent = 23;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_spent());
    }

    // optional uint32 hero_damage = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_damage());
    }

    // optional uint32 tower_damage = 25;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_damage());
    }

    // optional uint32 hero_healing = 26;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_healing());
    }

    // optional uint32 level = 27;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 time_last_seen = 28;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_last_seen());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 support_ability_value = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_ability_value());
    }

    // optional uint32 search_rank = 34;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_search_rank());
    }

    // optional uint32 search_rank_uncertainty = 35;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_search_rank_uncertainty());
    }

    // optional int32 rank_uncertainty_change = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rank_uncertainty_change());
    }

    // optional fixed64 party_id = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 8;
    }

    // optional uint32 hero_play_count = 37;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_play_count());
    }

    // optional float scaled_kills = 39;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 40;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float scaled_assists = 41;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 42;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_farm_gold());
    }

    // optional uint32 support_gold = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold());
    }

    // optional uint32 claimed_denies = 44;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_denies());
    }

    // optional uint32 claimed_misses = 45;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_misses());
    }

    // optional uint32 misses = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_misses());
    }

    // optional uint32 net_worth = 52;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional bool rank_tier_updated = 66;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool feeding_detected = 32;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool active_plus_subscription = 51;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool hero_was_randomed = 64;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional uint32 scaled_hero_damage = 54;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 55;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scaled_tower_damage());
    }

    // optional uint32 scaled_hero_healing = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scaled_hero_healing());
    }

    // optional uint32 bot_difficulty = 58;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bot_difficulty());
    }

    // optional uint32 item_6 = 59;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_6());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 item_7 = 60;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_7());
    }

    // optional uint32 item_8 = 61;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_8());
    }

    // optional uint32 hero_pick_order = 63;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_pick_order());
    }

    // optional bool hero_was_dota_plus_suggestion = 69;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 seconds_dead = 70;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_seconds_dead());
    }

    // optional uint32 gold_lost_to_death = 71;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold_lost_to_death());
    }

    // optional uint32 outposts_captured = 78;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outposts_captured());
    }

    // optional uint32 mmr_type = 74;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mmr_type());
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 lane_selection_flags = 75;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 item_9 = 76;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_9());
    }

    // optional uint32 bounty_runes = 77;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_runes());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player::MergeFrom(const CMsgDOTAMatch_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  hero_damage_received_.MergeFrom(from.hero_damage_received_);
  hero_damage_dealt_.MergeFrom(from.hero_damage_dealt_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_player_name(from._internal_player_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_pro_name(from._internal_pro_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_custom_game_data()->::CMsgDOTAMatch_Player_CustomGameData::MergeFrom(from._internal_custom_game_data());
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_0_ = from.item_0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      item_1_ = from.item_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      item_2_ = from.item_2_;
    }
    if (cached_has_bits & 0x00000400u) {
      item_3_ = from.item_3_;
    }
    if (cached_has_bits & 0x00000800u) {
      item_4_ = from.item_4_;
    }
    if (cached_has_bits & 0x00001000u) {
      item_5_ = from.item_5_;
    }
    if (cached_has_bits & 0x00002000u) {
      expected_team_contribution_ = from.expected_team_contribution_;
    }
    if (cached_has_bits & 0x00004000u) {
      scaled_metric_ = from.scaled_metric_;
    }
    if (cached_has_bits & 0x00008000u) {
      previous_rank_ = from.previous_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00020000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00040000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00080000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00100000u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00200000u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00800000u) {
      denies_ = from.denies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x02000000u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x04000000u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x08000000u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x20000000u) {
      hero_healing_ = from.hero_healing_;
    }
    if (cached_has_bits & 0x40000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x80000000u) {
      time_last_seen_ = from.time_last_seen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      support_ability_value_ = from.support_ability_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      search_rank_ = from.search_rank_;
    }
    if (cached_has_bits & 0x00000004u) {
      search_rank_uncertainty_ = from.search_rank_uncertainty_;
    }
    if (cached_has_bits & 0x00000008u) {
      rank_uncertainty_change_ = from.rank_uncertainty_change_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      hero_play_count_ = from.hero_play_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      scaled_kills_ = from.scaled_kills_;
    }
    if (cached_has_bits & 0x00000080u) {
      scaled_deaths_ = from.scaled_deaths_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      scaled_assists_ = from.scaled_assists_;
    }
    if (cached_has_bits & 0x00000200u) {
      claimed_farm_gold_ = from.claimed_farm_gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x00000800u) {
      claimed_denies_ = from.claimed_denies_;
    }
    if (cached_has_bits & 0x00001000u) {
      claimed_misses_ = from.claimed_misses_;
    }
    if (cached_has_bits & 0x00002000u) {
      misses_ = from.misses_;
    }
    if (cached_has_bits & 0x00004000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00008000u) {
      rank_tier_updated_ = from.rank_tier_updated_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      feeding_detected_ = from.feeding_detected_;
    }
    if (cached_has_bits & 0x00020000u) {
      active_plus_subscription_ = from.active_plus_subscription_;
    }
    if (cached_has_bits & 0x00040000u) {
      hero_was_randomed_ = from.hero_was_randomed_;
    }
    if (cached_has_bits & 0x00080000u) {
      scaled_hero_damage_ = from.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00100000u) {
      scaled_tower_damage_ = from.scaled_tower_damage_;
    }
    if (cached_has_bits & 0x00200000u) {
      scaled_hero_healing_ = from.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00400000u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00800000u) {
      item_6_ = from.item_6_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      item_7_ = from.item_7_;
    }
    if (cached_has_bits & 0x02000000u) {
      item_8_ = from.item_8_;
    }
    if (cached_has_bits & 0x04000000u) {
      hero_pick_order_ = from.hero_pick_order_;
    }
    if (cached_has_bits & 0x08000000u) {
      hero_was_dota_plus_suggestion_ = from.hero_was_dota_plus_suggestion_;
    }
    if (cached_has_bits & 0x10000000u) {
      seconds_dead_ = from.seconds_dead_;
    }
    if (cached_has_bits & 0x20000000u) {
      gold_lost_to_death_ = from.gold_lost_to_death_;
    }
    if (cached_has_bits & 0x40000000u) {
      outposts_captured_ = from.outposts_captured_;
    }
    if (cached_has_bits & 0x80000000u) {
      mmr_type_ = from.mmr_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_9_ = from.item_9_;
    }
    if (cached_has_bits & 0x00000004u) {
      bounty_runes_ = from.bounty_runes_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player::CopyFrom(const CMsgDOTAMatch_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player::InternalSwap(CMsgDOTAMatch_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  additional_units_inventory_.InternalSwap(&other->additional_units_inventory_);
  permanent_buffs_.InternalSwap(&other->permanent_buffs_);
  hero_damage_received_.InternalSwap(&other->hero_damage_received_);
  hero_damage_dealt_.InternalSwap(&other->hero_damage_dealt_);
  player_name_.Swap(&other->player_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pro_name_.Swap(&other->pro_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  real_name_.Swap(&other->real_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Player, bounty_runes_)
      + sizeof(CMsgDOTAMatch_Player::bounty_runes_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Player, custom_game_data_)>(
          reinterpret_cast<char*>(&custom_game_data_),
          reinterpret_cast<char*>(&other->custom_game_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_BroadcasterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_BroadcasterInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.BroadcasterInfo)
}
CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.BroadcasterInfo)
}

void CMsgDOTAMatch_BroadcasterInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_id_ = 0u;
}

CMsgDOTAMatch_BroadcasterInfo::~CMsgDOTAMatch_BroadcasterInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.BroadcasterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_BroadcasterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_BroadcasterInfo::ArenaDtor(void* object) {
  CMsgDOTAMatch_BroadcasterInfo* _this = reinterpret_cast< CMsgDOTAMatch_BroadcasterInfo* >(object);
  (void)_this;
}
void CMsgDOTAMatch_BroadcasterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_BroadcasterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_BroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.BroadcasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_BroadcasterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.BroadcasterInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_BroadcasterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.BroadcasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.BroadcasterInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.BroadcasterInfo)
  return target;
}

size_t CMsgDOTAMatch_BroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.BroadcasterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.BroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_BroadcasterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.BroadcasterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.BroadcasterInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.BroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.BroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.BroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_BroadcasterInfo::InternalSwap(CMsgDOTAMatch_BroadcasterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_BroadcasterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_BroadcasterChannel::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_BroadcasterChannel>()._has_bits_);
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_language_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  broadcaster_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.BroadcasterChannel)
}
CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      broadcaster_infos_(from.broadcaster_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_language_code()) {
    language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_language_code(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.BroadcasterChannel)
}

void CMsgDOTAMatch_BroadcasterChannel::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTAMatch_BroadcasterChannel::~CMsgDOTAMatch_BroadcasterChannel() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.BroadcasterChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_BroadcasterChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_BroadcasterChannel::ArenaDtor(void* object) {
  CMsgDOTAMatch_BroadcasterChannel* _this = reinterpret_cast< CMsgDOTAMatch_BroadcasterChannel* >(object);
  (void)_this;
}
void CMsgDOTAMatch_BroadcasterChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_BroadcasterChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_BroadcasterChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.BroadcasterChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  broadcaster_infos_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      language_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_BroadcasterChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string country_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.BroadcasterChannel.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.BroadcasterChannel.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_broadcaster_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.BroadcasterChannel.language_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_BroadcasterChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.BroadcasterChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.BroadcasterChannel.country_code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country_code(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.BroadcasterChannel.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcaster_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_broadcaster_infos(i), target, stream);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.BroadcasterChannel.language_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_language_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.BroadcasterChannel)
  return target;
}

size_t CMsgDOTAMatch_BroadcasterChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.BroadcasterChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  total_size += 1UL * this->_internal_broadcaster_infos_size();
  for (const auto& msg : this->broadcaster_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string description = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string language_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_language_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.BroadcasterChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_BroadcasterChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.BroadcasterChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.BroadcasterChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.BroadcasterChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcaster_infos_.MergeFrom(from.broadcaster_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_language_code(from._internal_language_code());
    }
  }
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.BroadcasterChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.BroadcasterChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_BroadcasterChannel::InternalSwap(CMsgDOTAMatch_BroadcasterChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  broadcaster_infos_.InternalSwap(&other->broadcaster_infos_);
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_BroadcasterChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_Coach::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_Coach>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_coach_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coach_rating(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_coach_team(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coach_party_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_private_coach(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTAMatch_Coach::CMsgDOTAMatch_Coach(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.Coach)
}
CMsgDOTAMatch_Coach::CMsgDOTAMatch_Coach(const CMsgDOTAMatch_Coach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coach_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_coach_name()) {
    coach_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_coach_name(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_private_coach_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_private_coach_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.Coach)
}

void CMsgDOTAMatch_Coach::SharedCtor() {
coach_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_private_coach_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_private_coach_));
}

CMsgDOTAMatch_Coach::~CMsgDOTAMatch_Coach() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.Coach)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_Coach::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  coach_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_Coach::ArenaDtor(void* object) {
  CMsgDOTAMatch_Coach* _this = reinterpret_cast< CMsgDOTAMatch_Coach* >(object);
  (void)_this;
}
void CMsgDOTAMatch_Coach::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_Coach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_Coach::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.Coach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    coach_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_private_coach_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_private_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_Coach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string coach_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_coach_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.Coach.coach_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coach_rating = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_coach_rating(&has_bits);
          coach_rating_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 coach_team = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_coach_team(&has_bits);
          coach_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 coach_party_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_coach_party_id(&has_bits);
          coach_party_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_private_coach = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_private_coach(&has_bits);
          is_private_coach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_Coach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.Coach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional string coach_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_coach_name().data(), static_cast<int>(this->_internal_coach_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.Coach.coach_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_coach_name(), target);
  }

  // optional uint32 coach_rating = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_coach_rating(), target);
  }

  // optional uint32 coach_team = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_coach_team(), target);
  }

  // optional uint64 coach_party_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_coach_party_id(), target);
  }

  // optional bool is_private_coach = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_private_coach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.Coach)
  return target;
}

size_t CMsgDOTAMatch_Coach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.Coach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string coach_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_coach_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 coach_rating = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coach_rating());
    }

    // optional uint64 coach_party_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_coach_party_id());
    }

    // optional uint32 coach_team = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coach_team());
    }

    // optional bool is_private_coach = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_Coach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.Coach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Coach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_Coach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.Coach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.Coach)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Coach::MergeFrom(const CMsgDOTAMatch_Coach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.Coach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_coach_name(from._internal_coach_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      coach_rating_ = from.coach_rating_;
    }
    if (cached_has_bits & 0x00000008u) {
      coach_party_id_ = from.coach_party_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      coach_team_ = from.coach_team_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_private_coach_ = from.is_private_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Coach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.Coach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Coach::CopyFrom(const CMsgDOTAMatch_Coach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.Coach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Coach::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Coach::InternalSwap(CMsgDOTAMatch_Coach* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  coach_name_.Swap(&other->coach_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Coach, is_private_coach_)
      + sizeof(CMsgDOTAMatch_Coach::is_private_coach_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch_Coach, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_Coach::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch_CustomGameData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch_CustomGameData>()._has_bits_);
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_map_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch.CustomGameData)
}
CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_map_name()) {
    map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_map_name(), 
      GetArena());
  }
  custom_game_id_ = from.custom_game_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch.CustomGameData)
}

void CMsgDOTAMatch_CustomGameData::SharedCtor() {
map_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_game_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAMatch_CustomGameData::~CMsgDOTAMatch_CustomGameData() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch.CustomGameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch_CustomGameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  map_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_CustomGameData::ArenaDtor(void* object) {
  CMsgDOTAMatch_CustomGameData* _this = reinterpret_cast< CMsgDOTAMatch_CustomGameData* >(object);
  (void)_this;
}
void CMsgDOTAMatch_CustomGameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch_CustomGameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch_CustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch.CustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    map_name_.ClearNonDefaultToEmpty();
  }
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch_CustomGameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 custom_game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string map_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_map_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.CustomGameData.map_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch_CustomGameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch.CustomGameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_custom_game_id(), target);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_map_name().data(), static_cast<int>(this->_internal_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.CustomGameData.map_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch.CustomGameData)
  return target;
}

size_t CMsgDOTAMatch_CustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch.CustomGameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string map_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_map_name());
    }

    // optional uint64 custom_game_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_CustomGameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch_CustomGameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch.CustomGameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch.CustomGameData)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const CMsgDOTAMatch_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_map_name(from._internal_map_name());
    }
    if (cached_has_bits & 0x00000002u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const CMsgDOTAMatch_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_CustomGameData::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_CustomGameData::InternalSwap(CMsgDOTAMatch_CustomGameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  map_name_.Swap(&other->map_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(custom_game_id_, other->custom_game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch_CustomGameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatch>()._has_bits_);
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cluster(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_first_blood_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_replay_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_server_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_human_players(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_average_skill(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_game_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_radiant_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dire_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_leagueid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_radiant_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dire_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radiant_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_dire_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_radiant_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dire_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radiant_team_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_dire_team_complete(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_positive_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_negative_votes(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_match_seq_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_replay_state(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_radiant_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_dire_guild_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_radiant_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dire_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_engine(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::CMsgDOTAMatch_CustomGameData& custom_game_data(const CMsgDOTAMatch* msg);
  static void set_has_custom_game_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_flags(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_private_metadata_key(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_radiant_team_score(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_dire_team_score(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tournament_id(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tournament_round(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_pre_game_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

const ::CMsgDOTAMatch_CustomGameData&
CMsgDOTAMatch::_Internal::custom_game_data(const CMsgDOTAMatch* msg) {
  return *msg->custom_game_data_;
}
CMsgDOTAMatch::CMsgDOTAMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  tower_status_(arena),
  barracks_status_(arena),
  picks_bans_(arena),
  broadcaster_channels_(arena),
  mvp_account_id_(arena),
  coaches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatch)
}
CMsgDOTAMatch::CMsgDOTAMatch(const CMsgDOTAMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      tower_status_(from.tower_status_),
      barracks_status_(from.barracks_status_),
      picks_bans_(from.picks_bans_),
      broadcaster_channels_(from.broadcaster_channels_),
      mvp_account_id_(from.mvp_account_id_),
      coaches_(from.coaches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radiant_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radiant_team_name()) {
    radiant_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radiant_team_name(), 
      GetArena());
  }
  dire_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dire_team_name()) {
    dire_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dire_team_name(), 
      GetArena());
  }
  radiant_team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radiant_team_tag()) {
    radiant_team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radiant_team_tag(), 
      GetArena());
  }
  dire_team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dire_team_tag()) {
    dire_team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dire_team_tag(), 
      GetArena());
  }
  radiant_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radiant_team_logo_url()) {
    radiant_team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radiant_team_logo_url(), 
      GetArena());
  }
  dire_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dire_team_logo_url()) {
    dire_team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dire_team_logo_url(), 
      GetArena());
  }
  if (from._internal_has_custom_game_data()) {
    custom_game_data_ = new ::CMsgDOTAMatch_CustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_game_duration_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(pre_game_duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatch)
}

void CMsgDOTAMatch::SharedCtor() {
radiant_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dire_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
radiant_team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dire_team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
radiant_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dire_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&custom_game_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pre_game_duration_) -
    reinterpret_cast<char*>(&custom_game_data_)) + sizeof(pre_game_duration_));
}

CMsgDOTAMatch::~CMsgDOTAMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radiant_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radiant_team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_game_data_;
}

void CMsgDOTAMatch::ArenaDtor(void* object) {
  CMsgDOTAMatch* _this = reinterpret_cast< CMsgDOTAMatch* >(object);
  (void)_this;
}
void CMsgDOTAMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  broadcaster_channels_.Clear();
  mvp_account_id_.Clear();
  coaches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      radiant_team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      radiant_team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dire_team_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      radiant_team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      dire_team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(custom_game_data_ != nullptr);
      custom_game_data_->Clear();
    }
  }
  duration_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&starttime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_type_) -
        reinterpret_cast<char*>(&starttime_)) + sizeof(lobby_type_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&human_players_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_logo_) -
        reinterpret_cast<char*>(&human_players_)) + sizeof(dire_team_logo_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&radiant_team_complete_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radiant_guild_id_) -
        reinterpret_cast<char*>(&radiant_team_complete_)) + sizeof(radiant_guild_id_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dire_guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_score_) -
        reinterpret_cast<char*>(&dire_guild_id_)) + sizeof(dire_team_score_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&match_outcome_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pre_game_duration_) -
        reinterpret_cast<char*>(&match_outcome_)) + sizeof(pre_game_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration(&_has_bits_);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 startTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_starttime(&_has_bits_);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch.Player players = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_match_id(&_has_bits_);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tower_status = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tower_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tower_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 barracks_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_barracks_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_barracks_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cluster = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cluster(&_has_bits_);
          cluster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_blood_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_first_blood_time(&_has_bits_);
          first_blood_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 replay_salt = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_replay_salt(&_has_bits_);
          replay_salt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 server_ip = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_server_ip(&_has_bits_);
          server_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 server_port = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_server_port(&_has_bits_);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_lobby_type(&_has_bits_);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 human_players = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_human_players(&_has_bits_);
          human_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 average_skill = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_average_skill(&_has_bits_);
          average_skill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float game_balance = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_game_balance(&_has_bits_);
          game_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_team_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_radiant_team_id(&_has_bits_);
          radiant_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_team_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_dire_team_id(&_has_bits_);
          dire_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 leagueid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_leagueid(&_has_bits_);
          leagueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radiant_team_name = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_radiant_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.radiant_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dire_team_name = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_dire_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.dire_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 radiant_team_logo = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_radiant_team_logo(&_has_bits_);
          radiant_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 dire_team_logo = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_dire_team_logo(&_has_bits_);
          dire_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_team_complete = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_radiant_team_complete(&_has_bits_);
          radiant_team_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_team_complete = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_dire_team_complete(&_has_bits_);
          dire_team_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 positive_votes = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_positive_votes(&_has_bits_);
          positive_votes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 negative_votes = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_negative_votes(&_has_bits_);
          negative_votes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(31, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMatchHeroSelectEvent picks_bans = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_picks_bans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint64 match_seq_num = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_seq_num(&_has_bits_);
          match_seq_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAMatch_ReplayState_IsValid(val))) {
            _internal_set_replay_state(static_cast<::CMsgDOTAMatch_ReplayState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(34, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_guild_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_radiant_guild_id(&_has_bits_);
          radiant_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_guild_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dire_guild_id(&_has_bits_);
          dire_guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radiant_team_tag = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_radiant_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.radiant_team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dire_team_tag = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dire_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.dire_team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_series_id(&_has_bits_);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_series_type(&_has_bits_);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_broadcaster_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 engine = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_engine(&_has_bits_);
          engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_game_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_flags = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_match_flags(&_has_bits_);
          match_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 private_metadata_key = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_private_metadata_key(&_has_bits_);
          private_metadata_key_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_team_score = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_radiant_team_score(&_has_bits_);
          radiant_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_team_score = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_dire_team_score(&_has_bits_);
          dire_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(50, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_id = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_tournament_id(&_has_bits_);
          tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tournament_round = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_tournament_round(&_has_bits_);
          tournament_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pre_game_duration = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_pre_game_duration(&_has_bits_);
          pre_game_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radiant_team_logo_url = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_radiant_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.radiant_team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dire_team_logo_url = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_dire_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatch.dire_team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mvp_account_id = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mvp_account_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<448>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mvp_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch.Coach coaches = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_coaches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<458>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional fixed32 startTime = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(4, this->_internal_starttime(), target);
  }

  // repeated .CMsgDOTAMatch.Player players = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_players(i), target, stream);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_match_id(), target);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->_internal_tower_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_tower_status(i), target);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->_internal_barracks_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_barracks_status(i), target);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cluster(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_first_blood_time(), target);
  }

  // optional fixed32 replay_salt = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(13, this->_internal_replay_salt(), target);
  }

  // optional fixed32 server_ip = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(14, this->_internal_server_ip(), target);
  }

  // optional uint32 server_port = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_server_port(), target);
  }

  // optional uint32 lobby_type = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_lobby_type(), target);
  }

  // optional uint32 human_players = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_human_players(), target);
  }

  // optional uint32 average_skill = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_average_skill(), target);
  }

  // optional float game_balance = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_game_balance(), target);
  }

  // optional uint32 radiant_team_id = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dire_team_id(), target);
  }

  // optional uint32 leagueid = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_leagueid(), target);
  }

  // optional string radiant_team_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radiant_team_name().data(), static_cast<int>(this->_internal_radiant_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.radiant_team_name");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_radiant_team_name(), target);
  }

  // optional string dire_team_name = 24;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dire_team_name().data(), static_cast<int>(this->_internal_dire_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.dire_team_name");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_dire_team_name(), target);
  }

  // optional uint64 radiant_team_logo = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(25, this->_internal_radiant_team_logo(), target);
  }

  // optional uint64 dire_team_logo = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(26, this->_internal_dire_team_logo(), target);
  }

  // optional uint32 radiant_team_complete = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_radiant_team_complete(), target);
  }

  // optional uint32 dire_team_complete = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_dire_team_complete(), target);
  }

  // optional uint32 positive_votes = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_positive_votes(), target);
  }

  // optional uint32 negative_votes = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_negative_votes(), target);
  }

  // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      31, this->_internal_game_mode(), target);
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_picks_bans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_picks_bans(i), target, stream);
  }

  // optional uint64 match_seq_num = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(33, this->_internal_match_seq_num(), target);
  }

  // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      34, this->_internal_replay_state(), target);
  }

  // optional uint32 radiant_guild_id = 35;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_radiant_guild_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 dire_guild_id = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_dire_guild_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string radiant_team_tag = 37;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radiant_team_tag().data(), static_cast<int>(this->_internal_radiant_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.radiant_team_tag");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 38;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dire_team_tag().data(), static_cast<int>(this->_internal_dire_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.dire_team_tag");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_dire_team_tag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 series_id = 39;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_series_id(), target);
  }

  // optional uint32 series_type = 40;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_series_type(), target);
  }

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_broadcaster_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, this->_internal_broadcaster_channels(i), target, stream);
  }

  // optional uint32 engine = 44;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_engine(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        45, _Internal::custom_game_data(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 match_flags = 46;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(46, this->_internal_match_flags(), target);
  }

  // optional fixed32 private_metadata_key = 47;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(47, this->_internal_private_metadata_key(), target);
  }

  // optional uint32 radiant_team_score = 48;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(48, this->_internal_radiant_team_score(), target);
  }

  // optional uint32 dire_team_score = 49;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_dire_team_score(), target);
  }

  // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      50, this->_internal_match_outcome(), target);
  }

  // optional uint32 tournament_id = 51;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(51, this->_internal_tournament_id(), target);
  }

  // optional uint32 tournament_round = 52;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(52, this->_internal_tournament_round(), target);
  }

  // optional uint32 pre_game_duration = 53;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(53, this->_internal_pre_game_duration(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string radiant_team_logo_url = 54;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radiant_team_logo_url().data(), static_cast<int>(this->_internal_radiant_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.radiant_team_logo_url");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_radiant_team_logo_url(), target);
  }

  // optional string dire_team_logo_url = 55;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dire_team_logo_url().data(), static_cast<int>(this->_internal_dire_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatch.dire_team_logo_url");
    target = stream->WriteStringMaybeAliased(
        55, this->_internal_dire_team_logo_url(), target);
  }

  // repeated uint32 mvp_account_id = 56;
  for (int i = 0, n = this->_internal_mvp_account_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_mvp_account_id(i), target);
  }

  // repeated .CMsgDOTAMatch.Coach coaches = 57;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_coaches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, this->_internal_coaches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatch)
  return target;
}

size_t CMsgDOTAMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatch.Player players = 5;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tower_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->barracks_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_barracks_status_size());
    total_size += data_size;
  }

  // repeated .CMatchHeroSelectEvent picks_bans = 32;
  total_size += 2UL * this->_internal_picks_bans_size();
  for (const auto& msg : this->picks_bans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  total_size += 2UL * this->_internal_broadcaster_channels_size();
  for (const auto& msg : this->broadcaster_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 mvp_account_id = 56;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mvp_account_id_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mvp_account_id_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTAMatch.Coach coaches = 57;
  total_size += 2UL * this->_internal_coaches_size();
  for (const auto& msg : this->coaches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_team_name = 23;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radiant_team_name());
    }

    // optional string dire_team_name = 24;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dire_team_name());
    }

    // optional string radiant_team_tag = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radiant_team_tag());
    }

    // optional string dire_team_tag = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dire_team_tag());
    }

    // optional string radiant_team_logo_url = 54;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radiant_team_logo_url());
    }

    // optional string dire_team_logo_url = 55;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dire_team_logo_url());
    }

    // optional .CMsgDOTAMatch.CustomGameData custom_game_data = 45;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *custom_game_data_);
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional fixed32 startTime = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint64 match_id = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 cluster = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cluster());
    }

    // optional uint32 first_blood_time = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_blood_time());
    }

    // optional fixed32 replay_salt = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_ip = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_server_port());
    }

    // optional uint32 lobby_type = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_type());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 human_players = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_human_players());
    }

    // optional uint32 average_skill = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_average_skill());
    }

    // optional float game_balance = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_id = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_team_id());
    }

    // optional uint32 dire_team_id = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_team_id());
    }

    // optional uint32 leagueid = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_leagueid());
    }

    // optional uint64 radiant_team_logo = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_radiant_team_logo());
    }

    // optional uint64 dire_team_logo = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_dire_team_logo());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 radiant_team_complete = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_team_complete());
    }

    // optional uint32 dire_team_complete = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_team_complete());
    }

    // optional uint32 positive_votes = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_positive_votes());
    }

    // optional uint32 negative_votes = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_negative_votes());
    }

    // optional .DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional .CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_replay_state());
    }

    // optional uint64 match_seq_num = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_seq_num());
    }

    // optional uint32 radiant_guild_id = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_guild_id());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 dire_guild_id = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_guild_id());
    }

    // optional uint32 series_id = 39;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 series_type = 40;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional uint32 engine = 44;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_engine());
    }

    // optional uint32 match_flags = 46;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_flags());
    }

    // optional fixed32 private_metadata_key = 47;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_score = 48;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_team_score());
    }

    // optional uint32 dire_team_score = 49;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_team_score());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

    // optional uint32 tournament_id = 51;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_id());
    }

    // optional uint32 tournament_round = 52;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tournament_round());
    }

    // optional uint32 pre_game_duration = 53;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pre_game_duration());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch::MergeFrom(const CMsgDOTAMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  broadcaster_channels_.MergeFrom(from.broadcaster_channels_);
  mvp_account_id_.MergeFrom(from.mvp_account_id_);
  coaches_.MergeFrom(from.coaches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radiant_team_name(from._internal_radiant_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dire_team_name(from._internal_dire_team_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_radiant_team_tag(from._internal_radiant_team_tag());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dire_team_tag(from._internal_dire_team_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_radiant_team_logo_url(from._internal_radiant_team_logo_url());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_dire_team_logo_url(from._internal_dire_team_logo_url());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_custom_game_data()->::CMsgDOTAMatch_CustomGameData::MergeFrom(from._internal_custom_game_data());
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000200u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      cluster_ = from.cluster_;
    }
    if (cached_has_bits & 0x00000800u) {
      first_blood_time_ = from.first_blood_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00002000u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00004000u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00008000u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      human_players_ = from.human_players_;
    }
    if (cached_has_bits & 0x00020000u) {
      average_skill_ = from.average_skill_;
    }
    if (cached_has_bits & 0x00040000u) {
      game_balance_ = from.game_balance_;
    }
    if (cached_has_bits & 0x00080000u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      dire_team_id_ = from.dire_team_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00400000u) {
      radiant_team_logo_ = from.radiant_team_logo_;
    }
    if (cached_has_bits & 0x00800000u) {
      dire_team_logo_ = from.dire_team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      radiant_team_complete_ = from.radiant_team_complete_;
    }
    if (cached_has_bits & 0x02000000u) {
      dire_team_complete_ = from.dire_team_complete_;
    }
    if (cached_has_bits & 0x04000000u) {
      positive_votes_ = from.positive_votes_;
    }
    if (cached_has_bits & 0x08000000u) {
      negative_votes_ = from.negative_votes_;
    }
    if (cached_has_bits & 0x10000000u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x20000000u) {
      replay_state_ = from.replay_state_;
    }
    if (cached_has_bits & 0x40000000u) {
      match_seq_num_ = from.match_seq_num_;
    }
    if (cached_has_bits & 0x80000000u) {
      radiant_guild_id_ = from.radiant_guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dire_guild_id_ = from.dire_guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_flags_ = from.match_flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      private_metadata_key_ = from.private_metadata_key_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_team_score_ = from.radiant_team_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_score_ = from.dire_team_score_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00000200u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      tournament_round_ = from.tournament_round_;
    }
    if (cached_has_bits & 0x00000800u) {
      pre_game_duration_ = from.pre_game_duration_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTAMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch::CopyFrom(const CMsgDOTAMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch::InternalSwap(CMsgDOTAMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  players_.InternalSwap(&other->players_);
  tower_status_.InternalSwap(&other->tower_status_);
  barracks_status_.InternalSwap(&other->barracks_status_);
  picks_bans_.InternalSwap(&other->picks_bans_);
  broadcaster_channels_.InternalSwap(&other->broadcaster_channels_);
  mvp_account_id_.InternalSwap(&other->mvp_account_id_);
  coaches_.InternalSwap(&other->coaches_);
  radiant_team_name_.Swap(&other->radiant_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dire_team_name_.Swap(&other->dire_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  radiant_team_tag_.Swap(&other->radiant_team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dire_team_tag_.Swap(&other->dire_team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  radiant_team_logo_url_.Swap(&other->radiant_team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dire_team_logo_url_.Swap(&other->dire_team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch, pre_game_duration_)
      + sizeof(CMsgDOTAMatch::pre_game_duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatch, custom_game_data_)>(
          reinterpret_cast<char*>(&custom_game_data_),
          reinterpret_cast<char*>(&other->custom_game_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerCard_StatModifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerCard_StatModifier>()._has_bits_);
  static void set_has_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerCard.StatModifier)
}
CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_, &from.stat_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&stat_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerCard.StatModifier)
}

void CMsgPlayerCard_StatModifier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&stat_)) + sizeof(value_));
}

CMsgPlayerCard_StatModifier::~CMsgPlayerCard_StatModifier() {
  // @@protoc_insertion_point(destructor:CMsgPlayerCard.StatModifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerCard_StatModifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerCard_StatModifier::ArenaDtor(void* object) {
  CMsgPlayerCard_StatModifier* _this = reinterpret_cast< CMsgPlayerCard_StatModifier* >(object);
  (void)_this;
}
void CMsgPlayerCard_StatModifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerCard_StatModifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerCard_StatModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerCard.StatModifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&stat_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerCard_StatModifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 stat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stat(&has_bits);
          stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerCard_StatModifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerCard.StatModifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerCard.StatModifier)
  return target;
}

size_t CMsgPlayerCard_StatModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerCard.StatModifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stat());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerCard_StatModifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerCard.StatModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerCard_StatModifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerCard_StatModifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerCard.StatModifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerCard.StatModifier)
    MergeFrom(*source);
  }
}

void CMsgPlayerCard_StatModifier::MergeFrom(const CMsgPlayerCard_StatModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerCard.StatModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_ = from.stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerCard_StatModifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerCard.StatModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard_StatModifier::CopyFrom(const CMsgPlayerCard_StatModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerCard.StatModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard_StatModifier::IsInitialized() const {
  return true;
}

void CMsgPlayerCard_StatModifier::InternalSwap(CMsgPlayerCard_StatModifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerCard_StatModifier, value_)
      + sizeof(CMsgPlayerCard_StatModifier::value_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerCard_StatModifier, stat_)>(
          reinterpret_cast<char*>(&stat_),
          reinterpret_cast<char*>(&other->stat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerCard_StatModifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerCard::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerCard>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPlayerCard::CMsgPlayerCard(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stat_modifier_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerCard)
}
CMsgPlayerCard::CMsgPlayerCard(const CMsgPlayerCard& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stat_modifier_(from.stat_modifier_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerCard)
}

void CMsgPlayerCard::SharedCtor() {
account_id_ = 0u;
}

CMsgPlayerCard::~CMsgPlayerCard() {
  // @@protoc_insertion_point(destructor:CMsgPlayerCard)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerCard::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerCard::ArenaDtor(void* object) {
  CMsgPlayerCard* _this = reinterpret_cast< CMsgPlayerCard* >(object);
  (void)_this;
}
void CMsgPlayerCard::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerCard::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerCard::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stat_modifier_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerCard::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stat_modifier(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerCard::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerCard)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stat_modifier_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stat_modifier(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerCard)
  return target;
}

size_t CMsgPlayerCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerCard)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPlayerCard.StatModifier stat_modifier = 2;
  total_size += 1UL * this->_internal_stat_modifier_size();
  for (const auto& msg : this->stat_modifier_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerCard::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerCard* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerCard>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerCard)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerCard)
    MergeFrom(*source);
  }
}

void CMsgPlayerCard::MergeFrom(const CMsgPlayerCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_modifier_.MergeFrom(from.stat_modifier_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgPlayerCard::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard::CopyFrom(const CMsgPlayerCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard::IsInitialized() const {
  return true;
}

void CMsgPlayerCard::InternalSwap(CMsgPlayerCard* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stat_modifier_.InternalSwap(&other->stat_modifier_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerCard::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAFantasyPlayerStats>()._has_bits_);
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cs(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_roshan_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_teamfight_participation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_runes_grabbed(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_first_blood(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_stuns(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerStats)
}
CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stuns_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(stuns_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stuns_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(stuns_));
}

CMsgDOTAFantasyPlayerStats::~CMsgDOTAFantasyPlayerStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerStats::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerStats* _this = reinterpret_cast< CMsgDOTAFantasyPlayerStats* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_type_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(series_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&kills_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wards_placed_) -
        reinterpret_cast<char*>(&kills_)) + sizeof(wards_placed_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&camps_stacked_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stuns_) -
        reinterpret_cast<char*>(&camps_stacked_)) + sizeof(stuns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool match_completed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_match_completed(&has_bits);
          match_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cs(&has_bits);
          cs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float gpm = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_gpm(&has_bits);
          gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 tower_kills = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tower_kills(&has_bits);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roshan_kills = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_roshan_kills(&has_bits);
          roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float teamfight_participation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_teamfight_participation(&has_bits);
          teamfight_participation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_placed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_wards_placed(&has_bits);
          wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_camps_stacked(&has_bits);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 runes_grabbed = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_runes_grabbed(&has_bits);
          runes_grabbed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_blood = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_first_blood(&has_bits);
          first_blood_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float stuns = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_stuns(&has_bits);
          stuns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional bool match_completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_match_completed(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_league_id(), target);
  }

  // optional uint32 delay = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_delay(), target);
  }

  // optional uint32 series_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_series_id(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_series_type(), target);
  }

  // optional uint32 kills = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_deaths(), target);
  }

  // optional uint32 cs = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cs(), target);
  }

  // optional float gpm = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_gpm(), target);
  }

  // optional uint32 tower_kills = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tower_kills(), target);
  }

  // optional uint32 roshan_kills = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_roshan_kills(), target);
  }

  // optional float teamfight_participation = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_teamfight_participation(), target);
  }

  // optional uint32 wards_placed = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_wards_placed(), target);
  }

  // optional uint32 camps_stacked = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_camps_stacked(), target);
  }

  // optional uint32 runes_grabbed = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_runes_grabbed(), target);
  }

  // optional uint32 first_blood = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_first_blood(), target);
  }

  // optional float stuns = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_stuns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 player_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional bool match_completed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 league_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 delay = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay());
    }

    // optional uint32 series_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 series_type = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 kills = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 cs = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cs());
    }

    // optional float gpm = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 tower_kills = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tower_kills());
    }

    // optional uint32 roshan_kills = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roshan_kills());
    }

    // optional float teamfight_participation = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional uint32 wards_placed = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_placed());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 camps_stacked = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 runes_grabbed = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_runes_grabbed());
    }

    // optional uint32 first_blood = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_blood());
    }

    // optional float stuns = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_completed_ = from.match_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      series_type_ = from.series_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      cs_ = from.cs_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00001000u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00002000u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00004000u) {
      teamfight_participation_ = from.teamfight_participation_;
    }
    if (cached_has_bits & 0x00008000u) {
      wards_placed_ = from.wards_placed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00020000u) {
      runes_grabbed_ = from.runes_grabbed_;
    }
    if (cached_has_bits & 0x00040000u) {
      first_blood_ = from.first_blood_;
    }
    if (cached_has_bits & 0x00080000u) {
      stuns_ = from.stuns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStats::InternalSwap(CMsgDOTAFantasyPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, stuns_)
      + sizeof(CMsgDOTAFantasyPlayerStats::stuns_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAFantasyPlayerMatchStats::_Internal {
 public:
};

CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAFantasyPlayerMatchStats)
}
CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAFantasyPlayerMatchStats)
}

void CMsgDOTAFantasyPlayerMatchStats::SharedCtor() {
}

CMsgDOTAFantasyPlayerMatchStats::~CMsgDOTAFantasyPlayerMatchStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTAFantasyPlayerMatchStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAFantasyPlayerMatchStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAFantasyPlayerMatchStats::ArenaDtor(void* object) {
  CMsgDOTAFantasyPlayerMatchStats* _this = reinterpret_cast< CMsgDOTAFantasyPlayerMatchStats* >(object);
  (void)_this;
}
void CMsgDOTAFantasyPlayerMatchStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAFantasyPlayerMatchStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAFantasyPlayerMatchStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAFantasyPlayerMatchStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAFantasyPlayerMatchStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAFantasyPlayerMatchStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAFantasyPlayerMatchStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAFantasyPlayerMatchStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerMatchStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAFantasyPlayerMatchStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAFantasyPlayerStats matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAFantasyPlayerMatchStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerMatchStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAFantasyPlayerMatchStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAFantasyPlayerMatchStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAFantasyPlayerMatchStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAFantasyPlayerMatchStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAFantasyPlayerMatchStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAFantasyPlayerMatchStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerMatchStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerMatchStats::InternalSwap(CMsgDOTAFantasyPlayerMatchStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAFantasyPlayerMatchStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABotDebugInfo_Bot_Mode::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABotDebugInfo_Bot_Mode>()._has_bits_);
  static void set_has_mode_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_entity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_target_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_target_z(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABotDebugInfo.Bot.Mode)
}
CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mode_id_, &from.mode_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&mode_id_)) + sizeof(target_z_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo.Bot.Mode)
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&mode_id_)) + sizeof(target_z_));
}

CMsgDOTABotDebugInfo_Bot_Mode::~CMsgDOTABotDebugInfo_Bot_Mode() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo.Bot.Mode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTABotDebugInfo_Bot_Mode::ArenaDtor(void* object) {
  CMsgDOTABotDebugInfo_Bot_Mode* _this = reinterpret_cast< CMsgDOTABotDebugInfo_Bot_Mode* >(object);
  (void)_this;
}
void CMsgDOTABotDebugInfo_Bot_Mode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABotDebugInfo_Bot_Mode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABotDebugInfo_Bot_Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABotDebugInfo.Bot.Mode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&mode_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_z_) -
        reinterpret_cast<char*>(&mode_id_)) + sizeof(target_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABotDebugInfo_Bot_Mode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mode_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mode_id(&has_bits);
          mode_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float desire = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_desire(&has_bits);
          desire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_entity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_entity(&has_bits);
          target_entity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_x = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_target_x(&has_bits);
          target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_y = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_target_y(&has_bits);
          target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target_z(&has_bits);
          target_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABotDebugInfo_Bot_Mode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo.Bot.Mode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mode_id(), target);
  }

  // optional float desire = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_desire(), target);
  }

  // optional uint32 target_entity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_entity(), target);
  }

  // optional uint32 target_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_target_x(), target);
  }

  // optional uint32 target_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_target_y(), target);
  }

  // optional uint32 target_z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo.Bot.Mode)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot_Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABotDebugInfo.Bot.Mode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 mode_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mode_id());
    }

    // optional float desire = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 target_entity = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_entity());
    }

    // optional uint32 target_x = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_x());
    }

    // optional uint32 target_y = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_y());
    }

    // optional uint32 target_z = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_z());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABotDebugInfo.Bot.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Mode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABotDebugInfo_Bot_Mode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABotDebugInfo.Bot.Mode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABotDebugInfo.Bot.Mode)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABotDebugInfo.Bot.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mode_id_ = from.mode_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      desire_ = from.desire_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_entity_ = from.target_entity_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_x_ = from.target_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_y_ = from.target_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_z_ = from.target_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABotDebugInfo.Bot.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABotDebugInfo.Bot.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Mode::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot_Mode::InternalSwap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_z_)
      + sizeof(CMsgDOTABotDebugInfo_Bot_Mode::target_z_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, mode_id_)>(
          reinterpret_cast<char*>(&mode_id_),
          reinterpret_cast<char*>(&other->mode_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABotDebugInfo_Bot_Mode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABotDebugInfo_Bot_Action::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABotDebugInfo_Bot_Action>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABotDebugInfo.Bot.Action)
}
CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_action_target()) {
    action_target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action_target(), 
      GetArena());
  }
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo.Bot.Action)
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedCtor() {
action_target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
action_id_ = 0u;
}

CMsgDOTABotDebugInfo_Bot_Action::~CMsgDOTABotDebugInfo_Bot_Action() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo.Bot.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  action_target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABotDebugInfo_Bot_Action::ArenaDtor(void* object) {
  CMsgDOTABotDebugInfo_Bot_Action* _this = reinterpret_cast< CMsgDOTABotDebugInfo_Bot_Action* >(object);
  (void)_this;
}
void CMsgDOTABotDebugInfo_Bot_Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABotDebugInfo_Bot_Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABotDebugInfo_Bot_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABotDebugInfo.Bot.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_target_.ClearNonDefaultToEmpty();
  }
  action_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABotDebugInfo_Bot_Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string action_target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTABotDebugInfo.Bot.Action.action_target");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABotDebugInfo_Bot_Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo.Bot.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional string action_target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_target().data(), static_cast<int>(this->_internal_action_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTABotDebugInfo.Bot.Action.action_target");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo.Bot.Action)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABotDebugInfo.Bot.Action)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string action_target = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action_target());
    }

    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABotDebugInfo.Bot.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABotDebugInfo_Bot_Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABotDebugInfo.Bot.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABotDebugInfo.Bot.Action)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABotDebugInfo.Bot.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action_target(from._internal_action_target());
    }
    if (cached_has_bits & 0x00000002u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABotDebugInfo.Bot.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABotDebugInfo.Bot.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Action::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot_Action::InternalSwap(CMsgDOTABotDebugInfo_Bot_Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_target_.Swap(&other->action_target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(action_id_, other->action_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABotDebugInfo_Bot_Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABotDebugInfo_Bot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABotDebugInfo_Bot>()._has_bits_);
  static void set_has_player_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_power_current(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_power_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_move_target_x(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_move_target_y(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_move_target_z(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_active_mode_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_execution_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgDOTABotDebugInfo_Bot_Action& action(const CMsgDOTABotDebugInfo_Bot* msg);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTABotDebugInfo_Bot_Action&
CMsgDOTABotDebugInfo_Bot::_Internal::action(const CMsgDOTABotDebugInfo_Bot* msg) {
  return *msg->action_;
}
CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  modes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABotDebugInfo.Bot)
}
CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      modes_(from.modes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_action()) {
    action_ = new ::CMsgDOTABotDebugInfo_Bot_Action(*from.action_);
  } else {
    action_ = nullptr;
  }
  ::memcpy(&player_owner_id_, &from.player_owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&player_owner_id_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo.Bot)
}

void CMsgDOTABotDebugInfo_Bot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&action_)) + sizeof(execution_time_));
}

CMsgDOTABotDebugInfo_Bot::~CMsgDOTABotDebugInfo_Bot() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo.Bot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABotDebugInfo_Bot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete action_;
}

void CMsgDOTABotDebugInfo_Bot::ArenaDtor(void* object) {
  CMsgDOTABotDebugInfo_Bot* _this = reinterpret_cast< CMsgDOTABotDebugInfo_Bot* >(object);
  (void)_this;
}
void CMsgDOTABotDebugInfo_Bot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABotDebugInfo_Bot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABotDebugInfo_Bot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABotDebugInfo.Bot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(action_ != nullptr);
    action_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&player_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&move_target_y_) -
        reinterpret_cast<char*>(&player_owner_id_)) + sizeof(move_target_y_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&move_target_z_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execution_time_) -
        reinterpret_cast<char*>(&move_target_z_)) + sizeof(execution_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABotDebugInfo_Bot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 player_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_owner_id(&has_bits);
          player_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 difficulty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_difficulty(&has_bits);
          difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 power_current = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_power_current(&has_bits);
          power_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 power_max = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_power_max(&has_bits);
          power_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 move_target_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_move_target_x(&has_bits);
          move_target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 move_target_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_move_target_y(&has_bits);
          move_target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 move_target_z = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_move_target_z(&has_bits);
          move_target_z_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_mode_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_active_mode_id(&has_bits);
          active_mode_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float execution_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_execution_time(&has_bits);
          execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABotDebugInfo_Bot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo.Bot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_player_owner_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_difficulty(), target);
  }

  // optional uint32 power_current = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_power_current(), target);
  }

  // optional uint32 power_max = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_power_max(), target);
  }

  // optional uint32 move_target_x = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_move_target_x(), target);
  }

  // optional uint32 move_target_y = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_move_target_y(), target);
  }

  // optional uint32 move_target_z = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_move_target_z(), target);
  }

  // optional uint32 active_mode_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_active_mode_id(), target);
  }

  // optional float execution_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_execution_time(), target);
  }

  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_modes(i), target, stream);
  }

  // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo.Bot)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABotDebugInfo.Bot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  total_size += 1UL * this->_internal_modes_size();
  for (const auto& msg : this->modes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDOTABotDebugInfo.Bot.Action action = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_);
    }

    // optional uint32 player_owner_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_owner_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 difficulty = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_difficulty());
    }

    // optional uint32 power_current = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_power_current());
    }

    // optional uint32 power_max = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_power_max());
    }

    // optional uint32 move_target_x = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_move_target_x());
    }

    // optional uint32 move_target_y = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_move_target_y());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 move_target_z = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_move_target_z());
    }

    // optional uint32 active_mode_id = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_mode_id());
    }

    // optional float execution_time = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABotDebugInfo.Bot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABotDebugInfo_Bot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABotDebugInfo.Bot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABotDebugInfo.Bot)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const CMsgDOTABotDebugInfo_Bot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABotDebugInfo.Bot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_action()->::CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      player_owner_id_ = from.player_owner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000010u) {
      power_current_ = from.power_current_;
    }
    if (cached_has_bits & 0x00000020u) {
      power_max_ = from.power_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      move_target_x_ = from.move_target_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      move_target_y_ = from.move_target_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      move_target_z_ = from.move_target_z_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_mode_id_ = from.active_mode_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      execution_time_ = from.execution_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABotDebugInfo.Bot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const CMsgDOTABotDebugInfo_Bot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABotDebugInfo.Bot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot::InternalSwap(CMsgDOTABotDebugInfo_Bot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modes_.InternalSwap(&other->modes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, execution_time_)
      + sizeof(CMsgDOTABotDebugInfo_Bot::execution_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, action_)>(
          reinterpret_cast<char*>(&action_),
          reinterpret_cast<char*>(&other->action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABotDebugInfo_Bot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABotDebugInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABotDebugInfo>()._has_bits_);
  static void set_has_desire_push_lane_top(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_desire_push_lane_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desire_push_lane_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_desire_defend_lane_top(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_desire_defend_lane_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_desire_defend_lane_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_desire_farm_lane_top(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_desire_farm_lane_mid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_desire_farm_lane_bot(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_desire_farm_roshan(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_execution_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bots_(arena),
  rune_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABotDebugInfo)
}
CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bots_(from.bots_),
      rune_status_(from.rune_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&desire_push_lane_top_, &from.desire_push_lane_top_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&desire_push_lane_top_)) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABotDebugInfo)
}

void CMsgDOTABotDebugInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&desire_push_lane_top_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&desire_push_lane_top_)) + sizeof(execution_time_));
}

CMsgDOTABotDebugInfo::~CMsgDOTABotDebugInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTABotDebugInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABotDebugInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTABotDebugInfo::ArenaDtor(void* object) {
  CMsgDOTABotDebugInfo* _this = reinterpret_cast< CMsgDOTABotDebugInfo* >(object);
  (void)_this;
}
void CMsgDOTABotDebugInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABotDebugInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABotDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABotDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bots_.Clear();
  rune_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&desire_push_lane_top_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&desire_farm_lane_mid_) -
        reinterpret_cast<char*>(&desire_push_lane_top_)) + sizeof(desire_farm_lane_mid_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&desire_farm_lane_bot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&execution_time_) -
        reinterpret_cast<char*>(&desire_farm_lane_bot_)) + sizeof(execution_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABotDebugInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float desire_push_lane_top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_desire_push_lane_top(&has_bits);
          desire_push_lane_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_push_lane_mid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_desire_push_lane_mid(&has_bits);
          desire_push_lane_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_push_lane_bot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_desire_push_lane_bot(&has_bits);
          desire_push_lane_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_defend_lane_top = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_desire_defend_lane_top(&has_bits);
          desire_defend_lane_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_defend_lane_mid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_desire_defend_lane_mid(&has_bits);
          desire_defend_lane_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_defend_lane_bot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_desire_defend_lane_bot(&has_bits);
          desire_defend_lane_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_farm_lane_top = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_desire_farm_lane_top(&has_bits);
          desire_farm_lane_top_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_farm_lane_mid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_desire_farm_lane_mid(&has_bits);
          desire_farm_lane_mid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_farm_lane_bot = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_desire_farm_lane_bot(&has_bits);
          desire_farm_lane_bot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float desire_farm_roshan = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_desire_farm_roshan(&has_bits);
          desire_farm_roshan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float execution_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_execution_time(&has_bits);
          execution_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rune_status = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rune_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rune_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABotDebugInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABotDebugInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bots(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float desire_push_lane_top = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_desire_push_lane_top(), target);
  }

  // optional float desire_push_lane_mid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desire_push_lane_mid(), target);
  }

  // optional float desire_push_lane_bot = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_desire_push_lane_bot(), target);
  }

  // optional float desire_defend_lane_top = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_desire_defend_lane_top(), target);
  }

  // optional float desire_defend_lane_mid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_desire_defend_lane_mid(), target);
  }

  // optional float desire_defend_lane_bot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_desire_defend_lane_bot(), target);
  }

  // optional float desire_farm_lane_top = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_desire_farm_lane_top(), target);
  }

  // optional float desire_farm_lane_mid = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_desire_farm_lane_mid(), target);
  }

  // optional float desire_farm_lane_bot = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_desire_farm_lane_bot(), target);
  }

  // optional float desire_farm_roshan = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_desire_farm_roshan(), target);
  }

  // optional float execution_time = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_execution_time(), target);
  }

  // repeated uint32 rune_status = 13;
  for (int i = 0, n = this->_internal_rune_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_rune_status(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABotDebugInfo)
  return target;
}

size_t CMsgDOTABotDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABotDebugInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTABotDebugInfo.Bot bots = 1;
  total_size += 1UL * this->_internal_bots_size();
  for (const auto& msg : this->bots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 rune_status = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rune_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rune_status_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float desire_push_lane_top = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_mid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_bot = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_top = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_mid = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_bot = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_top = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_mid = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float desire_farm_lane_bot = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_roshan = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float execution_time = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABotDebugInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABotDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABotDebugInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABotDebugInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABotDebugInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo::MergeFrom(const CMsgDOTABotDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABotDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bots_.MergeFrom(from.bots_);
  rune_status_.MergeFrom(from.rune_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      desire_push_lane_top_ = from.desire_push_lane_top_;
    }
    if (cached_has_bits & 0x00000002u) {
      desire_push_lane_mid_ = from.desire_push_lane_mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      desire_push_lane_bot_ = from.desire_push_lane_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      desire_defend_lane_top_ = from.desire_defend_lane_top_;
    }
    if (cached_has_bits & 0x00000010u) {
      desire_defend_lane_mid_ = from.desire_defend_lane_mid_;
    }
    if (cached_has_bits & 0x00000020u) {
      desire_defend_lane_bot_ = from.desire_defend_lane_bot_;
    }
    if (cached_has_bits & 0x00000040u) {
      desire_farm_lane_top_ = from.desire_farm_lane_top_;
    }
    if (cached_has_bits & 0x00000080u) {
      desire_farm_lane_mid_ = from.desire_farm_lane_mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      desire_farm_lane_bot_ = from.desire_farm_lane_bot_;
    }
    if (cached_has_bits & 0x00000200u) {
      desire_farm_roshan_ = from.desire_farm_roshan_;
    }
    if (cached_has_bits & 0x00000400u) {
      execution_time_ = from.execution_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABotDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo::CopyFrom(const CMsgDOTABotDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABotDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo::InternalSwap(CMsgDOTABotDebugInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bots_.InternalSwap(&other->bots_);
  rune_status_.InternalSwap(&other->rune_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTABotDebugInfo, execution_time_)
      + sizeof(CMsgDOTABotDebugInfo::execution_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_top_)>(
          reinterpret_cast<char*>(&desire_push_lane_top_),
          reinterpret_cast<char*>(&other->desire_push_lane_top_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABotDebugInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSuccessfulHero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSuccessfulHero>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_win_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_longest_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgSuccessfulHero::CMsgSuccessfulHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSuccessfulHero)
}
CMsgSuccessfulHero::CMsgSuccessfulHero(const CMsgSuccessfulHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&longest_streak_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
  // @@protoc_insertion_point(copy_constructor:CMsgSuccessfulHero)
}

void CMsgSuccessfulHero::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longest_streak_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
}

CMsgSuccessfulHero::~CMsgSuccessfulHero() {
  // @@protoc_insertion_point(destructor:CMsgSuccessfulHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSuccessfulHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSuccessfulHero::ArenaDtor(void* object) {
  CMsgSuccessfulHero* _this = reinterpret_cast< CMsgSuccessfulHero* >(object);
  (void)_this;
}
void CMsgSuccessfulHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSuccessfulHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSuccessfulHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSuccessfulHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longest_streak_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(longest_streak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSuccessfulHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float win_percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_win_percent(&has_bits);
          win_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 longest_streak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_longest_streak(&has_bits);
          longest_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSuccessfulHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSuccessfulHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional float win_percent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_win_percent(), target);
  }

  // optional uint32 longest_streak = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_longest_streak(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSuccessfulHero)
  return target;
}

size_t CMsgSuccessfulHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSuccessfulHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional float win_percent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional uint32 longest_streak = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_longest_streak());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSuccessfulHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSuccessfulHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSuccessfulHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSuccessfulHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSuccessfulHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSuccessfulHero)
    MergeFrom(*source);
  }
}

void CMsgSuccessfulHero::MergeFrom(const CMsgSuccessfulHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSuccessfulHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_percent_ = from.win_percent_;
    }
    if (cached_has_bits & 0x00000004u) {
      longest_streak_ = from.longest_streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSuccessfulHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSuccessfulHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSuccessfulHero::CopyFrom(const CMsgSuccessfulHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSuccessfulHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSuccessfulHero::IsInitialized() const {
  return true;
}

void CMsgSuccessfulHero::InternalSwap(CMsgSuccessfulHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSuccessfulHero, longest_streak_)
      + sizeof(CMsgSuccessfulHero::longest_streak_)
      - PROTOBUF_FIELD_OFFSET(CMsgSuccessfulHero, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSuccessfulHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRecentMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRecentMatchInfo>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgRecentMatchInfo::CMsgRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRecentMatchInfo)
}
CMsgRecentMatchInfo::CMsgRecentMatchInfo(const CMsgRecentMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgRecentMatchInfo)
}

void CMsgRecentMatchInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(timestamp_));
}

CMsgRecentMatchInfo::~CMsgRecentMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgRecentMatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRecentMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRecentMatchInfo::ArenaDtor(void* object) {
  CMsgRecentMatchInfo* _this = reinterpret_cast< CMsgRecentMatchInfo* >(object);
  (void)_this;
}
void CMsgRecentMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRecentMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRecentMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRecentMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_outcome_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(match_outcome_));
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRecentMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRecentMatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRecentMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_game_mode(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // optional uint32 duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_duration(), target);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_player_slot(), target);
  }

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_match_outcome(), target);
  }

  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRecentMatchInfo)
  return target;
}

size_t CMsgRecentMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRecentMatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 duration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional uint32 player_slot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

  }
  // optional uint32 timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRecentMatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRecentMatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRecentMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRecentMatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRecentMatchInfo)
    MergeFrom(*source);
  }
}

void CMsgRecentMatchInfo::MergeFrom(const CMsgRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_outcome_ = from.match_outcome_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void CMsgRecentMatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecentMatchInfo::CopyFrom(const CMsgRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecentMatchInfo::IsInitialized() const {
  return true;
}

void CMsgRecentMatchInfo::InternalSwap(CMsgRecentMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRecentMatchInfo, timestamp_)
      + sizeof(CMsgRecentMatchInfo::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgRecentMatchInfo, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRecentMatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchTips_SingleTip::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchTips_SingleTip>()._has_bits_);
  static void set_has_source_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tip_amount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchTips.SingleTip)
}
CMsgMatchTips_SingleTip::CMsgMatchTips_SingleTip(const CMsgMatchTips_SingleTip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&source_account_id_, &from.source_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgMatchTips.SingleTip)
}

void CMsgMatchTips_SingleTip::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
}

CMsgMatchTips_SingleTip::~CMsgMatchTips_SingleTip() {
  // @@protoc_insertion_point(destructor:CMsgMatchTips.SingleTip)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchTips_SingleTip::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchTips_SingleTip::ArenaDtor(void* object) {
  CMsgMatchTips_SingleTip* _this = reinterpret_cast< CMsgMatchTips_SingleTip* >(object);
  (void)_this;
}
void CMsgMatchTips_SingleTip::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchTips_SingleTip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchTips_SingleTip::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchTips.SingleTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&source_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&event_id_) -
        reinterpret_cast<char*>(&source_account_id_)) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchTips_SingleTip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 source_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source_account_id(&has_bits);
          source_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_account_id(&has_bits);
          target_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tip_amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tip_amount(&has_bits);
          tip_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchTips_SingleTip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchTips.SingleTip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source_account_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_account_id(), target);
  }

  // optional uint32 tip_amount = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tip_amount(), target);
  }

  // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchTips.SingleTip)
  return target;
}

size_t CMsgMatchTips_SingleTip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchTips.SingleTip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 source_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_account_id());
    }

    // optional uint32 target_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_account_id());
    }

    // optional uint32 tip_amount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tip_amount());
    }

    // optional .EEvent event_id = 4 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchTips_SingleTip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchTips_SingleTip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchTips_SingleTip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchTips.SingleTip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchTips.SingleTip)
    MergeFrom(*source);
  }
}

void CMsgMatchTips_SingleTip::MergeFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchTips.SingleTip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      source_account_id_ = from.source_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tip_amount_ = from.tip_amount_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgMatchTips_SingleTip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchTips_SingleTip::CopyFrom(const CMsgMatchTips_SingleTip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchTips.SingleTip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips_SingleTip::IsInitialized() const {
  return true;
}

void CMsgMatchTips_SingleTip::InternalSwap(CMsgMatchTips_SingleTip* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgMatchTips_SingleTip, event_id_)
      + sizeof(CMsgMatchTips_SingleTip::event_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgMatchTips_SingleTip, source_account_id_)>(
          reinterpret_cast<char*>(&source_account_id_),
          reinterpret_cast<char*>(&other->source_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchTips_SingleTip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchTips::_Internal {
 public:
};

CMsgMatchTips::CMsgMatchTips(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchTips)
}
CMsgMatchTips::CMsgMatchTips(const CMsgMatchTips& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tips_(from.tips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchTips)
}

void CMsgMatchTips::SharedCtor() {
}

CMsgMatchTips::~CMsgMatchTips() {
  // @@protoc_insertion_point(destructor:CMsgMatchTips)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchTips::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchTips::ArenaDtor(void* object) {
  CMsgMatchTips* _this = reinterpret_cast< CMsgMatchTips* >(object);
  (void)_this;
}
void CMsgMatchTips::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchTips::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchTips::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchTips)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchTips::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMatchTips.SingleTip tips = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchTips::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchTips)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchTips.SingleTip tips = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchTips)
  return target;
}

size_t CMsgMatchTips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchTips)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchTips.SingleTip tips = 2;
  total_size += 1UL * this->_internal_tips_size();
  for (const auto& msg : this->tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchTips::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchTips* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchTips>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchTips)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchTips)
    MergeFrom(*source);
  }
}

void CMsgMatchTips::MergeFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchTips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tips_.MergeFrom(from.tips_);
}

void CMsgMatchTips::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchTips::CopyFrom(const CMsgMatchTips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchTips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchTips::IsInitialized() const {
  return true;
}

void CMsgMatchTips::InternalSwap(CMsgMatchTips* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tips_.InternalSwap(&other->tips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchTips::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatchMinimal_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatchMinimal_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pro_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatchMinimal.Player)
}
CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pro_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pro_name()) {
    pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pro_name(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatchMinimal.Player)
}

void CMsgDOTAMatchMinimal_Player::SharedCtor() {
pro_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(level_));
}

CMsgDOTAMatchMinimal_Player::~CMsgDOTAMatchMinimal_Player() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatchMinimal.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatchMinimal_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pro_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatchMinimal_Player::ArenaDtor(void* object) {
  CMsgDOTAMatchMinimal_Player* _this = reinterpret_cast< CMsgDOTAMatchMinimal_Player* >(object);
  (void)_this;
}
void CMsgDOTAMatchMinimal_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatchMinimal_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatchMinimal_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatchMinimal.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pro_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatchMinimal_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pro_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pro_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatchMinimal.Player.pro_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatchMinimal_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatchMinimal.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // repeated uint32 items = 6;
  for (int i = 0, n = this->_internal_items_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_items(i), target);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_player_slot(), target);
  }

  // optional string pro_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pro_name().data(), static_cast<int>(this->_internal_pro_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatchMinimal.Player.pro_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pro_name(), target);
  }

  // optional uint32 level = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatchMinimal.Player)
  return target;
}

size_t CMsgDOTAMatchMinimal_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatchMinimal.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 items = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_items_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pro_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pro_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 player_slot = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 level = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatchMinimal.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatchMinimal_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatchMinimal.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatchMinimal.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const CMsgDOTAMatchMinimal_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatchMinimal.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pro_name(from._internal_pro_name());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatchMinimal.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const CMsgDOTAMatchMinimal_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatchMinimal.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Player::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal_Player::InternalSwap(CMsgDOTAMatchMinimal_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_.InternalSwap(&other->items_);
  pro_name_.Swap(&other->pro_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, level_)
      + sizeof(CMsgDOTAMatchMinimal_Player::level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatchMinimal_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatchMinimal_Tourney::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatchMinimal_Tourney>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_series_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_weekend_tourney_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_weekend_tourney_season_trophy_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_weekend_tourney_division(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_weekend_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_radiant_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radiant_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radiant_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_radiant_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dire_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_dire_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dire_team_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dire_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatchMinimal.Tourney)
}
CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radiant_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radiant_team_name()) {
    radiant_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radiant_team_name(), 
      GetArena());
  }
  dire_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dire_team_name()) {
    dire_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dire_team_name(), 
      GetArena());
  }
  radiant_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radiant_team_logo_url()) {
    radiant_team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_radiant_team_logo_url(), 
      GetArena());
  }
  dire_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dire_team_logo_url()) {
    dire_team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dire_team_logo_url(), 
      GetArena());
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(weekend_tourney_skill_level_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatchMinimal.Tourney)
}

void CMsgDOTAMatchMinimal_Tourney::SharedCtor() {
radiant_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dire_team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
radiant_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dire_team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(weekend_tourney_skill_level_));
}

CMsgDOTAMatchMinimal_Tourney::~CMsgDOTAMatchMinimal_Tourney() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatchMinimal.Tourney)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatchMinimal_Tourney::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radiant_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radiant_team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dire_team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatchMinimal_Tourney::ArenaDtor(void* object) {
  CMsgDOTAMatchMinimal_Tourney* _this = reinterpret_cast< CMsgDOTAMatchMinimal_Tourney* >(object);
  (void)_this;
}
void CMsgDOTAMatchMinimal_Tourney::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatchMinimal_Tourney::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatchMinimal_Tourney::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatchMinimal.Tourney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      radiant_team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      radiant_team_logo_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      dire_team_logo_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(dire_team_id_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&series_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
        reinterpret_cast<char*>(&series_type_)) + sizeof(weekend_tourney_skill_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatchMinimal_Tourney::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_radiant_team_id(&has_bits);
          radiant_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radiant_team_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_radiant_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 radiant_team_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_radiant_team_logo(&has_bits);
          radiant_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_team_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dire_team_id(&has_bits);
          dire_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dire_team_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dire_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatchMinimal.Tourney.dire_team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 dire_team_logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_dire_team_logo(&has_bits);
          dire_team_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_game = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_series_game(&has_bits);
          series_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_tournament_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_weekend_tourney_tournament_id(&has_bits);
          weekend_tourney_tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_season_trophy_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_weekend_tourney_season_trophy_id(&has_bits);
          weekend_tourney_season_trophy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_division = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_weekend_tourney_division(&has_bits);
          weekend_tourney_division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_skill_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_weekend_tourney_skill_level(&has_bits);
          weekend_tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radiant_team_logo_url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_radiant_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string dire_team_logo_url = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_dire_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatchMinimal_Tourney::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatchMinimal.Tourney)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 radiant_team_id = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_radiant_team_id(), target);
  }

  // optional string radiant_team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radiant_team_name().data(), static_cast<int>(this->_internal_radiant_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_radiant_team_name(), target);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_radiant_team_logo(), target);
  }

  // optional uint32 dire_team_id = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dire_team_id(), target);
  }

  // optional string dire_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dire_team_name().data(), static_cast<int>(this->_internal_dire_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatchMinimal.Tourney.dire_team_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dire_team_name(), target);
  }

  // optional fixed64 dire_team_logo = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_dire_team_logo(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_series_type(), target);
  }

  // optional uint32 series_game = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_series_game(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_weekend_tourney_season_trophy_id(), target);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_weekend_tourney_skill_level(), target);
  }

  // optional string radiant_team_logo_url = 14;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radiant_team_logo_url().data(), static_cast<int>(this->_internal_radiant_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatchMinimal.Tourney.radiant_team_logo_url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_radiant_team_logo_url(), target);
  }

  // optional string dire_team_logo_url = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dire_team_logo_url().data(), static_cast<int>(this->_internal_dire_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAMatchMinimal.Tourney.dire_team_logo_url");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_dire_team_logo_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatchMinimal.Tourney)
  return target;
}

size_t CMsgDOTAMatchMinimal_Tourney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatchMinimal.Tourney)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radiant_team_name());
    }

    // optional string dire_team_name = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dire_team_name());
    }

    // optional string radiant_team_logo_url = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radiant_team_logo_url());
    }

    // optional string dire_team_logo_url = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_dire_team_logo_url());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 radiant_team_id = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_team_id());
    }

    // optional fixed64 radiant_team_logo = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional uint32 dire_team_id = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_team_id());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional uint32 series_type = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

    // optional fixed64 dire_team_logo = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 series_game = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_game());
    }

    // optional uint32 weekend_tourney_tournament_id = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_tournament_id());
    }

    // optional uint32 weekend_tourney_season_trophy_id = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_season_trophy_id());
    }

    // optional uint32 weekend_tourney_division = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_skill_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatchMinimal.Tourney)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Tourney* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatchMinimal_Tourney>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatchMinimal.Tourney)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatchMinimal.Tourney)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatchMinimal.Tourney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radiant_team_name(from._internal_radiant_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_dire_team_name(from._internal_dire_team_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_radiant_team_logo_url(from._internal_radiant_team_logo_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_dire_team_logo_url(from._internal_dire_team_logo_url());
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_team_logo_ = from.radiant_team_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_id_ = from.dire_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      dire_team_logo_ = from.dire_team_logo_;
    }
    if (cached_has_bits & 0x00000400u) {
      series_game_ = from.series_game_;
    }
    if (cached_has_bits & 0x00000800u) {
      weekend_tourney_tournament_id_ = from.weekend_tourney_tournament_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      weekend_tourney_season_trophy_id_ = from.weekend_tourney_season_trophy_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      weekend_tourney_division_ = from.weekend_tourney_division_;
    }
    if (cached_has_bits & 0x00004000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatchMinimal.Tourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatchMinimal.Tourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Tourney::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal_Tourney::InternalSwap(CMsgDOTAMatchMinimal_Tourney* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radiant_team_name_.Swap(&other->radiant_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dire_team_name_.Swap(&other->dire_team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  radiant_team_logo_url_.Swap(&other->radiant_team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dire_team_logo_url_.Swap(&other->dire_team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_skill_level_)
      + sizeof(CMsgDOTAMatchMinimal_Tourney::weekend_tourney_skill_level_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatchMinimal_Tourney::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMatchMinimal::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAMatchMinimal>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgDOTAMatchMinimal_Tourney& tourney(const CMsgDOTAMatchMinimal* msg);
  static void set_has_tourney(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_outcome(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_radiant_score(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dire_score(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgDOTAMatchMinimal_Tourney&
CMsgDOTAMatchMinimal::_Internal::tourney(const CMsgDOTAMatchMinimal* msg) {
  return *msg->tourney_;
}
CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMatchMinimal)
}
CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tourney()) {
    tourney_ = new ::CMsgDOTAMatchMinimal_Tourney(*from.tourney_);
  } else {
    tourney_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_score_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(dire_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMatchMinimal)
}

void CMsgDOTAMatchMinimal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tourney_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dire_score_) -
    reinterpret_cast<char*>(&tourney_)) + sizeof(dire_score_));
}

CMsgDOTAMatchMinimal::~CMsgDOTAMatchMinimal() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMatchMinimal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMatchMinimal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tourney_;
}

void CMsgDOTAMatchMinimal::ArenaDtor(void* object) {
  CMsgDOTAMatchMinimal* _this = reinterpret_cast< CMsgDOTAMatchMinimal* >(object);
  (void)_this;
}
void CMsgDOTAMatchMinimal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMatchMinimal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMatchMinimal::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMatchMinimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tourney_ != nullptr);
    tourney_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_score_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(dire_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMatchMinimal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::DOTA_GameMode_IsValid(val))) {
            _internal_set_game_mode(static_cast<::DOTA_GameMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatchMinimal.Player players = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tourney(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EMatchOutcome_IsValid(val))) {
            _internal_set_match_outcome(static_cast<::EMatchOutcome>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_score = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_radiant_score(&has_bits);
          radiant_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_score = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_dire_score(&has_bits);
          dire_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMatchMinimal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMatchMinimal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional fixed32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_start_time(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_game_mode(), target);
  }

  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_players(i), target, stream);
  }

  // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tourney(this), target, stream);
  }

  // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_match_outcome(), target);
  }

  // optional uint32 radiant_score = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_radiant_score(), target);
  }

  // optional uint32 dire_score = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dire_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMatchMinimal)
  return target;
}

size_t CMsgDOTAMatchMinimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMatchMinimal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal.Player players = 6;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgDOTAMatchMinimal.Tourney tourney = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tourney_);
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional fixed32 start_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_game_mode());
    }

    // optional .EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_match_outcome());
    }

    // optional uint32 radiant_score = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_score());
    }

    // optional uint32 dire_score = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMatchMinimal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMatchMinimal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMatchMinimal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMatchMinimal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMatchMinimal)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal::MergeFrom(const CMsgDOTAMatchMinimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMatchMinimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tourney()->::CMsgDOTAMatchMinimal_Tourney::MergeFrom(from._internal_tourney());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00000040u) {
      radiant_score_ = from.radiant_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_score_ = from.dire_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMatchMinimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal::CopyFrom(const CMsgDOTAMatchMinimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMatchMinimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal::InternalSwap(CMsgDOTAMatchMinimal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAMatchMinimal, dire_score_)
      + sizeof(CMsgDOTAMatchMinimal::dire_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAMatchMinimal, tourney_)>(
          reinterpret_cast<char*>(&tourney_),
          reinterpret_cast<char*>(&other->tourney_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMatchMinimal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgConsumableUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgConsumableUsage>()._has_bits_);
  static void set_has_item_def(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgConsumableUsage::CMsgConsumableUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgConsumableUsage)
}
CMsgConsumableUsage::CMsgConsumableUsage(const CMsgConsumableUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_change_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(quantity_change_));
  // @@protoc_insertion_point(copy_constructor:CMsgConsumableUsage)
}

void CMsgConsumableUsage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_def_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_change_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(quantity_change_));
}

CMsgConsumableUsage::~CMsgConsumableUsage() {
  // @@protoc_insertion_point(destructor:CMsgConsumableUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgConsumableUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgConsumableUsage::ArenaDtor(void* object) {
  CMsgConsumableUsage* _this = reinterpret_cast< CMsgConsumableUsage* >(object);
  (void)_this;
}
void CMsgConsumableUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgConsumableUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgConsumableUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgConsumableUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_change_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(quantity_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgConsumableUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_def(&has_bits);
          item_def_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 quantity_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity_change(&has_bits);
          quantity_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgConsumableUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgConsumableUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_def(), target);
  }

  // optional int32 quantity_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_quantity_change(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgConsumableUsage)
  return target;
}

size_t CMsgConsumableUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgConsumableUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def());
    }

    // optional int32 quantity_change = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quantity_change());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConsumableUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConsumableUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgConsumableUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgConsumableUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgConsumableUsage)
    MergeFrom(*source);
  }
}

void CMsgConsumableUsage::MergeFrom(const CMsgConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_change_ = from.quantity_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgConsumableUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConsumableUsage::CopyFrom(const CMsgConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConsumableUsage::IsInitialized() const {
  return true;
}

void CMsgConsumableUsage::InternalSwap(CMsgConsumableUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgConsumableUsage, quantity_change_)
      + sizeof(CMsgConsumableUsage::quantity_change_)
      - PROTOBUF_FIELD_OFFSET(CMsgConsumableUsage, item_def_)>(
          reinterpret_cast<char*>(&item_def_),
          reinterpret_cast<char*>(&other->item_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgConsumableUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchConsumableUsage_PlayerUsage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchConsumableUsage_PlayerUsage>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgMatchConsumableUsage_PlayerUsage::CMsgMatchConsumableUsage_PlayerUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  consumables_used_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchConsumableUsage.PlayerUsage)
}
CMsgMatchConsumableUsage_PlayerUsage::CMsgMatchConsumableUsage_PlayerUsage(const CMsgMatchConsumableUsage_PlayerUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      consumables_used_(from.consumables_used_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchConsumableUsage.PlayerUsage)
}

void CMsgMatchConsumableUsage_PlayerUsage::SharedCtor() {
account_id_ = 0u;
}

CMsgMatchConsumableUsage_PlayerUsage::~CMsgMatchConsumableUsage_PlayerUsage() {
  // @@protoc_insertion_point(destructor:CMsgMatchConsumableUsage.PlayerUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchConsumableUsage_PlayerUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchConsumableUsage_PlayerUsage::ArenaDtor(void* object) {
  CMsgMatchConsumableUsage_PlayerUsage* _this = reinterpret_cast< CMsgMatchConsumableUsage_PlayerUsage* >(object);
  (void)_this;
}
void CMsgMatchConsumableUsage_PlayerUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchConsumableUsage_PlayerUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchConsumableUsage_PlayerUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchConsumableUsage.PlayerUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumables_used_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchConsumableUsage_PlayerUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgConsumableUsage consumables_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consumables_used(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchConsumableUsage_PlayerUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchConsumableUsage.PlayerUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgConsumableUsage consumables_used = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_consumables_used_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_consumables_used(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchConsumableUsage.PlayerUsage)
  return target;
}

size_t CMsgMatchConsumableUsage_PlayerUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchConsumableUsage.PlayerUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgConsumableUsage consumables_used = 2;
  total_size += 1UL * this->_internal_consumables_used_size();
  for (const auto& msg : this->consumables_used_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchConsumableUsage_PlayerUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchConsumableUsage.PlayerUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchConsumableUsage_PlayerUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchConsumableUsage_PlayerUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchConsumableUsage.PlayerUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchConsumableUsage.PlayerUsage)
    MergeFrom(*source);
  }
}

void CMsgMatchConsumableUsage_PlayerUsage::MergeFrom(const CMsgMatchConsumableUsage_PlayerUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchConsumableUsage.PlayerUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumables_used_.MergeFrom(from.consumables_used_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgMatchConsumableUsage_PlayerUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchConsumableUsage.PlayerUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchConsumableUsage_PlayerUsage::CopyFrom(const CMsgMatchConsumableUsage_PlayerUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchConsumableUsage.PlayerUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchConsumableUsage_PlayerUsage::IsInitialized() const {
  return true;
}

void CMsgMatchConsumableUsage_PlayerUsage::InternalSwap(CMsgMatchConsumableUsage_PlayerUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  consumables_used_.InternalSwap(&other->consumables_used_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchConsumableUsage_PlayerUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchConsumableUsage::_Internal {
 public:
};

CMsgMatchConsumableUsage::CMsgMatchConsumableUsage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_consumables_used_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchConsumableUsage)
}
CMsgMatchConsumableUsage::CMsgMatchConsumableUsage(const CMsgMatchConsumableUsage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_consumables_used_(from.player_consumables_used_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchConsumableUsage)
}

void CMsgMatchConsumableUsage::SharedCtor() {
}

CMsgMatchConsumableUsage::~CMsgMatchConsumableUsage() {
  // @@protoc_insertion_point(destructor:CMsgMatchConsumableUsage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchConsumableUsage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchConsumableUsage::ArenaDtor(void* object) {
  CMsgMatchConsumableUsage* _this = reinterpret_cast< CMsgMatchConsumableUsage* >(object);
  (void)_this;
}
void CMsgMatchConsumableUsage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchConsumableUsage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchConsumableUsage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchConsumableUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_consumables_used_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchConsumableUsage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_consumables_used(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchConsumableUsage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchConsumableUsage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_consumables_used_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_consumables_used(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchConsumableUsage)
  return target;
}

size_t CMsgMatchConsumableUsage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchConsumableUsage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchConsumableUsage.PlayerUsage player_consumables_used = 1;
  total_size += 1UL * this->_internal_player_consumables_used_size();
  for (const auto& msg : this->player_consumables_used_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchConsumableUsage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchConsumableUsage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchConsumableUsage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchConsumableUsage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchConsumableUsage)
    MergeFrom(*source);
  }
}

void CMsgMatchConsumableUsage::MergeFrom(const CMsgMatchConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchConsumableUsage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_consumables_used_.MergeFrom(from.player_consumables_used_);
}

void CMsgMatchConsumableUsage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchConsumableUsage::CopyFrom(const CMsgMatchConsumableUsage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchConsumableUsage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchConsumableUsage::IsInitialized() const {
  return true;
}

void CMsgMatchConsumableUsage::InternalSwap(CMsgMatchConsumableUsage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_consumables_used_.InternalSwap(&other->player_consumables_used_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchConsumableUsage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchEventActionGrants_PlayerGrants::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgMatchEventActionGrants_PlayerGrants>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CMsgMatchEventActionGrants_PlayerGrants::clear_actions_granted() {
  actions_granted_.Clear();
}
CMsgMatchEventActionGrants_PlayerGrants::CMsgMatchEventActionGrants_PlayerGrants(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_granted_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchEventActionGrants.PlayerGrants)
}
CMsgMatchEventActionGrants_PlayerGrants::CMsgMatchEventActionGrants_PlayerGrants(const CMsgMatchEventActionGrants_PlayerGrants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      actions_granted_(from.actions_granted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgMatchEventActionGrants.PlayerGrants)
}

void CMsgMatchEventActionGrants_PlayerGrants::SharedCtor() {
account_id_ = 0u;
}

CMsgMatchEventActionGrants_PlayerGrants::~CMsgMatchEventActionGrants_PlayerGrants() {
  // @@protoc_insertion_point(destructor:CMsgMatchEventActionGrants.PlayerGrants)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchEventActionGrants_PlayerGrants::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchEventActionGrants_PlayerGrants::ArenaDtor(void* object) {
  CMsgMatchEventActionGrants_PlayerGrants* _this = reinterpret_cast< CMsgMatchEventActionGrants_PlayerGrants* >(object);
  (void)_this;
}
void CMsgMatchEventActionGrants_PlayerGrants::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchEventActionGrants_PlayerGrants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchEventActionGrants_PlayerGrants::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchEventActionGrants.PlayerGrants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_granted_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchEventActionGrants_PlayerGrants::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPendingEventAward actions_granted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchEventActionGrants_PlayerGrants::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchEventActionGrants.PlayerGrants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated .CMsgPendingEventAward actions_granted = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_granted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_actions_granted(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchEventActionGrants.PlayerGrants)
  return target;
}

size_t CMsgMatchEventActionGrants_PlayerGrants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchEventActionGrants.PlayerGrants)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPendingEventAward actions_granted = 3;
  total_size += 1UL * this->_internal_actions_granted_size();
  for (const auto& msg : this->actions_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchEventActionGrants_PlayerGrants::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchEventActionGrants.PlayerGrants)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchEventActionGrants_PlayerGrants* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchEventActionGrants_PlayerGrants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchEventActionGrants.PlayerGrants)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchEventActionGrants.PlayerGrants)
    MergeFrom(*source);
  }
}

void CMsgMatchEventActionGrants_PlayerGrants::MergeFrom(const CMsgMatchEventActionGrants_PlayerGrants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchEventActionGrants.PlayerGrants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_granted_.MergeFrom(from.actions_granted_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgMatchEventActionGrants_PlayerGrants::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchEventActionGrants.PlayerGrants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchEventActionGrants_PlayerGrants::CopyFrom(const CMsgMatchEventActionGrants_PlayerGrants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchEventActionGrants.PlayerGrants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchEventActionGrants_PlayerGrants::IsInitialized() const {
  return true;
}

void CMsgMatchEventActionGrants_PlayerGrants::InternalSwap(CMsgMatchEventActionGrants_PlayerGrants* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  actions_granted_.InternalSwap(&other->actions_granted_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchEventActionGrants_PlayerGrants::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgMatchEventActionGrants::_Internal {
 public:
};

CMsgMatchEventActionGrants::CMsgMatchEventActionGrants(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_grants_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgMatchEventActionGrants)
}
CMsgMatchEventActionGrants::CMsgMatchEventActionGrants(const CMsgMatchEventActionGrants& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_grants_(from.player_grants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgMatchEventActionGrants)
}

void CMsgMatchEventActionGrants::SharedCtor() {
}

CMsgMatchEventActionGrants::~CMsgMatchEventActionGrants() {
  // @@protoc_insertion_point(destructor:CMsgMatchEventActionGrants)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgMatchEventActionGrants::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgMatchEventActionGrants::ArenaDtor(void* object) {
  CMsgMatchEventActionGrants* _this = reinterpret_cast< CMsgMatchEventActionGrants* >(object);
  (void)_this;
}
void CMsgMatchEventActionGrants::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgMatchEventActionGrants::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgMatchEventActionGrants::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgMatchEventActionGrants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_grants_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgMatchEventActionGrants::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgMatchEventActionGrants.PlayerGrants player_grants = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_grants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgMatchEventActionGrants::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgMatchEventActionGrants)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgMatchEventActionGrants.PlayerGrants player_grants = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_grants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_player_grants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgMatchEventActionGrants)
  return target;
}

size_t CMsgMatchEventActionGrants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgMatchEventActionGrants)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgMatchEventActionGrants.PlayerGrants player_grants = 1;
  total_size += 1UL * this->_internal_player_grants_size();
  for (const auto& msg : this->player_grants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgMatchEventActionGrants::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgMatchEventActionGrants)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgMatchEventActionGrants* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgMatchEventActionGrants>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgMatchEventActionGrants)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgMatchEventActionGrants)
    MergeFrom(*source);
  }
}

void CMsgMatchEventActionGrants::MergeFrom(const CMsgMatchEventActionGrants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgMatchEventActionGrants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_grants_.MergeFrom(from.player_grants_);
}

void CMsgMatchEventActionGrants::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgMatchEventActionGrants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgMatchEventActionGrants::CopyFrom(const CMsgMatchEventActionGrants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgMatchEventActionGrants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgMatchEventActionGrants::IsInitialized() const {
  return true;
}

void CMsgMatchEventActionGrants::InternalSwap(CMsgMatchEventActionGrants* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  player_grants_.InternalSwap(&other->player_grants_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgMatchEventActionGrants::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCustomGameWhitelist::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCustomGameWhitelist>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_disable_whitelist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgCustomGameWhitelist::CMsgCustomGameWhitelist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  custom_games_whitelist_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCustomGameWhitelist)
}
CMsgCustomGameWhitelist::CMsgCustomGameWhitelist(const CMsgCustomGameWhitelist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      custom_games_whitelist_(from.custom_games_whitelist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_whitelist_) -
    reinterpret_cast<char*>(&version_)) + sizeof(disable_whitelist_));
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameWhitelist)
}

void CMsgCustomGameWhitelist::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_whitelist_) -
    reinterpret_cast<char*>(&version_)) + sizeof(disable_whitelist_));
}

CMsgCustomGameWhitelist::~CMsgCustomGameWhitelist() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameWhitelist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCustomGameWhitelist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCustomGameWhitelist::ArenaDtor(void* object) {
  CMsgCustomGameWhitelist* _this = reinterpret_cast< CMsgCustomGameWhitelist* >(object);
  (void)_this;
}
void CMsgCustomGameWhitelist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCustomGameWhitelist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCustomGameWhitelist::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCustomGameWhitelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_games_whitelist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disable_whitelist_) -
        reinterpret_cast<char*>(&version_)) + sizeof(disable_whitelist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCustomGameWhitelist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 custom_games_whitelist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_custom_games_whitelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_custom_games_whitelist(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disable_whitelist = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_disable_whitelist(&has_bits);
          disable_whitelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCustomGameWhitelist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameWhitelist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // repeated uint64 custom_games_whitelist = 2;
  for (int i = 0, n = this->_internal_custom_games_whitelist_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_custom_games_whitelist(i), target);
  }

  // optional bool disable_whitelist = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_disable_whitelist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameWhitelist)
  return target;
}

size_t CMsgCustomGameWhitelist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCustomGameWhitelist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 custom_games_whitelist = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->custom_games_whitelist_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_games_whitelist_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional bool disable_whitelist = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameWhitelist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCustomGameWhitelist)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameWhitelist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCustomGameWhitelist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCustomGameWhitelist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCustomGameWhitelist)
    MergeFrom(*source);
  }
}

void CMsgCustomGameWhitelist::MergeFrom(const CMsgCustomGameWhitelist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCustomGameWhitelist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_games_whitelist_.MergeFrom(from.custom_games_whitelist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      disable_whitelist_ = from.disable_whitelist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameWhitelist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCustomGameWhitelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameWhitelist::CopyFrom(const CMsgCustomGameWhitelist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCustomGameWhitelist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameWhitelist::IsInitialized() const {
  return true;
}

void CMsgCustomGameWhitelist::InternalSwap(CMsgCustomGameWhitelist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  custom_games_whitelist_.InternalSwap(&other->custom_games_whitelist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCustomGameWhitelist, disable_whitelist_)
      + sizeof(CMsgCustomGameWhitelist::disable_whitelist_)
      - PROTOBUF_FIELD_OFFSET(CMsgCustomGameWhitelist, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCustomGameWhitelist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCustomGameWhitelistForEdit_WhitelistEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgCustomGameWhitelistForEdit_WhitelistEntry>()._has_bits_);
  static void set_has_custom_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_whitelist_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgCustomGameWhitelistForEdit_WhitelistEntry::CMsgCustomGameWhitelistForEdit_WhitelistEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
}
CMsgCustomGameWhitelistForEdit_WhitelistEntry::CMsgCustomGameWhitelistForEdit_WhitelistEntry(const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&whitelist_state_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(whitelist_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&custom_game_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&whitelist_state_) -
    reinterpret_cast<char*>(&custom_game_id_)) + sizeof(whitelist_state_));
}

CMsgCustomGameWhitelistForEdit_WhitelistEntry::~CMsgCustomGameWhitelistForEdit_WhitelistEntry() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::ArenaDtor(void* object) {
  CMsgCustomGameWhitelistForEdit_WhitelistEntry* _this = reinterpret_cast< CMsgCustomGameWhitelistForEdit_WhitelistEntry* >(object);
  (void)_this;
}
void CMsgCustomGameWhitelistForEdit_WhitelistEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCustomGameWhitelistForEdit_WhitelistEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&custom_game_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whitelist_state_) -
        reinterpret_cast<char*>(&custom_game_id_)) + sizeof(whitelist_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCustomGameWhitelistForEdit_WhitelistEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 custom_game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_custom_game_id(&has_bits);
          custom_game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ECustomGameWhitelistState whitelist_state = 2 [default = CUSTOM_GAME_WHITELIST_STATE_UNKNOWN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ECustomGameWhitelistState_IsValid(val))) {
            _internal_set_whitelist_state(static_cast<::ECustomGameWhitelistState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCustomGameWhitelistForEdit_WhitelistEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_custom_game_id(), target);
  }

  // optional .ECustomGameWhitelistState whitelist_state = 2 [default = CUSTOM_GAME_WHITELIST_STATE_UNKNOWN];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_whitelist_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  return target;
}

size_t CMsgCustomGameWhitelistForEdit_WhitelistEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 custom_game_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_custom_game_id());
    }

    // optional .ECustomGameWhitelistState whitelist_state = 2 [default = CUSTOM_GAME_WHITELIST_STATE_UNKNOWN];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_whitelist_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameWhitelistForEdit_WhitelistEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCustomGameWhitelistForEdit_WhitelistEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
    MergeFrom(*source);
  }
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::MergeFrom(const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      whitelist_state_ = from.whitelist_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::CopyFrom(const CMsgCustomGameWhitelistForEdit_WhitelistEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCustomGameWhitelistForEdit.WhitelistEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameWhitelistForEdit_WhitelistEntry::IsInitialized() const {
  return true;
}

void CMsgCustomGameWhitelistForEdit_WhitelistEntry::InternalSwap(CMsgCustomGameWhitelistForEdit_WhitelistEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgCustomGameWhitelistForEdit_WhitelistEntry, whitelist_state_)
      + sizeof(CMsgCustomGameWhitelistForEdit_WhitelistEntry::whitelist_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgCustomGameWhitelistForEdit_WhitelistEntry, custom_game_id_)>(
          reinterpret_cast<char*>(&custom_game_id_),
          reinterpret_cast<char*>(&other->custom_game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCustomGameWhitelistForEdit_WhitelistEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCustomGameWhitelistForEdit::_Internal {
 public:
};

CMsgCustomGameWhitelistForEdit::CMsgCustomGameWhitelistForEdit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  whitelist_entries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCustomGameWhitelistForEdit)
}
CMsgCustomGameWhitelistForEdit::CMsgCustomGameWhitelistForEdit(const CMsgCustomGameWhitelistForEdit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      whitelist_entries_(from.whitelist_entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCustomGameWhitelistForEdit)
}

void CMsgCustomGameWhitelistForEdit::SharedCtor() {
}

CMsgCustomGameWhitelistForEdit::~CMsgCustomGameWhitelistForEdit() {
  // @@protoc_insertion_point(destructor:CMsgCustomGameWhitelistForEdit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCustomGameWhitelistForEdit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCustomGameWhitelistForEdit::ArenaDtor(void* object) {
  CMsgCustomGameWhitelistForEdit* _this = reinterpret_cast< CMsgCustomGameWhitelistForEdit* >(object);
  (void)_this;
}
void CMsgCustomGameWhitelistForEdit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCustomGameWhitelistForEdit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCustomGameWhitelistForEdit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCustomGameWhitelistForEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  whitelist_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCustomGameWhitelistForEdit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgCustomGameWhitelistForEdit.WhitelistEntry whitelist_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_whitelist_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCustomGameWhitelistForEdit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCustomGameWhitelistForEdit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgCustomGameWhitelistForEdit.WhitelistEntry whitelist_entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_whitelist_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_whitelist_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCustomGameWhitelistForEdit)
  return target;
}

size_t CMsgCustomGameWhitelistForEdit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCustomGameWhitelistForEdit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgCustomGameWhitelistForEdit.WhitelistEntry whitelist_entries = 1;
  total_size += 1UL * this->_internal_whitelist_entries_size();
  for (const auto& msg : this->whitelist_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameWhitelistForEdit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCustomGameWhitelistForEdit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameWhitelistForEdit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCustomGameWhitelistForEdit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCustomGameWhitelistForEdit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCustomGameWhitelistForEdit)
    MergeFrom(*source);
  }
}

void CMsgCustomGameWhitelistForEdit::MergeFrom(const CMsgCustomGameWhitelistForEdit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCustomGameWhitelistForEdit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  whitelist_entries_.MergeFrom(from.whitelist_entries_);
}

void CMsgCustomGameWhitelistForEdit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCustomGameWhitelistForEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameWhitelistForEdit::CopyFrom(const CMsgCustomGameWhitelistForEdit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCustomGameWhitelistForEdit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameWhitelistForEdit::IsInitialized() const {
  return true;
}

void CMsgCustomGameWhitelistForEdit::InternalSwap(CMsgCustomGameWhitelistForEdit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  whitelist_entries_.InternalSwap(&other->whitelist_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCustomGameWhitelistForEdit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerRecentMatchInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerRecentMatchInfo>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_win(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgPlayerRecentMatchInfo::CMsgPlayerRecentMatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerRecentMatchInfo)
}
CMsgPlayerRecentMatchInfo::CMsgPlayerRecentMatchInfo(const CMsgPlayerRecentMatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerRecentMatchInfo)
}

void CMsgPlayerRecentMatchInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
}

CMsgPlayerRecentMatchInfo::~CMsgPlayerRecentMatchInfo() {
  // @@protoc_insertion_point(destructor:CMsgPlayerRecentMatchInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerRecentMatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerRecentMatchInfo::ArenaDtor(void* object) {
  CMsgPlayerRecentMatchInfo* _this = reinterpret_cast< CMsgPlayerRecentMatchInfo* >(object);
  (void)_this;
}
void CMsgPlayerRecentMatchInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerRecentMatchInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerRecentMatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerRecentMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerRecentMatchInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_win(&has_bits);
          win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerRecentMatchInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerRecentMatchInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_duration(), target);
  }

  // optional bool win = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_win(), target);
  }

  // optional uint32 hero_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_id(), target);
  }

  // optional uint32 kills = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerRecentMatchInfo)
  return target;
}

size_t CMsgPlayerRecentMatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerRecentMatchInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 duration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duration());
    }

    // optional bool win = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint32 hero_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 kills = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerRecentMatchInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerRecentMatchInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerRecentMatchInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerRecentMatchInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerRecentMatchInfo)
    MergeFrom(*source);
  }
}

void CMsgPlayerRecentMatchInfo::MergeFrom(const CMsgPlayerRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerRecentMatchInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      win_ = from.win_;
    }
    if (cached_has_bits & 0x00000010u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerRecentMatchInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerRecentMatchInfo::CopyFrom(const CMsgPlayerRecentMatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerRecentMatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerRecentMatchInfo::IsInitialized() const {
  return true;
}

void CMsgPlayerRecentMatchInfo::InternalSwap(CMsgPlayerRecentMatchInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentMatchInfo, assists_)
      + sizeof(CMsgPlayerRecentMatchInfo::assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentMatchInfo, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerRecentMatchInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerMatchRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerMatchRecord>()._has_bits_);
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPlayerMatchRecord::CMsgPlayerMatchRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerMatchRecord)
}
CMsgPlayerMatchRecord::CMsgPlayerMatchRecord(const CMsgPlayerMatchRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wins_, &from.wins_,
    static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&wins_)) + sizeof(losses_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerMatchRecord)
}

void CMsgPlayerMatchRecord::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&wins_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&losses_) -
    reinterpret_cast<char*>(&wins_)) + sizeof(losses_));
}

CMsgPlayerMatchRecord::~CMsgPlayerMatchRecord() {
  // @@protoc_insertion_point(destructor:CMsgPlayerMatchRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerMatchRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerMatchRecord::ArenaDtor(void* object) {
  CMsgPlayerMatchRecord* _this = reinterpret_cast< CMsgPlayerMatchRecord* >(object);
  (void)_this;
}
void CMsgPlayerMatchRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerMatchRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerMatchRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerMatchRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&wins_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&losses_) -
        reinterpret_cast<char*>(&wins_)) + sizeof(losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerMatchRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerMatchRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerMatchRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wins = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wins(), target);
  }

  // optional uint32 losses = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_losses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerMatchRecord)
  return target;
}

size_t CMsgPlayerMatchRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerMatchRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 wins = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint32 losses = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerMatchRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerMatchRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerMatchRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerMatchRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerMatchRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerMatchRecord)
    MergeFrom(*source);
  }
}

void CMsgPlayerMatchRecord::MergeFrom(const CMsgPlayerMatchRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerMatchRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000002u) {
      losses_ = from.losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerMatchRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerMatchRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerMatchRecord::CopyFrom(const CMsgPlayerMatchRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerMatchRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerMatchRecord::IsInitialized() const {
  return true;
}

void CMsgPlayerMatchRecord::InternalSwap(CMsgPlayerMatchRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerMatchRecord, losses_)
      + sizeof(CMsgPlayerMatchRecord::losses_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerMatchRecord, wins_)>(
          reinterpret_cast<char*>(&wins_),
          reinterpret_cast<char*>(&other->wins_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerMatchRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerRecentMatchOutcomes::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerRecentMatchOutcomes>()._has_bits_);
  static void set_has_outcomes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPlayerRecentMatchOutcomes::CMsgPlayerRecentMatchOutcomes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerRecentMatchOutcomes)
}
CMsgPlayerRecentMatchOutcomes::CMsgPlayerRecentMatchOutcomes(const CMsgPlayerRecentMatchOutcomes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&outcomes_, &from.outcomes_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_count_) -
    reinterpret_cast<char*>(&outcomes_)) + sizeof(match_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerRecentMatchOutcomes)
}

void CMsgPlayerRecentMatchOutcomes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&outcomes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_count_) -
    reinterpret_cast<char*>(&outcomes_)) + sizeof(match_count_));
}

CMsgPlayerRecentMatchOutcomes::~CMsgPlayerRecentMatchOutcomes() {
  // @@protoc_insertion_point(destructor:CMsgPlayerRecentMatchOutcomes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerRecentMatchOutcomes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerRecentMatchOutcomes::ArenaDtor(void* object) {
  CMsgPlayerRecentMatchOutcomes* _this = reinterpret_cast< CMsgPlayerRecentMatchOutcomes* >(object);
  (void)_this;
}
void CMsgPlayerRecentMatchOutcomes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerRecentMatchOutcomes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerRecentMatchOutcomes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerRecentMatchOutcomes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&outcomes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_count_) -
        reinterpret_cast<char*>(&outcomes_)) + sizeof(match_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerRecentMatchOutcomes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 outcomes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_outcomes(&has_bits);
          outcomes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_count(&has_bits);
          match_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerRecentMatchOutcomes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerRecentMatchOutcomes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 outcomes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_outcomes(), target);
  }

  // optional uint32 match_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_match_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerRecentMatchOutcomes)
  return target;
}

size_t CMsgPlayerRecentMatchOutcomes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerRecentMatchOutcomes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 outcomes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outcomes());
    }

    // optional uint32 match_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerRecentMatchOutcomes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerRecentMatchOutcomes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerRecentMatchOutcomes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerRecentMatchOutcomes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerRecentMatchOutcomes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerRecentMatchOutcomes)
    MergeFrom(*source);
  }
}

void CMsgPlayerRecentMatchOutcomes::MergeFrom(const CMsgPlayerRecentMatchOutcomes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerRecentMatchOutcomes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      outcomes_ = from.outcomes_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_count_ = from.match_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerRecentMatchOutcomes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerRecentMatchOutcomes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerRecentMatchOutcomes::CopyFrom(const CMsgPlayerRecentMatchOutcomes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerRecentMatchOutcomes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerRecentMatchOutcomes::IsInitialized() const {
  return true;
}

void CMsgPlayerRecentMatchOutcomes::InternalSwap(CMsgPlayerRecentMatchOutcomes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentMatchOutcomes, match_count_)
      + sizeof(CMsgPlayerRecentMatchOutcomes::match_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentMatchOutcomes, outcomes_)>(
          reinterpret_cast<char*>(&outcomes_),
          reinterpret_cast<char*>(&other->outcomes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerRecentMatchOutcomes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerRecentCommends::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerRecentCommends>()._has_bits_);
  static void set_has_commends(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_match_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgPlayerRecentCommends::CMsgPlayerRecentCommends(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerRecentCommends)
}
CMsgPlayerRecentCommends::CMsgPlayerRecentCommends(const CMsgPlayerRecentCommends& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&commends_, &from.commends_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_count_) -
    reinterpret_cast<char*>(&commends_)) + sizeof(match_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerRecentCommends)
}

void CMsgPlayerRecentCommends::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&commends_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&match_count_) -
    reinterpret_cast<char*>(&commends_)) + sizeof(match_count_));
}

CMsgPlayerRecentCommends::~CMsgPlayerRecentCommends() {
  // @@protoc_insertion_point(destructor:CMsgPlayerRecentCommends)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerRecentCommends::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerRecentCommends::ArenaDtor(void* object) {
  CMsgPlayerRecentCommends* _this = reinterpret_cast< CMsgPlayerRecentCommends* >(object);
  (void)_this;
}
void CMsgPlayerRecentCommends::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerRecentCommends::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerRecentCommends::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerRecentCommends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&commends_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_count_) -
        reinterpret_cast<char*>(&commends_)) + sizeof(match_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerRecentCommends::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 commends = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_commends(&has_bits);
          commends_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 match_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_count(&has_bits);
          match_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerRecentCommends::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerRecentCommends)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 commends = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_commends(), target);
  }

  // optional uint32 match_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_match_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerRecentCommends)
  return target;
}

size_t CMsgPlayerRecentCommends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerRecentCommends)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 commends = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_commends());
    }

    // optional uint32 match_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerRecentCommends::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerRecentCommends)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerRecentCommends* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerRecentCommends>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerRecentCommends)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerRecentCommends)
    MergeFrom(*source);
  }
}

void CMsgPlayerRecentCommends::MergeFrom(const CMsgPlayerRecentCommends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerRecentCommends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      commends_ = from.commends_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_count_ = from.match_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerRecentCommends::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerRecentCommends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerRecentCommends::CopyFrom(const CMsgPlayerRecentCommends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerRecentCommends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerRecentCommends::IsInitialized() const {
  return true;
}

void CMsgPlayerRecentCommends::InternalSwap(CMsgPlayerRecentCommends* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentCommends, match_count_)
      + sizeof(CMsgPlayerRecentCommends::match_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentCommends, commends_)>(
          reinterpret_cast<char*>(&commends_),
          reinterpret_cast<char*>(&other->commends_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerRecentCommends::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerRecentAccomplishments::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerRecentAccomplishments>()._has_bits_);
  static const ::CMsgPlayerRecentMatchOutcomes& recent_outcomes(const CMsgPlayerRecentAccomplishments* msg);
  static void set_has_recent_outcomes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgPlayerMatchRecord& total_record(const CMsgPlayerRecentAccomplishments* msg);
  static void set_has_total_record(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prediction_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_plus_prediction_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgPlayerRecentCommends& recent_commends(const CMsgPlayerRecentAccomplishments* msg);
  static void set_has_recent_commends(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_first_match_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgPlayerRecentMatchInfo& last_match(const CMsgPlayerRecentAccomplishments* msg);
  static void set_has_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgPlayerRecentMatchOutcomes& recent_mvps(const CMsgPlayerRecentAccomplishments* msg);
  static void set_has_recent_mvps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgPlayerRecentMatchOutcomes&
CMsgPlayerRecentAccomplishments::_Internal::recent_outcomes(const CMsgPlayerRecentAccomplishments* msg) {
  return *msg->recent_outcomes_;
}
const ::CMsgPlayerMatchRecord&
CMsgPlayerRecentAccomplishments::_Internal::total_record(const CMsgPlayerRecentAccomplishments* msg) {
  return *msg->total_record_;
}
const ::CMsgPlayerRecentCommends&
CMsgPlayerRecentAccomplishments::_Internal::recent_commends(const CMsgPlayerRecentAccomplishments* msg) {
  return *msg->recent_commends_;
}
const ::CMsgPlayerRecentMatchInfo&
CMsgPlayerRecentAccomplishments::_Internal::last_match(const CMsgPlayerRecentAccomplishments* msg) {
  return *msg->last_match_;
}
const ::CMsgPlayerRecentMatchOutcomes&
CMsgPlayerRecentAccomplishments::_Internal::recent_mvps(const CMsgPlayerRecentAccomplishments* msg) {
  return *msg->recent_mvps_;
}
CMsgPlayerRecentAccomplishments::CMsgPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerRecentAccomplishments)
}
CMsgPlayerRecentAccomplishments::CMsgPlayerRecentAccomplishments(const CMsgPlayerRecentAccomplishments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recent_outcomes()) {
    recent_outcomes_ = new ::CMsgPlayerRecentMatchOutcomes(*from.recent_outcomes_);
  } else {
    recent_outcomes_ = nullptr;
  }
  if (from._internal_has_total_record()) {
    total_record_ = new ::CMsgPlayerMatchRecord(*from.total_record_);
  } else {
    total_record_ = nullptr;
  }
  if (from._internal_has_recent_commends()) {
    recent_commends_ = new ::CMsgPlayerRecentCommends(*from.recent_commends_);
  } else {
    recent_commends_ = nullptr;
  }
  if (from._internal_has_last_match()) {
    last_match_ = new ::CMsgPlayerRecentMatchInfo(*from.last_match_);
  } else {
    last_match_ = nullptr;
  }
  if (from._internal_has_recent_mvps()) {
    recent_mvps_ = new ::CMsgPlayerRecentMatchOutcomes(*from.recent_mvps_);
  } else {
    recent_mvps_ = nullptr;
  }
  ::memcpy(&prediction_streak_, &from.prediction_streak_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_match_timestamp_) -
    reinterpret_cast<char*>(&prediction_streak_)) + sizeof(first_match_timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerRecentAccomplishments)
}

void CMsgPlayerRecentAccomplishments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recent_outcomes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&first_match_timestamp_) -
    reinterpret_cast<char*>(&recent_outcomes_)) + sizeof(first_match_timestamp_));
}

CMsgPlayerRecentAccomplishments::~CMsgPlayerRecentAccomplishments() {
  // @@protoc_insertion_point(destructor:CMsgPlayerRecentAccomplishments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerRecentAccomplishments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete recent_outcomes_;
  if (this != internal_default_instance()) delete total_record_;
  if (this != internal_default_instance()) delete recent_commends_;
  if (this != internal_default_instance()) delete last_match_;
  if (this != internal_default_instance()) delete recent_mvps_;
}

void CMsgPlayerRecentAccomplishments::ArenaDtor(void* object) {
  CMsgPlayerRecentAccomplishments* _this = reinterpret_cast< CMsgPlayerRecentAccomplishments* >(object);
  (void)_this;
}
void CMsgPlayerRecentAccomplishments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerRecentAccomplishments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerRecentAccomplishments::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(recent_outcomes_ != nullptr);
      recent_outcomes_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_record_ != nullptr);
      total_record_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(recent_commends_ != nullptr);
      recent_commends_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(last_match_ != nullptr);
      last_match_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(recent_mvps_ != nullptr);
      recent_mvps_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&prediction_streak_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_match_timestamp_) -
        reinterpret_cast<char*>(&prediction_streak_)) + sizeof(first_match_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerRecentAccomplishments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_outcomes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerMatchRecord total_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prediction_streak = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prediction_streak(&has_bits);
          prediction_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 plus_prediction_streak = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_plus_prediction_streak(&has_bits);
          plus_prediction_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerRecentCommends recent_commends = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_commends(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 first_match_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_first_match_timestamp(&has_bits);
          first_match_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerRecentMatchInfo last_match = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerRecentMatchOutcomes recent_mvps = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_mvps(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerRecentAccomplishments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::recent_outcomes(this), target, stream);
  }

  // optional .CMsgPlayerMatchRecord total_record = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_record(this), target, stream);
  }

  // optional uint32 prediction_streak = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prediction_streak(), target);
  }

  // optional uint32 plus_prediction_streak = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_plus_prediction_streak(), target);
  }

  // optional .CMsgPlayerRecentCommends recent_commends = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::recent_commends(this), target, stream);
  }

  // optional uint32 first_match_timestamp = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_first_match_timestamp(), target);
  }

  // optional .CMsgPlayerRecentMatchInfo last_match = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::last_match(this), target, stream);
  }

  // optional .CMsgPlayerRecentMatchOutcomes recent_mvps = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::recent_mvps(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerRecentAccomplishments)
  return target;
}

size_t CMsgPlayerRecentAccomplishments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerRecentAccomplishments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_outcomes_);
    }

    // optional .CMsgPlayerMatchRecord total_record = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_record_);
    }

    // optional .CMsgPlayerRecentCommends recent_commends = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_commends_);
    }

    // optional .CMsgPlayerRecentMatchInfo last_match = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_match_);
    }

    // optional .CMsgPlayerRecentMatchOutcomes recent_mvps = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_mvps_);
    }

    // optional uint32 prediction_streak = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prediction_streak());
    }

    // optional uint32 plus_prediction_streak = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_plus_prediction_streak());
    }

    // optional uint32 first_match_timestamp = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_first_match_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerRecentAccomplishments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerRecentAccomplishments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerRecentAccomplishments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerRecentAccomplishments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerRecentAccomplishments)
    MergeFrom(*source);
  }
}

void CMsgPlayerRecentAccomplishments::MergeFrom(const CMsgPlayerRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_recent_outcomes()->::CMsgPlayerRecentMatchOutcomes::MergeFrom(from._internal_recent_outcomes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_total_record()->::CMsgPlayerMatchRecord::MergeFrom(from._internal_total_record());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_recent_commends()->::CMsgPlayerRecentCommends::MergeFrom(from._internal_recent_commends());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_last_match()->::CMsgPlayerRecentMatchInfo::MergeFrom(from._internal_last_match());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_recent_mvps()->::CMsgPlayerRecentMatchOutcomes::MergeFrom(from._internal_recent_mvps());
    }
    if (cached_has_bits & 0x00000020u) {
      prediction_streak_ = from.prediction_streak_;
    }
    if (cached_has_bits & 0x00000040u) {
      plus_prediction_streak_ = from.plus_prediction_streak_;
    }
    if (cached_has_bits & 0x00000080u) {
      first_match_timestamp_ = from.first_match_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerRecentAccomplishments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerRecentAccomplishments::CopyFrom(const CMsgPlayerRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerRecentAccomplishments::IsInitialized() const {
  return true;
}

void CMsgPlayerRecentAccomplishments::InternalSwap(CMsgPlayerRecentAccomplishments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentAccomplishments, first_match_timestamp_)
      + sizeof(CMsgPlayerRecentAccomplishments::first_match_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerRecentAccomplishments, recent_outcomes_)>(
          reinterpret_cast<char*>(&recent_outcomes_),
          reinterpret_cast<char*>(&other->recent_outcomes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerRecentAccomplishments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerHeroRecentAccomplishments::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerHeroRecentAccomplishments>()._has_bits_);
  static const ::CMsgPlayerRecentMatchOutcomes& recent_outcomes(const CMsgPlayerHeroRecentAccomplishments* msg);
  static void set_has_recent_outcomes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgPlayerMatchRecord& total_record(const CMsgPlayerHeroRecentAccomplishments* msg);
  static void set_has_total_record(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgPlayerRecentMatchInfo& last_match(const CMsgPlayerHeroRecentAccomplishments* msg);
  static void set_has_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgPlayerRecentMatchOutcomes&
CMsgPlayerHeroRecentAccomplishments::_Internal::recent_outcomes(const CMsgPlayerHeroRecentAccomplishments* msg) {
  return *msg->recent_outcomes_;
}
const ::CMsgPlayerMatchRecord&
CMsgPlayerHeroRecentAccomplishments::_Internal::total_record(const CMsgPlayerHeroRecentAccomplishments* msg) {
  return *msg->total_record_;
}
const ::CMsgPlayerRecentMatchInfo&
CMsgPlayerHeroRecentAccomplishments::_Internal::last_match(const CMsgPlayerHeroRecentAccomplishments* msg) {
  return *msg->last_match_;
}
CMsgPlayerHeroRecentAccomplishments::CMsgPlayerHeroRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerHeroRecentAccomplishments)
}
CMsgPlayerHeroRecentAccomplishments::CMsgPlayerHeroRecentAccomplishments(const CMsgPlayerHeroRecentAccomplishments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_recent_outcomes()) {
    recent_outcomes_ = new ::CMsgPlayerRecentMatchOutcomes(*from.recent_outcomes_);
  } else {
    recent_outcomes_ = nullptr;
  }
  if (from._internal_has_total_record()) {
    total_record_ = new ::CMsgPlayerMatchRecord(*from.total_record_);
  } else {
    total_record_ = nullptr;
  }
  if (from._internal_has_last_match()) {
    last_match_ = new ::CMsgPlayerRecentMatchInfo(*from.last_match_);
  } else {
    last_match_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerHeroRecentAccomplishments)
}

void CMsgPlayerHeroRecentAccomplishments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&recent_outcomes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_match_) -
    reinterpret_cast<char*>(&recent_outcomes_)) + sizeof(last_match_));
}

CMsgPlayerHeroRecentAccomplishments::~CMsgPlayerHeroRecentAccomplishments() {
  // @@protoc_insertion_point(destructor:CMsgPlayerHeroRecentAccomplishments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerHeroRecentAccomplishments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete recent_outcomes_;
  if (this != internal_default_instance()) delete total_record_;
  if (this != internal_default_instance()) delete last_match_;
}

void CMsgPlayerHeroRecentAccomplishments::ArenaDtor(void* object) {
  CMsgPlayerHeroRecentAccomplishments* _this = reinterpret_cast< CMsgPlayerHeroRecentAccomplishments* >(object);
  (void)_this;
}
void CMsgPlayerHeroRecentAccomplishments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerHeroRecentAccomplishments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerHeroRecentAccomplishments::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerHeroRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(recent_outcomes_ != nullptr);
      recent_outcomes_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(total_record_ != nullptr);
      total_record_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(last_match_ != nullptr);
      last_match_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerHeroRecentAccomplishments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_recent_outcomes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerMatchRecord total_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerRecentMatchInfo last_match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerHeroRecentAccomplishments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerHeroRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::recent_outcomes(this), target, stream);
  }

  // optional .CMsgPlayerMatchRecord total_record = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::total_record(this), target, stream);
  }

  // optional .CMsgPlayerRecentMatchInfo last_match = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::last_match(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerHeroRecentAccomplishments)
  return target;
}

size_t CMsgPlayerHeroRecentAccomplishments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerHeroRecentAccomplishments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgPlayerRecentMatchOutcomes recent_outcomes = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *recent_outcomes_);
    }

    // optional .CMsgPlayerMatchRecord total_record = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *total_record_);
    }

    // optional .CMsgPlayerRecentMatchInfo last_match = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *last_match_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerHeroRecentAccomplishments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerHeroRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerHeroRecentAccomplishments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerHeroRecentAccomplishments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerHeroRecentAccomplishments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerHeroRecentAccomplishments)
    MergeFrom(*source);
  }
}

void CMsgPlayerHeroRecentAccomplishments::MergeFrom(const CMsgPlayerHeroRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerHeroRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_recent_outcomes()->::CMsgPlayerRecentMatchOutcomes::MergeFrom(from._internal_recent_outcomes());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_total_record()->::CMsgPlayerMatchRecord::MergeFrom(from._internal_total_record());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_last_match()->::CMsgPlayerRecentMatchInfo::MergeFrom(from._internal_last_match());
    }
  }
}

void CMsgPlayerHeroRecentAccomplishments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerHeroRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerHeroRecentAccomplishments::CopyFrom(const CMsgPlayerHeroRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerHeroRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerHeroRecentAccomplishments::IsInitialized() const {
  return true;
}

void CMsgPlayerHeroRecentAccomplishments::InternalSwap(CMsgPlayerHeroRecentAccomplishments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlayerHeroRecentAccomplishments, last_match_)
      + sizeof(CMsgPlayerHeroRecentAccomplishments::last_match_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlayerHeroRecentAccomplishments, recent_outcomes_)>(
          reinterpret_cast<char*>(&recent_outcomes_),
          reinterpret_cast<char*>(&other->recent_outcomes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerHeroRecentAccomplishments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRecentAccomplishments::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRecentAccomplishments>()._has_bits_);
  static const ::CMsgPlayerRecentAccomplishments& player_accomplishments(const CMsgRecentAccomplishments* msg);
  static void set_has_player_accomplishments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgPlayerHeroRecentAccomplishments& hero_accomplishments(const CMsgRecentAccomplishments* msg);
  static void set_has_hero_accomplishments(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgPlayerRecentAccomplishments&
CMsgRecentAccomplishments::_Internal::player_accomplishments(const CMsgRecentAccomplishments* msg) {
  return *msg->player_accomplishments_;
}
const ::CMsgPlayerHeroRecentAccomplishments&
CMsgRecentAccomplishments::_Internal::hero_accomplishments(const CMsgRecentAccomplishments* msg) {
  return *msg->hero_accomplishments_;
}
CMsgRecentAccomplishments::CMsgRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRecentAccomplishments)
}
CMsgRecentAccomplishments::CMsgRecentAccomplishments(const CMsgRecentAccomplishments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_accomplishments()) {
    player_accomplishments_ = new ::CMsgPlayerRecentAccomplishments(*from.player_accomplishments_);
  } else {
    player_accomplishments_ = nullptr;
  }
  if (from._internal_has_hero_accomplishments()) {
    hero_accomplishments_ = new ::CMsgPlayerHeroRecentAccomplishments(*from.hero_accomplishments_);
  } else {
    hero_accomplishments_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgRecentAccomplishments)
}

void CMsgRecentAccomplishments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_accomplishments_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_accomplishments_) -
    reinterpret_cast<char*>(&player_accomplishments_)) + sizeof(hero_accomplishments_));
}

CMsgRecentAccomplishments::~CMsgRecentAccomplishments() {
  // @@protoc_insertion_point(destructor:CMsgRecentAccomplishments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRecentAccomplishments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_accomplishments_;
  if (this != internal_default_instance()) delete hero_accomplishments_;
}

void CMsgRecentAccomplishments::ArenaDtor(void* object) {
  CMsgRecentAccomplishments* _this = reinterpret_cast< CMsgRecentAccomplishments* >(object);
  (void)_this;
}
void CMsgRecentAccomplishments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRecentAccomplishments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRecentAccomplishments::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(player_accomplishments_ != nullptr);
      player_accomplishments_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hero_accomplishments_ != nullptr);
      hero_accomplishments_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRecentAccomplishments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgPlayerRecentAccomplishments player_accomplishments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_accomplishments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgPlayerHeroRecentAccomplishments hero_accomplishments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hero_accomplishments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRecentAccomplishments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgPlayerRecentAccomplishments player_accomplishments = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_accomplishments(this), target, stream);
  }

  // optional .CMsgPlayerHeroRecentAccomplishments hero_accomplishments = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hero_accomplishments(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRecentAccomplishments)
  return target;
}

size_t CMsgRecentAccomplishments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRecentAccomplishments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgPlayerRecentAccomplishments player_accomplishments = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_accomplishments_);
    }

    // optional .CMsgPlayerHeroRecentAccomplishments hero_accomplishments = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hero_accomplishments_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRecentAccomplishments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRecentAccomplishments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRecentAccomplishments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRecentAccomplishments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRecentAccomplishments)
    MergeFrom(*source);
  }
}

void CMsgRecentAccomplishments::MergeFrom(const CMsgRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player_accomplishments()->::CMsgPlayerRecentAccomplishments::MergeFrom(from._internal_player_accomplishments());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hero_accomplishments()->::CMsgPlayerHeroRecentAccomplishments::MergeFrom(from._internal_hero_accomplishments());
    }
  }
}

void CMsgRecentAccomplishments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecentAccomplishments::CopyFrom(const CMsgRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecentAccomplishments::IsInitialized() const {
  return true;
}

void CMsgRecentAccomplishments::InternalSwap(CMsgRecentAccomplishments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRecentAccomplishments, hero_accomplishments_)
      + sizeof(CMsgRecentAccomplishments::hero_accomplishments_)
      - PROTOBUF_FIELD_OFFSET(CMsgRecentAccomplishments, player_accomplishments_)>(
          reinterpret_cast<char*>(&player_accomplishments_),
          reinterpret_cast<char*>(&other->player_accomplishments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRecentAccomplishments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestPlayerRecentAccomplishments::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestPlayerRecentAccomplishments>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgRequestPlayerRecentAccomplishments::CMsgRequestPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestPlayerRecentAccomplishments)
}
CMsgRequestPlayerRecentAccomplishments::CMsgRequestPlayerRecentAccomplishments(const CMsgRequestPlayerRecentAccomplishments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgRequestPlayerRecentAccomplishments)
}

void CMsgRequestPlayerRecentAccomplishments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
}

CMsgRequestPlayerRecentAccomplishments::~CMsgRequestPlayerRecentAccomplishments() {
  // @@protoc_insertion_point(destructor:CMsgRequestPlayerRecentAccomplishments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestPlayerRecentAccomplishments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgRequestPlayerRecentAccomplishments::ArenaDtor(void* object) {
  CMsgRequestPlayerRecentAccomplishments* _this = reinterpret_cast< CMsgRequestPlayerRecentAccomplishments* >(object);
  (void)_this;
}
void CMsgRequestPlayerRecentAccomplishments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestPlayerRecentAccomplishments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestPlayerRecentAccomplishments::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestPlayerRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestPlayerRecentAccomplishments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestPlayerRecentAccomplishments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestPlayerRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestPlayerRecentAccomplishments)
  return target;
}

size_t CMsgRequestPlayerRecentAccomplishments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestPlayerRecentAccomplishments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestPlayerRecentAccomplishments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestPlayerRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestPlayerRecentAccomplishments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestPlayerRecentAccomplishments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestPlayerRecentAccomplishments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestPlayerRecentAccomplishments)
    MergeFrom(*source);
  }
}

void CMsgRequestPlayerRecentAccomplishments::MergeFrom(const CMsgRequestPlayerRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestPlayerRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRequestPlayerRecentAccomplishments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestPlayerRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestPlayerRecentAccomplishments::CopyFrom(const CMsgRequestPlayerRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestPlayerRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestPlayerRecentAccomplishments::IsInitialized() const {
  return true;
}

void CMsgRequestPlayerRecentAccomplishments::InternalSwap(CMsgRequestPlayerRecentAccomplishments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRequestPlayerRecentAccomplishments, hero_id_)
      + sizeof(CMsgRequestPlayerRecentAccomplishments::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgRequestPlayerRecentAccomplishments, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestPlayerRecentAccomplishments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestPlayerRecentAccomplishments::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestPlayerRecentAccomplishments>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgServerToGCRequestPlayerRecentAccomplishments::CMsgServerToGCRequestPlayerRecentAccomplishments(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestPlayerRecentAccomplishments)
}
CMsgServerToGCRequestPlayerRecentAccomplishments::CMsgServerToGCRequestPlayerRecentAccomplishments(const CMsgServerToGCRequestPlayerRecentAccomplishments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestPlayerRecentAccomplishments)
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
}

CMsgServerToGCRequestPlayerRecentAccomplishments::~CMsgServerToGCRequestPlayerRecentAccomplishments() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestPlayerRecentAccomplishments)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::ArenaDtor(void* object) {
  CMsgServerToGCRequestPlayerRecentAccomplishments* _this = reinterpret_cast< CMsgServerToGCRequestPlayerRecentAccomplishments* >(object);
  (void)_this;
}
void CMsgServerToGCRequestPlayerRecentAccomplishments::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestPlayerRecentAccomplishments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestPlayerRecentAccomplishments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestPlayerRecentAccomplishments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestPlayerRecentAccomplishments)
  return target;
}

size_t CMsgServerToGCRequestPlayerRecentAccomplishments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestPlayerRecentAccomplishments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestPlayerRecentAccomplishments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestPlayerRecentAccomplishments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestPlayerRecentAccomplishments)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::MergeFrom(const CMsgServerToGCRequestPlayerRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::CopyFrom(const CMsgServerToGCRequestPlayerRecentAccomplishments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestPlayerRecentAccomplishments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestPlayerRecentAccomplishments::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestPlayerRecentAccomplishments::InternalSwap(CMsgServerToGCRequestPlayerRecentAccomplishments* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestPlayerRecentAccomplishments, hero_id_)
      + sizeof(CMsgServerToGCRequestPlayerRecentAccomplishments::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestPlayerRecentAccomplishments, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestPlayerRecentAccomplishments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgRequestPlayerRecentAccomplishmentsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgRequestPlayerRecentAccomplishmentsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgRecentAccomplishments& player_accomplishments(const CMsgRequestPlayerRecentAccomplishmentsResponse* msg);
  static void set_has_player_accomplishments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgRecentAccomplishments&
CMsgRequestPlayerRecentAccomplishmentsResponse::_Internal::player_accomplishments(const CMsgRequestPlayerRecentAccomplishmentsResponse* msg) {
  return *msg->player_accomplishments_;
}
CMsgRequestPlayerRecentAccomplishmentsResponse::CMsgRequestPlayerRecentAccomplishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgRequestPlayerRecentAccomplishmentsResponse)
}
CMsgRequestPlayerRecentAccomplishmentsResponse::CMsgRequestPlayerRecentAccomplishmentsResponse(const CMsgRequestPlayerRecentAccomplishmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_accomplishments()) {
    player_accomplishments_ = new ::CMsgRecentAccomplishments(*from.player_accomplishments_);
  } else {
    player_accomplishments_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgRequestPlayerRecentAccomplishmentsResponse)
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_accomplishments_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_accomplishments_)) + sizeof(result_));
}

CMsgRequestPlayerRecentAccomplishmentsResponse::~CMsgRequestPlayerRecentAccomplishmentsResponse() {
  // @@protoc_insertion_point(destructor:CMsgRequestPlayerRecentAccomplishmentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_accomplishments_;
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::ArenaDtor(void* object) {
  CMsgRequestPlayerRecentAccomplishmentsResponse* _this = reinterpret_cast< CMsgRequestPlayerRecentAccomplishmentsResponse* >(object);
  (void)_this;
}
void CMsgRequestPlayerRecentAccomplishmentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgRequestPlayerRecentAccomplishmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_accomplishments_ != nullptr);
    player_accomplishments_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgRequestPlayerRecentAccomplishmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgRequestPlayerRecentAccomplishmentsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgRecentAccomplishments player_accomplishments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_accomplishments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgRequestPlayerRecentAccomplishmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .CMsgRecentAccomplishments player_accomplishments = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_accomplishments(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgRequestPlayerRecentAccomplishmentsResponse)
  return target;
}

size_t CMsgRequestPlayerRecentAccomplishmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgRecentAccomplishments player_accomplishments = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_accomplishments_);
    }

    // optional .CMsgRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestPlayerRecentAccomplishmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgRequestPlayerRecentAccomplishmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgRequestPlayerRecentAccomplishmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgRequestPlayerRecentAccomplishmentsResponse)
    MergeFrom(*source);
  }
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::MergeFrom(const CMsgRequestPlayerRecentAccomplishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player_accomplishments()->::CMsgRecentAccomplishments::MergeFrom(from._internal_player_accomplishments());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::CopyFrom(const CMsgRequestPlayerRecentAccomplishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgRequestPlayerRecentAccomplishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestPlayerRecentAccomplishmentsResponse::IsInitialized() const {
  return true;
}

void CMsgRequestPlayerRecentAccomplishmentsResponse::InternalSwap(CMsgRequestPlayerRecentAccomplishmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgRequestPlayerRecentAccomplishmentsResponse, result_)
      + sizeof(CMsgRequestPlayerRecentAccomplishmentsResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgRequestPlayerRecentAccomplishmentsResponse, player_accomplishments_)>(
          reinterpret_cast<char*>(&player_accomplishments_),
          reinterpret_cast<char*>(&other->player_accomplishments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgRequestPlayerRecentAccomplishmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgRecentAccomplishments& player_accomplishments(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* msg);
  static void set_has_player_accomplishments(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgRecentAccomplishments&
CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_Internal::player_accomplishments(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* msg) {
  return *msg->player_accomplishments_;
}
CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
}
CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_accomplishments()) {
    player_accomplishments_ = new ::CMsgRecentAccomplishments(*from.player_accomplishments_);
  } else {
    player_accomplishments_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_accomplishments_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&player_accomplishments_)) + sizeof(result_));
}

CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::~CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse() {
  // @@protoc_insertion_point(destructor:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_accomplishments_;
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::ArenaDtor(void* object) {
  CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* _this = reinterpret_cast< CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* >(object);
  (void)_this;
}
void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(player_accomplishments_ != nullptr);
    player_accomplishments_->Clear();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse_EResponse>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CMsgRecentAccomplishments player_accomplishments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_accomplishments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional .CMsgRecentAccomplishments player_accomplishments = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::player_accomplishments(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  return target;
}

size_t CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgRecentAccomplishments player_accomplishments = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_accomplishments_);
    }

    // optional .CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse.EResponse result = 1 [default = k_eInternalError];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
    MergeFrom(*source);
  }
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::MergeFrom(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_player_accomplishments()->::CMsgRecentAccomplishments::MergeFrom(from._internal_player_accomplishments());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::CopyFrom(const CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::IsInitialized() const {
  return true;
}

void CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::InternalSwap(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse, result_)
      + sizeof(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::result_)
      - PROTOBUF_FIELD_OFFSET(CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse, player_accomplishments_)>(
          reinterpret_cast<char*>(&player_accomplishments_),
          reinterpret_cast<char*>(&other->player_accomplishments_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgArcanaVoteMatchVotes::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgArcanaVoteMatchVotes>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vote_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgArcanaVoteMatchVotes::CMsgArcanaVoteMatchVotes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgArcanaVoteMatchVotes)
}
CMsgArcanaVoteMatchVotes::CMsgArcanaVoteMatchVotes(const CMsgArcanaVoteMatchVotes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&vote_count_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(vote_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgArcanaVoteMatchVotes)
}

void CMsgArcanaVoteMatchVotes::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vote_count_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(vote_count_));
}

CMsgArcanaVoteMatchVotes::~CMsgArcanaVoteMatchVotes() {
  // @@protoc_insertion_point(destructor:CMsgArcanaVoteMatchVotes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgArcanaVoteMatchVotes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgArcanaVoteMatchVotes::ArenaDtor(void* object) {
  CMsgArcanaVoteMatchVotes* _this = reinterpret_cast< CMsgArcanaVoteMatchVotes* >(object);
  (void)_this;
}
void CMsgArcanaVoteMatchVotes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgArcanaVoteMatchVotes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgArcanaVoteMatchVotes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgArcanaVoteMatchVotes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vote_count_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(vote_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgArcanaVoteMatchVotes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vote_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_vote_count(&has_bits);
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgArcanaVoteMatchVotes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgArcanaVoteMatchVotes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional uint32 vote_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vote_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgArcanaVoteMatchVotes)
  return target;
}

size_t CMsgArcanaVoteMatchVotes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgArcanaVoteMatchVotes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_match_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 vote_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vote_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgArcanaVoteMatchVotes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgArcanaVoteMatchVotes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgArcanaVoteMatchVotes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgArcanaVoteMatchVotes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgArcanaVoteMatchVotes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgArcanaVoteMatchVotes)
    MergeFrom(*source);
  }
}

void CMsgArcanaVoteMatchVotes::MergeFrom(const CMsgArcanaVoteMatchVotes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgArcanaVoteMatchVotes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      vote_count_ = from.vote_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgArcanaVoteMatchVotes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgArcanaVoteMatchVotes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgArcanaVoteMatchVotes::CopyFrom(const CMsgArcanaVoteMatchVotes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgArcanaVoteMatchVotes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgArcanaVoteMatchVotes::IsInitialized() const {
  return true;
}

void CMsgArcanaVoteMatchVotes::InternalSwap(CMsgArcanaVoteMatchVotes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgArcanaVoteMatchVotes, vote_count_)
      + sizeof(CMsgArcanaVoteMatchVotes::vote_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgArcanaVoteMatchVotes, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgArcanaVoteMatchVotes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCtoGCAssociatedExploiterAccountInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCtoGCAssociatedExploiterAccountInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_matches_to_search(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_shared_match_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_num_additional_players(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCtoGCAssociatedExploiterAccountInfo::CMsgGCtoGCAssociatedExploiterAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCtoGCAssociatedExploiterAccountInfo)
}
CMsgGCtoGCAssociatedExploiterAccountInfo::CMsgGCtoGCAssociatedExploiterAccountInfo(const CMsgGCtoGCAssociatedExploiterAccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_additional_players_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(num_additional_players_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCtoGCAssociatedExploiterAccountInfo)
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_additional_players_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(num_additional_players_));
}

CMsgGCtoGCAssociatedExploiterAccountInfo::~CMsgGCtoGCAssociatedExploiterAccountInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCtoGCAssociatedExploiterAccountInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::ArenaDtor(void* object) {
  CMsgGCtoGCAssociatedExploiterAccountInfo* _this = reinterpret_cast< CMsgGCtoGCAssociatedExploiterAccountInfo* >(object);
  (void)_this;
}
void CMsgGCtoGCAssociatedExploiterAccountInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCtoGCAssociatedExploiterAccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_additional_players_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(num_additional_players_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCtoGCAssociatedExploiterAccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_matches_to_search = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_matches_to_search(&has_bits);
          num_matches_to_search_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 min_shared_match_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_min_shared_match_count(&has_bits);
          min_shared_match_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_additional_players = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_num_additional_players(&has_bits);
          num_additional_players_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCtoGCAssociatedExploiterAccountInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 num_matches_to_search = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_matches_to_search(), target);
  }

  // optional uint32 min_shared_match_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_min_shared_match_count(), target);
  }

  // optional uint32 num_additional_players = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_additional_players(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCtoGCAssociatedExploiterAccountInfo)
  return target;
}

size_t CMsgGCtoGCAssociatedExploiterAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 num_matches_to_search = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_matches_to_search());
    }

    // optional uint32 min_shared_match_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_min_shared_match_count());
    }

    // optional uint32 num_additional_players = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_additional_players());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCtoGCAssociatedExploiterAccountInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCtoGCAssociatedExploiterAccountInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCtoGCAssociatedExploiterAccountInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCtoGCAssociatedExploiterAccountInfo)
    MergeFrom(*source);
  }
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::MergeFrom(const CMsgGCtoGCAssociatedExploiterAccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_matches_to_search_ = from.num_matches_to_search_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_shared_match_count_ = from.min_shared_match_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_additional_players_ = from.num_additional_players_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::CopyFrom(const CMsgGCtoGCAssociatedExploiterAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCtoGCAssociatedExploiterAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCtoGCAssociatedExploiterAccountInfo::IsInitialized() const {
  return true;
}

void CMsgGCtoGCAssociatedExploiterAccountInfo::InternalSwap(CMsgGCtoGCAssociatedExploiterAccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCtoGCAssociatedExploiterAccountInfo, num_additional_players_)
      + sizeof(CMsgGCtoGCAssociatedExploiterAccountInfo::num_additional_players_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCtoGCAssociatedExploiterAccountInfo, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCtoGCAssociatedExploiterAccountInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_common_matches(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_earliest_common_match(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latest_common_match(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_generation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_persona(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_already_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
}
CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona()) {
    persona_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&already_banned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(already_banned_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::SharedCtor() {
persona_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&already_banned_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(already_banned_));
}

CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::~CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account() {
  // @@protoc_insertion_point(destructor:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::ArenaDtor(void* object) {
  CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* _this = reinterpret_cast< CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* >(object);
  (void)_this;
}
void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&already_banned_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(already_banned_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_common_matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_common_matches(&has_bits);
          num_common_matches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earliest_common_match = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_earliest_common_match(&has_bits);
          earliest_common_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 latest_common_match = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_latest_common_match(&has_bits);
          latest_common_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 generation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_generation(&has_bits);
          generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string persona = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_persona();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool already_banned = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_already_banned(&has_bits);
          already_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 num_common_matches = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_common_matches(), target);
  }

  // optional uint32 earliest_common_match = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_earliest_common_match(), target);
  }

  // optional uint32 latest_common_match = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_latest_common_match(), target);
  }

  // optional uint32 generation = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_generation(), target);
  }

  // optional string persona = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona().data(), static_cast<int>(this->_internal_persona().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account.persona");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_persona(), target);
  }

  // optional bool already_banned = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_already_banned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  return target;
}

size_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string persona = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 num_common_matches = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_common_matches());
    }

    // optional uint32 earliest_common_match = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earliest_common_match());
    }

    // optional uint32 latest_common_match = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_latest_common_match());
    }

    // optional uint32 generation = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_generation());
    }

    // optional bool already_banned = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
    MergeFrom(*source);
  }
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::MergeFrom(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona(from._internal_persona());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_common_matches_ = from.num_common_matches_;
    }
    if (cached_has_bits & 0x00000008u) {
      earliest_common_match_ = from.earliest_common_match_;
    }
    if (cached_has_bits & 0x00000010u) {
      latest_common_match_ = from.latest_common_match_;
    }
    if (cached_has_bits & 0x00000020u) {
      generation_ = from.generation_;
    }
    if (cached_has_bits & 0x00000040u) {
      already_banned_ = from.already_banned_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::CopyFrom(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::IsInitialized() const {
  return true;
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::InternalSwap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_.Swap(&other->persona_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, already_banned_)
      + sizeof(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::already_banned_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCtoGCAssociatedExploiterAccountInfoResponse::_Internal {
 public:
};

CMsgGCtoGCAssociatedExploiterAccountInfoResponse::CMsgGCtoGCAssociatedExploiterAccountInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accounts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
}
CMsgGCtoGCAssociatedExploiterAccountInfoResponse::CMsgGCtoGCAssociatedExploiterAccountInfoResponse(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accounts_(from.accounts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::SharedCtor() {
}

CMsgGCtoGCAssociatedExploiterAccountInfoResponse::~CMsgGCtoGCAssociatedExploiterAccountInfoResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::ArenaDtor(void* object) {
  CMsgGCtoGCAssociatedExploiterAccountInfoResponse* _this = reinterpret_cast< CMsgGCtoGCAssociatedExploiterAccountInfoResponse* >(object);
  (void)_this;
}
void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCtoGCAssociatedExploiterAccountInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account accounts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCtoGCAssociatedExploiterAccountInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_accounts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_accounts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  return target;
}

size_t CMsgGCtoGCAssociatedExploiterAccountInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCtoGCAssociatedExploiterAccountInfoResponse.Account accounts = 1;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCtoGCAssociatedExploiterAccountInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCtoGCAssociatedExploiterAccountInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::MergeFrom(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::CopyFrom(const CMsgGCtoGCAssociatedExploiterAccountInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCtoGCAssociatedExploiterAccountInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCtoGCAssociatedExploiterAccountInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCtoGCAssociatedExploiterAccountInfoResponse::InternalSwap(CMsgGCtoGCAssociatedExploiterAccountInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accounts_.InternalSwap(&other->accounts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCtoGCAssociatedExploiterAccountInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPullTabsData_Slot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPullTabsData_Slot>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_board_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_redeemed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgPullTabsData_Slot::CMsgPullTabsData_Slot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPullTabsData.Slot)
}
CMsgPullTabsData_Slot::CMsgPullTabsData_Slot(const CMsgPullTabsData_Slot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&redeemed_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(redeemed_));
  // @@protoc_insertion_point(copy_constructor:CMsgPullTabsData.Slot)
}

void CMsgPullTabsData_Slot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&redeemed_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(redeemed_));
}

CMsgPullTabsData_Slot::~CMsgPullTabsData_Slot() {
  // @@protoc_insertion_point(destructor:CMsgPullTabsData.Slot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPullTabsData_Slot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPullTabsData_Slot::ArenaDtor(void* object) {
  CMsgPullTabsData_Slot* _this = reinterpret_cast< CMsgPullTabsData_Slot* >(object);
  (void)_this;
}
void CMsgPullTabsData_Slot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPullTabsData_Slot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPullTabsData_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPullTabsData.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&redeemed_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(redeemed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPullTabsData_Slot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 board_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_board_id(&has_bits);
          board_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 action_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool redeemed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_redeemed(&has_bits);
          redeemed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPullTabsData_Slot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPullTabsData.Slot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 board_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_board_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 action_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_action_id(), target);
  }

  // optional bool redeemed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_redeemed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPullTabsData.Slot)
  return target;
}

size_t CMsgPullTabsData_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPullTabsData.Slot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 board_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_board_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 action_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

    // optional bool redeemed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPullTabsData_Slot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPullTabsData.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPullTabsData_Slot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPullTabsData_Slot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPullTabsData.Slot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPullTabsData.Slot)
    MergeFrom(*source);
  }
}

void CMsgPullTabsData_Slot::MergeFrom(const CMsgPullTabsData_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPullTabsData.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      board_id_ = from.board_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      redeemed_ = from.redeemed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPullTabsData_Slot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPullTabsData.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPullTabsData_Slot::CopyFrom(const CMsgPullTabsData_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPullTabsData.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPullTabsData_Slot::IsInitialized() const {
  return true;
}

void CMsgPullTabsData_Slot::InternalSwap(CMsgPullTabsData_Slot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPullTabsData_Slot, redeemed_)
      + sizeof(CMsgPullTabsData_Slot::redeemed_)
      - PROTOBUF_FIELD_OFFSET(CMsgPullTabsData_Slot, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPullTabsData_Slot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPullTabsData_Jackpot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPullTabsData_Jackpot>()._has_bits_);
  static void set_has_board_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPullTabsData_Jackpot::CMsgPullTabsData_Jackpot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPullTabsData.Jackpot)
}
CMsgPullTabsData_Jackpot::CMsgPullTabsData_Jackpot(const CMsgPullTabsData_Jackpot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_id_, &from.board_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&board_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPullTabsData.Jackpot)
}

void CMsgPullTabsData_Jackpot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&board_id_)) + sizeof(hero_id_));
}

CMsgPullTabsData_Jackpot::~CMsgPullTabsData_Jackpot() {
  // @@protoc_insertion_point(destructor:CMsgPullTabsData.Jackpot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPullTabsData_Jackpot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPullTabsData_Jackpot::ArenaDtor(void* object) {
  CMsgPullTabsData_Jackpot* _this = reinterpret_cast< CMsgPullTabsData_Jackpot* >(object);
  (void)_this;
}
void CMsgPullTabsData_Jackpot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPullTabsData_Jackpot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPullTabsData_Jackpot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPullTabsData.Jackpot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&board_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&board_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPullTabsData_Jackpot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 board_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_board_id(&has_bits);
          board_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 action_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPullTabsData_Jackpot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPullTabsData.Jackpot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 board_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_board_id(), target);
  }

  // optional uint32 action_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPullTabsData.Jackpot)
  return target;
}

size_t CMsgPullTabsData_Jackpot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPullTabsData.Jackpot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 board_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_board_id());
    }

    // optional uint32 action_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPullTabsData_Jackpot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPullTabsData.Jackpot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPullTabsData_Jackpot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPullTabsData_Jackpot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPullTabsData.Jackpot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPullTabsData.Jackpot)
    MergeFrom(*source);
  }
}

void CMsgPullTabsData_Jackpot::MergeFrom(const CMsgPullTabsData_Jackpot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPullTabsData.Jackpot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      board_id_ = from.board_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPullTabsData_Jackpot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPullTabsData.Jackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPullTabsData_Jackpot::CopyFrom(const CMsgPullTabsData_Jackpot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPullTabsData.Jackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPullTabsData_Jackpot::IsInitialized() const {
  return true;
}

void CMsgPullTabsData_Jackpot::InternalSwap(CMsgPullTabsData_Jackpot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPullTabsData_Jackpot, hero_id_)
      + sizeof(CMsgPullTabsData_Jackpot::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPullTabsData_Jackpot, board_id_)>(
          reinterpret_cast<char*>(&board_id_),
          reinterpret_cast<char*>(&other->board_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPullTabsData_Jackpot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPullTabsData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPullTabsData>()._has_bits_);
  static void set_has_last_board(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPullTabsData::CMsgPullTabsData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slots_(arena),
  jackpots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPullTabsData)
}
CMsgPullTabsData::CMsgPullTabsData(const CMsgPullTabsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slots_(from.slots_),
      jackpots_(from.jackpots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_board_ = from.last_board_;
  // @@protoc_insertion_point(copy_constructor:CMsgPullTabsData)
}

void CMsgPullTabsData::SharedCtor() {
last_board_ = 0u;
}

CMsgPullTabsData::~CMsgPullTabsData() {
  // @@protoc_insertion_point(destructor:CMsgPullTabsData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPullTabsData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPullTabsData::ArenaDtor(void* object) {
  CMsgPullTabsData* _this = reinterpret_cast< CMsgPullTabsData* >(object);
  (void)_this;
}
void CMsgPullTabsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPullTabsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPullTabsData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPullTabsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slots_.Clear();
  jackpots_.Clear();
  last_board_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPullTabsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgPullTabsData.Slot slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgPullTabsData.Jackpot jackpots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jackpots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 last_board = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_last_board(&has_bits);
          last_board_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPullTabsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPullTabsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPullTabsData.Slot slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_slots(i), target, stream);
  }

  // repeated .CMsgPullTabsData.Jackpot jackpots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jackpots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_jackpots(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 last_board = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_board(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPullTabsData)
  return target;
}

size_t CMsgPullTabsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPullTabsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPullTabsData.Slot slots = 1;
  total_size += 1UL * this->_internal_slots_size();
  for (const auto& msg : this->slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgPullTabsData.Jackpot jackpots = 2;
  total_size += 1UL * this->_internal_jackpots_size();
  for (const auto& msg : this->jackpots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 last_board = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_board());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPullTabsData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPullTabsData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPullTabsData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPullTabsData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPullTabsData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPullTabsData)
    MergeFrom(*source);
  }
}

void CMsgPullTabsData::MergeFrom(const CMsgPullTabsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPullTabsData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  jackpots_.MergeFrom(from.jackpots_);
  if (from._internal_has_last_board()) {
    _internal_set_last_board(from._internal_last_board());
  }
}

void CMsgPullTabsData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPullTabsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPullTabsData::CopyFrom(const CMsgPullTabsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPullTabsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPullTabsData::IsInitialized() const {
  return true;
}

void CMsgPullTabsData::InternalSwap(CMsgPullTabsData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slots_.InternalSwap(&other->slots_);
  jackpots_.InternalSwap(&other->jackpots_);
  swap(last_board_, other->last_board_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPullTabsData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUnderDraftData_BenchSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUnderDraftData_BenchSlot>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stars(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgUnderDraftData_BenchSlot::CMsgUnderDraftData_BenchSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUnderDraftData.BenchSlot)
}
CMsgUnderDraftData_BenchSlot::CMsgUnderDraftData_BenchSlot(const CMsgUnderDraftData_BenchSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stars_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(stars_));
  // @@protoc_insertion_point(copy_constructor:CMsgUnderDraftData.BenchSlot)
}

void CMsgUnderDraftData_BenchSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stars_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(stars_));
}

CMsgUnderDraftData_BenchSlot::~CMsgUnderDraftData_BenchSlot() {
  // @@protoc_insertion_point(destructor:CMsgUnderDraftData.BenchSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUnderDraftData_BenchSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgUnderDraftData_BenchSlot::ArenaDtor(void* object) {
  CMsgUnderDraftData_BenchSlot* _this = reinterpret_cast< CMsgUnderDraftData_BenchSlot* >(object);
  (void)_this;
}
void CMsgUnderDraftData_BenchSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUnderDraftData_BenchSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUnderDraftData_BenchSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUnderDraftData.BenchSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stars_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(stars_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUnderDraftData_BenchSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_stars(&has_bits);
          stars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUnderDraftData_BenchSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUnderDraftData.BenchSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional uint32 stars = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stars(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUnderDraftData.BenchSlot)
  return target;
}

size_t CMsgUnderDraftData_BenchSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUnderDraftData.BenchSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 stars = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stars());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUnderDraftData_BenchSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUnderDraftData.BenchSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUnderDraftData_BenchSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUnderDraftData_BenchSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUnderDraftData.BenchSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUnderDraftData.BenchSlot)
    MergeFrom(*source);
  }
}

void CMsgUnderDraftData_BenchSlot::MergeFrom(const CMsgUnderDraftData_BenchSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUnderDraftData.BenchSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      stars_ = from.stars_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUnderDraftData_BenchSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUnderDraftData.BenchSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUnderDraftData_BenchSlot::CopyFrom(const CMsgUnderDraftData_BenchSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUnderDraftData.BenchSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUnderDraftData_BenchSlot::IsInitialized() const {
  return true;
}

void CMsgUnderDraftData_BenchSlot::InternalSwap(CMsgUnderDraftData_BenchSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUnderDraftData_BenchSlot, stars_)
      + sizeof(CMsgUnderDraftData_BenchSlot::stars_)
      - PROTOBUF_FIELD_OFFSET(CMsgUnderDraftData_BenchSlot, slot_id_)>(
          reinterpret_cast<char*>(&slot_id_),
          reinterpret_cast<char*>(&other->slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUnderDraftData_BenchSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUnderDraftData_ShopSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUnderDraftData_ShopSlot>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_special_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgUnderDraftData_ShopSlot::CMsgUnderDraftData_ShopSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUnderDraftData.ShopSlot)
}
CMsgUnderDraftData_ShopSlot::CMsgUnderDraftData_ShopSlot(const CMsgUnderDraftData_ShopSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_special_reward_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(is_special_reward_));
  // @@protoc_insertion_point(copy_constructor:CMsgUnderDraftData.ShopSlot)
}

void CMsgUnderDraftData_ShopSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_special_reward_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(is_special_reward_));
}

CMsgUnderDraftData_ShopSlot::~CMsgUnderDraftData_ShopSlot() {
  // @@protoc_insertion_point(destructor:CMsgUnderDraftData.ShopSlot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUnderDraftData_ShopSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgUnderDraftData_ShopSlot::ArenaDtor(void* object) {
  CMsgUnderDraftData_ShopSlot* _this = reinterpret_cast< CMsgUnderDraftData_ShopSlot* >(object);
  (void)_this;
}
void CMsgUnderDraftData_ShopSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUnderDraftData_ShopSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUnderDraftData_ShopSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUnderDraftData.ShopSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_special_reward_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(is_special_reward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUnderDraftData_ShopSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_special_reward = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_special_reward(&has_bits);
          is_special_reward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUnderDraftData_ShopSlot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUnderDraftData.ShopSlot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional bool is_special_reward = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_special_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUnderDraftData.ShopSlot)
  return target;
}

size_t CMsgUnderDraftData_ShopSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUnderDraftData.ShopSlot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional bool is_special_reward = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUnderDraftData_ShopSlot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUnderDraftData.ShopSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUnderDraftData_ShopSlot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUnderDraftData_ShopSlot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUnderDraftData.ShopSlot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUnderDraftData.ShopSlot)
    MergeFrom(*source);
  }
}

void CMsgUnderDraftData_ShopSlot::MergeFrom(const CMsgUnderDraftData_ShopSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUnderDraftData.ShopSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_special_reward_ = from.is_special_reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUnderDraftData_ShopSlot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUnderDraftData.ShopSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUnderDraftData_ShopSlot::CopyFrom(const CMsgUnderDraftData_ShopSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUnderDraftData.ShopSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUnderDraftData_ShopSlot::IsInitialized() const {
  return true;
}

void CMsgUnderDraftData_ShopSlot::InternalSwap(CMsgUnderDraftData_ShopSlot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUnderDraftData_ShopSlot, is_special_reward_)
      + sizeof(CMsgUnderDraftData_ShopSlot::is_special_reward_)
      - PROTOBUF_FIELD_OFFSET(CMsgUnderDraftData_ShopSlot, slot_id_)>(
          reinterpret_cast<char*>(&slot_id_),
          reinterpret_cast<char*>(&other->slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUnderDraftData_ShopSlot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgUnderDraftData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgUnderDraftData>()._has_bits_);
  static void set_has_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_not_restorable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgUnderDraftData::CMsgUnderDraftData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bench_slots_(arena),
  shop_slots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgUnderDraftData)
}
CMsgUnderDraftData::CMsgUnderDraftData(const CMsgUnderDraftData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bench_slots_(from.bench_slots_),
      shop_slots_(from.shop_slots_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gold_, &from.gold_,
    static_cast<size_t>(reinterpret_cast<char*>(&not_restorable_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(not_restorable_));
  // @@protoc_insertion_point(copy_constructor:CMsgUnderDraftData)
}

void CMsgUnderDraftData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gold_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&not_restorable_) -
    reinterpret_cast<char*>(&gold_)) + sizeof(not_restorable_));
}

CMsgUnderDraftData::~CMsgUnderDraftData() {
  // @@protoc_insertion_point(destructor:CMsgUnderDraftData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgUnderDraftData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgUnderDraftData::ArenaDtor(void* object) {
  CMsgUnderDraftData* _this = reinterpret_cast< CMsgUnderDraftData* >(object);
  (void)_this;
}
void CMsgUnderDraftData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgUnderDraftData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgUnderDraftData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgUnderDraftData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bench_slots_.Clear();
  shop_slots_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&not_restorable_) -
        reinterpret_cast<char*>(&gold_)) + sizeof(not_restorable_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgUnderDraftData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgUnderDraftData.BenchSlot bench_slots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bench_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgUnderDraftData.ShopSlot shop_slots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shop_slots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 gold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gold(&has_bits);
          gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_gold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_total_gold(&has_bits);
          total_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool not_restorable = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_not_restorable(&has_bits);
          not_restorable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgUnderDraftData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgUnderDraftData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgUnderDraftData.BenchSlot bench_slots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bench_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bench_slots(i), target, stream);
  }

  // repeated .CMsgUnderDraftData.ShopSlot shop_slots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shop_slots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_shop_slots(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 gold = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gold(), target);
  }

  // optional uint32 total_gold = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_total_gold(), target);
  }

  // optional bool not_restorable = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_not_restorable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgUnderDraftData)
  return target;
}

size_t CMsgUnderDraftData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgUnderDraftData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgUnderDraftData.BenchSlot bench_slots = 1;
  total_size += 1UL * this->_internal_bench_slots_size();
  for (const auto& msg : this->bench_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgUnderDraftData.ShopSlot shop_slots = 2;
  total_size += 1UL * this->_internal_shop_slots_size();
  for (const auto& msg : this->shop_slots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 gold = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
    }

    // optional uint32 total_gold = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_gold());
    }

    // optional bool not_restorable = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUnderDraftData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgUnderDraftData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUnderDraftData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgUnderDraftData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgUnderDraftData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgUnderDraftData)
    MergeFrom(*source);
  }
}

void CMsgUnderDraftData::MergeFrom(const CMsgUnderDraftData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgUnderDraftData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bench_slots_.MergeFrom(from.bench_slots_);
  shop_slots_.MergeFrom(from.shop_slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_gold_ = from.total_gold_;
    }
    if (cached_has_bits & 0x00000004u) {
      not_restorable_ = from.not_restorable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUnderDraftData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgUnderDraftData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUnderDraftData::CopyFrom(const CMsgUnderDraftData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgUnderDraftData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUnderDraftData::IsInitialized() const {
  return true;
}

void CMsgUnderDraftData::InternalSwap(CMsgUnderDraftData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bench_slots_.InternalSwap(&other->bench_slots_);
  shop_slots_.InternalSwap(&other->shop_slots_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgUnderDraftData, not_restorable_)
      + sizeof(CMsgUnderDraftData::not_restorable_)
      - PROTOBUF_FIELD_OFFSET(CMsgUnderDraftData, gold_)>(
          reinterpret_cast<char*>(&gold_),
          reinterpret_cast<char*>(&other->gold_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgUnderDraftData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlayerTitleData::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlayerTitleData>()._has_bits_);
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPlayerTitleData::CMsgPlayerTitleData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  title_(arena),
  event_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlayerTitleData)
}
CMsgPlayerTitleData::CMsgPlayerTitleData(const CMsgPlayerTitleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      title_(from.title_),
      event_id_(from.event_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:CMsgPlayerTitleData)
}

void CMsgPlayerTitleData::SharedCtor() {
active_ = 0u;
}

CMsgPlayerTitleData::~CMsgPlayerTitleData() {
  // @@protoc_insertion_point(destructor:CMsgPlayerTitleData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlayerTitleData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPlayerTitleData::ArenaDtor(void* object) {
  CMsgPlayerTitleData* _this = reinterpret_cast< CMsgPlayerTitleData* >(object);
  (void)_this;
}
void CMsgPlayerTitleData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlayerTitleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlayerTitleData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlayerTitleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.Clear();
  event_id_.Clear();
  active_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlayerTitleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_title(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_title(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_event_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_event_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlayerTitleData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlayerTitleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 title = 1;
  for (int i = 0, n = this->_internal_title_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_title(i), target);
  }

  // repeated uint32 event_id = 2;
  for (int i = 0, n = this->_internal_event_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 active = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlayerTitleData)
  return target;
}

size_t CMsgPlayerTitleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlayerTitleData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 title = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->title_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_title_size());
    total_size += data_size;
  }

  // repeated uint32 event_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->event_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_event_id_size());
    total_size += data_size;
  }

  // optional uint32 active = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlayerTitleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlayerTitleData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerTitleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlayerTitleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlayerTitleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlayerTitleData)
    MergeFrom(*source);
  }
}

void CMsgPlayerTitleData::MergeFrom(const CMsgPlayerTitleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlayerTitleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  title_.MergeFrom(from.title_);
  event_id_.MergeFrom(from.event_id_);
  if (from._internal_has_active()) {
    _internal_set_active(from._internal_active());
  }
}

void CMsgPlayerTitleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlayerTitleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerTitleData::CopyFrom(const CMsgPlayerTitleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlayerTitleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerTitleData::IsInitialized() const {
  return true;
}

void CMsgPlayerTitleData::InternalSwap(CMsgPlayerTitleData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  title_.InternalSwap(&other->title_);
  event_id_.InternalSwap(&other->event_id_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlayerTitleData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATriviaQuestion::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATriviaQuestion>()._has_bits_);
  static void set_has_question_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_category(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_question_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_correct_answer_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTATriviaQuestion::CMsgDOTATriviaQuestion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  answer_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATriviaQuestion)
}
CMsgDOTATriviaQuestion::CMsgDOTATriviaQuestion(const CMsgDOTATriviaQuestion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      answer_values_(from.answer_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  question_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_question_value()) {
    question_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_question_value(), 
      GetArena());
  }
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&correct_answer_index_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(correct_answer_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATriviaQuestion)
}

void CMsgDOTATriviaQuestion::SharedCtor() {
question_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&question_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&correct_answer_index_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(correct_answer_index_));
}

CMsgDOTATriviaQuestion::~CMsgDOTATriviaQuestion() {
  // @@protoc_insertion_point(destructor:CMsgDOTATriviaQuestion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATriviaQuestion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  question_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATriviaQuestion::ArenaDtor(void* object) {
  CMsgDOTATriviaQuestion* _this = reinterpret_cast< CMsgDOTATriviaQuestion* >(object);
  (void)_this;
}
void CMsgDOTATriviaQuestion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATriviaQuestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATriviaQuestion::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATriviaQuestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    question_value_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&question_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&correct_answer_index_) -
        reinterpret_cast<char*>(&question_id_)) + sizeof(correct_answer_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATriviaQuestion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 question_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_question_id(&has_bits);
          question_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EDOTATriviaQuestionCategory category = 2 [default = k_EDOTATriviaQuestionCategory_AbilityIcon];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTATriviaQuestionCategory_IsValid(val))) {
            _internal_set_category(static_cast<::EDOTATriviaQuestionCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string question_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_question_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATriviaQuestion.question_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string answer_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_answer_values();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATriviaQuestion.answer_values");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 correct_answer_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_correct_answer_index(&has_bits);
          correct_answer_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATriviaQuestion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATriviaQuestion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_question_id(), target);
  }

  // optional .EDOTATriviaQuestionCategory category = 2 [default = k_EDOTATriviaQuestionCategory_AbilityIcon];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_category(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // optional string question_value = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_question_value().data(), static_cast<int>(this->_internal_question_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATriviaQuestion.question_value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_question_value(), target);
  }

  // repeated string answer_values = 5;
  for (int i = 0, n = this->_internal_answer_values_size(); i < n; i++) {
    const auto& s = this->_internal_answer_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATriviaQuestion.answer_values");
    target = stream->WriteString(5, s, target);
  }

  // optional uint32 correct_answer_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_correct_answer_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATriviaQuestion)
  return target;
}

size_t CMsgDOTATriviaQuestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATriviaQuestion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string answer_values = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(answer_values_.size());
  for (int i = 0, n = answer_values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      answer_values_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string question_value = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_question_value());
    }

    // optional uint32 question_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_question_id());
    }

    // optional .EDOTATriviaQuestionCategory category = 2 [default = k_EDOTATriviaQuestionCategory_AbilityIcon];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_category());
    }

    // optional uint32 timestamp = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 correct_answer_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_correct_answer_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATriviaQuestion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATriviaQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATriviaQuestion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATriviaQuestion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATriviaQuestion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATriviaQuestion)
    MergeFrom(*source);
  }
}

void CMsgDOTATriviaQuestion::MergeFrom(const CMsgDOTATriviaQuestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATriviaQuestion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  answer_values_.MergeFrom(from.answer_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_question_value(from._internal_question_value());
    }
    if (cached_has_bits & 0x00000002u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      category_ = from.category_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      correct_answer_index_ = from.correct_answer_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATriviaQuestion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATriviaQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATriviaQuestion::CopyFrom(const CMsgDOTATriviaQuestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATriviaQuestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATriviaQuestion::IsInitialized() const {
  return true;
}

void CMsgDOTATriviaQuestion::InternalSwap(CMsgDOTATriviaQuestion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  answer_values_.InternalSwap(&other->answer_values_);
  question_value_.Swap(&other->question_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATriviaQuestion, correct_answer_index_)
      + sizeof(CMsgDOTATriviaQuestion::correct_answer_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATriviaQuestion, question_id_)>(
          reinterpret_cast<char*>(&question_id_),
          reinterpret_cast<char*>(&other->question_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATriviaQuestion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATriviaQuestionAnswersSummary::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATriviaQuestionAnswersSummary>()._has_bits_);
  static void set_has_summary_available(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATriviaQuestionAnswersSummary::CMsgDOTATriviaQuestionAnswersSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  picked_count_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATriviaQuestionAnswersSummary)
}
CMsgDOTATriviaQuestionAnswersSummary::CMsgDOTATriviaQuestionAnswersSummary(const CMsgDOTATriviaQuestionAnswersSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      picked_count_(from.picked_count_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  summary_available_ = from.summary_available_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATriviaQuestionAnswersSummary)
}

void CMsgDOTATriviaQuestionAnswersSummary::SharedCtor() {
summary_available_ = false;
}

CMsgDOTATriviaQuestionAnswersSummary::~CMsgDOTATriviaQuestionAnswersSummary() {
  // @@protoc_insertion_point(destructor:CMsgDOTATriviaQuestionAnswersSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATriviaQuestionAnswersSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATriviaQuestionAnswersSummary::ArenaDtor(void* object) {
  CMsgDOTATriviaQuestionAnswersSummary* _this = reinterpret_cast< CMsgDOTATriviaQuestionAnswersSummary* >(object);
  (void)_this;
}
void CMsgDOTATriviaQuestionAnswersSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATriviaQuestionAnswersSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATriviaQuestionAnswersSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATriviaQuestionAnswersSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  picked_count_.Clear();
  summary_available_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATriviaQuestionAnswersSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool summary_available = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_summary_available(&has_bits);
          summary_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 picked_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_picked_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_picked_count(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATriviaQuestionAnswersSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATriviaQuestionAnswersSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool summary_available = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_summary_available(), target);
  }

  // repeated uint32 picked_count = 2;
  for (int i = 0, n = this->_internal_picked_count_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_picked_count(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATriviaQuestionAnswersSummary)
  return target;
}

size_t CMsgDOTATriviaQuestionAnswersSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATriviaQuestionAnswersSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 picked_count = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->picked_count_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_picked_count_size());
    total_size += data_size;
  }

  // optional bool summary_available = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATriviaQuestionAnswersSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATriviaQuestionAnswersSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATriviaQuestionAnswersSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATriviaQuestionAnswersSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATriviaQuestionAnswersSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATriviaQuestionAnswersSummary)
    MergeFrom(*source);
  }
}

void CMsgDOTATriviaQuestionAnswersSummary::MergeFrom(const CMsgDOTATriviaQuestionAnswersSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATriviaQuestionAnswersSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picked_count_.MergeFrom(from.picked_count_);
  if (from._internal_has_summary_available()) {
    _internal_set_summary_available(from._internal_summary_available());
  }
}

void CMsgDOTATriviaQuestionAnswersSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATriviaQuestionAnswersSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATriviaQuestionAnswersSummary::CopyFrom(const CMsgDOTATriviaQuestionAnswersSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATriviaQuestionAnswersSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATriviaQuestionAnswersSummary::IsInitialized() const {
  return true;
}

void CMsgDOTATriviaQuestionAnswersSummary::InternalSwap(CMsgDOTATriviaQuestionAnswersSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  picked_count_.InternalSwap(&other->picked_count_);
  swap(summary_available_, other->summary_available_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATriviaQuestionAnswersSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataSpecialValues::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameDataSpecialValues>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_heading_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGameDataSpecialValues::CMsgGameDataSpecialValues(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_float_(arena),
  values_int_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataSpecialValues)
}
CMsgGameDataSpecialValues::CMsgGameDataSpecialValues(const CMsgGameDataSpecialValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      values_float_(from.values_float_),
      values_int_(from.values_int_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  heading_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_heading_loc()) {
    heading_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_heading_loc(), 
      GetArena());
  }
  is_percentage_ = from.is_percentage_;
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataSpecialValues)
}

void CMsgGameDataSpecialValues::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
heading_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
is_percentage_ = false;
}

CMsgGameDataSpecialValues::~CMsgGameDataSpecialValues() {
  // @@protoc_insertion_point(destructor:CMsgGameDataSpecialValues)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataSpecialValues::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  heading_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameDataSpecialValues::ArenaDtor(void* object) {
  CMsgGameDataSpecialValues* _this = reinterpret_cast< CMsgGameDataSpecialValues* >(object);
  (void)_this;
}
void CMsgGameDataSpecialValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataSpecialValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataSpecialValues::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataSpecialValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_float_.Clear();
  values_int_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      heading_loc_.ClearNonDefaultToEmpty();
    }
  }
  is_percentage_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataSpecialValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataSpecialValues.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 values_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_values_int(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_percentage(&has_bits);
          is_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string heading_loc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_heading_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataSpecialValues.heading_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataSpecialValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataSpecialValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataSpecialValues.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated float values_float = 2;
  for (int i = 0, n = this->_internal_values_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_values_float(i), target);
  }

  // repeated int32 values_int = 3;
  for (int i = 0, n = this->_internal_values_int_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_values_int(i), target);
  }

  // optional bool is_percentage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_percentage(), target);
  }

  // optional string heading_loc = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_heading_loc().data(), static_cast<int>(this->_internal_heading_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataSpecialValues.heading_loc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_heading_loc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataSpecialValues)
  return target;
}

size_t CMsgGameDataSpecialValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataSpecialValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values_float = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_float_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_float_size());
    total_size += data_size;
  }

  // repeated int32 values_int = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->values_int_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_int_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string heading_loc = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_heading_loc());
    }

    // optional bool is_percentage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataSpecialValues::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataSpecialValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataSpecialValues* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataSpecialValues>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataSpecialValues)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataSpecialValues)
    MergeFrom(*source);
  }
}

void CMsgGameDataSpecialValues::MergeFrom(const CMsgGameDataSpecialValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataSpecialValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_float_.MergeFrom(from.values_float_);
  values_int_.MergeFrom(from.values_int_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_heading_loc(from._internal_heading_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      is_percentage_ = from.is_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameDataSpecialValues::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataSpecialValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataSpecialValues::CopyFrom(const CMsgGameDataSpecialValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataSpecialValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataSpecialValues::IsInitialized() const {
  return true;
}

void CMsgGameDataSpecialValues::InternalSwap(CMsgGameDataSpecialValues* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_float_.InternalSwap(&other->values_float_);
  values_int_.InternalSwap(&other->values_int_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  heading_loc_.Swap(&other->heading_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_percentage_, other->is_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataSpecialValues::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataAbilityOrItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameDataAbilityOrItem>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_desc_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lore_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_shard_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scepter_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_behavior(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_target_team(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_target_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_immunity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_dispellable(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_level(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_item(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ability_has_scepter(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ability_has_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ability_is_granted_by_scepter(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ability_is_granted_by_shard(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_item_cost(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_item_initial_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_item_neutral_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_item_stock_max(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_item_stock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_item_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

CMsgGameDataAbilityOrItem::CMsgGameDataAbilityOrItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notes_loc_(arena),
  cast_ranges_(arena),
  cast_points_(arena),
  channel_times_(arena),
  cooldowns_(arena),
  durations_(arena),
  damages_(arena),
  mana_costs_(arena),
  gold_costs_(arena),
  special_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataAbilityOrItem)
}
CMsgGameDataAbilityOrItem::CMsgGameDataAbilityOrItem(const CMsgGameDataAbilityOrItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      notes_loc_(from.notes_loc_),
      cast_ranges_(from.cast_ranges_),
      cast_points_(from.cast_points_),
      channel_times_(from.channel_times_),
      cooldowns_(from.cooldowns_),
      durations_(from.durations_),
      damages_(from.damages_),
      mana_costs_(from.mana_costs_),
      gold_costs_(from.gold_costs_),
      special_values_(from.special_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_loc()) {
    name_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_loc(), 
      GetArena());
  }
  desc_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_desc_loc()) {
    desc_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc_loc(), 
      GetArena());
  }
  lore_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lore_loc()) {
    lore_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_lore_loc(), 
      GetArena());
  }
  shard_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shard_loc()) {
    shard_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_shard_loc(), 
      GetArena());
  }
  scepter_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scepter_loc()) {
    scepter_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scepter_loc(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_stock_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(item_stock_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataAbilityOrItem)
}

void CMsgGameDataAbilityOrItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
lore_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
shard_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scepter_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_stock_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(item_stock_time_));
}

CMsgGameDataAbilityOrItem::~CMsgGameDataAbilityOrItem() {
  // @@protoc_insertion_point(destructor:CMsgGameDataAbilityOrItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataAbilityOrItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lore_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shard_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scepter_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameDataAbilityOrItem::ArenaDtor(void* object) {
  CMsgGameDataAbilityOrItem* _this = reinterpret_cast< CMsgGameDataAbilityOrItem* >(object);
  (void)_this;
}
void CMsgGameDataAbilityOrItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataAbilityOrItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataAbilityOrItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataAbilityOrItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notes_loc_.Clear();
  cast_ranges_.Clear();
  cast_points_.Clear();
  channel_times_.Clear();
  cooldowns_.Clear();
  durations_.Clear();
  damages_.Clear();
  mana_costs_.Clear();
  gold_costs_.Clear();
  special_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      lore_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      shard_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      scepter_loc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&id_)) + sizeof(type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&behavior_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_quality_) -
        reinterpret_cast<char*>(&behavior_)) + sizeof(item_quality_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&max_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_initial_charges_) -
        reinterpret_cast<char*>(&max_level_)) + sizeof(item_initial_charges_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&item_neutral_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_stock_time_) -
        reinterpret_cast<char*>(&item_neutral_tier_)) + sizeof(item_stock_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataAbilityOrItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_loc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.name_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string desc_loc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_desc_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.desc_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lore_loc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_lore_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.lore_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string notes_loc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notes_loc();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.notes_loc");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string shard_loc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_shard_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.shard_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scepter_loc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_scepter_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataAbilityOrItem.scepter_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 behavior = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_behavior(&has_bits);
          behavior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_team = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_target_team(&has_bits);
          target_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_type = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_target_type(&has_bits);
          target_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 immunity = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_immunity(&has_bits);
          immunity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dispellable = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_dispellable(&has_bits);
          dispellable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_level = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_max_level(&has_bits);
          max_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cast_ranges = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_cast_ranges(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cast_ranges(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float cast_points = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_cast_points(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<253>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cast_points(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float channel_times = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_channel_times(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<261>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_channel_times(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float cooldowns = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_cooldowns(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<269>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cooldowns(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float durations = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_durations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<277>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_durations(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 damages = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_damages(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<280>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_damages(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mana_costs = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mana_costs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<288>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mana_costs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 gold_costs = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_gold_costs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<296>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_gold_costs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameDataSpecialValues special_values = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_special_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_item = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_item(&has_bits);
          is_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ability_has_scepter = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_ability_has_scepter(&has_bits);
          ability_has_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ability_has_shard = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_ability_has_shard(&has_bits);
          ability_has_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ability_is_granted_by_scepter = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_ability_is_granted_by_scepter(&has_bits);
          ability_is_granted_by_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool ability_is_granted_by_shard = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_ability_is_granted_by_shard(&has_bits);
          ability_is_granted_by_shard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_cost = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_item_cost(&has_bits);
          item_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_initial_charges = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_item_initial_charges(&has_bits);
          item_initial_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_neutral_tier = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_item_neutral_tier(&has_bits);
          item_neutral_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_stock_max = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_item_stock_max(&has_bits);
          item_stock_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float item_stock_time = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_item_stock_time(&has_bits);
          item_stock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_quality = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_item_quality(&has_bits);
          item_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataAbilityOrItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataAbilityOrItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string name_loc = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_loc().data(), static_cast<int>(this->_internal_name_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.name_loc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_loc(), target);
  }

  // optional string desc_loc = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_desc_loc().data(), static_cast<int>(this->_internal_desc_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.desc_loc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_desc_loc(), target);
  }

  // optional string lore_loc = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lore_loc().data(), static_cast<int>(this->_internal_lore_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.lore_loc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_lore_loc(), target);
  }

  // repeated string notes_loc = 8;
  for (int i = 0, n = this->_internal_notes_loc_size(); i < n; i++) {
    const auto& s = this->_internal_notes_loc(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.notes_loc");
    target = stream->WriteString(8, s, target);
  }

  // optional string shard_loc = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shard_loc().data(), static_cast<int>(this->_internal_shard_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.shard_loc");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_shard_loc(), target);
  }

  // optional string scepter_loc = 10;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scepter_loc().data(), static_cast<int>(this->_internal_scepter_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataAbilityOrItem.scepter_loc");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_scepter_loc(), target);
  }

  // optional uint32 type = 20;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_type(), target);
  }

  // optional uint64 behavior = 21;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(21, this->_internal_behavior(), target);
  }

  // optional uint32 target_team = 22;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_target_team(), target);
  }

  // optional uint32 target_type = 23;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_target_type(), target);
  }

  // optional uint32 flags = 24;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_flags(), target);
  }

  // optional uint32 damage = 25;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_damage(), target);
  }

  // optional uint32 immunity = 26;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_immunity(), target);
  }

  // optional uint32 dispellable = 27;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_dispellable(), target);
  }

  // optional uint32 max_level = 28;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_max_level(), target);
  }

  // repeated uint32 cast_ranges = 30;
  for (int i = 0, n = this->_internal_cast_ranges_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_cast_ranges(i), target);
  }

  // repeated float cast_points = 31;
  for (int i = 0, n = this->_internal_cast_points_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_cast_points(i), target);
  }

  // repeated float channel_times = 32;
  for (int i = 0, n = this->_internal_channel_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_channel_times(i), target);
  }

  // repeated float cooldowns = 33;
  for (int i = 0, n = this->_internal_cooldowns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(33, this->_internal_cooldowns(i), target);
  }

  // repeated float durations = 34;
  for (int i = 0, n = this->_internal_durations_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(34, this->_internal_durations(i), target);
  }

  // repeated uint32 damages = 35;
  for (int i = 0, n = this->_internal_damages_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_damages(i), target);
  }

  // repeated uint32 mana_costs = 36;
  for (int i = 0, n = this->_internal_mana_costs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_mana_costs(i), target);
  }

  // repeated uint32 gold_costs = 37;
  for (int i = 0, n = this->_internal_gold_costs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_gold_costs(i), target);
  }

  // repeated .CMsgGameDataSpecialValues special_values = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_special_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_special_values(i), target, stream);
  }

  // optional bool is_item = 50;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(50, this->_internal_is_item(), target);
  }

  // optional bool ability_has_scepter = 60;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(60, this->_internal_ability_has_scepter(), target);
  }

  // optional bool ability_has_shard = 61;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(61, this->_internal_ability_has_shard(), target);
  }

  // optional bool ability_is_granted_by_scepter = 62;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(62, this->_internal_ability_is_granted_by_scepter(), target);
  }

  // optional bool ability_is_granted_by_shard = 63;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(63, this->_internal_ability_is_granted_by_shard(), target);
  }

  // optional uint32 item_cost = 70;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(70, this->_internal_item_cost(), target);
  }

  // optional uint32 item_initial_charges = 71;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(71, this->_internal_item_initial_charges(), target);
  }

  // optional uint32 item_neutral_tier = 72;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(72, this->_internal_item_neutral_tier(), target);
  }

  // optional uint32 item_stock_max = 73;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(73, this->_internal_item_stock_max(), target);
  }

  // optional float item_stock_time = 74;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(74, this->_internal_item_stock_time(), target);
  }

  // optional uint32 item_quality = 85;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(85, this->_internal_item_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataAbilityOrItem)
  return target;
}

size_t CMsgGameDataAbilityOrItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataAbilityOrItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notes_loc = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notes_loc_.size());
  for (int i = 0, n = notes_loc_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notes_loc_.Get(i));
  }

  // repeated uint32 cast_ranges = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cast_ranges_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cast_ranges_size());
    total_size += data_size;
  }

  // repeated float cast_points = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cast_points_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cast_points_size());
    total_size += data_size;
  }

  // repeated float channel_times = 32;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_channel_times_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_channel_times_size());
    total_size += data_size;
  }

  // repeated float cooldowns = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cooldowns_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cooldowns_size());
    total_size += data_size;
  }

  // repeated float durations = 34;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_durations_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_durations_size());
    total_size += data_size;
  }

  // repeated uint32 damages = 35;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->damages_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_damages_size());
    total_size += data_size;
  }

  // repeated uint32 mana_costs = 36;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mana_costs_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mana_costs_size());
    total_size += data_size;
  }

  // repeated uint32 gold_costs = 37;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->gold_costs_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_gold_costs_size());
    total_size += data_size;
  }

  // repeated .CMsgGameDataSpecialValues special_values = 40;
  total_size += 2UL * this->_internal_special_values_size();
  for (const auto& msg : this->special_values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_loc = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_loc());
    }

    // optional string desc_loc = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_desc_loc());
    }

    // optional string lore_loc = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lore_loc());
    }

    // optional string shard_loc = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_shard_loc());
    }

    // optional string scepter_loc = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scepter_loc());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 type = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 behavior = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_behavior());
    }

    // optional uint32 target_team = 22;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_team());
    }

    // optional uint32 target_type = 23;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_type());
    }

    // optional uint32 flags = 24;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 damage = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

    // optional uint32 immunity = 26;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_immunity());
    }

    // optional uint32 dispellable = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dispellable());
    }

    // optional uint32 item_quality = 85;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_quality());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 max_level = 28;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_level());
    }

    // optional bool is_item = 50;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool ability_has_scepter = 60;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool ability_has_shard = 61;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool ability_is_granted_by_scepter = 62;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool ability_is_granted_by_shard = 63;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional uint32 item_cost = 70;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_cost());
    }

    // optional uint32 item_initial_charges = 71;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_initial_charges());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint32 item_neutral_tier = 72;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_neutral_tier());
    }

    // optional uint32 item_stock_max = 73;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_stock_max());
    }

    // optional float item_stock_time = 74;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataAbilityOrItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataAbilityOrItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataAbilityOrItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataAbilityOrItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataAbilityOrItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataAbilityOrItem)
    MergeFrom(*source);
  }
}

void CMsgGameDataAbilityOrItem::MergeFrom(const CMsgGameDataAbilityOrItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataAbilityOrItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notes_loc_.MergeFrom(from.notes_loc_);
  cast_ranges_.MergeFrom(from.cast_ranges_);
  cast_points_.MergeFrom(from.cast_points_);
  channel_times_.MergeFrom(from.channel_times_);
  cooldowns_.MergeFrom(from.cooldowns_);
  durations_.MergeFrom(from.durations_);
  damages_.MergeFrom(from.damages_);
  mana_costs_.MergeFrom(from.mana_costs_);
  gold_costs_.MergeFrom(from.gold_costs_);
  special_values_.MergeFrom(from.special_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name_loc(from._internal_name_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_desc_loc(from._internal_desc_loc());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_lore_loc(from._internal_lore_loc());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_shard_loc(from._internal_shard_loc());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_scepter_loc(from._internal_scepter_loc());
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      behavior_ = from.behavior_;
    }
    if (cached_has_bits & 0x00000200u) {
      target_team_ = from.target_team_;
    }
    if (cached_has_bits & 0x00000400u) {
      target_type_ = from.target_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00001000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00002000u) {
      immunity_ = from.immunity_;
    }
    if (cached_has_bits & 0x00004000u) {
      dispellable_ = from.dispellable_;
    }
    if (cached_has_bits & 0x00008000u) {
      item_quality_ = from.item_quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_level_ = from.max_level_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_item_ = from.is_item_;
    }
    if (cached_has_bits & 0x00040000u) {
      ability_has_scepter_ = from.ability_has_scepter_;
    }
    if (cached_has_bits & 0x00080000u) {
      ability_has_shard_ = from.ability_has_shard_;
    }
    if (cached_has_bits & 0x00100000u) {
      ability_is_granted_by_scepter_ = from.ability_is_granted_by_scepter_;
    }
    if (cached_has_bits & 0x00200000u) {
      ability_is_granted_by_shard_ = from.ability_is_granted_by_shard_;
    }
    if (cached_has_bits & 0x00400000u) {
      item_cost_ = from.item_cost_;
    }
    if (cached_has_bits & 0x00800000u) {
      item_initial_charges_ = from.item_initial_charges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      item_neutral_tier_ = from.item_neutral_tier_;
    }
    if (cached_has_bits & 0x02000000u) {
      item_stock_max_ = from.item_stock_max_;
    }
    if (cached_has_bits & 0x04000000u) {
      item_stock_time_ = from.item_stock_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameDataAbilityOrItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataAbilityOrItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataAbilityOrItem::CopyFrom(const CMsgGameDataAbilityOrItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataAbilityOrItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataAbilityOrItem::IsInitialized() const {
  return true;
}

void CMsgGameDataAbilityOrItem::InternalSwap(CMsgGameDataAbilityOrItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  notes_loc_.InternalSwap(&other->notes_loc_);
  cast_ranges_.InternalSwap(&other->cast_ranges_);
  cast_points_.InternalSwap(&other->cast_points_);
  channel_times_.InternalSwap(&other->channel_times_);
  cooldowns_.InternalSwap(&other->cooldowns_);
  durations_.InternalSwap(&other->durations_);
  damages_.InternalSwap(&other->damages_);
  mana_costs_.InternalSwap(&other->mana_costs_);
  gold_costs_.InternalSwap(&other->gold_costs_);
  special_values_.InternalSwap(&other->special_values_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_loc_.Swap(&other->name_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_loc_.Swap(&other->desc_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lore_loc_.Swap(&other->lore_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shard_loc_.Swap(&other->shard_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scepter_loc_.Swap(&other->scepter_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameDataAbilityOrItem, item_stock_time_)
      + sizeof(CMsgGameDataAbilityOrItem::item_stock_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameDataAbilityOrItem, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataAbilityOrItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataHero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameDataHero>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_order_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bio_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hype_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_npe_desc_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_str_base(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_str_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_agi_base(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_agi_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_int_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_int_gain(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_primary_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_complexity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_attack_capability(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_damage_min(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_damage_max(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_attack_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_attack_range(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_projectile_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_magic_resistance(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_turn_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_sight_range_day(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_sight_range_night(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_max_health(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_health_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_max_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_mana_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
};

CMsgGameDataHero::CMsgGameDataHero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  role_levels_(arena),
  abilities_(arena),
  talents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataHero)
}
CMsgGameDataHero::CMsgGameDataHero(const CMsgGameDataHero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      role_levels_(from.role_levels_),
      abilities_(from.abilities_),
      talents_(from.talents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_loc()) {
    name_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_loc(), 
      GetArena());
  }
  bio_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bio_loc()) {
    bio_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bio_loc(), 
      GetArena());
  }
  hype_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hype_loc()) {
    hype_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hype_loc(), 
      GetArena());
  }
  npe_desc_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_npe_desc_loc()) {
    npe_desc_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_npe_desc_loc(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mana_regen_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mana_regen_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataHero)
}

void CMsgGameDataHero::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bio_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hype_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
npe_desc_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mana_regen_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mana_regen_));
}

CMsgGameDataHero::~CMsgGameDataHero() {
  // @@protoc_insertion_point(destructor:CMsgGameDataHero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataHero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bio_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hype_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  npe_desc_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameDataHero::ArenaDtor(void* object) {
  CMsgGameDataHero* _this = reinterpret_cast< CMsgGameDataHero* >(object);
  (void)_this;
}
void CMsgGameDataHero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataHero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataHero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  role_levels_.Clear();
  abilities_.Clear();
  talents_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      bio_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      hype_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      npe_desc_loc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&str_base_) -
        reinterpret_cast<char*>(&id_)) + sizeof(str_base_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&str_gain_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attack_capability_) -
        reinterpret_cast<char*>(&str_gain_)) + sizeof(attack_capability_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&damage_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&movement_speed_) -
        reinterpret_cast<char*>(&damage_min_)) + sizeof(movement_speed_));
  }
  if (cached_has_bits & 0x7f000000u) {
    ::memset(&turn_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mana_regen_) -
        reinterpret_cast<char*>(&turn_rate_)) + sizeof(mana_regen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataHero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHero.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 order_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_order_id(&has_bits);
          order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_loc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHero.name_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string bio_loc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_bio_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHero.bio_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hype_loc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_hype_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHero.hype_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string npe_desc_loc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_npe_desc_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHero.npe_desc_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 str_base = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_str_base(&has_bits);
          str_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float str_gain = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_str_gain(&has_bits);
          str_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 agi_base = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_agi_base(&has_bits);
          agi_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float agi_gain = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_agi_gain(&has_bits);
          agi_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 int_base = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_int_base(&has_bits);
          int_base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float int_gain = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_int_gain(&has_bits);
          int_gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_attr = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_primary_attr(&has_bits);
          primary_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 complexity = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_complexity(&has_bits);
          complexity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attack_capability = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_attack_capability(&has_bits);
          attack_capability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 role_levels = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_role_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<184>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_role_levels(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_min = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_damage_min(&has_bits);
          damage_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage_max = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_damage_max(&has_bits);
          damage_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float attack_rate = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_attack_rate(&has_bits);
          attack_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 attack_range = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_attack_range(&has_bits);
          attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 projectile_speed = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_projectile_speed(&has_bits);
          projectile_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float armor = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 237)) {
          _Internal::set_has_armor(&has_bits);
          armor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 magic_resistance = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_magic_resistance(&has_bits);
          magic_resistance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 movement_speed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_movement_speed(&has_bits);
          movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float turn_rate = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_turn_rate(&has_bits);
          turn_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 sight_range_day = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sight_range_day(&has_bits);
          sight_range_day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sight_range_night = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sight_range_night(&has_bits);
          sight_range_night_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_health = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_max_health(&has_bits);
          max_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float health_regen = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_health_regen(&has_bits);
          health_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_mana = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_mana(&has_bits);
          max_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mana_regen = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_mana_regen(&has_bits);
          mana_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameDataAbilityOrItem abilities = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgGameDataAbilityOrItem talents = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_talents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<330>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataHero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataHero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHero.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional uint32 order_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_order_id(), target);
  }

  // optional string name_loc = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_loc().data(), static_cast<int>(this->_internal_name_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHero.name_loc");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name_loc(), target);
  }

  // optional string bio_loc = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_bio_loc().data(), static_cast<int>(this->_internal_bio_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHero.bio_loc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_bio_loc(), target);
  }

  // optional string hype_loc = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hype_loc().data(), static_cast<int>(this->_internal_hype_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHero.hype_loc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_hype_loc(), target);
  }

  // optional string npe_desc_loc = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_npe_desc_loc().data(), static_cast<int>(this->_internal_npe_desc_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHero.npe_desc_loc");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_npe_desc_loc(), target);
  }

  // optional uint32 str_base = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_str_base(), target);
  }

  // optional float str_gain = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_str_gain(), target);
  }

  // optional uint32 agi_base = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_agi_base(), target);
  }

  // optional float agi_gain = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_agi_gain(), target);
  }

  // optional uint32 int_base = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_int_base(), target);
  }

  // optional float int_gain = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_int_gain(), target);
  }

  // optional uint32 primary_attr = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_primary_attr(), target);
  }

  // optional uint32 complexity = 21;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_complexity(), target);
  }

  // optional uint32 attack_capability = 22;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_attack_capability(), target);
  }

  // repeated uint32 role_levels = 23;
  for (int i = 0, n = this->_internal_role_levels_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_role_levels(i), target);
  }

  // optional uint32 damage_min = 24;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_damage_min(), target);
  }

  // optional uint32 damage_max = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_damage_max(), target);
  }

  // optional float attack_rate = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(26, this->_internal_attack_rate(), target);
  }

  // optional uint32 attack_range = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_attack_range(), target);
  }

  // optional uint32 projectile_speed = 28;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_projectile_speed(), target);
  }

  // optional float armor = 29;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(29, this->_internal_armor(), target);
  }

  // optional uint32 magic_resistance = 30;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_magic_resistance(), target);
  }

  // optional uint32 movement_speed = 31;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_movement_speed(), target);
  }

  // optional float turn_rate = 32;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_turn_rate(), target);
  }

  // optional uint32 sight_range_day = 33;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_sight_range_day(), target);
  }

  // optional uint32 sight_range_night = 34;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_sight_range_night(), target);
  }

  // optional uint32 max_health = 35;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_max_health(), target);
  }

  // optional float health_regen = 36;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_health_regen(), target);
  }

  // optional uint32 max_mana = 37;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_max_mana(), target);
  }

  // optional float mana_regen = 38;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(38, this->_internal_mana_regen(), target);
  }

  // repeated .CMsgGameDataAbilityOrItem abilities = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_abilities(i), target, stream);
  }

  // repeated .CMsgGameDataAbilityOrItem talents = 41;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_talents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, this->_internal_talents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataHero)
  return target;
}

size_t CMsgGameDataHero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataHero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 role_levels = 23;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->role_levels_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_role_levels_size());
    total_size += data_size;
  }

  // repeated .CMsgGameDataAbilityOrItem abilities = 40;
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgGameDataAbilityOrItem talents = 41;
  total_size += 2UL * this->_internal_talents_size();
  for (const auto& msg : this->talents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_loc = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_loc());
    }

    // optional string bio_loc = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bio_loc());
    }

    // optional string hype_loc = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hype_loc());
    }

    // optional string npe_desc_loc = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_npe_desc_loc());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 order_id = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_order_id());
    }

    // optional uint32 str_base = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_str_base());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float str_gain = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 agi_base = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_agi_base());
    }

    // optional float agi_gain = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 int_base = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_int_base());
    }

    // optional float int_gain = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 primary_attr = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_attr());
    }

    // optional uint32 complexity = 21;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_complexity());
    }

    // optional uint32 attack_capability = 22;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attack_capability());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 damage_min = 24;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_min());
    }

    // optional uint32 damage_max = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage_max());
    }

    // optional float attack_rate = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional uint32 attack_range = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attack_range());
    }

    // optional uint32 projectile_speed = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_projectile_speed());
    }

    // optional float armor = 29;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional uint32 magic_resistance = 30;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_magic_resistance());
    }

    // optional uint32 movement_speed = 31;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_movement_speed());
    }

  }
  if (cached_has_bits & 0x7f000000u) {
    // optional float turn_rate = 32;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 sight_range_day = 33;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sight_range_day());
    }

    // optional uint32 sight_range_night = 34;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sight_range_night());
    }

    // optional uint32 max_health = 35;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_health());
    }

    // optional float health_regen = 36;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional uint32 max_mana = 37;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_mana());
    }

    // optional float mana_regen = 38;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataHero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataHero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataHero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataHero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataHero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataHero)
    MergeFrom(*source);
  }
}

void CMsgGameDataHero::MergeFrom(const CMsgGameDataHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataHero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  role_levels_.MergeFrom(from.role_levels_);
  abilities_.MergeFrom(from.abilities_);
  talents_.MergeFrom(from.talents_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name_loc(from._internal_name_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_bio_loc(from._internal_bio_loc());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_hype_loc(from._internal_hype_loc());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_npe_desc_loc(from._internal_npe_desc_loc());
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      order_id_ = from.order_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      str_base_ = from.str_base_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      str_gain_ = from.str_gain_;
    }
    if (cached_has_bits & 0x00000200u) {
      agi_base_ = from.agi_base_;
    }
    if (cached_has_bits & 0x00000400u) {
      agi_gain_ = from.agi_gain_;
    }
    if (cached_has_bits & 0x00000800u) {
      int_base_ = from.int_base_;
    }
    if (cached_has_bits & 0x00001000u) {
      int_gain_ = from.int_gain_;
    }
    if (cached_has_bits & 0x00002000u) {
      primary_attr_ = from.primary_attr_;
    }
    if (cached_has_bits & 0x00004000u) {
      complexity_ = from.complexity_;
    }
    if (cached_has_bits & 0x00008000u) {
      attack_capability_ = from.attack_capability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      damage_min_ = from.damage_min_;
    }
    if (cached_has_bits & 0x00020000u) {
      damage_max_ = from.damage_max_;
    }
    if (cached_has_bits & 0x00040000u) {
      attack_rate_ = from.attack_rate_;
    }
    if (cached_has_bits & 0x00080000u) {
      attack_range_ = from.attack_range_;
    }
    if (cached_has_bits & 0x00100000u) {
      projectile_speed_ = from.projectile_speed_;
    }
    if (cached_has_bits & 0x00200000u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00400000u) {
      magic_resistance_ = from.magic_resistance_;
    }
    if (cached_has_bits & 0x00800000u) {
      movement_speed_ = from.movement_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      turn_rate_ = from.turn_rate_;
    }
    if (cached_has_bits & 0x02000000u) {
      sight_range_day_ = from.sight_range_day_;
    }
    if (cached_has_bits & 0x04000000u) {
      sight_range_night_ = from.sight_range_night_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_health_ = from.max_health_;
    }
    if (cached_has_bits & 0x10000000u) {
      health_regen_ = from.health_regen_;
    }
    if (cached_has_bits & 0x20000000u) {
      max_mana_ = from.max_mana_;
    }
    if (cached_has_bits & 0x40000000u) {
      mana_regen_ = from.mana_regen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameDataHero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataHero::CopyFrom(const CMsgGameDataHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataHero::IsInitialized() const {
  return true;
}

void CMsgGameDataHero::InternalSwap(CMsgGameDataHero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  role_levels_.InternalSwap(&other->role_levels_);
  abilities_.InternalSwap(&other->abilities_);
  talents_.InternalSwap(&other->talents_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_loc_.Swap(&other->name_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bio_loc_.Swap(&other->bio_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hype_loc_.Swap(&other->hype_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  npe_desc_loc_.Swap(&other->npe_desc_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameDataHero, mana_regen_)
      + sizeof(CMsgGameDataHero::mana_regen_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameDataHero, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataHero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataAbilities::_Internal {
 public:
};

CMsgGameDataAbilities::CMsgGameDataAbilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataAbilities)
}
CMsgGameDataAbilities::CMsgGameDataAbilities(const CMsgGameDataAbilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataAbilities)
}

void CMsgGameDataAbilities::SharedCtor() {
}

CMsgGameDataAbilities::~CMsgGameDataAbilities() {
  // @@protoc_insertion_point(destructor:CMsgGameDataAbilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataAbilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameDataAbilities::ArenaDtor(void* object) {
  CMsgGameDataAbilities* _this = reinterpret_cast< CMsgGameDataAbilities* >(object);
  (void)_this;
}
void CMsgGameDataAbilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataAbilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataAbilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataAbilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGameDataAbilityOrItem abilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataAbilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataAbilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameDataAbilityOrItem abilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_abilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataAbilities)
  return target;
}

size_t CMsgGameDataAbilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataAbilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameDataAbilityOrItem abilities = 1;
  total_size += 1UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataAbilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataAbilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataAbilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataAbilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataAbilities)
    MergeFrom(*source);
  }
}

void CMsgGameDataAbilities::MergeFrom(const CMsgGameDataAbilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataAbilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
}

void CMsgGameDataAbilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataAbilities::CopyFrom(const CMsgGameDataAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataAbilities::IsInitialized() const {
  return true;
}

void CMsgGameDataAbilities::InternalSwap(CMsgGameDataAbilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  abilities_.InternalSwap(&other->abilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataAbilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataItems::_Internal {
 public:
};

CMsgGameDataItems::CMsgGameDataItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataItems)
}
CMsgGameDataItems::CMsgGameDataItems(const CMsgGameDataItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataItems)
}

void CMsgGameDataItems::SharedCtor() {
}

CMsgGameDataItems::~CMsgGameDataItems() {
  // @@protoc_insertion_point(destructor:CMsgGameDataItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameDataItems::ArenaDtor(void* object) {
  CMsgGameDataItems* _this = reinterpret_cast< CMsgGameDataItems* >(object);
  (void)_this;
}
void CMsgGameDataItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGameDataAbilityOrItem items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameDataAbilityOrItem items = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataItems)
  return target;
}

size_t CMsgGameDataItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataItems)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameDataAbilityOrItem items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataItems)
    MergeFrom(*source);
  }
}

void CMsgGameDataItems::MergeFrom(const CMsgGameDataItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
}

void CMsgGameDataItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataItems::CopyFrom(const CMsgGameDataItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataItems::IsInitialized() const {
  return true;
}

void CMsgGameDataItems::InternalSwap(CMsgGameDataItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataHeroes::_Internal {
 public:
};

CMsgGameDataHeroes::CMsgGameDataHeroes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  heroes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataHeroes)
}
CMsgGameDataHeroes::CMsgGameDataHeroes(const CMsgGameDataHeroes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heroes_(from.heroes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataHeroes)
}

void CMsgGameDataHeroes::SharedCtor() {
}

CMsgGameDataHeroes::~CMsgGameDataHeroes() {
  // @@protoc_insertion_point(destructor:CMsgGameDataHeroes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataHeroes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameDataHeroes::ArenaDtor(void* object) {
  CMsgGameDataHeroes* _this = reinterpret_cast< CMsgGameDataHeroes* >(object);
  (void)_this;
}
void CMsgGameDataHeroes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataHeroes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataHeroes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataHeroes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heroes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataHeroes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGameDataHero heroes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataHeroes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataHeroes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameDataHero heroes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_heroes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataHeroes)
  return target;
}

size_t CMsgGameDataHeroes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataHeroes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameDataHero heroes = 1;
  total_size += 1UL * this->_internal_heroes_size();
  for (const auto& msg : this->heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataHeroes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataHeroes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataHeroes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataHeroes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataHeroes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataHeroes)
    MergeFrom(*source);
  }
}

void CMsgGameDataHeroes::MergeFrom(const CMsgGameDataHeroes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataHeroes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heroes_.MergeFrom(from.heroes_);
}

void CMsgGameDataHeroes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataHeroes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataHeroes::CopyFrom(const CMsgGameDataHeroes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataHeroes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataHeroes::IsInitialized() const {
  return true;
}

void CMsgGameDataHeroes::InternalSwap(CMsgGameDataHeroes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  heroes_.InternalSwap(&other->heroes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataHeroes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataHeroList_HeroInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameDataHeroList_HeroInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name_english_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_primary_attr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_complexity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgGameDataHeroList_HeroInfo::CMsgGameDataHeroList_HeroInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataHeroList.HeroInfo)
}
CMsgGameDataHeroList_HeroInfo::CMsgGameDataHeroList_HeroInfo(const CMsgGameDataHeroList_HeroInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_loc()) {
    name_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_loc(), 
      GetArena());
  }
  name_english_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_english_loc()) {
    name_english_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_english_loc(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&complexity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(complexity_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataHeroList.HeroInfo)
}

void CMsgGameDataHeroList_HeroInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_english_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&complexity_) -
    reinterpret_cast<char*>(&id_)) + sizeof(complexity_));
}

CMsgGameDataHeroList_HeroInfo::~CMsgGameDataHeroList_HeroInfo() {
  // @@protoc_insertion_point(destructor:CMsgGameDataHeroList.HeroInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataHeroList_HeroInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_english_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameDataHeroList_HeroInfo::ArenaDtor(void* object) {
  CMsgGameDataHeroList_HeroInfo* _this = reinterpret_cast< CMsgGameDataHeroList_HeroInfo* >(object);
  (void)_this;
}
void CMsgGameDataHeroList_HeroInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataHeroList_HeroInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataHeroList_HeroInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataHeroList.HeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_english_loc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&complexity_) -
        reinterpret_cast<char*>(&id_)) + sizeof(complexity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataHeroList_HeroInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHeroList.HeroInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_loc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHeroList.HeroInfo.name_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_english_loc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name_english_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataHeroList.HeroInfo.name_english_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_attr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_primary_attr(&has_bits);
          primary_attr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 complexity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_complexity(&has_bits);
          complexity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataHeroList_HeroInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataHeroList.HeroInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHeroList.HeroInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string name_loc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_loc().data(), static_cast<int>(this->_internal_name_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHeroList.HeroInfo.name_loc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_loc(), target);
  }

  // optional string name_english_loc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_english_loc().data(), static_cast<int>(this->_internal_name_english_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataHeroList.HeroInfo.name_english_loc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_english_loc(), target);
  }

  // optional uint32 primary_attr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_primary_attr(), target);
  }

  // optional uint32 complexity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_complexity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataHeroList.HeroInfo)
  return target;
}

size_t CMsgGameDataHeroList_HeroInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataHeroList.HeroInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_loc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_loc());
    }

    // optional string name_english_loc = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_english_loc());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional uint32 primary_attr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_attr());
    }

    // optional uint32 complexity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_complexity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataHeroList_HeroInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataHeroList.HeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataHeroList_HeroInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataHeroList_HeroInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataHeroList.HeroInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataHeroList.HeroInfo)
    MergeFrom(*source);
  }
}

void CMsgGameDataHeroList_HeroInfo::MergeFrom(const CMsgGameDataHeroList_HeroInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataHeroList.HeroInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name_loc(from._internal_name_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name_english_loc(from._internal_name_english_loc());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      primary_attr_ = from.primary_attr_;
    }
    if (cached_has_bits & 0x00000020u) {
      complexity_ = from.complexity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameDataHeroList_HeroInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataHeroList.HeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataHeroList_HeroInfo::CopyFrom(const CMsgGameDataHeroList_HeroInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataHeroList.HeroInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataHeroList_HeroInfo::IsInitialized() const {
  return true;
}

void CMsgGameDataHeroList_HeroInfo::InternalSwap(CMsgGameDataHeroList_HeroInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_loc_.Swap(&other->name_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_english_loc_.Swap(&other->name_english_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameDataHeroList_HeroInfo, complexity_)
      + sizeof(CMsgGameDataHeroList_HeroInfo::complexity_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameDataHeroList_HeroInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataHeroList_HeroInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataHeroList::_Internal {
 public:
};

CMsgGameDataHeroList::CMsgGameDataHeroList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  heroes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataHeroList)
}
CMsgGameDataHeroList::CMsgGameDataHeroList(const CMsgGameDataHeroList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      heroes_(from.heroes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataHeroList)
}

void CMsgGameDataHeroList::SharedCtor() {
}

CMsgGameDataHeroList::~CMsgGameDataHeroList() {
  // @@protoc_insertion_point(destructor:CMsgGameDataHeroList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataHeroList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameDataHeroList::ArenaDtor(void* object) {
  CMsgGameDataHeroList* _this = reinterpret_cast< CMsgGameDataHeroList* >(object);
  (void)_this;
}
void CMsgGameDataHeroList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataHeroList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataHeroList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataHeroList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heroes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataHeroList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGameDataHeroList.HeroInfo heroes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataHeroList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataHeroList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameDataHeroList.HeroInfo heroes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_heroes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataHeroList)
  return target;
}

size_t CMsgGameDataHeroList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataHeroList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameDataHeroList.HeroInfo heroes = 1;
  total_size += 1UL * this->_internal_heroes_size();
  for (const auto& msg : this->heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataHeroList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataHeroList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataHeroList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataHeroList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataHeroList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataHeroList)
    MergeFrom(*source);
  }
}

void CMsgGameDataHeroList::MergeFrom(const CMsgGameDataHeroList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataHeroList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heroes_.MergeFrom(from.heroes_);
}

void CMsgGameDataHeroList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataHeroList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataHeroList::CopyFrom(const CMsgGameDataHeroList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataHeroList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataHeroList::IsInitialized() const {
  return true;
}

void CMsgGameDataHeroList::InternalSwap(CMsgGameDataHeroList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  heroes_.InternalSwap(&other->heroes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataHeroList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataItemAbilityList_ItemAbilityInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGameDataItemAbilityList_ItemAbilityInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name_english_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_neutral_item_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGameDataItemAbilityList_ItemAbilityInfo::CMsgGameDataItemAbilityList_ItemAbilityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataItemAbilityList.ItemAbilityInfo)
}
CMsgGameDataItemAbilityList_ItemAbilityInfo::CMsgGameDataItemAbilityList_ItemAbilityInfo(const CMsgGameDataItemAbilityList_ItemAbilityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_loc()) {
    name_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_loc(), 
      GetArena());
  }
  name_english_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_english_loc()) {
    name_english_loc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_english_loc(), 
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&neutral_item_tier_) -
    reinterpret_cast<char*>(&id_)) + sizeof(neutral_item_tier_));
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataItemAbilityList.ItemAbilityInfo)
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_english_loc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&neutral_item_tier_) -
    reinterpret_cast<char*>(&id_)) + sizeof(neutral_item_tier_));
}

CMsgGameDataItemAbilityList_ItemAbilityInfo::~CMsgGameDataItemAbilityList_ItemAbilityInfo() {
  // @@protoc_insertion_point(destructor:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_english_loc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::ArenaDtor(void* object) {
  CMsgGameDataItemAbilityList_ItemAbilityInfo* _this = reinterpret_cast< CMsgGameDataItemAbilityList_ItemAbilityInfo* >(object);
  (void)_this;
}
void CMsgGameDataItemAbilityList_ItemAbilityInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataItemAbilityList_ItemAbilityInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_loc_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      name_english_loc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&neutral_item_tier_) -
        reinterpret_cast<char*>(&id_)) + sizeof(neutral_item_tier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataItemAbilityList_ItemAbilityInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataItemAbilityList.ItemAbilityInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_loc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_english_loc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name_english_loc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 neutral_item_tier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_neutral_item_tier(&has_bits);
          neutral_item_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataItemAbilityList_ItemAbilityInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataItemAbilityList.ItemAbilityInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string name_loc = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_loc().data(), static_cast<int>(this->_internal_name_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataItemAbilityList.ItemAbilityInfo.name_loc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name_loc(), target);
  }

  // optional string name_english_loc = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_english_loc().data(), static_cast<int>(this->_internal_name_english_loc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGameDataItemAbilityList.ItemAbilityInfo.name_english_loc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name_english_loc(), target);
  }

  // optional int32 neutral_item_tier = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_neutral_item_tier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  return target;
}

size_t CMsgGameDataItemAbilityList_ItemAbilityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string name_loc = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_loc());
    }

    // optional string name_english_loc = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_english_loc());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

    // optional int32 neutral_item_tier = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_neutral_item_tier());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataItemAbilityList_ItemAbilityInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataItemAbilityList_ItemAbilityInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataItemAbilityList.ItemAbilityInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataItemAbilityList.ItemAbilityInfo)
    MergeFrom(*source);
  }
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::MergeFrom(const CMsgGameDataItemAbilityList_ItemAbilityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name_loc(from._internal_name_loc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_name_english_loc(from._internal_name_english_loc());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      neutral_item_tier_ = from.neutral_item_tier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::CopyFrom(const CMsgGameDataItemAbilityList_ItemAbilityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataItemAbilityList.ItemAbilityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataItemAbilityList_ItemAbilityInfo::IsInitialized() const {
  return true;
}

void CMsgGameDataItemAbilityList_ItemAbilityInfo::InternalSwap(CMsgGameDataItemAbilityList_ItemAbilityInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_loc_.Swap(&other->name_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_english_loc_.Swap(&other->name_english_loc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGameDataItemAbilityList_ItemAbilityInfo, neutral_item_tier_)
      + sizeof(CMsgGameDataItemAbilityList_ItemAbilityInfo::neutral_item_tier_)
      - PROTOBUF_FIELD_OFFSET(CMsgGameDataItemAbilityList_ItemAbilityInfo, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataItemAbilityList_ItemAbilityInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGameDataItemAbilityList::_Internal {
 public:
};

CMsgGameDataItemAbilityList::CMsgGameDataItemAbilityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  itemabilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGameDataItemAbilityList)
}
CMsgGameDataItemAbilityList::CMsgGameDataItemAbilityList(const CMsgGameDataItemAbilityList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      itemabilities_(from.itemabilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGameDataItemAbilityList)
}

void CMsgGameDataItemAbilityList::SharedCtor() {
}

CMsgGameDataItemAbilityList::~CMsgGameDataItemAbilityList() {
  // @@protoc_insertion_point(destructor:CMsgGameDataItemAbilityList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGameDataItemAbilityList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGameDataItemAbilityList::ArenaDtor(void* object) {
  CMsgGameDataItemAbilityList* _this = reinterpret_cast< CMsgGameDataItemAbilityList* >(object);
  (void)_this;
}
void CMsgGameDataItemAbilityList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGameDataItemAbilityList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGameDataItemAbilityList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGameDataItemAbilityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemabilities_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGameDataItemAbilityList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgGameDataItemAbilityList.ItemAbilityInfo itemabilities = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_itemabilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGameDataItemAbilityList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGameDataItemAbilityList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGameDataItemAbilityList.ItemAbilityInfo itemabilities = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_itemabilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_itemabilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGameDataItemAbilityList)
  return target;
}

size_t CMsgGameDataItemAbilityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGameDataItemAbilityList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGameDataItemAbilityList.ItemAbilityInfo itemabilities = 1;
  total_size += 1UL * this->_internal_itemabilities_size();
  for (const auto& msg : this->itemabilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGameDataItemAbilityList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGameDataItemAbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGameDataItemAbilityList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGameDataItemAbilityList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGameDataItemAbilityList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGameDataItemAbilityList)
    MergeFrom(*source);
  }
}

void CMsgGameDataItemAbilityList::MergeFrom(const CMsgGameDataItemAbilityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGameDataItemAbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemabilities_.MergeFrom(from.itemabilities_);
}

void CMsgGameDataItemAbilityList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGameDataItemAbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGameDataItemAbilityList::CopyFrom(const CMsgGameDataItemAbilityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGameDataItemAbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGameDataItemAbilityList::IsInitialized() const {
  return true;
}

void CMsgGameDataItemAbilityList::InternalSwap(CMsgGameDataItemAbilityList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  itemabilities_.InternalSwap(&other->itemabilities_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGameDataItemAbilityList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSODOTAGameAccountClient_RoleHandicap* Arena::CreateMaybeMessage< ::CSODOTAGameAccountClient_RoleHandicap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAGameAccountClient_RoleHandicap >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAGameAccountClient* Arena::CreateMaybeMessage< ::CSODOTAGameAccountClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAGameAccountClient >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAGameAccountPlus* Arena::CreateMaybeMessage< ::CSODOTAGameAccountPlus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAGameAccountPlus >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge* Arena::CreateMaybeMessage< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyPlayerPlusSubscriptionData_HeroBadge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyPlayerPlusSubscriptionData* Arena::CreateMaybeMessage< ::CMsgLobbyPlayerPlusSubscriptionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyPlayerPlusSubscriptionData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_ChatWheelMessageRange* Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_ChatWheelMessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_ChatWheelMessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_PingWheelMessageRange* Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_PingWheelMessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_PingWheelMessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_PeriodicResourceValues* Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_PeriodicResourceValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_PeriodicResourceValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_EventGameCustomActions* Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_EventGameCustomActions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_EventGameCustomActions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints_AccountPoints* Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints_AccountPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints_AccountPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventPoints* Arena::CreateMaybeMessage< ::CMsgLobbyEventPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyEventGameData* Arena::CreateMaybeMessage< ::CMsgLobbyEventGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyEventGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyGauntletProgress_AccountProgress* Arena::CreateMaybeMessage< ::CMsgLobbyGauntletProgress_AccountProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyGauntletProgress_AccountProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyGauntletProgress* Arena::CreateMaybeMessage< ::CMsgLobbyGauntletProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyGauntletProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLocalServerGuildData* Arena::CreateMaybeMessage< ::CMsgLocalServerGuildData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLocalServerGuildData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLocalServerFakeLobbyData* Arena::CreateMaybeMessage< ::CMsgLocalServerFakeLobbyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLocalServerFakeLobbyData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBattleCupVictory* Arena::CreateMaybeMessage< ::CMsgBattleCupVictory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBattleCupVictory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLobbyBattleCupVictoryList* Arena::CreateMaybeMessage< ::CMsgLobbyBattleCupVictoryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLobbyBattleCupVictoryList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABroadcastNotification* Arena::CreateMaybeMessage< ::CMsgDOTABroadcastNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABroadcastNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemHeroStatue* Arena::CreateMaybeMessage< ::CProtoItemHeroStatue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemHeroStatue >(arena);
}
template<> PROTOBUF_NOINLINE ::CProtoItemTeamShowcase* Arena::CreateMaybeMessage< ::CProtoItemTeamShowcase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CProtoItemTeamShowcase >(arena);
}
template<> PROTOBUF_NOINLINE ::CMatchPlayerAbilityUpgrade* Arena::CreateMaybeMessage< ::CMatchPlayerAbilityUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMatchPlayerAbilityUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::CMatchPlayerTimedStats* Arena::CreateMaybeMessage< ::CMatchPlayerTimedStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMatchPlayerTimedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMatchTeamTimedStats* Arena::CreateMaybeMessage< ::CMatchTeamTimedStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMatchTeamTimedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMatchAdditionalUnitInventory* Arena::CreateMaybeMessage< ::CMatchAdditionalUnitInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMatchAdditionalUnitInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMatchPlayerPermanentBuff* Arena::CreateMaybeMessage< ::CMatchPlayerPermanentBuff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMatchPlayerPermanentBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::CMatchHeroSelectEvent* Arena::CreateMaybeMessage< ::CMatchHeroSelectEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMatchHeroSelectEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CPartySearchClientParty* Arena::CreateMaybeMessage< ::CPartySearchClientParty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CPartySearchClientParty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProcessFantasyScheduledEvent* Arena::CreateMaybeMessage< ::CMsgDOTAProcessFantasyScheduledEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProcessFantasyScheduledEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAHasItemQuery* Arena::CreateMaybeMessage< ::CMsgDOTAHasItemQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAHasItemQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAHasItemResponse* Arena::CreateMaybeMessage< ::CMsgDOTAHasItemResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAHasItemResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCIsProQuery* Arena::CreateMaybeMessage< ::CMsgGCIsProQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCIsProQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCIsProResponse* Arena::CreateMaybeMessage< ::CMsgGCIsProResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCIsProResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAHasItemDefsQuery* Arena::CreateMaybeMessage< ::CMsgDOTAHasItemDefsQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAHasItemDefsQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAHasItemDefsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAHasItemDefsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAHasItemDefsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPlayerCardItemInfo* Arena::CreateMaybeMessage< ::CMsgGCGetPlayerCardItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPlayerCardItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* Arena::CreateMaybeMessage< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPlayerCardItemInfoResponse* Arena::CreateMaybeMessage< ::CMsgGCGetPlayerCardItemInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPlayerCardItemInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToGCFantasySetMatchLeague* Arena::CreateMaybeMessage< ::CMsgGCToGCFantasySetMatchLeague >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToGCFantasySetMatchLeague >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAMapLocationState* Arena::CreateMaybeMessage< ::CSODOTAMapLocationState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAMapLocationState >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeagueAdminList* Arena::CreateMaybeMessage< ::CMsgLeagueAdminList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeagueAdminList >(arena);
}
template<> PROTOBUF_NOINLINE ::CCompendiumTimestampedData* Arena::CreateMaybeMessage< ::CCompendiumTimestampedData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCompendiumTimestampedData >(arena);
}
template<> PROTOBUF_NOINLINE ::CCompendiumGameTimeline* Arena::CreateMaybeMessage< ::CCompendiumGameTimeline >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCompendiumGameTimeline >(arena);
}
template<> PROTOBUF_NOINLINE ::CCompendiumGameList* Arena::CreateMaybeMessage< ::CCompendiumGameList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CCompendiumGameList >(arena);
}
template<> PROTOBUF_NOINLINE ::CAdditionalEquipSlot* Arena::CreateMaybeMessage< ::CAdditionalEquipSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CAdditionalEquipSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Trophy* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Trophy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Trophy >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Stat* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Stat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Stat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Item* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Hero* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Emoticon* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Emoticon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Emoticon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot_Team* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard_Slot* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard_Slot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard_Slot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProfileCard* Arena::CreateMaybeMessage< ::CMsgDOTAProfileCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProfileCard >(arena);
}
template<> PROTOBUF_NOINLINE ::CSODOTAPlayerChallenge* Arena::CreateMaybeMessage< ::CSODOTAPlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSODOTAPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCRerollPlayerChallenge* Arena::CreateMaybeMessage< ::CMsgClientToGCRerollPlayerChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCRerollPlayerChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRerollPlayerChallengeResponse* Arena::CreateMaybeMessage< ::CMsgGCRerollPlayerChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRerollPlayerChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCTopCustomGamesList* Arena::CreateMaybeMessage< ::CMsgGCTopCustomGamesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCTopCustomGamesList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_TeamDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_TeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_TeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_ItemDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_ItemDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_ItemDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_AbilityDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_AbilityDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_AbilityDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_HeroToHeroStats* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_HeroToHeroStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_AbilityList* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_AbilityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_AbilityList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_PlayerDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_PlayerDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_PlayerDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_BuildingDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_BuildingDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_BuildingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_KillDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_KillDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_KillDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_BroadcasterDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_BroadcasterDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_PickBanDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_PickBanDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_PickBanDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_MatchDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_MatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_MatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_GraphData_LocationStats* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_GraphData_LocationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats_GraphData* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats_GraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats_GraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStats* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse_TeamDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse_TeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse_PickBanDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse_MatchDetails* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse_MatchDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse_MatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse_GraphData* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse_GraphData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse_GraphData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTARealtimeGameStatsTerse* Arena::CreateMaybeMessage< ::CMsgDOTARealtimeGameStatsTerse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTARealtimeGameStatsTerse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABroadcastTimelineEvent* Arena::CreateMaybeMessage< ::CMsgDOTABroadcastTimelineEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABroadcastTimelineEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientMatchGroupsVersion* Arena::CreateMaybeMessage< ::CMsgGCToClientMatchGroupsVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientMatchGroupsVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASDOHeroStatsHistory* Arena::CreateMaybeMessage< ::CMsgDOTASDOHeroStatsHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASDOHeroStatsHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonRewards_Reward* Arena::CreateMaybeMessage< ::CMsgDOTASeasonRewards_Reward >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonRewards_Reward >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonRewards* Arena::CreateMaybeMessage< ::CMsgDOTASeasonRewards >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonRewards >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonAchievements_Achievement* Arena::CreateMaybeMessage< ::CMsgDOTASeasonAchievements_Achievement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonAchievements_Achievement >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonAchievements* Arena::CreateMaybeMessage< ::CMsgDOTASeasonAchievements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonAchievements >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPredictionChoice* Arena::CreateMaybeMessage< ::CMsgPredictionChoice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPredictionChoice >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInGamePrediction_QueryKeyValues* Arena::CreateMaybeMessage< ::CMsgInGamePrediction_QueryKeyValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInGamePrediction_QueryKeyValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgInGamePrediction* Arena::CreateMaybeMessage< ::CMsgInGamePrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgInGamePrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonPredictions_Prediction_Answers* Arena::CreateMaybeMessage< ::CMsgDOTASeasonPredictions_Prediction_Answers >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonPredictions_Prediction_Answers >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonPredictions_Prediction* Arena::CreateMaybeMessage< ::CMsgDOTASeasonPredictions_Prediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonPredictions_Prediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeasonPredictions* Arena::CreateMaybeMessage< ::CMsgDOTASeasonPredictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeasonPredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAvailablePredictions_MatchPrediction* Arena::CreateMaybeMessage< ::CMsgAvailablePredictions_MatchPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAvailablePredictions_MatchPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAvailablePredictions* Arena::CreateMaybeMessage< ::CMsgAvailablePredictions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAvailablePredictions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeagueWatchedGames_Series* Arena::CreateMaybeMessage< ::CMsgLeagueWatchedGames_Series >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeagueWatchedGames_Series >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeagueWatchedGames_League* Arena::CreateMaybeMessage< ::CMsgLeagueWatchedGames_League >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeagueWatchedGames_League >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgLeagueWatchedGames* Arena::CreateMaybeMessage< ::CMsgLeagueWatchedGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgLeagueWatchedGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_Player_CustomGameData* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_Player_CustomGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_Player_CustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_Player_HeroDamageReceived* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_Player_HeroDamageReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_Player_HeroDamageReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_Player* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_BroadcasterInfo* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_BroadcasterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_BroadcasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_BroadcasterChannel* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_BroadcasterChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_BroadcasterChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_Coach* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_Coach >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_Coach >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch_CustomGameData* Arena::CreateMaybeMessage< ::CMsgDOTAMatch_CustomGameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch_CustomGameData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatch* Arena::CreateMaybeMessage< ::CMsgDOTAMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerCard_StatModifier* Arena::CreateMaybeMessage< ::CMsgPlayerCard_StatModifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerCard_StatModifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerCard* Arena::CreateMaybeMessage< ::CMsgPlayerCard >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerCard >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerStats* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAFantasyPlayerMatchStats* Arena::CreateMaybeMessage< ::CMsgDOTAFantasyPlayerMatchStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAFantasyPlayerMatchStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABotDebugInfo_Bot_Mode* Arena::CreateMaybeMessage< ::CMsgDOTABotDebugInfo_Bot_Mode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABotDebugInfo_Bot_Mode >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABotDebugInfo_Bot_Action* Arena::CreateMaybeMessage< ::CMsgDOTABotDebugInfo_Bot_Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABotDebugInfo_Bot_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABotDebugInfo_Bot* Arena::CreateMaybeMessage< ::CMsgDOTABotDebugInfo_Bot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABotDebugInfo_Bot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABotDebugInfo* Arena::CreateMaybeMessage< ::CMsgDOTABotDebugInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABotDebugInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSuccessfulHero* Arena::CreateMaybeMessage< ::CMsgSuccessfulHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSuccessfulHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRecentMatchInfo* Arena::CreateMaybeMessage< ::CMsgRecentMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRecentMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchTips_SingleTip* Arena::CreateMaybeMessage< ::CMsgMatchTips_SingleTip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchTips_SingleTip >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchTips* Arena::CreateMaybeMessage< ::CMsgMatchTips >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchTips >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatchMinimal_Player* Arena::CreateMaybeMessage< ::CMsgDOTAMatchMinimal_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatchMinimal_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatchMinimal_Tourney* Arena::CreateMaybeMessage< ::CMsgDOTAMatchMinimal_Tourney >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatchMinimal_Tourney >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMatchMinimal* Arena::CreateMaybeMessage< ::CMsgDOTAMatchMinimal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMatchMinimal >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgConsumableUsage* Arena::CreateMaybeMessage< ::CMsgConsumableUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgConsumableUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchConsumableUsage_PlayerUsage* Arena::CreateMaybeMessage< ::CMsgMatchConsumableUsage_PlayerUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchConsumableUsage_PlayerUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchConsumableUsage* Arena::CreateMaybeMessage< ::CMsgMatchConsumableUsage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchConsumableUsage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchEventActionGrants_PlayerGrants* Arena::CreateMaybeMessage< ::CMsgMatchEventActionGrants_PlayerGrants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchEventActionGrants_PlayerGrants >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgMatchEventActionGrants* Arena::CreateMaybeMessage< ::CMsgMatchEventActionGrants >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgMatchEventActionGrants >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCustomGameWhitelist* Arena::CreateMaybeMessage< ::CMsgCustomGameWhitelist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCustomGameWhitelist >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCustomGameWhitelistForEdit_WhitelistEntry* Arena::CreateMaybeMessage< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCustomGameWhitelistForEdit_WhitelistEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCustomGameWhitelistForEdit* Arena::CreateMaybeMessage< ::CMsgCustomGameWhitelistForEdit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCustomGameWhitelistForEdit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerRecentMatchInfo* Arena::CreateMaybeMessage< ::CMsgPlayerRecentMatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerRecentMatchInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerMatchRecord* Arena::CreateMaybeMessage< ::CMsgPlayerMatchRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerMatchRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerRecentMatchOutcomes* Arena::CreateMaybeMessage< ::CMsgPlayerRecentMatchOutcomes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerRecentMatchOutcomes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerRecentCommends* Arena::CreateMaybeMessage< ::CMsgPlayerRecentCommends >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerRecentCommends >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerRecentAccomplishments* Arena::CreateMaybeMessage< ::CMsgPlayerRecentAccomplishments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerRecentAccomplishments >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerHeroRecentAccomplishments* Arena::CreateMaybeMessage< ::CMsgPlayerHeroRecentAccomplishments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerHeroRecentAccomplishments >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRecentAccomplishments* Arena::CreateMaybeMessage< ::CMsgRecentAccomplishments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRecentAccomplishments >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestPlayerRecentAccomplishments* Arena::CreateMaybeMessage< ::CMsgRequestPlayerRecentAccomplishments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestPlayerRecentAccomplishments >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestPlayerRecentAccomplishments* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestPlayerRecentAccomplishments >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestPlayerRecentAccomplishments >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgRequestPlayerRecentAccomplishmentsResponse* Arena::CreateMaybeMessage< ::CMsgRequestPlayerRecentAccomplishmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgRequestPlayerRecentAccomplishmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse* Arena::CreateMaybeMessage< ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgServerToGCRequestPlayerRecentAccomplishmentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgArcanaVoteMatchVotes* Arena::CreateMaybeMessage< ::CMsgArcanaVoteMatchVotes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgArcanaVoteMatchVotes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCtoGCAssociatedExploiterAccountInfo* Arena::CreateMaybeMessage< ::CMsgGCtoGCAssociatedExploiterAccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCtoGCAssociatedExploiterAccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account* Arena::CreateMaybeMessage< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse_Account >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse* Arena::CreateMaybeMessage< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCtoGCAssociatedExploiterAccountInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPullTabsData_Slot* Arena::CreateMaybeMessage< ::CMsgPullTabsData_Slot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPullTabsData_Slot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPullTabsData_Jackpot* Arena::CreateMaybeMessage< ::CMsgPullTabsData_Jackpot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPullTabsData_Jackpot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPullTabsData* Arena::CreateMaybeMessage< ::CMsgPullTabsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPullTabsData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUnderDraftData_BenchSlot* Arena::CreateMaybeMessage< ::CMsgUnderDraftData_BenchSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUnderDraftData_BenchSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUnderDraftData_ShopSlot* Arena::CreateMaybeMessage< ::CMsgUnderDraftData_ShopSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUnderDraftData_ShopSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgUnderDraftData* Arena::CreateMaybeMessage< ::CMsgUnderDraftData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgUnderDraftData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlayerTitleData* Arena::CreateMaybeMessage< ::CMsgPlayerTitleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlayerTitleData >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATriviaQuestion* Arena::CreateMaybeMessage< ::CMsgDOTATriviaQuestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATriviaQuestion >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATriviaQuestionAnswersSummary* Arena::CreateMaybeMessage< ::CMsgDOTATriviaQuestionAnswersSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATriviaQuestionAnswersSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataSpecialValues* Arena::CreateMaybeMessage< ::CMsgGameDataSpecialValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataSpecialValues >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataAbilityOrItem* Arena::CreateMaybeMessage< ::CMsgGameDataAbilityOrItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataAbilityOrItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataHero* Arena::CreateMaybeMessage< ::CMsgGameDataHero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataHero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataAbilities* Arena::CreateMaybeMessage< ::CMsgGameDataAbilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataAbilities >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataItems* Arena::CreateMaybeMessage< ::CMsgGameDataItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataHeroes* Arena::CreateMaybeMessage< ::CMsgGameDataHeroes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataHeroes >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataHeroList_HeroInfo* Arena::CreateMaybeMessage< ::CMsgGameDataHeroList_HeroInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataHeroList_HeroInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataHeroList* Arena::CreateMaybeMessage< ::CMsgGameDataHeroList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataHeroList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataItemAbilityList_ItemAbilityInfo* Arena::CreateMaybeMessage< ::CMsgGameDataItemAbilityList_ItemAbilityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataItemAbilityList_ItemAbilityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGameDataItemAbilityList* Arena::CreateMaybeMessage< ::CMsgGameDataItemAbilityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGameDataItemAbilityList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
