// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networksystem_protomessages.proto

#include "networksystem_protomessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr NetMessageSplitscreenUserChanged::NetMessageSplitscreenUserChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_(0u){}
struct NetMessageSplitscreenUserChangedDefaultTypeInternal {
  constexpr NetMessageSplitscreenUserChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetMessageSplitscreenUserChangedDefaultTypeInternal() {}
  union {
    NetMessageSplitscreenUserChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetMessageSplitscreenUserChangedDefaultTypeInternal _NetMessageSplitscreenUserChanged_default_instance_;
constexpr NetMessageConnectionClosed::NetMessageConnectionClosed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(0u){}
struct NetMessageConnectionClosedDefaultTypeInternal {
  constexpr NetMessageConnectionClosedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetMessageConnectionClosedDefaultTypeInternal() {}
  union {
    NetMessageConnectionClosed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetMessageConnectionClosedDefaultTypeInternal _NetMessageConnectionClosed_default_instance_;
constexpr NetMessageConnectionCrashed::NetMessageConnectionCrashed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reason_(0u){}
struct NetMessageConnectionCrashedDefaultTypeInternal {
  constexpr NetMessageConnectionCrashedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetMessageConnectionCrashedDefaultTypeInternal() {}
  union {
    NetMessageConnectionCrashed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetMessageConnectionCrashedDefaultTypeInternal _NetMessageConnectionCrashed_default_instance_;
constexpr NetMessagePacketStart::NetMessagePacketStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NetMessagePacketStartDefaultTypeInternal {
  constexpr NetMessagePacketStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetMessagePacketStartDefaultTypeInternal() {}
  union {
    NetMessagePacketStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetMessagePacketStartDefaultTypeInternal _NetMessagePacketStart_default_instance_;
constexpr NetMessagePacketEnd::NetMessagePacketEnd(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NetMessagePacketEndDefaultTypeInternal {
  constexpr NetMessagePacketEndDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetMessagePacketEndDefaultTypeInternal() {}
  union {
    NetMessagePacketEnd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetMessagePacketEndDefaultTypeInternal _NetMessagePacketEnd_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_networksystem_5fprotomessages_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_networksystem_5fprotomessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_networksystem_5fprotomessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_networksystem_5fprotomessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::NetMessageSplitscreenUserChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NetMessageSplitscreenUserChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMessageSplitscreenUserChanged, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::NetMessageConnectionClosed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NetMessageConnectionClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMessageConnectionClosed, reason_),
  0,
  PROTOBUF_FIELD_OFFSET(::NetMessageConnectionCrashed, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NetMessageConnectionCrashed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NetMessageConnectionCrashed, reason_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMessagePacketStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NetMessagePacketEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::NetMessageSplitscreenUserChanged)},
  { 7, 13, sizeof(::NetMessageConnectionClosed)},
  { 14, 20, sizeof(::NetMessageConnectionCrashed)},
  { 21, -1, sizeof(::NetMessagePacketStart)},
  { 26, -1, sizeof(::NetMessagePacketEnd)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetMessageSplitscreenUserChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetMessageConnectionClosed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetMessageConnectionCrashed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetMessagePacketStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NetMessagePacketEnd_default_instance_),
};

const char descriptor_table_protodef_networksystem_5fprotomessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!networksystem_protomessages.proto\"0\n N"
  "etMessageSplitscreenUserChanged\022\014\n\004slot\030"
  "\001 \001(\r\",\n\032NetMessageConnectionClosed\022\016\n\006r"
  "eason\030\001 \001(\r\"-\n\033NetMessageConnectionCrash"
  "ed\022\016\n\006reason\030\001 \001(\r\"\027\n\025NetMessagePacketSt"
  "art\"\025\n\023NetMessagePacketEndB\003\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_networksystem_5fprotomessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networksystem_5fprotomessages_2eproto = {
  false, false, 231, descriptor_table_protodef_networksystem_5fprotomessages_2eproto, "networksystem_protomessages.proto", 
  &descriptor_table_networksystem_5fprotomessages_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_networksystem_5fprotomessages_2eproto::offsets,
  file_level_metadata_networksystem_5fprotomessages_2eproto, file_level_enum_descriptors_networksystem_5fprotomessages_2eproto, file_level_service_descriptors_networksystem_5fprotomessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_networksystem_5fprotomessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_networksystem_5fprotomessages_2eproto);
  return descriptor_table_networksystem_5fprotomessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_networksystem_5fprotomessages_2eproto(&descriptor_table_networksystem_5fprotomessages_2eproto);

// ===================================================================

class NetMessageSplitscreenUserChanged::_Internal {
 public:
  using HasBits = decltype(std::declval<NetMessageSplitscreenUserChanged>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetMessageSplitscreenUserChanged::NetMessageSplitscreenUserChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetMessageSplitscreenUserChanged)
}
NetMessageSplitscreenUserChanged::NetMessageSplitscreenUserChanged(const NetMessageSplitscreenUserChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:NetMessageSplitscreenUserChanged)
}

void NetMessageSplitscreenUserChanged::SharedCtor() {
slot_ = 0u;
}

NetMessageSplitscreenUserChanged::~NetMessageSplitscreenUserChanged() {
  // @@protoc_insertion_point(destructor:NetMessageSplitscreenUserChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetMessageSplitscreenUserChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetMessageSplitscreenUserChanged::ArenaDtor(void* object) {
  NetMessageSplitscreenUserChanged* _this = reinterpret_cast< NetMessageSplitscreenUserChanged* >(object);
  (void)_this;
}
void NetMessageSplitscreenUserChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetMessageSplitscreenUserChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetMessageSplitscreenUserChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMessageSplitscreenUserChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetMessageSplitscreenUserChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetMessageSplitscreenUserChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessageSplitscreenUserChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessageSplitscreenUserChanged)
  return target;
}

size_t NetMessageSplitscreenUserChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMessageSplitscreenUserChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 slot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_slot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetMessageSplitscreenUserChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMessageSplitscreenUserChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMessageSplitscreenUserChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetMessageSplitscreenUserChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMessageSplitscreenUserChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMessageSplitscreenUserChanged)
    MergeFrom(*source);
  }
}

void NetMessageSplitscreenUserChanged::MergeFrom(const NetMessageSplitscreenUserChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMessageSplitscreenUserChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _internal_set_slot(from._internal_slot());
  }
}

void NetMessageSplitscreenUserChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMessageSplitscreenUserChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessageSplitscreenUserChanged::CopyFrom(const NetMessageSplitscreenUserChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMessageSplitscreenUserChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessageSplitscreenUserChanged::IsInitialized() const {
  return true;
}

void NetMessageSplitscreenUserChanged::InternalSwap(NetMessageSplitscreenUserChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMessageSplitscreenUserChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetMessageConnectionClosed::_Internal {
 public:
  using HasBits = decltype(std::declval<NetMessageConnectionClosed>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetMessageConnectionClosed::NetMessageConnectionClosed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetMessageConnectionClosed)
}
NetMessageConnectionClosed::NetMessageConnectionClosed(const NetMessageConnectionClosed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:NetMessageConnectionClosed)
}

void NetMessageConnectionClosed::SharedCtor() {
reason_ = 0u;
}

NetMessageConnectionClosed::~NetMessageConnectionClosed() {
  // @@protoc_insertion_point(destructor:NetMessageConnectionClosed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetMessageConnectionClosed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetMessageConnectionClosed::ArenaDtor(void* object) {
  NetMessageConnectionClosed* _this = reinterpret_cast< NetMessageConnectionClosed* >(object);
  (void)_this;
}
void NetMessageConnectionClosed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetMessageConnectionClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetMessageConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMessageConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetMessageConnectionClosed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetMessageConnectionClosed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessageConnectionClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessageConnectionClosed)
  return target;
}

size_t NetMessageConnectionClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMessageConnectionClosed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 reason = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetMessageConnectionClosed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMessageConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMessageConnectionClosed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetMessageConnectionClosed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMessageConnectionClosed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMessageConnectionClosed)
    MergeFrom(*source);
  }
}

void NetMessageConnectionClosed::MergeFrom(const NetMessageConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMessageConnectionClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
}

void NetMessageConnectionClosed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMessageConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessageConnectionClosed::CopyFrom(const NetMessageConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMessageConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessageConnectionClosed::IsInitialized() const {
  return true;
}

void NetMessageConnectionClosed::InternalSwap(NetMessageConnectionClosed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMessageConnectionClosed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetMessageConnectionCrashed::_Internal {
 public:
  using HasBits = decltype(std::declval<NetMessageConnectionCrashed>()._has_bits_);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NetMessageConnectionCrashed::NetMessageConnectionCrashed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetMessageConnectionCrashed)
}
NetMessageConnectionCrashed::NetMessageConnectionCrashed(const NetMessageConnectionCrashed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:NetMessageConnectionCrashed)
}

void NetMessageConnectionCrashed::SharedCtor() {
reason_ = 0u;
}

NetMessageConnectionCrashed::~NetMessageConnectionCrashed() {
  // @@protoc_insertion_point(destructor:NetMessageConnectionCrashed)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetMessageConnectionCrashed::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetMessageConnectionCrashed::ArenaDtor(void* object) {
  NetMessageConnectionCrashed* _this = reinterpret_cast< NetMessageConnectionCrashed* >(object);
  (void)_this;
}
void NetMessageConnectionCrashed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetMessageConnectionCrashed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetMessageConnectionCrashed::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMessageConnectionCrashed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetMessageConnectionCrashed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetMessageConnectionCrashed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessageConnectionCrashed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 reason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessageConnectionCrashed)
  return target;
}

size_t NetMessageConnectionCrashed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMessageConnectionCrashed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 reason = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetMessageConnectionCrashed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMessageConnectionCrashed)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMessageConnectionCrashed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetMessageConnectionCrashed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMessageConnectionCrashed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMessageConnectionCrashed)
    MergeFrom(*source);
  }
}

void NetMessageConnectionCrashed::MergeFrom(const NetMessageConnectionCrashed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMessageConnectionCrashed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_reason()) {
    _internal_set_reason(from._internal_reason());
  }
}

void NetMessageConnectionCrashed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMessageConnectionCrashed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessageConnectionCrashed::CopyFrom(const NetMessageConnectionCrashed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMessageConnectionCrashed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessageConnectionCrashed::IsInitialized() const {
  return true;
}

void NetMessageConnectionCrashed::InternalSwap(NetMessageConnectionCrashed* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMessageConnectionCrashed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetMessagePacketStart::_Internal {
 public:
};

NetMessagePacketStart::NetMessagePacketStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetMessagePacketStart)
}
NetMessagePacketStart::NetMessagePacketStart(const NetMessagePacketStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetMessagePacketStart)
}

void NetMessagePacketStart::SharedCtor() {
}

NetMessagePacketStart::~NetMessagePacketStart() {
  // @@protoc_insertion_point(destructor:NetMessagePacketStart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetMessagePacketStart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetMessagePacketStart::ArenaDtor(void* object) {
  NetMessagePacketStart* _this = reinterpret_cast< NetMessagePacketStart* >(object);
  (void)_this;
}
void NetMessagePacketStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetMessagePacketStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetMessagePacketStart::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMessagePacketStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetMessagePacketStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetMessagePacketStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessagePacketStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessagePacketStart)
  return target;
}

size_t NetMessagePacketStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMessagePacketStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetMessagePacketStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMessagePacketStart)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMessagePacketStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetMessagePacketStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMessagePacketStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMessagePacketStart)
    MergeFrom(*source);
  }
}

void NetMessagePacketStart::MergeFrom(const NetMessagePacketStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMessagePacketStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetMessagePacketStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMessagePacketStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessagePacketStart::CopyFrom(const NetMessagePacketStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMessagePacketStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessagePacketStart::IsInitialized() const {
  return true;
}

void NetMessagePacketStart::InternalSwap(NetMessagePacketStart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMessagePacketStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetMessagePacketEnd::_Internal {
 public:
};

NetMessagePacketEnd::NetMessagePacketEnd(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NetMessagePacketEnd)
}
NetMessagePacketEnd::NetMessagePacketEnd(const NetMessagePacketEnd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:NetMessagePacketEnd)
}

void NetMessagePacketEnd::SharedCtor() {
}

NetMessagePacketEnd::~NetMessagePacketEnd() {
  // @@protoc_insertion_point(destructor:NetMessagePacketEnd)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetMessagePacketEnd::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetMessagePacketEnd::ArenaDtor(void* object) {
  NetMessagePacketEnd* _this = reinterpret_cast< NetMessagePacketEnd* >(object);
  (void)_this;
}
void NetMessagePacketEnd::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetMessagePacketEnd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetMessagePacketEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:NetMessagePacketEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetMessagePacketEnd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetMessagePacketEnd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NetMessagePacketEnd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NetMessagePacketEnd)
  return target;
}

size_t NetMessagePacketEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NetMessagePacketEnd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetMessagePacketEnd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NetMessagePacketEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const NetMessagePacketEnd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetMessagePacketEnd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NetMessagePacketEnd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NetMessagePacketEnd)
    MergeFrom(*source);
  }
}

void NetMessagePacketEnd::MergeFrom(const NetMessagePacketEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NetMessagePacketEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetMessagePacketEnd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NetMessagePacketEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetMessagePacketEnd::CopyFrom(const NetMessagePacketEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NetMessagePacketEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetMessagePacketEnd::IsInitialized() const {
  return true;
}

void NetMessagePacketEnd::InternalSwap(NetMessagePacketEnd* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetMessagePacketEnd::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NetMessageSplitscreenUserChanged* Arena::CreateMaybeMessage< ::NetMessageSplitscreenUserChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetMessageSplitscreenUserChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMessageConnectionClosed* Arena::CreateMaybeMessage< ::NetMessageConnectionClosed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetMessageConnectionClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMessageConnectionCrashed* Arena::CreateMaybeMessage< ::NetMessageConnectionCrashed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetMessageConnectionCrashed >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMessagePacketStart* Arena::CreateMaybeMessage< ::NetMessagePacketStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetMessagePacketStart >(arena);
}
template<> PROTOBUF_NOINLINE ::NetMessagePacketEnd* Arena::CreateMaybeMessage< ::NetMessagePacketEnd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NetMessagePacketEnd >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
