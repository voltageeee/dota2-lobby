// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_bot_script.proto

#include "dota_gcmessages_common_bot_script.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct CMsgBotWorldState_VectorDefaultTypeInternal {
  constexpr CMsgBotWorldState_VectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_VectorDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_VectorDefaultTypeInternal _CMsgBotWorldState_Vector_default_instance_;
constexpr CMsgBotWorldState_Player::CMsgBotWorldState_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , player_id_(0)
  , hero_id_(0u)
  , is_alive_(false)
  , respawn_time_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , team_id_(0u)
  , primary_unit_handle_(0u)
  , mmr_(0){}
struct CMsgBotWorldState_PlayerDefaultTypeInternal {
  constexpr CMsgBotWorldState_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_PlayerDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_PlayerDefaultTypeInternal _CMsgBotWorldState_Player_default_instance_;
constexpr CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(0u)
  , ability_id_(0u)
  , slot_(0u)
  , caster_handle_(0u)
  , level_(0u)
  , cast_range_(0u)
  , channel_time_(0)
  , cooldown_remaining_(0)
  , is_activated_(false)
  , is_toggled_(false)
  , is_in_ability_phase_(false)
  , is_channeling_(false)
  , is_stolen_(false)
  , is_fully_castable_(false)
  , is_combined_locked_(false)
  , charges_(0u)
  , secondary_charges_(0u)
  , power_treads_stat_(-1){}
struct CMsgBotWorldState_AbilityDefaultTypeInternal {
  constexpr CMsgBotWorldState_AbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_AbilityDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Ability _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_AbilityDefaultTypeInternal _CMsgBotWorldState_Ability_default_instance_;
constexpr CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , item_id_(0u){}
struct CMsgBotWorldState_DroppedItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_DroppedItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_DroppedItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_DroppedItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_DroppedItemDefaultTypeInternal _CMsgBotWorldState_DroppedItem_default_instance_;
constexpr CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , type_(0)
  , status_(0u)
  , time_since_seen_(0){}
struct CMsgBotWorldState_RuneInfoDefaultTypeInternal {
  constexpr CMsgBotWorldState_RuneInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_RuneInfoDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_RuneInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_RuneInfoDefaultTypeInternal _CMsgBotWorldState_RuneInfo_default_instance_;
constexpr CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , player_id_(0)
  , time_remaining_(0){}
struct CMsgBotWorldState_TeleportInfoDefaultTypeInternal {
  constexpr CMsgBotWorldState_TeleportInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_TeleportInfoDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_TeleportInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_TeleportInfoDefaultTypeInternal _CMsgBotWorldState_TeleportInfo_default_instance_;
constexpr CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auxiliary_units_handles_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stack_count_(0u)
  , ability_handle_(0u)
  , ability_id_(0u)
  , remaining_duration_(0)
  , handle_(0u){}
struct CMsgBotWorldState_ModifierDefaultTypeInternal {
  constexpr CMsgBotWorldState_ModifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_ModifierDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Modifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_ModifierDefaultTypeInternal _CMsgBotWorldState_Modifier_default_instance_;
constexpr CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , velocity_(nullptr)
  , handle_(0u)
  , caster_handle_(0u)
  , caster_player_id_(0)
  , ability_handle_(0u)
  , ability_id_(0u)
  , radius_(0u)
  , caster_unit_type_(0)
{}
struct CMsgBotWorldState_LinearProjectileDefaultTypeInternal {
  constexpr CMsgBotWorldState_LinearProjectileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_LinearProjectileDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_LinearProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_LinearProjectileDefaultTypeInternal _CMsgBotWorldState_LinearProjectile_default_instance_;
constexpr CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , caster_handle_(0u)
  , caster_player_id_(0)
  , ability_handle_(0u)
  , ability_id_(0u)
  , velocity_(0u)
  , is_dodgeable_(false)
  , is_attack_(false)
  , caster_unit_type_(0)

  , handle_(0u){}
struct CMsgBotWorldState_TrackingProjectileDefaultTypeInternal {
  constexpr CMsgBotWorldState_TrackingProjectileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_TrackingProjectileDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_TrackingProjectile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_TrackingProjectileDefaultTypeInternal _CMsgBotWorldState_TrackingProjectile_default_instance_;
constexpr CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , caster_handle_(0u)
  , caster_player_id_(0)
  , ability_handle_(0u)
  , ability_id_(0u)
  , radius_(0u)
  , caster_unit_type_(0)
{}
struct CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal {
  constexpr CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_AvoidanceZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal _CMsgBotWorldState_AvoidanceZone_default_instance_;
constexpr CMsgBotWorldState_Courier::CMsgBotWorldState_Courier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : handle_(0u)
  , player_id_(0)
  , state_(-1)
{}
struct CMsgBotWorldState_CourierDefaultTypeInternal {
  constexpr CMsgBotWorldState_CourierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_CourierDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Courier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_CourierDefaultTypeInternal _CMsgBotWorldState_Courier_default_instance_;
constexpr CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , ability_id_(0u)
  , player_id_(0)
  , unit_handle_(0u)
  , is_channel_start_(false){}
struct CMsgBotWorldState_EventAbilityDefaultTypeInternal {
  constexpr CMsgBotWorldState_EventAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventAbilityDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_EventAbilityDefaultTypeInternal _CMsgBotWorldState_EventAbility_default_instance_;
constexpr CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : damage_(0u)
  , victim_player_id_(0)
  , victim_unit_handle_(0u)
  , attacker_player_id_(0)
  , attacker_unit_handle_(0u)
  , ability_id_(0u){}
struct CMsgBotWorldState_EventDamageDefaultTypeInternal {
  constexpr CMsgBotWorldState_EventDamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventDamageDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_EventDamageDefaultTypeInternal _CMsgBotWorldState_EventDamage_default_instance_;
constexpr CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u)
  , courier_unit_handle_(0u)
  , killer_player_id_(0)
  , killer_unit_handle_(0u){}
struct CMsgBotWorldState_EventCourierKilledDefaultTypeInternal {
  constexpr CMsgBotWorldState_EventCourierKilledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventCourierKilledDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventCourierKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_EventCourierKilledDefaultTypeInternal _CMsgBotWorldState_EventCourierKilled_default_instance_;
constexpr CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : killer_player_id_(0)
  , killer_unit_handle_(0u){}
struct CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal {
  constexpr CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventRoshanKilled _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal _CMsgBotWorldState_EventRoshanKilled_default_instance_;
constexpr CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , tree_id_(0u)
  , destroyed_(false)
  , respawned_(false)
  , delayed_(false){}
struct CMsgBotWorldState_EventTreeDefaultTypeInternal {
  constexpr CMsgBotWorldState_EventTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_EventTreeDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_EventTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_EventTreeDefaultTypeInternal _CMsgBotWorldState_EventTree_default_instance_;
constexpr CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : abilities_()
  , items_()
  , modifiers_()
  , incoming_tracking_projectiles_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attack_target_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ability_target_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , handle_(0u)
  , unit_type_(0)

  , team_id_(0u)
  , level_(0u)
  , player_id_(0)
  , bounding_radius_(0)
  , facing_(0)
  , ground_height_(0u)
  , vision_range_daytime_(0u)
  , vision_range_nighttime_(0u)
  , health_(0)
  , health_max_(0)
  , health_regen_(0)
  , mana_(0)
  , mana_max_(0)
  , mana_regen_(0)
  , base_movement_speed_(0)
  , current_movement_speed_(0)
  , anim_activity_(0)
  , anim_cycle_(0)
  , base_damage_(0)
  , base_damage_variance_(0)
  , bonus_damage_(0)
  , attack_damage_(0)
  , attack_range_(0)
  , attack_speed_(0)
  , attack_anim_point_(0)
  , attack_acquisition_range_(0)
  , attack_projectile_speed_(0)
  , attack_target_handle_(0u)
  , is_alive_(false)
  , is_channeling_(false)
  , is_attack_immune_(false)
  , is_blind_(false)
  , bounty_xp_(0u)
  , bounty_gold_min_(0u)
  , bounty_gold_max_(0u)
  , active_ability_handle_(0u)
  , is_block_disabled_(false)
  , is_disarmed_(false)
  , is_dominated_(false)
  , is_evade_disabled_(false)
  , is_hexed_(false)
  , is_invisible_(false)
  , is_invulnerable_(false)
  , is_magic_immune_(false)
  , is_muted_(false)
  , is_nightmared_(false)
  , is_rooted_(false)
  , is_silenced_(false)
  , is_specially_deniable_(false)
  , is_stunned_(false)
  , is_unable_to_miss_(false)
  , has_scepter_(false)
  , action_type_(0u)
  , is_shrine_healing_(false)
  , ability_target_handle_(0u)
  , primary_attribute_(0u)
  , is_specially_undeniable_(false)
  , is_using_ability_(false)
  , is_illusion_(false)
  , flying_courier_(false)
  , respawn_time_(0)
  , buyback_cost_(0u)
  , buyback_cooldown_(0)
  , spell_amplification_(0)
  , armor_(0)
  , magic_resist_(0)
  , evasion_(0)
  , xp_needed_to_level_(0u)
  , ability_points_(0u)
  , last_hits_(0u)
  , denies_(0u)
  , net_worth_(0u)
  , strength_(0u)
  , agility_(0u)
  , intelligence_(0u)
  , remaining_lifespan_(0)
  , shrine_cooldown_(0)
  , attacks_per_second_(-1)
  , last_attack_time_(-1)
  , reliable_gold_(-1)
  , unreliable_gold_(-1){}
struct CMsgBotWorldState_UnitDefaultTypeInternal {
  constexpr CMsgBotWorldState_UnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_UnitDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Unit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_UnitDefaultTypeInternal _CMsgBotWorldState_Unit_default_instance_;
constexpr CMsgBotWorldState_Actions_OceanAnnotation_Hero::CMsgBotWorldState_Actions_OceanAnnotation_Hero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : internalaction_()
  , actionname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , detailedstats_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , playerid_(0)
  , valuefunction_(0)
  , actionlogp_(0)
  , reward_(0){}
struct CMsgBotWorldState_Actions_OceanAnnotation_HeroDefaultTypeInternal {
  constexpr CMsgBotWorldState_Actions_OceanAnnotation_HeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Actions_OceanAnnotation_HeroDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Actions_OceanAnnotation_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Actions_OceanAnnotation_HeroDefaultTypeInternal _CMsgBotWorldState_Actions_OceanAnnotation_Hero_default_instance_;
constexpr CMsgBotWorldState_Actions_OceanAnnotation::CMsgBotWorldState_Actions_OceanAnnotation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heroes_()
  , rewards_()
  , reward_names_()
  , agentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgBotWorldState_Actions_OceanAnnotationDefaultTypeInternal {
  constexpr CMsgBotWorldState_Actions_OceanAnnotationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Actions_OceanAnnotationDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Actions_OceanAnnotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Actions_OceanAnnotationDefaultTypeInternal _CMsgBotWorldState_Actions_OceanAnnotation_default_instance_;
constexpr CMsgBotWorldState_Actions_Header::CMsgBotWorldState_Actions_Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , starttime_(0){}
struct CMsgBotWorldState_Actions_HeaderDefaultTypeInternal {
  constexpr CMsgBotWorldState_Actions_HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Actions_HeaderDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Actions_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Actions_HeaderDefaultTypeInternal _CMsgBotWorldState_Actions_Header_default_instance_;
constexpr CMsgBotWorldState_Actions::CMsgBotWorldState_Actions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_()
  , extradata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , oceanannotation_(nullptr)
  , header_(nullptr)
  , dota_time_(-100){}
struct CMsgBotWorldState_ActionsDefaultTypeInternal {
  constexpr CMsgBotWorldState_ActionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_ActionsDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Actions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_ActionsDefaultTypeInternal _CMsgBotWorldState_Actions_default_instance_;
constexpr CMsgBotWorldState_Action_MoveToLocation::CMsgBotWorldState_Action_MoveToLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , location_(nullptr){}
struct CMsgBotWorldState_Action_MoveToLocationDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_MoveToLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_MoveToLocationDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_MoveToLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_MoveToLocationDefaultTypeInternal _CMsgBotWorldState_Action_MoveToLocation_default_instance_;
constexpr CMsgBotWorldState_Action_MoveToTarget::CMsgBotWorldState_Action_MoveToTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , target_(0){}
struct CMsgBotWorldState_Action_MoveToTargetDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_MoveToTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_MoveToTargetDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_MoveToTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_MoveToTargetDefaultTypeInternal _CMsgBotWorldState_Action_MoveToTarget_default_instance_;
constexpr CMsgBotWorldState_Action_AttackMove::CMsgBotWorldState_Action_AttackMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , location_(nullptr){}
struct CMsgBotWorldState_Action_AttackMoveDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_AttackMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_AttackMoveDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_AttackMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_AttackMoveDefaultTypeInternal _CMsgBotWorldState_Action_AttackMove_default_instance_;
constexpr CMsgBotWorldState_Action_AttackTarget::CMsgBotWorldState_Action_AttackTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , target_(0)
  , once_(false){}
struct CMsgBotWorldState_Action_AttackTargetDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_AttackTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_AttackTargetDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_AttackTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_AttackTargetDefaultTypeInternal _CMsgBotWorldState_Action_AttackTarget_default_instance_;
constexpr CMsgBotWorldState_Action_HoldLocation::CMsgBotWorldState_Action_HoldLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_(){}
struct CMsgBotWorldState_Action_HoldLocationDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_HoldLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_HoldLocationDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_HoldLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_HoldLocationDefaultTypeInternal _CMsgBotWorldState_Action_HoldLocation_default_instance_;
constexpr CMsgBotWorldState_Action_Stop::CMsgBotWorldState_Action_Stop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_(){}
struct CMsgBotWorldState_Action_StopDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_StopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_StopDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_StopDefaultTypeInternal _CMsgBotWorldState_Action_Stop_default_instance_;
constexpr CMsgBotWorldState_Action_CastLocation::CMsgBotWorldState_Action_CastLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , location_(nullptr)
  , abilityslot_(0){}
struct CMsgBotWorldState_Action_CastLocationDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_CastLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_CastLocationDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_CastLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_CastLocationDefaultTypeInternal _CMsgBotWorldState_Action_CastLocation_default_instance_;
constexpr CMsgBotWorldState_Action_CastTarget::CMsgBotWorldState_Action_CastTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , abilityslot_(0)
  , target_(0){}
struct CMsgBotWorldState_Action_CastTargetDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_CastTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_CastTargetDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_CastTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_CastTargetDefaultTypeInternal _CMsgBotWorldState_Action_CastTarget_default_instance_;
constexpr CMsgBotWorldState_Action_CastTree::CMsgBotWorldState_Action_CastTree(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , abilityslot_(0)
  , tree_(0){}
struct CMsgBotWorldState_Action_CastTreeDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_CastTreeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_CastTreeDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_CastTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_CastTreeDefaultTypeInternal _CMsgBotWorldState_Action_CastTree_default_instance_;
constexpr CMsgBotWorldState_Action_Cast::CMsgBotWorldState_Action_Cast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , abilityslot_(0){}
struct CMsgBotWorldState_Action_CastDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_CastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_CastDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_Cast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_CastDefaultTypeInternal _CMsgBotWorldState_Action_Cast_default_instance_;
constexpr CMsgBotWorldState_Action_CastToggle::CMsgBotWorldState_Action_CastToggle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , abilityslot_(0){}
struct CMsgBotWorldState_Action_CastToggleDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_CastToggleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_CastToggleDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_CastToggle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_CastToggleDefaultTypeInternal _CMsgBotWorldState_Action_CastToggle_default_instance_;
constexpr CMsgBotWorldState_Action_TrainAbility::CMsgBotWorldState_Action_TrainAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0)
  , unit_(0){}
struct CMsgBotWorldState_Action_TrainAbilityDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_TrainAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_TrainAbilityDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_TrainAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_TrainAbilityDefaultTypeInternal _CMsgBotWorldState_Action_TrainAbility_default_instance_;
constexpr CMsgBotWorldState_Action_DropItem::CMsgBotWorldState_Action_DropItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : location_(nullptr)
  , unit_(0)
  , slot_(0){}
struct CMsgBotWorldState_Action_DropItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_DropItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_DropItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_DropItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_DropItemDefaultTypeInternal _CMsgBotWorldState_Action_DropItem_default_instance_;
constexpr CMsgBotWorldState_Action_PickUpItem::CMsgBotWorldState_Action_PickUpItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0)
  , itemid_(0){}
struct CMsgBotWorldState_Action_PickUpItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_PickUpItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_PickUpItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_PickUpItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_PickUpItemDefaultTypeInternal _CMsgBotWorldState_Action_PickUpItem_default_instance_;
constexpr CMsgBotWorldState_Action_PurchaseItem::CMsgBotWorldState_Action_PurchaseItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , item_(0)
  , unit_(0){}
struct CMsgBotWorldState_Action_PurchaseItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_PurchaseItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_PurchaseItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_PurchaseItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_PurchaseItemDefaultTypeInternal _CMsgBotWorldState_Action_PurchaseItem_default_instance_;
constexpr CMsgBotWorldState_Action_SellItem::CMsgBotWorldState_Action_SellItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_(0)
  , slot_(0)
  , unit_(0){}
struct CMsgBotWorldState_Action_SellItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_SellItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_SellItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_SellItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_SellItemDefaultTypeInternal _CMsgBotWorldState_Action_SellItem_default_instance_;
constexpr CMsgBotWorldState_Action_SwapItems::CMsgBotWorldState_Action_SwapItems(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_a_(0)
  , slot_b_(0)
  , unit_(0){}
struct CMsgBotWorldState_Action_SwapItemsDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_SwapItemsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_SwapItemsDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_SwapItems _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_SwapItemsDefaultTypeInternal _CMsgBotWorldState_Action_SwapItems_default_instance_;
constexpr CMsgBotWorldState_Action_DisassembleItem::CMsgBotWorldState_Action_DisassembleItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_(0){}
struct CMsgBotWorldState_Action_DisassembleItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_DisassembleItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_DisassembleItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_DisassembleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_DisassembleItemDefaultTypeInternal _CMsgBotWorldState_Action_DisassembleItem_default_instance_;
constexpr CMsgBotWorldState_Action_SetCombineLockItem::CMsgBotWorldState_Action_SetCombineLockItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_(0)
  , value_(false){}
struct CMsgBotWorldState_Action_SetCombineLockItemDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_SetCombineLockItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_SetCombineLockItemDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_SetCombineLockItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_SetCombineLockItemDefaultTypeInternal _CMsgBotWorldState_Action_SetCombineLockItem_default_instance_;
constexpr CMsgBotWorldState_Action_PickupRune::CMsgBotWorldState_Action_PickupRune(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , rune_(0){}
struct CMsgBotWorldState_Action_PickupRuneDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_PickupRuneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_PickupRuneDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_PickupRune _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_PickupRuneDefaultTypeInternal _CMsgBotWorldState_Action_PickupRune_default_instance_;
constexpr CMsgBotWorldState_Action_Chat::CMsgBotWorldState_Action_Chat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_allchat_(false){}
struct CMsgBotWorldState_Action_ChatDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ChatDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_Chat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ChatDefaultTypeInternal _CMsgBotWorldState_Action_Chat_default_instance_;
constexpr CMsgBotWorldState_Action_UseShrine::CMsgBotWorldState_Action_UseShrine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : units_()
  , shrine_(0){}
struct CMsgBotWorldState_Action_UseShrineDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_UseShrineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_UseShrineDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_UseShrine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_UseShrineDefaultTypeInternal _CMsgBotWorldState_Action_UseShrine_default_instance_;
constexpr CMsgBotWorldState_Action_Courier::CMsgBotWorldState_Action_Courier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0)
  , courier_(0)
  , action_(0){}
struct CMsgBotWorldState_Action_CourierDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_CourierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_CourierDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_Courier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_CourierDefaultTypeInternal _CMsgBotWorldState_Action_Courier_default_instance_;
constexpr CMsgBotWorldState_Action_GetActualIncomingDamage::CMsgBotWorldState_Action_GetActualIncomingDamage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0)
  , ndamage_(0)
  , ndamagetype_(0){}
struct CMsgBotWorldState_Action_GetActualIncomingDamageDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_GetActualIncomingDamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_GetActualIncomingDamageDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_GetActualIncomingDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_GetActualIncomingDamageDefaultTypeInternal _CMsgBotWorldState_Action_GetActualIncomingDamage_default_instance_;
constexpr CMsgBotWorldState_Action_GetEstimatedDamageToTarget::CMsgBotWorldState_Action_GetEstimatedDamageToTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0)
  , bcurrentlyavailable_(false)
  , htarget_(0)
  , fduration_(0)
  , ndamagetypes_(0){}
struct CMsgBotWorldState_Action_GetEstimatedDamageToTargetDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_GetEstimatedDamageToTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_GetEstimatedDamageToTargetDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_GetEstimatedDamageToTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_GetEstimatedDamageToTargetDefaultTypeInternal _CMsgBotWorldState_Action_GetEstimatedDamageToTarget_default_instance_;
constexpr CMsgBotWorldState_Action_Glyph::CMsgBotWorldState_Action_Glyph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0){}
struct CMsgBotWorldState_Action_GlyphDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_GlyphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_GlyphDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_Glyph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_GlyphDefaultTypeInternal _CMsgBotWorldState_Action_Glyph_default_instance_;
constexpr CMsgBotWorldState_Action_SoftReset::CMsgBotWorldState_Action_SoftReset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minigameconfig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , snapshotdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgBotWorldState_Action_SoftResetDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_SoftResetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_SoftResetDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_SoftReset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_SoftResetDefaultTypeInternal _CMsgBotWorldState_Action_SoftReset_default_instance_;
constexpr CMsgBotWorldState_Action_Buyback::CMsgBotWorldState_Action_Buyback(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_(0){}
struct CMsgBotWorldState_Action_BuybackDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_BuybackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_BuybackDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_Buyback _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_BuybackDefaultTypeInternal _CMsgBotWorldState_Action_Buyback_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugDrawText::CMsgBotWorldState_Action_ScriptingDebugDrawText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , origin_(nullptr)
  , bviewcheck_(false)
  , duration_(0){}
struct CMsgBotWorldState_Action_ScriptingDebugDrawTextDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugDrawTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugDrawTextDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugDrawText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugDrawTextDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugDrawText_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugDrawLine::CMsgBotWorldState_Action_ScriptingDebugDrawLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , target_(nullptr)
  , r_(0)
  , g_(0)
  , b_(0)
  , ztest_(false)
  , duration_(0){}
struct CMsgBotWorldState_Action_ScriptingDebugDrawLineDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugDrawLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugDrawLineDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugDrawLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugDrawLineDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugDrawLine_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , lineoffset_(0)
  , r_(0)
  , g_(0)
  , b_(0)
  , a_(0)
  , duration_(0){}
struct CMsgBotWorldState_Action_ScriptingDebugDrawScreenTextDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugDrawScreenTextDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugDrawScreenTextDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugDrawScreenText _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugDrawScreenTextDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , font_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , x_(0)
  , y_(0)
  , lineoffset_(0)
  , r_(0)
  , g_(0)
  , b_(0)
  , a_(0)
  , duration_(0)
  , size_(0)
  , bbold_(false){}
struct CMsgBotWorldState_Action_ScriptingDebugScreenTextPrettyDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugScreenTextPrettyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugScreenTextPrettyDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugScreenTextPrettyDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugDrawBox::CMsgBotWorldState_Action_ScriptingDebugDrawBox(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : origin_(nullptr)
  , minimum_(nullptr)
  , maximum_(nullptr)
  , r_(0)
  , g_(0)
  , b_(0)
  , a_(0)
  , duration_(0){}
struct CMsgBotWorldState_Action_ScriptingDebugDrawBoxDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugDrawBoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugDrawBoxDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugDrawBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugDrawBoxDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugDrawBox_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugDrawCircle::CMsgBotWorldState_Action_ScriptingDebugDrawCircle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , vrgb_(nullptr)
  , a_(0)
  , rad_(0)
  , ztest_(false)
  , duration_(0){}
struct CMsgBotWorldState_Action_ScriptingDebugDrawCircleDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugDrawCircleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugDrawCircleDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugDrawCircle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugDrawCircleDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugDrawCircle_default_instance_;
constexpr CMsgBotWorldState_Action_ScriptingDebugDrawClear::CMsgBotWorldState_Action_ScriptingDebugDrawClear(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgBotWorldState_Action_ScriptingDebugDrawClearDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_ScriptingDebugDrawClearDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_ScriptingDebugDrawClearDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_ScriptingDebugDrawClear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_ScriptingDebugDrawClearDefaultTypeInternal _CMsgBotWorldState_Action_ScriptingDebugDrawClear_default_instance_;
constexpr CMsgBotWorldState_Action_OceanWinGame::CMsgBotWorldState_Action_OceanWinGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reward_(0){}
struct CMsgBotWorldState_Action_OceanWinGameDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_OceanWinGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_OceanWinGameDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_OceanWinGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_OceanWinGameDefaultTypeInternal _CMsgBotWorldState_Action_OceanWinGame_default_instance_;
constexpr CMsgBotWorldState_Action_OceanReplayCorrectTime::CMsgBotWorldState_Action_OceanReplayCorrectTime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : delta_(0){}
struct CMsgBotWorldState_Action_OceanReplayCorrectTimeDefaultTypeInternal {
  constexpr CMsgBotWorldState_Action_OceanReplayCorrectTimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_Action_OceanReplayCorrectTimeDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action_OceanReplayCorrectTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_Action_OceanReplayCorrectTimeDefaultTypeInternal _CMsgBotWorldState_Action_OceanReplayCorrectTime_default_instance_;
constexpr CMsgBotWorldState_Action::CMsgBotWorldState_Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actiontype_(0)

  , actiondelay_(0)
  , player_(-1)
  , actionid_(-1)
  , _oneof_case_{}{}
struct CMsgBotWorldState_ActionDefaultTypeInternal {
  constexpr CMsgBotWorldState_ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldState_ActionDefaultTypeInternal() {}
  union {
    CMsgBotWorldState_Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldState_ActionDefaultTypeInternal _CMsgBotWorldState_Action_default_instance_;
constexpr CMsgBotWorldState::CMsgBotWorldState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , units_()
  , dropped_items_()
  , rune_infos_()
  , incoming_teleports_()
  , linear_projectiles_()
  , avoidance_zones_()
  , couriers_()
  , ability_events_()
  , damage_events_()
  , courier_killed_events_()
  , roshan_killed_events_()
  , tree_events_()
  , dropped_items_deltas_()
  , rune_infos_deltas_()
  , team_id_(0u)
  , game_time_(0)
  , dota_time_(0)
  , game_state_(0u)
  , hero_pick_state_(0u)
  , time_of_day_(0)
  , glyph_cooldown_(0)
  , glyph_cooldown_enemy_(0u){}
struct CMsgBotWorldStateDefaultTypeInternal {
  constexpr CMsgBotWorldStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgBotWorldStateDefaultTypeInternal() {}
  union {
    CMsgBotWorldState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgBotWorldStateDefaultTypeInternal _CMsgBotWorldState_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[60];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Vector, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, is_alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, primary_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, mmr_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Player, location_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, cast_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, channel_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, cooldown_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_activated_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_toggled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_in_ability_phase_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_channeling_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_stolen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_fully_castable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, secondary_charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, is_combined_locked_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Ability, power_treads_stat_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  16,
  14,
  17,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_DroppedItem, location_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_RuneInfo, time_since_seen_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TeleportInfo, time_remaining_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, stack_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, remaining_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Modifier, auxiliary_units_handles_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, caster_unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, caster_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, velocity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_LinearProjectile, radius_),
  2,
  3,
  8,
  4,
  5,
  6,
  0,
  1,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, caster_unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, caster_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, velocity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, is_dodgeable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_TrackingProjectile, is_attack_),
  9,
  1,
  8,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, caster_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, caster_unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, caster_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_AvoidanceZone, radius_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, state_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Courier, player_id_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventAbility, is_channel_start_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, victim_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, victim_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, attacker_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, attacker_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventDamage, ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, courier_unit_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, killer_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventCourierKilled, killer_unit_handle_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, killer_player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventRoshanKilled, killer_unit_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, tree_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, respawned_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_EventTree, delayed_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, unit_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_alive_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, bounding_radius_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, facing_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, ground_height_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, vision_range_daytime_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, vision_range_nighttime_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, health_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, health_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, health_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, mana_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, mana_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, mana_regen_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, base_movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, current_movement_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, anim_activity_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, anim_cycle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, base_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, base_damage_variance_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, bonus_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_anim_point_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_acquisition_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_projectile_speed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_target_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attack_target_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, attacks_per_second_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, last_attack_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, bounty_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, bounty_gold_min_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, bounty_gold_max_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_channeling_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, active_ability_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_attack_immune_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_blind_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_block_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_disarmed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_dominated_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_evade_disabled_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_hexed_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_invisible_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_invulnerable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_magic_immune_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_muted_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_nightmared_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_rooted_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_silenced_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_specially_deniable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_stunned_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_unable_to_miss_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, has_scepter_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_specially_undeniable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, abilities_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, modifiers_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, incoming_tracking_projectiles_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, action_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, ability_target_handle_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, ability_target_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_using_ability_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, primary_attribute_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_illusion_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, respawn_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, buyback_cost_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, buyback_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, spell_amplification_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, armor_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, magic_resist_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, evasion_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, xp_needed_to_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, ability_points_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, reliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, unreliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, net_worth_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, strength_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, agility_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, intelligence_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, remaining_lifespan_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, flying_courier_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, shrine_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Unit, is_shrine_healing_),
  4,
  5,
  0,
  6,
  7,
  3,
  34,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  1,
  83,
  84,
  38,
  39,
  40,
  35,
  41,
  36,
  37,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  62,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  58,
  60,
  2,
  63,
  61,
  64,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  85,
  86,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  65,
  82,
  59,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, playerid_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, valuefunction_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, actionlogp_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, reward_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, internalaction_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, actionname_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation_Hero, detailedstats_),
  2,
  3,
  4,
  5,
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation, heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation, agentid_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation, rewards_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_OceanAnnotation, reward_names_),
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_Header, starttime_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions_Header, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, dota_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, actions_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, extradata_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, oceanannotation_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Actions, header_),
  3,
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToLocation, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToLocation, location_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToTarget, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_MoveToTarget, target_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackMove, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackMove, location_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackTarget, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackTarget, target_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_AttackTarget, once_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_HoldLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_HoldLocation, units_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Stop, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastLocation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastLocation, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastLocation, abilityslot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastLocation, location_),
  ~0u,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTarget, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTarget, abilityslot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTarget, target_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTree, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTree, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTree, abilityslot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastTree, tree_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Cast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Cast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Cast, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Cast, abilityslot_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastToggle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastToggle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastToggle, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_CastToggle, abilityslot_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_TrainAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_TrainAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_TrainAbility, ability_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_TrainAbility, level_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_TrainAbility, unit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DropItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DropItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DropItem, unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DropItem, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DropItem, location_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickUpItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickUpItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickUpItem, unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickUpItem, itemid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PurchaseItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PurchaseItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PurchaseItem, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PurchaseItem, item_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PurchaseItem, unit_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SellItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SellItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SellItem, item_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SellItem, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SellItem, unit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SwapItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SwapItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SwapItems, slot_a_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SwapItems, slot_b_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SwapItems, unit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DisassembleItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DisassembleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_DisassembleItem, slot_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SetCombineLockItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SetCombineLockItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SetCombineLockItem, slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SetCombineLockItem, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickupRune, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickupRune, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickupRune, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_PickupRune, rune_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Chat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Chat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Chat, message_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Chat, to_allchat_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_UseShrine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_UseShrine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_UseShrine, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_UseShrine, shrine_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Courier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Courier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Courier, unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Courier, courier_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Courier, action_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetActualIncomingDamage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetActualIncomingDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetActualIncomingDamage, unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetActualIncomingDamage, ndamage_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetActualIncomingDamage, ndamagetype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, unit_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, bcurrentlyavailable_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, htarget_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, fduration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget, ndamagetypes_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Glyph, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Glyph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Glyph, unit_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SoftReset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SoftReset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SoftReset, minigameconfig_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_SoftReset, snapshotdata_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Buyback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Buyback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_Buyback, unit_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawText, origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawText, text_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawText, bviewcheck_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawText, duration_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, target_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, g_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, b_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, ztest_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawLine, duration_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, lineoffset_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, text_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, g_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, b_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, a_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, duration_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, x_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, y_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, lineoffset_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, text_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, g_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, b_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, a_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, font_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, size_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, bbold_),
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  8,
  9,
  1,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, origin_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, minimum_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, maximum_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, r_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, g_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, b_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, a_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawBox, duration_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, center_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, vrgb_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, a_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, rad_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, ztest_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle, duration_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_ScriptingDebugDrawClear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanWinGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanWinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanWinGame, team_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanWinGame, reward_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanReplayCorrectTime, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanReplayCorrectTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action_OceanReplayCorrectTime, delta_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, actiontype_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, player_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, actionid_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, actiondelay_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState_Action, ActionData_),
  0,
  2,
  3,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, game_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, dota_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, game_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, hero_pick_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, glyph_cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, glyph_cooldown_enemy_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, players_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, units_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, dropped_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, dropped_items_deltas_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, rune_infos_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, rune_infos_deltas_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, incoming_teleports_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, linear_projectiles_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, avoidance_zones_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, couriers_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, ability_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, damage_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, courier_killed_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, roshan_killed_events_),
  PROTOBUF_FIELD_OFFSET(::CMsgBotWorldState, tree_events_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgBotWorldState_Vector)},
  { 11, 27, sizeof(::CMsgBotWorldState_Player)},
  { 38, 61, sizeof(::CMsgBotWorldState_Ability)},
  { 79, 86, sizeof(::CMsgBotWorldState_DroppedItem)},
  { 88, 97, sizeof(::CMsgBotWorldState_RuneInfo)},
  { 101, 109, sizeof(::CMsgBotWorldState_TeleportInfo)},
  { 112, 124, sizeof(::CMsgBotWorldState_Modifier)},
  { 131, 145, sizeof(::CMsgBotWorldState_LinearProjectile)},
  { 154, 169, sizeof(::CMsgBotWorldState_TrackingProjectile)},
  { 179, 191, sizeof(::CMsgBotWorldState_AvoidanceZone)},
  { 198, 206, sizeof(::CMsgBotWorldState_Courier)},
  { 209, 219, sizeof(::CMsgBotWorldState_EventAbility)},
  { 224, 235, sizeof(::CMsgBotWorldState_EventDamage)},
  { 241, 250, sizeof(::CMsgBotWorldState_EventCourierKilled)},
  { 254, 261, sizeof(::CMsgBotWorldState_EventRoshanKilled)},
  { 263, 273, sizeof(::CMsgBotWorldState_EventTree)},
  { 278, 374, sizeof(::CMsgBotWorldState_Unit)},
  { 465, 477, sizeof(::CMsgBotWorldState_Actions_OceanAnnotation_Hero)},
  { 484, 493, sizeof(::CMsgBotWorldState_Actions_OceanAnnotation)},
  { 497, 504, sizeof(::CMsgBotWorldState_Actions_Header)},
  { 506, 516, sizeof(::CMsgBotWorldState_Actions)},
  { 521, 528, sizeof(::CMsgBotWorldState_Action_MoveToLocation)},
  { 530, 537, sizeof(::CMsgBotWorldState_Action_MoveToTarget)},
  { 539, 546, sizeof(::CMsgBotWorldState_Action_AttackMove)},
  { 548, 556, sizeof(::CMsgBotWorldState_Action_AttackTarget)},
  { 559, -1, sizeof(::CMsgBotWorldState_Action_HoldLocation)},
  { 565, -1, sizeof(::CMsgBotWorldState_Action_Stop)},
  { 571, 579, sizeof(::CMsgBotWorldState_Action_CastLocation)},
  { 582, 590, sizeof(::CMsgBotWorldState_Action_CastTarget)},
  { 593, 601, sizeof(::CMsgBotWorldState_Action_CastTree)},
  { 604, 611, sizeof(::CMsgBotWorldState_Action_Cast)},
  { 613, 620, sizeof(::CMsgBotWorldState_Action_CastToggle)},
  { 622, 630, sizeof(::CMsgBotWorldState_Action_TrainAbility)},
  { 633, 641, sizeof(::CMsgBotWorldState_Action_DropItem)},
  { 644, 651, sizeof(::CMsgBotWorldState_Action_PickUpItem)},
  { 653, 661, sizeof(::CMsgBotWorldState_Action_PurchaseItem)},
  { 664, 672, sizeof(::CMsgBotWorldState_Action_SellItem)},
  { 675, 683, sizeof(::CMsgBotWorldState_Action_SwapItems)},
  { 686, 692, sizeof(::CMsgBotWorldState_Action_DisassembleItem)},
  { 693, 700, sizeof(::CMsgBotWorldState_Action_SetCombineLockItem)},
  { 702, 709, sizeof(::CMsgBotWorldState_Action_PickupRune)},
  { 711, 718, sizeof(::CMsgBotWorldState_Action_Chat)},
  { 720, 727, sizeof(::CMsgBotWorldState_Action_UseShrine)},
  { 729, 737, sizeof(::CMsgBotWorldState_Action_Courier)},
  { 740, 748, sizeof(::CMsgBotWorldState_Action_GetActualIncomingDamage)},
  { 751, 761, sizeof(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget)},
  { 766, 772, sizeof(::CMsgBotWorldState_Action_Glyph)},
  { 773, 780, sizeof(::CMsgBotWorldState_Action_SoftReset)},
  { 782, 788, sizeof(::CMsgBotWorldState_Action_Buyback)},
  { 789, 798, sizeof(::CMsgBotWorldState_Action_ScriptingDebugDrawText)},
  { 802, 814, sizeof(::CMsgBotWorldState_Action_ScriptingDebugDrawLine)},
  { 821, 835, sizeof(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText)},
  { 844, 861, sizeof(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty)},
  { 873, 886, sizeof(::CMsgBotWorldState_Action_ScriptingDebugDrawBox)},
  { 894, 905, sizeof(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle)},
  { 911, -1, sizeof(::CMsgBotWorldState_Action_ScriptingDebugDrawClear)},
  { 916, 923, sizeof(::CMsgBotWorldState_Action_OceanWinGame)},
  { 925, 931, sizeof(::CMsgBotWorldState_Action_OceanReplayCorrectTime)},
  { 932, 980, sizeof(::CMsgBotWorldState_Action)},
  { 1022, 1050, sizeof(::CMsgBotWorldState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Vector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Ability_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_DroppedItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_RuneInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_TeleportInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Modifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_LinearProjectile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_TrackingProjectile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_AvoidanceZone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Courier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_EventAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_EventDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_EventCourierKilled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_EventRoshanKilled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_EventTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Unit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Actions_OceanAnnotation_Hero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Actions_OceanAnnotation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Actions_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Actions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_MoveToLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_MoveToTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_AttackMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_AttackTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_HoldLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_CastLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_CastTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_CastTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_Cast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_CastToggle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_TrainAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_DropItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_PickUpItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_PurchaseItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_SellItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_SwapItems_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_DisassembleItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_SetCombineLockItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_PickupRune_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_Chat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_UseShrine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_Courier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_GetActualIncomingDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_GetEstimatedDamageToTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_Glyph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_SoftReset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_Buyback_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugDrawText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugDrawLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugDrawScreenText_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugDrawBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugDrawCircle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_ScriptingDebugDrawClear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_OceanWinGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_OceanReplayCorrectTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgBotWorldState_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'dota_gcmessages_common_bot_script.prot"
  "o\032\025valveextensions.proto\"\234p\n\021CMsgBotWorl"
  "dState\022\017\n\007team_id\030\001 \001(\r\022\021\n\tgame_time\030\002 \001"
  "(\002\022\021\n\tdota_time\030\003 \001(\002\022\022\n\ngame_state\030\004 \001("
  "\r\022\027\n\017hero_pick_state\030\005 \001(\r\022\023\n\013time_of_da"
  "y\030\006 \001(\002\022\026\n\016glyph_cooldown\030\007 \001(\002\022\034\n\024glyph"
  "_cooldown_enemy\030\010 \001(\r\0220\n\007players\030\n \003(\0132\031"
  ".CMsgBotWorldState.PlayerB\004\300\344\035\001\022,\n\005units"
  "\030\013 \003(\0132\027.CMsgBotWorldState.UnitB\004\300\344\035\001\022;\n"
  "\rdropped_items\030\014 \003(\0132\036.CMsgBotWorldState"
  ".DroppedItemB\004\320\344\035p\022\034\n\024dropped_items_delt"
  "as\030p \003(\005\0225\n\nrune_infos\030\r \003(\0132\033.CMsgBotWo"
  "rldState.RuneInfoB\004\320\344\035q\022\031\n\021rune_infos_de"
  "ltas\030q \003(\005\022;\n\022incoming_teleports\030\016 \003(\0132\037"
  ".CMsgBotWorldState.TeleportInfo\022E\n\022linea"
  "r_projectiles\030\017 \003(\0132#.CMsgBotWorldState."
  "LinearProjectileB\004\300\344\035\001\0229\n\017avoidance_zone"
  "s\030\020 \003(\0132 .CMsgBotWorldState.AvoidanceZon"
  "e\0222\n\010couriers\030\021 \003(\0132\032.CMsgBotWorldState."
  "CourierB\004\300\344\035\001\0227\n\016ability_events\030\024 \003(\0132\037."
  "CMsgBotWorldState.EventAbility\0225\n\rdamage"
  "_events\030\025 \003(\0132\036.CMsgBotWorldState.EventD"
  "amage\022D\n\025courier_killed_events\030\026 \003(\0132%.C"
  "MsgBotWorldState.EventCourierKilled\022B\n\024r"
  "oshan_killed_events\030\027 \003(\0132$.CMsgBotWorld"
  "State.EventRoshanKilled\0221\n\013tree_events\030\030"
  " \003(\0132\034.CMsgBotWorldState.EventTree\032)\n\006Ve"
  "ctor\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\032\362\001"
  "\n\006Player\022\027\n\tplayer_id\030\001 \001(\005B\004\310\344\035\001\022\017\n\007her"
  "o_id\030\002 \001(\r\022\020\n\010is_alive\030\003 \001(\010\022\024\n\014respawn_"
  "time\030\004 \001(\002\022\r\n\005kills\030\005 \001(\r\022\016\n\006deaths\030\006 \001("
  "\r\022\017\n\007assists\030\007 \001(\r\022\017\n\007team_id\030\010 \001(\r\022\033\n\023p"
  "rimary_unit_handle\030\t \001(\r\022\013\n\003mmr\030\n \001(\005\022+\n"
  "\010location\030\013 \001(\0132\031.CMsgBotWorldState.Vect"
  "or\032\243\003\n\007Ability\022\024\n\006handle\030\001 \001(\rB\004\310\344\035\001\022\022\n\n"
  "ability_id\030\002 \001(\r\022\014\n\004slot\030\003 \001(\r\022\025\n\rcaster"
  "_handle\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\022\n\ncast_ran"
  "ge\030\n \001(\r\022\024\n\014channel_time\030\013 \001(\002\022\035\n\022cooldo"
  "wn_remaining\030\014 \001(\002:\0010\022\024\n\014is_activated\030\024 "
  "\001(\010\022\022\n\nis_toggled\030\025 \001(\010\022\033\n\023is_in_ability"
  "_phase\030\026 \001(\010\022\025\n\ris_channeling\030\027 \001(\010\022\021\n\ti"
  "s_stolen\030\030 \001(\010\022\031\n\021is_fully_castable\030\031 \001("
  "\010\022\017\n\007charges\030\036 \001(\r\022\031\n\021secondary_charges\030"
  "\037 \001(\r\022\032\n\022is_combined_locked\030( \001(\010\022\035\n\021pow"
  "er_treads_stat\0302 \001(\005:\002-1\032K\n\013DroppedItem\022"
  "\017\n\007item_id\030\001 \001(\r\022+\n\010location\030\002 \001(\0132\031.CMs"
  "gBotWorldState.Vector\032n\n\010RuneInfo\022\014\n\004typ"
  "e\030\001 \001(\005\022+\n\010location\030\002 \001(\0132\031.CMsgBotWorld"
  "State.Vector\022\016\n\006status\030\003 \001(\r\022\027\n\017time_sin"
  "ce_seen\030\004 \001(\002\032f\n\014TeleportInfo\022\021\n\tplayer_"
  "id\030\001 \001(\005\022+\n\010location\030\002 \001(\0132\031.CMsgBotWorl"
  "dState.Vector\022\026\n\016time_remaining\030\003 \001(\002\032\254\001"
  "\n\010Modifier\022\024\n\006handle\030\007 \001(\rB\004\310\344\035\001\022\014\n\004name"
  "\030\001 \001(\t\022\023\n\013stack_count\030\002 \001(\r\022\026\n\016ability_h"
  "andle\030\003 \001(\r\022\022\n\nability_id\030\004 \001(\r\022\032\n\022remai"
  "ning_duration\030\005 \001(\002\022\037\n\027auxiliary_units_h"
  "andles\030\006 \003(\r\032\257\002\n\020LinearProjectile\022\024\n\006han"
  "dle\030\001 \001(\rB\004\310\344\035\001\022\025\n\rcaster_handle\030\002 \001(\r\022>"
  "\n\020caster_unit_type\030\t \001(\0162\033.CMsgBotWorldS"
  "tate.UnitType:\007INVALID\022\030\n\020caster_player_"
  "id\030\003 \001(\005\022\026\n\016ability_handle\030\004 \001(\r\022\022\n\nabil"
  "ity_id\030\005 \001(\r\022+\n\010location\030\006 \001(\0132\031.CMsgBot"
  "WorldState.Vector\022+\n\010velocity\030\007 \001(\0132\031.CM"
  "sgBotWorldState.Vector\022\016\n\006radius\030\010 \001(\r\032\257"
  "\002\n\022TrackingProjectile\022\024\n\006handle\030\n \001(\rB\004\310"
  "\344\035\001\022\025\n\rcaster_handle\030\001 \001(\r\022>\n\020caster_uni"
  "t_type\030\t \001(\0162\033.CMsgBotWorldState.UnitTyp"
  "e:\007INVALID\022\030\n\020caster_player_id\030\002 \001(\005\022\026\n\016"
  "ability_handle\030\003 \001(\r\022\022\n\nability_id\030\004 \001(\r"
  "\022+\n\010location\030\005 \001(\0132\031.CMsgBotWorldState.V"
  "ector\022\020\n\010velocity\030\006 \001(\r\022\024\n\014is_dodgeable\030"
  "\007 \001(\010\022\021\n\tis_attack\030\010 \001(\010\032\351\001\n\rAvoidanceZo"
  "ne\022+\n\010location\030\001 \001(\0132\031.CMsgBotWorldState"
  ".Vector\022\025\n\rcaster_handle\030\002 \001(\r\022>\n\020caster"
  "_unit_type\030\007 \001(\0162\033.CMsgBotWorldState.Uni"
  "tType:\007INVALID\022\030\n\020caster_player_id\030\003 \001(\005"
  "\022\026\n\016ability_handle\030\004 \001(\r\022\022\n\nability_id\030\005"
  " \001(\r\022\016\n\006radius\030\006 \001(\r\032v\n\007Courier\022\024\n\006handl"
  "e\030\001 \001(\rB\004\310\344\035\001\022B\n\005state\030\002 \001(\0162\037.CMsgBotWo"
  "rldState.CourierState:\022COURIER_STATE_INI"
  "T\022\021\n\tplayer_id\030\003 \001(\005\032\221\001\n\014EventAbility\022\022\n"
  "\nability_id\030\001 \001(\r\022\021\n\tplayer_id\030\002 \001(\005\022\023\n\013"
  "unit_handle\030\003 \001(\r\022+\n\010location\030\004 \001(\0132\031.CM"
  "sgBotWorldState.Vector\022\030\n\020is_channel_sta"
  "rt\030\005 \001(\010\032\241\001\n\013EventDamage\022\016\n\006damage\030\001 \001(\r"
  "\022\030\n\020victim_player_id\030\002 \001(\005\022\032\n\022victim_uni"
  "t_handle\030\003 \001(\r\022\032\n\022attacker_player_id\030\004 \001"
  "(\005\022\034\n\024attacker_unit_handle\030\005 \001(\r\022\022\n\nabil"
  "ity_id\030\006 \001(\r\032x\n\022EventCourierKilled\022\017\n\007te"
  "am_id\030\001 \001(\r\022\033\n\023courier_unit_handle\030\002 \001(\r"
  "\022\030\n\020killer_player_id\030\003 \001(\005\022\032\n\022killer_uni"
  "t_handle\030\004 \001(\r\032I\n\021EventRoshanKilled\022\030\n\020k"
  "iller_player_id\030\001 \001(\005\022\032\n\022killer_unit_han"
  "dle\030\002 \001(\r\032\200\001\n\tEventTree\022\017\n\007tree_id\030\001 \001(\r"
  "\022\021\n\tdestroyed\030\002 \001(\010\022\021\n\trespawned\030\003 \001(\010\022+"
  "\n\010location\030\004 \001(\0132\031.CMsgBotWorldState.Vec"
  "tor\022\017\n\007delayed\030\005 \001(\010\032\257\022\n\004Unit\022\024\n\006handle\030"
  "\001 \001(\rB\004\310\344\035\001\0227\n\tunit_type\030\002 \001(\0162\033.CMsgBot"
  "WorldState.UnitType:\007INVALID\022\014\n\004name\030\003 \001"
  "(\t\022\017\n\007team_id\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022+\n\010lo"
  "cation\030\006 \001(\0132\031.CMsgBotWorldState.Vector\022"
  "\020\n\010is_alive\030\007 \001(\010\022\021\n\tplayer_id\030\010 \001(\005\022\027\n\017"
  "bounding_radius\030\n \001(\005\022\016\n\006facing\030\013 \001(\005\022\025\n"
  "\rground_height\030\014 \001(\r\022\034\n\024vision_range_day"
  "time\030\017 \001(\r\022\036\n\026vision_range_nighttime\030\020 \001"
  "(\r\022\016\n\006health\030\024 \001(\005\022\022\n\nhealth_max\030\025 \001(\005\022\024"
  "\n\014health_regen\030\026 \001(\002\022\014\n\004mana\030\031 \001(\005\022\020\n\010ma"
  "na_max\030\032 \001(\005\022\022\n\nmana_regen\030\033 \001(\002\022\033\n\023base"
  "_movement_speed\030\036 \001(\005\022\036\n\026current_movemen"
  "t_speed\030\037 \001(\005\022\025\n\ranim_activity\030# \001(\005\022\022\n\n"
  "anim_cycle\030$ \001(\002\022\023\n\013base_damage\030( \001(\005\022\034\n"
  "\024base_damage_variance\030) \001(\005\022\024\n\014bonus_dam"
  "age\030* \001(\005\022\025\n\rattack_damage\030+ \001(\005\022\024\n\014atta"
  "ck_range\030, \001(\005\022\024\n\014attack_speed\030- \001(\002\022\031\n\021"
  "attack_anim_point\030. \001(\002\022 \n\030attack_acquis"
  "ition_range\030/ \001(\005\022\037\n\027attack_projectile_s"
  "peed\0300 \001(\005\022\034\n\024attack_target_handle\0301 \001(\r"
  "\022\032\n\022attack_target_name\0304 \001(\t\022\036\n\022attacks_"
  "per_second\0302 \001(\005:\002-1\022\034\n\020last_attack_time"
  "\0303 \001(\002:\002-1\022\021\n\tbounty_xp\030< \001(\r\022\027\n\017bounty_"
  "gold_min\030= \001(\r\022\027\n\017bounty_gold_max\030> \001(\r\022"
  "\025\n\ris_channeling\030A \001(\010\022\035\n\025active_ability"
  "_handle\030B \001(\r\022\030\n\020is_attack_immune\030F \001(\010\022"
  "\020\n\010is_blind\030G \001(\010\022\031\n\021is_block_disabled\030H"
  " \001(\010\022\023\n\013is_disarmed\030I \001(\010\022\024\n\014is_dominate"
  "d\030J \001(\010\022\031\n\021is_evade_disabled\030K \001(\010\022\020\n\010is"
  "_hexed\030L \001(\010\022\024\n\014is_invisible\030M \001(\010\022\027\n\017is"
  "_invulnerable\030N \001(\010\022\027\n\017is_magic_immune\030O"
  " \001(\010\022\020\n\010is_muted\030P \001(\010\022\025\n\ris_nightmared\030"
  "R \001(\010\022\021\n\tis_rooted\030S \001(\010\022\023\n\013is_silenced\030"
  "T \001(\010\022\035\n\025is_specially_deniable\030U \001(\010\022\022\n\n"
  "is_stunned\030V \001(\010\022\031\n\021is_unable_to_miss\030W "
  "\001(\010\022\023\n\013has_scepter\030X \001(\010\022\037\n\027is_specially"
  "_undeniable\030^ \001(\010\0223\n\tabilities\030Z \003(\0132\032.C"
  "MsgBotWorldState.AbilityB\004\300\344\035\001\022/\n\005items\030"
  "[ \003(\0132\032.CMsgBotWorldState.AbilityB\004\300\344\035\001\022"
  "4\n\tmodifiers\030\\ \003(\0132\033.CMsgBotWorldState.M"
  "odifierB\004\300\344\035\001\022R\n\035incoming_tracking_proje"
  "ctiles\030] \003(\0132%.CMsgBotWorldState.Trackin"
  "gProjectileB\004\300\344\035\001\022\023\n\013action_type\030d \001(\r\022\035"
  "\n\025ability_target_handle\030e \001(\r\022\033\n\023ability"
  "_target_name\030g \001(\t\022\030\n\020is_using_ability\030f"
  " \001(\010\022\031\n\021primary_attribute\030n \001(\r\022\023\n\013is_il"
  "lusion\030o \001(\010\022\024\n\014respawn_time\030p \001(\002\022\024\n\014bu"
  "yback_cost\030q \001(\r\022\030\n\020buyback_cooldown\030r \001"
  "(\002\022\033\n\023spell_amplification\030s \001(\002\022\r\n\005armor"
  "\030t \001(\002\022\024\n\014magic_resist\030u \001(\002\022\017\n\007evasion\030"
  "v \001(\002\022\032\n\022xp_needed_to_level\030x \001(\r\022\026\n\016abi"
  "lity_points\030y \001(\r\022\031\n\rreliable_gold\030z \001(\005"
  ":\002-1\022\033\n\017unreliable_gold\030{ \001(\005:\002-1\022\021\n\tlas"
  "t_hits\030| \001(\r\022\016\n\006denies\030} \001(\r\022\021\n\tnet_wort"
  "h\030~ \001(\r\022\020\n\010strength\030\177 \001(\r\022\020\n\007agility\030\200\001 "
  "\001(\r\022\025\n\014intelligence\030\201\001 \001(\r\022\033\n\022remaining_"
  "lifespan\030\202\001 \001(\002\022\027\n\016flying_courier\030\214\001 \001(\010"
  "\022\030\n\017shrine_cooldown\030\226\001 \001(\002\022\032\n\021is_shrine_"
  "healing\030\227\001 \001(\010\032\252\004\n\007Actions\022\027\n\tdota_time\030"
  "\001 \001(\002:\004-100\022*\n\007actions\030\002 \003(\0132\031.CMsgBotWo"
  "rldState.Action\022\021\n\textraData\030\003 \001(\t\022C\n\017oc"
  "eanAnnotation\030\004 \001(\0132*.CMsgBotWorldState."
  "Actions.OceanAnnotation\0221\n\006header\030\005 \001(\0132"
  "!.CMsgBotWorldState.Actions.Header\032\243\002\n\017O"
  "ceanAnnotation\022\?\n\006heroes\030\001 \003(\0132/.CMsgBot"
  "WorldState.Actions.OceanAnnotation.Hero\022"
  "\017\n\007agentID\030\005 \001(\t\022\017\n\007rewards\030\006 \003(\002\022\024\n\014rew"
  "ard_names\030\007 \003(\t\032\226\001\n\004Hero\022\020\n\010playerID\030\001 \002"
  "(\005\022\025\n\rvalueFunction\030\002 \001(\002\022\022\n\nactionLogp\030"
  "\003 \001(\002\022\016\n\006reward\030\004 \001(\002\022\026\n\016internalAction\030"
  "\005 \003(\005\022\022\n\nactionName\030\006 \001(\t\022\025\n\rdetailedSta"
  "ts\030\007 \001(\014\032)\n\006Header\022\021\n\tstartTime\030\001 \001(\002\022\014\n"
  "\004name\030\002 \001(\t\032\3238\n\006Action\022H\n\nactionType\030\001 \002"
  "(\0162\036.CMsgBotWorldState.Action.Type:\024DOTA"
  "_UNIT_ORDER_NONE\022\022\n\006player\030\002 \001(\005:\002-1\022\024\n\010"
  "actionID\030\004 \001(\005:\002-1\022\026\n\013actionDelay\030\n \001(\005:"
  "\0010\022B\n\016moveToLocation\030e \001(\0132(.CMsgBotWorl"
  "dState.Action.MoveToLocationH\000\022>\n\014moveTo"
  "Target\030f \001(\0132&.CMsgBotWorldState.Action."
  "MoveToTargetH\000\022:\n\nattackMove\030g \001(\0132$.CMs"
  "gBotWorldState.Action.AttackMoveH\000\022>\n\014at"
  "tackTarget\030h \001(\0132&.CMsgBotWorldState.Act"
  "ion.AttackTargetH\000\022>\n\014castLocation\030i \001(\013"
  "2&.CMsgBotWorldState.Action.CastLocation"
  "H\000\022:\n\ncastTarget\030j \001(\0132$.CMsgBotWorldSta"
  "te.Action.CastTargetH\000\0226\n\010castTree\030k \001(\013"
  "2\".CMsgBotWorldState.Action.CastTreeH\000\022."
  "\n\004cast\030l \001(\0132\036.CMsgBotWorldState.Action."
  "CastH\000\022:\n\ncastToggle\030m \001(\0132$.CMsgBotWorl"
  "dState.Action.CastToggleH\000\022>\n\014holdLocati"
  "on\030n \001(\0132&.CMsgBotWorldState.Action.Hold"
  "LocationH\000\022>\n\014trainAbility\030o \001(\0132&.CMsgB"
  "otWorldState.Action.TrainAbilityH\000\0226\n\010dr"
  "opItem\030p \001(\0132\".CMsgBotWorldState.Action."
  "DropItemH\000\022:\n\npickUpItem\030r \001(\0132$.CMsgBot"
  "WorldState.Action.PickUpItemH\000\022:\n\npickup"
  "Rune\030s \001(\0132$.CMsgBotWorldState.Action.Pi"
  "ckupRuneH\000\022>\n\014purchaseItem\030t \001(\0132&.CMsgB"
  "otWorldState.Action.PurchaseItemH\000\0226\n\010se"
  "llItem\030u \001(\0132\".CMsgBotWorldState.Action."
  "SellItemH\000\022D\n\017disassembleItem\030v \001(\0132).CM"
  "sgBotWorldState.Action.DisassembleItemH\000"
  "\022K\n\022setCombineLockItem\030\204\001 \001(\0132,.CMsgBotW"
  "orldState.Action.SetCombineLockItemH\000\022.\n"
  "\004stop\030y \001(\0132\036.CMsgBotWorldState.Action.S"
  "topH\000\022/\n\004chat\030\214\001 \001(\0132\036.CMsgBotWorldState"
  ".Action.ChatH\000\0229\n\tswapItems\030\215\001 \001(\0132#.CMs"
  "gBotWorldState.Action.SwapItemsH\000\0229\n\tuse"
  "Shrine\030\216\001 \001(\0132#.CMsgBotWorldState.Action"
  ".UseShrineH\000\0225\n\007courier\030\217\001 \001(\0132!.CMsgBot"
  "WorldState.Action.CourierH\000\022U\n\027getActual"
  "IncomingDamage\030\220\001 \001(\01321.CMsgBotWorldStat"
  "e.Action.GetActualIncomingDamageH\000\022[\n\032ge"
  "tEstimatedDamageToTarget\030\221\001 \001(\01324.CMsgBo"
  "tWorldState.Action.GetEstimatedDamageToT"
  "argetH\000\0221\n\005glyph\030\222\001 \001(\0132\037.CMsgBotWorldSt"
  "ate.Action.GlyphH\000\0229\n\tsoftReset\030\224\001 \001(\0132#"
  ".CMsgBotWorldState.Action.SoftResetH\000\0225\n"
  "\007buyback\030\225\001 \001(\0132!.CMsgBotWorldState.Acti"
  "on.BuybackH\000\022S\n\026scriptingDebugDrawText\030\226"
  "\001 \001(\01320.CMsgBotWorldState.Action.Scripti"
  "ngDebugDrawTextH\000\022S\n\026scriptingDebugDrawL"
  "ine\030\227\001 \001(\01320.CMsgBotWorldState.Action.Sc"
  "riptingDebugDrawLineH\000\022_\n\034scriptingDebug"
  "DrawScreenText\030\230\001 \001(\01326.CMsgBotWorldStat"
  "e.Action.ScriptingDebugDrawScreenTextH\000\022"
  "Q\n\025scriptingDebugDrawBox\030\231\001 \001(\0132/.CMsgBo"
  "tWorldState.Action.ScriptingDebugDrawBox"
  "H\000\022W\n\030scriptingDebugDrawCircle\030\232\001 \001(\01322."
  "CMsgBotWorldState.Action.ScriptingDebugD"
  "rawCircleH\000\022U\n\027scriptingDebugDrawClear\030\233"
  "\001 \001(\01321.CMsgBotWorldState.Action.Scripti"
  "ngDebugDrawClearH\000\022c\n\036scriptingDebugScre"
  "enTextPretty\030\237\001 \001(\01328.CMsgBotWorldState."
  "Action.ScriptingDebugScreenTextPrettyH\000\022"
  "A\n\014moveDirectly\030\234\001 \001(\0132(.CMsgBotWorldSta"
  "te.Action.MoveToLocationH\000\022\?\n\014oceanWinGa"
  "me\030\235\001 \001(\0132&.CMsgBotWorldState.Action.Oce"
  "anWinGameH\000\022S\n\026oceanReplayCorrectTime\030\236\001"
  " \001(\01320.CMsgBotWorldState.Action.OceanRep"
  "layCorrectTimeH\000\032L\n\016MoveToLocation\022\r\n\005un"
  "its\030\001 \003(\005\022+\n\010location\030\002 \002(\0132\031.CMsgBotWor"
  "ldState.Vector\032-\n\014MoveToTarget\022\r\n\005units\030"
  "\001 \003(\005\022\016\n\006target\030\002 \002(\005\032H\n\nAttackMove\022\r\n\005u"
  "nits\030\001 \003(\005\022+\n\010location\030\002 \002(\0132\031.CMsgBotWo"
  "rldState.Vector\032;\n\014AttackTarget\022\r\n\005units"
  "\030\001 \003(\005\022\016\n\006target\030\002 \002(\005\022\014\n\004once\030\003 \001(\010\032\035\n\014"
  "HoldLocation\022\r\n\005units\030\001 \003(\005\032\025\n\004Stop\022\r\n\005u"
  "nits\030\001 \003(\005\032_\n\014CastLocation\022\r\n\005units\030\001 \003("
  "\005\022\023\n\013abilitySlot\030\002 \002(\005\022+\n\010location\030\003 \002(\013"
  "2\031.CMsgBotWorldState.Vector\032@\n\nCastTarge"
  "t\022\r\n\005units\030\001 \003(\005\022\023\n\013abilitySlot\030\002 \002(\005\022\016\n"
  "\006target\030\003 \002(\005\032<\n\010CastTree\022\r\n\005units\030\001 \003(\005"
  "\022\023\n\013abilitySlot\030\002 \002(\005\022\014\n\004tree\030\003 \002(\005\032*\n\004C"
  "ast\022\r\n\005units\030\001 \003(\005\022\023\n\013abilitySlot\030\002 \002(\005\032"
  "0\n\nCastToggle\022\r\n\005units\030\001 \003(\005\022\023\n\013abilityS"
  "lot\030\002 \002(\005\032<\n\014TrainAbility\022\017\n\007ability\030\001 \002"
  "(\t\022\r\n\005level\030\002 \001(\005\022\014\n\004unit\030\003 \001(\005\032S\n\010DropI"
  "tem\022\014\n\004unit\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022+\n\010locat"
  "ion\030\003 \001(\0132\031.CMsgBotWorldState.Vector\032*\n\n"
  "PickUpItem\022\014\n\004unit\030\001 \001(\005\022\016\n\006itemId\030\002 \001(\005"
  "\032=\n\014PurchaseItem\022\014\n\004item\030\001 \001(\005\022\021\n\titem_n"
  "ame\030\002 \001(\t\022\014\n\004unit\030\003 \001(\005\0324\n\010SellItem\022\014\n\004i"
  "tem\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022\014\n\004unit\030\003 \001(\005\0329\n"
  "\tSwapItems\022\016\n\006slot_a\030\001 \002(\005\022\016\n\006slot_b\030\002 \002"
  "(\005\022\014\n\004unit\030\003 \001(\005\032\037\n\017DisassembleItem\022\014\n\004s"
  "lot\030\001 \002(\005\0321\n\022SetCombineLockItem\022\014\n\004slot\030"
  "\001 \002(\005\022\r\n\005value\030\002 \002(\010\032)\n\nPickupRune\022\r\n\005un"
  "its\030\001 \003(\005\022\014\n\004rune\030\002 \002(\005\032+\n\004Chat\022\017\n\007messa"
  "ge\030\001 \002(\t\022\022\n\nto_allchat\030\002 \002(\010\032*\n\tUseShrin"
  "e\022\r\n\005units\030\001 \003(\005\022\016\n\006shrine\030\002 \002(\005\0328\n\007Cour"
  "ier\022\014\n\004unit\030\001 \002(\005\022\017\n\007courier\030\002 \002(\005\022\016\n\006ac"
  "tion\030\003 \002(\005\032M\n\027GetActualIncomingDamage\022\014\n"
  "\004unit\030\001 \002(\005\022\017\n\007nDamage\030\002 \002(\002\022\023\n\013nDamageT"
  "ype\030\003 \002(\005\032\201\001\n\032GetEstimatedDamageToTarget"
  "\022\014\n\004unit\030\001 \002(\005\022\033\n\023bCurrentlyAvailable\030\002 "
  "\002(\010\022\017\n\007hTarget\030\003 \002(\005\022\021\n\tfDuration\030\004 \002(\002\022"
  "\024\n\014nDamageTypes\030\005 \002(\005\032\025\n\005Glyph\022\014\n\004unit\030\001"
  " \002(\005\0329\n\tSoftReset\022\026\n\016minigameConfig\030\001 \001("
  "\t\022\024\n\014snapshotData\030\002 \001(\t\032\027\n\007Buyback\022\014\n\004un"
  "it\030\001 \002(\005\032w\n\026ScriptingDebugDrawText\022)\n\006or"
  "igin\030\001 \002(\0132\031.CMsgBotWorldState.Vector\022\014\n"
  "\004text\030\002 \002(\t\022\022\n\nbViewCheck\030\003 \002(\010\022\020\n\010durat"
  "ion\030\004 \002(\002\032\260\001\n\026ScriptingDebugDrawLine\022)\n\006"
  "origin\030\001 \002(\0132\031.CMsgBotWorldState.Vector\022"
  ")\n\006target\030\002 \002(\0132\031.CMsgBotWorldState.Vect"
  "or\022\t\n\001r\030\003 \002(\005\022\t\n\001g\030\004 \002(\005\022\t\n\001b\030\005 \002(\005\022\r\n\005z"
  "test\030\006 \002(\010\022\020\n\010duration\030\007 \002(\002\032\224\001\n\034Scripti"
  "ngDebugDrawScreenText\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 "
  "\002(\002\022\022\n\nlineOffset\030\003 \002(\005\022\014\n\004text\030\004 \002(\t\022\t\n"
  "\001r\030\005 \002(\005\022\t\n\001g\030\006 \002(\005\022\t\n\001b\030\007 \002(\005\022\t\n\001a\030\010 \002("
  "\005\022\020\n\010duration\030\t \002(\002\032\301\001\n\036ScriptingDebugSc"
  "reenTextPretty\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\022\n\n"
  "lineOffset\030\003 \002(\005\022\014\n\004text\030\004 \002(\t\022\t\n\001r\030\005 \002("
  "\005\022\t\n\001g\030\006 \002(\005\022\t\n\001b\030\007 \002(\005\022\t\n\001a\030\010 \002(\005\022\020\n\010du"
  "ration\030\t \002(\002\022\014\n\004font\030\n \002(\t\022\014\n\004size\030\013 \002(\002"
  "\022\r\n\005bBold\030\014 \002(\010\032\330\001\n\025ScriptingDebugDrawBo"
  "x\022)\n\006origin\030\001 \002(\0132\031.CMsgBotWorldState.Ve"
  "ctor\022*\n\007minimum\030\002 \002(\0132\031.CMsgBotWorldStat"
  "e.Vector\022*\n\007maximum\030\003 \002(\0132\031.CMsgBotWorld"
  "State.Vector\022\t\n\001r\030\004 \002(\005\022\t\n\001g\030\005 \002(\005\022\t\n\001b\030"
  "\006 \002(\005\022\t\n\001a\030\007 \002(\005\022\020\n\010duration\030\010 \002(\002\032\247\001\n\030S"
  "criptingDebugDrawCircle\022)\n\006center\030\001 \002(\0132"
  "\031.CMsgBotWorldState.Vector\022\'\n\004vRgb\030\002 \002(\013"
  "2\031.CMsgBotWorldState.Vector\022\t\n\001a\030\003 \002(\002\022\013"
  "\n\003rad\030\004 \002(\002\022\r\n\005ztest\030\005 \002(\010\022\020\n\010duration\030\006"
  " \002(\002\032\031\n\027ScriptingDebugDrawClear\032,\n\014Ocean"
  "WinGame\022\014\n\004team\030\001 \002(\t\022\016\n\006reward\030\002 \001(\002\032\'\n"
  "\026OceanReplayCorrectTime\022\r\n\005delta\030\001 \002(\002\"\352"
  "\r\n\004Type\022\030\n\024DOTA_UNIT_ORDER_NONE\020\000\022$\n DOT"
  "A_UNIT_ORDER_MOVE_TO_POSITION\020\001\022\"\n\036DOTA_"
  "UNIT_ORDER_MOVE_TO_TARGET\020\002\022\037\n\033DOTA_UNIT"
  "_ORDER_ATTACK_MOVE\020\003\022!\n\035DOTA_UNIT_ORDER_"
  "ATTACK_TARGET\020\004\022!\n\035DOTA_UNIT_ORDER_CAST_"
  "POSITION\020\005\022\037\n\033DOTA_UNIT_ORDER_CAST_TARGE"
  "T\020\006\022$\n DOTA_UNIT_ORDER_CAST_TARGET_TREE\020"
  "\007\022\"\n\036DOTA_UNIT_ORDER_CAST_NO_TARGET\020\010\022\037\n"
  "\033DOTA_UNIT_ORDER_CAST_TOGGLE\020\t\022!\n\035DOTA_U"
  "NIT_ORDER_HOLD_POSITION\020\n\022!\n\035DOTA_UNIT_O"
  "RDER_TRAIN_ABILITY\020\013\022\035\n\031DOTA_UNIT_ORDER_"
  "DROP_ITEM\020\014\022\035\n\031DOTA_UNIT_ORDER_GIVE_ITEM"
  "\020\r\022\037\n\033DOTA_UNIT_ORDER_PICKUP_ITEM\020\016\022\037\n\033D"
  "OTA_UNIT_ORDER_PICKUP_RUNE\020\017\022!\n\035DOTA_UNI"
  "T_ORDER_PURCHASE_ITEM\020\020\022\035\n\031DOTA_UNIT_ORD"
  "ER_SELL_ITEM\020\021\022$\n DOTA_UNIT_ORDER_DISASS"
  "EMBLE_ITEM\020\022\022\035\n\031DOTA_UNIT_ORDER_MOVE_ITE"
  "M\020\023\022$\n DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO\020"
  "\024\022\030\n\024DOTA_UNIT_ORDER_STOP\020\025\022\031\n\025DOTA_UNIT"
  "_ORDER_TAUNT\020\026\022\033\n\027DOTA_UNIT_ORDER_BUYBAC"
  "K\020\027\022\031\n\025DOTA_UNIT_ORDER_GLYPH\020\030\022)\n%DOTA_U"
  "NIT_ORDER_EJECT_ITEM_FROM_STASH\020\031\022\035\n\031DOT"
  "A_UNIT_ORDER_CAST_RUNE\020\032\022 \n\034DOTA_UNIT_OR"
  "DER_PING_ABILITY\020\033\022%\n!DOTA_UNIT_ORDER_MO"
  "VE_TO_DIRECTION\020\034\022\032\n\026DOTA_UNIT_ORDER_PAT"
  "ROL\020\035\022*\n&DOTA_UNIT_ORDER_VECTOR_TARGET_P"
  "OSITION\020\036\022\031\n\025DOTA_UNIT_ORDER_RADAR\020\037\022)\n%"
  "DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK\020 \022"
  "\034\n\030DOTA_UNIT_ORDER_CONTINUE\020!\022\017\n\013ACTION_"
  "CHAT\020(\022\025\n\021ACTION_SWAP_ITEMS\020)\022\025\n\021ACTION_"
  "USE_SHRINE\020*\022\022\n\016ACTION_COURIER\020+\022\"\n\036RPC_"
  "GET_ACTUAL_INCOMING_DAMAGE\020,\022&\n\"RPC_GET_"
  "ESTIMATED_DAMAGE_TO_TARGET\020-\022\025\n\021OCEAN_FU"
  "LL_UPDATE\0202\022\025\n\021OCEAN_RELOAD_CODE\0203\022\024\n\020OC"
  "EAN_SOFT_RESET\0204\022\030\n\024OCEAN_HOLD_FRAMESKIP"
  "\0206\022\022\n\016OCEAN_WIN_GAME\020\?\022\035\n\031OCEAN_REPLAY_C"
  "ORRECT_TIME\020@\022\035\n\031SCRIPTING_DEBUG_DRAW_TE"
  "XT\0207\022\035\n\031SCRIPTING_DEBUG_DRAW_LINE\0208\022.\n*S"
  "CRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITIO"
  "N\0209\022$\n SCRIPTING_DEBUG_DRAW_SCREEN_TEXT\020"
  ":\022\034\n\030SCRIPTING_DEBUG_DRAW_BOX\020;\022\037\n\033SCRIP"
  "TING_DEBUG_DRAW_CIRCLE\020<\022\036\n\032SCRIPTING_DE"
  "BUG_DRAW_CLEAR\020=\022&\n\"SCRIPTING_DEBUG_SCRE"
  "EN_TEXT_PRETTY\020A\022!\n\035DOTA_UNIT_ORDER_MOVE"
  "_DIRECTLY\020>B\014\n\nActionData\"\263\001\n\010UnitType\022\013"
  "\n\007INVALID\020\000\022\010\n\004HERO\020\001\022\016\n\nCREEP_HERO\020\002\022\016\n"
  "\nLANE_CREEP\020\003\022\020\n\014JUNGLE_CREEP\020\004\022\n\n\006ROSHA"
  "N\020\005\022\t\n\005TOWER\020\006\022\014\n\010BARRACKS\020\007\022\n\n\006SHRINE\020\010"
  "\022\010\n\004FORT\020\t\022\014\n\010BUILDING\020\n\022\013\n\007COURIER\020\013\022\010\n"
  "\004WARD\020\014\"\335\001\n\014CourierState\022\037\n\022COURIER_STAT"
  "E_INIT\020\377\377\377\377\377\377\377\377\377\001\022\026\n\022COURIER_STATE_IDLE\020"
  "\000\022\031\n\025COURIER_STATE_AT_BASE\020\001\022\030\n\024COURIER_"
  "STATE_MOVING\020\002\022\"\n\036COURIER_STATE_DELIVERI"
  "NG_ITEMS\020\003\022#\n\037COURIER_STATE_RETURNING_TO"
  "_BASE\020\004\022\026\n\022COURIER_STATE_DEAD\020\005B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_deps[1] = {
  &::descriptor_table_valveextensions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto = {
  false, false, 14438, descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto, "dota_gcmessages_common_bot_script.proto", 
  &descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_once, descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_deps, 1, 60,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
  return descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_Action_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[0];
}
bool CMsgBotWorldState_Action_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 50:
    case 51:
    case 52:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_NONE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_MOVE_TO_POSITION;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_MOVE_TO_TARGET;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_ATTACK_MOVE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_ATTACK_TARGET;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_POSITION;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_TARGET;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_TARGET_TREE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_NO_TARGET;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_TOGGLE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_HOLD_POSITION;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_TRAIN_ABILITY;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_DROP_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_GIVE_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_PICKUP_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_PICKUP_RUNE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_PURCHASE_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_SELL_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_DISASSEMBLE_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_MOVE_ITEM;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_STOP;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_TAUNT;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_BUYBACK;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_GLYPH;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CAST_RUNE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_PING_ABILITY;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_MOVE_TO_DIRECTION;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_PATROL;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_RADAR;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_CONTINUE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::ACTION_CHAT;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::ACTION_SWAP_ITEMS;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::ACTION_USE_SHRINE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::ACTION_COURIER;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::RPC_GET_ACTUAL_INCOMING_DAMAGE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::RPC_GET_ESTIMATED_DAMAGE_TO_TARGET;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::OCEAN_FULL_UPDATE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::OCEAN_RELOAD_CODE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::OCEAN_SOFT_RESET;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::OCEAN_HOLD_FRAMESKIP;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::OCEAN_WIN_GAME;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::OCEAN_REPLAY_CORRECT_TIME;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_DRAW_TEXT;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_DRAW_LINE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DOTA_UNIT_ORDER_MOVE_TO_POSITION;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_DRAW_SCREEN_TEXT;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_DRAW_BOX;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_DRAW_CIRCLE;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_DRAW_CLEAR;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::SCRIPTING_DEBUG_SCREEN_TEXT_PRETTY;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::DOTA_UNIT_ORDER_MOVE_DIRECTLY;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::Type_MIN;
constexpr CMsgBotWorldState_Action_Type CMsgBotWorldState_Action::Type_MAX;
constexpr int CMsgBotWorldState_Action::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_UnitType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[1];
}
bool CMsgBotWorldState_UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::INVALID;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::HERO;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::CREEP_HERO;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::LANE_CREEP;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::JUNGLE_CREEP;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::ROSHAN;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::TOWER;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::BARRACKS;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::SHRINE;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::FORT;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::BUILDING;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::COURIER;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::WARD;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::UnitType_MIN;
constexpr CMsgBotWorldState_UnitType CMsgBotWorldState::UnitType_MAX;
constexpr int CMsgBotWorldState::UnitType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgBotWorldState_CourierState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto[2];
}
bool CMsgBotWorldState_CourierState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_INIT;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_IDLE;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_AT_BASE;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_MOVING;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_DELIVERING_ITEMS;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_RETURNING_TO_BASE;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::COURIER_STATE_DEAD;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::CourierState_MIN;
constexpr CMsgBotWorldState_CourierState CMsgBotWorldState::CourierState_MAX;
constexpr int CMsgBotWorldState::CourierState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CMsgBotWorldState_Vector::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Vector>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Vector)
}
CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(const CMsgBotWorldState_Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Vector)
}

void CMsgBotWorldState_Vector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

CMsgBotWorldState_Vector::~CMsgBotWorldState_Vector() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Vector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Vector::ArenaDtor(void* object) {
  CMsgBotWorldState_Vector* _this = reinterpret_cast< CMsgBotWorldState_Vector* >(object);
  (void)_this;
}
void CMsgBotWorldState_Vector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Vector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Vector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Vector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Vector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Vector)
  return target;
}

size_t CMsgBotWorldState_Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Vector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Vector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Vector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Vector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Vector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Vector)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Vector::MergeFrom(const CMsgBotWorldState_Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Vector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Vector::CopyFrom(const CMsgBotWorldState_Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Vector::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Vector::InternalSwap(CMsgBotWorldState_Vector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Vector, z_)
      + sizeof(CMsgBotWorldState_Vector::z_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Vector, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Vector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Player>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_alive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_primary_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Player* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Player::_Internal::location(const CMsgBotWorldState_Player* msg) {
  return *msg->location_;
}
CMsgBotWorldState_Player::CMsgBotWorldState_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Player)
}
CMsgBotWorldState_Player::CMsgBotWorldState_Player(const CMsgBotWorldState_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(mmr_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Player)
}

void CMsgBotWorldState_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mmr_) -
    reinterpret_cast<char*>(&location_)) + sizeof(mmr_));
}

CMsgBotWorldState_Player::~CMsgBotWorldState_Player() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_Player::ArenaDtor(void* object) {
  CMsgBotWorldState_Player* _this = reinterpret_cast< CMsgBotWorldState_Player* >(object);
  (void)_this;
}
void CMsgBotWorldState_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&assists_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(assists_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mmr_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(mmr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_alive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_alive(&has_bits);
          is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float respawn_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_respawn_time(&has_bits);
          respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_unit_handle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_primary_unit_handle(&has_bits);
          primary_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mmr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mmr(&has_bits);
          mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  // optional bool is_alive = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_alive(), target);
  }

  // optional float respawn_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_respawn_time(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_assists(), target);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_team_id(), target);
  }

  // optional uint32 primary_unit_handle = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_primary_unit_handle(), target);
  }

  // optional int32 mmr = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_mmr(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 11;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Player)
  return target;
}

size_t CMsgBotWorldState_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBotWorldState.Vector location = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional int32 player_id = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional bool is_alive = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float respawn_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 kills = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 team_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 primary_unit_handle = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_unit_handle());
    }

    // optional int32 mmr = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mmr());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Player)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Player::MergeFrom(const CMsgBotWorldState_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_alive_ = from.is_alive_;
    }
    if (cached_has_bits & 0x00000010u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000040u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000080u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      primary_unit_handle_ = from.primary_unit_handle_;
    }
    if (cached_has_bits & 0x00000400u) {
      mmr_ = from.mmr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Player::CopyFrom(const CMsgBotWorldState_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Player::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Player::InternalSwap(CMsgBotWorldState_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Player, mmr_)
      + sizeof(CMsgBotWorldState_Player::mmr_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Player, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Ability::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Ability>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cast_range(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_channel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cooldown_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_activated(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_toggled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_in_ability_phase(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_is_channeling(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_stolen(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_fully_castable(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_combined_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_power_treads_stat(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Ability)
}
CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(const CMsgBotWorldState_Ability& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&power_treads_stat_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(power_treads_stat_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Ability)
}

void CMsgBotWorldState_Ability::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&secondary_charges_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(secondary_charges_));
power_treads_stat_ = -1;
}

CMsgBotWorldState_Ability::~CMsgBotWorldState_Ability() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Ability)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Ability::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Ability::ArenaDtor(void* object) {
  CMsgBotWorldState_Ability* _this = reinterpret_cast< CMsgBotWorldState_Ability* >(object);
  (void)_this;
}
void CMsgBotWorldState_Ability::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Ability::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Ability::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Ability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_remaining_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(cooldown_remaining_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_activated_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&charges_) -
        reinterpret_cast<char*>(&is_activated_)) + sizeof(charges_));
  }
  if (cached_has_bits & 0x00030000u) {
    secondary_charges_ = 0u;
    power_treads_stat_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Ability::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 caster_handle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_caster_handle(&has_bits);
          caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cast_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cast_range(&has_bits);
          cast_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float channel_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_channel_time(&has_bits);
          channel_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float cooldown_remaining = 12 [default = 0];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_cooldown_remaining(&has_bits);
          cooldown_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_activated = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_is_activated(&has_bits);
          is_activated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_toggled = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_toggled(&has_bits);
          is_toggled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_in_ability_phase = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_in_ability_phase(&has_bits);
          is_in_ability_phase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_channeling = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_channeling(&has_bits);
          is_channeling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stolen = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_is_stolen(&has_bits);
          is_stolen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_fully_castable = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_is_fully_castable(&has_bits);
          is_fully_castable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 charges = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_charges(&has_bits);
          charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 secondary_charges = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_secondary_charges(&has_bits);
          secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_combined_locked = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_combined_locked(&has_bits);
          is_combined_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 power_treads_stat = 50 [default = -1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_power_treads_stat(&has_bits);
          power_treads_stat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Ability::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Ability)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_id(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_slot(), target);
  }

  // optional uint32 caster_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_caster_handle(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  // optional uint32 cast_range = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cast_range(), target);
  }

  // optional float channel_time = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_channel_time(), target);
  }

  // optional float cooldown_remaining = 12 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_cooldown_remaining(), target);
  }

  // optional bool is_activated = 20;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_is_activated(), target);
  }

  // optional bool is_toggled = 21;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_is_toggled(), target);
  }

  // optional bool is_in_ability_phase = 22;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_is_in_ability_phase(), target);
  }

  // optional bool is_channeling = 23;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_is_channeling(), target);
  }

  // optional bool is_stolen = 24;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_is_stolen(), target);
  }

  // optional bool is_fully_castable = 25;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_fully_castable(), target);
  }

  // optional uint32 charges = 30;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_charges(), target);
  }

  // optional uint32 secondary_charges = 31;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_secondary_charges(), target);
  }

  // optional bool is_combined_locked = 40;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(40, this->_internal_is_combined_locked(), target);
  }

  // optional int32 power_treads_stat = 50 [default = -1];
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_power_treads_stat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Ability)
  return target;
}

size_t CMsgBotWorldState_Ability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Ability)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_handle());
    }

    // optional uint32 ability_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot());
    }

    // optional uint32 caster_handle = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_caster_handle());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

    // optional uint32 cast_range = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cast_range());
    }

    // optional float channel_time = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float cooldown_remaining = 12 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_activated = 20;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_toggled = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_in_ability_phase = 22;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_channeling = 23;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_stolen = 24;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_fully_castable = 25;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool is_combined_locked = 40;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional uint32 charges = 30;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_charges());
    }

  }
  if (cached_has_bits & 0x00030000u) {
    // optional uint32 secondary_charges = 31;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_secondary_charges());
    }

    // optional int32 power_treads_stat = 50 [default = -1];
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_power_treads_stat());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Ability::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Ability* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Ability>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Ability)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Ability)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Ability::MergeFrom(const CMsgBotWorldState_Ability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      cast_range_ = from.cast_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_time_ = from.channel_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      cooldown_remaining_ = from.cooldown_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_activated_ = from.is_activated_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_toggled_ = from.is_toggled_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_in_ability_phase_ = from.is_in_ability_phase_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_channeling_ = from.is_channeling_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_stolen_ = from.is_stolen_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_fully_castable_ = from.is_fully_castable_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_combined_locked_ = from.is_combined_locked_;
    }
    if (cached_has_bits & 0x00008000u) {
      charges_ = from.charges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      secondary_charges_ = from.secondary_charges_;
    }
    if (cached_has_bits & 0x00020000u) {
      power_treads_stat_ = from.power_treads_stat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Ability::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Ability::CopyFrom(const CMsgBotWorldState_Ability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Ability::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Ability::InternalSwap(CMsgBotWorldState_Ability* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Ability, secondary_charges_)
      + sizeof(CMsgBotWorldState_Ability::secondary_charges_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Ability, handle_)>(
          reinterpret_cast<char*>(&handle_),
          reinterpret_cast<char*>(&other->handle_));
  swap(power_treads_stat_, other->power_treads_stat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Ability::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_DroppedItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_DroppedItem>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_DroppedItem* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_DroppedItem::_Internal::location(const CMsgBotWorldState_DroppedItem* msg) {
  return *msg->location_;
}
CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.DroppedItem)
}
CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(const CMsgBotWorldState_DroppedItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.DroppedItem)
}

void CMsgBotWorldState_DroppedItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&location_)) + sizeof(item_id_));
}

CMsgBotWorldState_DroppedItem::~CMsgBotWorldState_DroppedItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.DroppedItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_DroppedItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_DroppedItem::ArenaDtor(void* object) {
  CMsgBotWorldState_DroppedItem* _this = reinterpret_cast< CMsgBotWorldState_DroppedItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_DroppedItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_DroppedItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_DroppedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.DroppedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  item_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_DroppedItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_DroppedItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.DroppedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.DroppedItem)
  return target;
}

size_t CMsgBotWorldState_DroppedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.DroppedItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgBotWorldState.Vector location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_DroppedItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.DroppedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_DroppedItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_DroppedItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.DroppedItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.DroppedItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_DroppedItem::MergeFrom(const CMsgBotWorldState_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.DroppedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_DroppedItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_DroppedItem::CopyFrom(const CMsgBotWorldState_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_DroppedItem::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_DroppedItem::InternalSwap(CMsgBotWorldState_DroppedItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_DroppedItem, item_id_)
      + sizeof(CMsgBotWorldState_DroppedItem::item_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_DroppedItem, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_DroppedItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_RuneInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_RuneInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_RuneInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_since_seen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_RuneInfo::_Internal::location(const CMsgBotWorldState_RuneInfo* msg) {
  return *msg->location_;
}
CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.RuneInfo)
}
CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(const CMsgBotWorldState_RuneInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_since_seen_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_since_seen_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.RuneInfo)
}

void CMsgBotWorldState_RuneInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_since_seen_) -
    reinterpret_cast<char*>(&location_)) + sizeof(time_since_seen_));
}

CMsgBotWorldState_RuneInfo::~CMsgBotWorldState_RuneInfo() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.RuneInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_RuneInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_RuneInfo::ArenaDtor(void* object) {
  CMsgBotWorldState_RuneInfo* _this = reinterpret_cast< CMsgBotWorldState_RuneInfo* >(object);
  (void)_this;
}
void CMsgBotWorldState_RuneInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_RuneInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_RuneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.RuneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_since_seen_) -
        reinterpret_cast<char*>(&type_)) + sizeof(time_since_seen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_RuneInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time_since_seen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_time_since_seen(&has_bits);
          time_since_seen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_RuneInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.RuneInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // optional float time_since_seen = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_time_since_seen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.RuneInfo)
  return target;
}

size_t CMsgBotWorldState_RuneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.RuneInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CMsgBotWorldState.Vector location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional uint32 status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status());
    }

    // optional float time_since_seen = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_RuneInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.RuneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_RuneInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_RuneInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.RuneInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.RuneInfo)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_RuneInfo::MergeFrom(const CMsgBotWorldState_RuneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.RuneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_since_seen_ = from.time_since_seen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_RuneInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.RuneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_RuneInfo::CopyFrom(const CMsgBotWorldState_RuneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.RuneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_RuneInfo::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_RuneInfo::InternalSwap(CMsgBotWorldState_RuneInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, time_since_seen_)
      + sizeof(CMsgBotWorldState_RuneInfo::time_since_seen_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_RuneInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_TeleportInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_TeleportInfo>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_TeleportInfo* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_TeleportInfo::_Internal::location(const CMsgBotWorldState_TeleportInfo* msg) {
  return *msg->location_;
}
CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.TeleportInfo)
}
CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(const CMsgBotWorldState_TeleportInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_remaining_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(time_remaining_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.TeleportInfo)
}

void CMsgBotWorldState_TeleportInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_remaining_) -
    reinterpret_cast<char*>(&location_)) + sizeof(time_remaining_));
}

CMsgBotWorldState_TeleportInfo::~CMsgBotWorldState_TeleportInfo() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.TeleportInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_TeleportInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_TeleportInfo::ArenaDtor(void* object) {
  CMsgBotWorldState_TeleportInfo* _this = reinterpret_cast< CMsgBotWorldState_TeleportInfo* >(object);
  (void)_this;
}
void CMsgBotWorldState_TeleportInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_TeleportInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_TeleportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.TeleportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_remaining_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(time_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_TeleportInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_time_remaining(&has_bits);
          time_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_TeleportInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.TeleportInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional float time_remaining = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_time_remaining(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.TeleportInfo)
  return target;
}

size_t CMsgBotWorldState_TeleportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.TeleportInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgBotWorldState.Vector location = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional float time_remaining = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_TeleportInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.TeleportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_TeleportInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_TeleportInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.TeleportInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.TeleportInfo)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_TeleportInfo::MergeFrom(const CMsgBotWorldState_TeleportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.TeleportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_remaining_ = from.time_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_TeleportInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.TeleportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_TeleportInfo::CopyFrom(const CMsgBotWorldState_TeleportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.TeleportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_TeleportInfo::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_TeleportInfo::InternalSwap(CMsgBotWorldState_TeleportInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, time_remaining_)
      + sizeof(CMsgBotWorldState_TeleportInfo::time_remaining_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_TeleportInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Modifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Modifier>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_remaining_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  auxiliary_units_handles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Modifier)
}
CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(const CMsgBotWorldState_Modifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      auxiliary_units_handles_(from.auxiliary_units_handles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&stack_count_, &from.stack_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&stack_count_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Modifier)
}

void CMsgBotWorldState_Modifier::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stack_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&stack_count_)) + sizeof(handle_));
}

CMsgBotWorldState_Modifier::~CMsgBotWorldState_Modifier() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Modifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Modifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Modifier::ArenaDtor(void* object) {
  CMsgBotWorldState_Modifier* _this = reinterpret_cast< CMsgBotWorldState_Modifier* >(object);
  (void)_this;
}
void CMsgBotWorldState_Modifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Modifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Modifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Modifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auxiliary_units_handles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&stack_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handle_) -
        reinterpret_cast<char*>(&stack_count_)) + sizeof(handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Modifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Modifier.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stack_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stack_count(&has_bits);
          stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ability_handle(&has_bits);
          ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float remaining_duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_remaining_duration(&has_bits);
          remaining_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 auxiliary_units_handles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_auxiliary_units_handles(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_auxiliary_units_handles(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 handle = 7 [(.map_key) = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Modifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Modifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Modifier.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stack_count(), target);
  }

  // optional uint32 ability_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_handle(), target);
  }

  // optional uint32 ability_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_id(), target);
  }

  // optional float remaining_duration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_remaining_duration(), target);
  }

  // repeated uint32 auxiliary_units_handles = 6;
  for (int i = 0, n = this->_internal_auxiliary_units_handles_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_auxiliary_units_handles(i), target);
  }

  // optional uint32 handle = 7 [(.map_key) = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Modifier)
  return target;
}

size_t CMsgBotWorldState_Modifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Modifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 auxiliary_units_handles = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->auxiliary_units_handles_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_auxiliary_units_handles_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 stack_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stack_count());
    }

    // optional uint32 ability_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_handle());
    }

    // optional uint32 ability_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional float remaining_duration = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 handle = 7 [(.map_key) = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Modifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Modifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Modifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Modifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Modifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Modifier)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Modifier::MergeFrom(const CMsgBotWorldState_Modifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Modifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auxiliary_units_handles_.MergeFrom(from.auxiliary_units_handles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_duration_ = from.remaining_duration_;
    }
    if (cached_has_bits & 0x00000020u) {
      handle_ = from.handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Modifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Modifier::CopyFrom(const CMsgBotWorldState_Modifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Modifier::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Modifier::InternalSwap(CMsgBotWorldState_Modifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  auxiliary_units_handles_.InternalSwap(&other->auxiliary_units_handles_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Modifier, handle_)
      + sizeof(CMsgBotWorldState_Modifier::handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Modifier, stack_count_)>(
          reinterpret_cast<char*>(&stack_count_),
          reinterpret_cast<char*>(&other->stack_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Modifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_LinearProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_LinearProjectile>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_caster_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_caster_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_LinearProjectile* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBotWorldState_Vector& velocity(const CMsgBotWorldState_LinearProjectile* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_LinearProjectile::_Internal::location(const CMsgBotWorldState_LinearProjectile* msg) {
  return *msg->location_;
}
const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_LinearProjectile::_Internal::velocity(const CMsgBotWorldState_LinearProjectile* msg) {
  return *msg->velocity_;
}
CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.LinearProjectile)
}
CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(const CMsgBotWorldState_LinearProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::CMsgBotWorldState_Vector(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&caster_unit_type_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(caster_unit_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.LinearProjectile)
}

void CMsgBotWorldState_LinearProjectile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caster_unit_type_) -
    reinterpret_cast<char*>(&location_)) + sizeof(caster_unit_type_));
}

CMsgBotWorldState_LinearProjectile::~CMsgBotWorldState_LinearProjectile() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.LinearProjectile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_LinearProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete velocity_;
}

void CMsgBotWorldState_LinearProjectile::ArenaDtor(void* object) {
  CMsgBotWorldState_LinearProjectile* _this = reinterpret_cast< CMsgBotWorldState_LinearProjectile* >(object);
  (void)_this;
}
void CMsgBotWorldState_LinearProjectile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_LinearProjectile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_LinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.LinearProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(radius_));
  }
  caster_unit_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_LinearProjectile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 caster_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caster_handle(&has_bits);
          caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caster_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_caster_player_id(&has_bits);
          caster_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ability_handle(&has_bits);
          ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radius = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_caster_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_LinearProjectile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.LinearProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional uint32 caster_handle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_caster_handle(), target);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_caster_player_id(), target);
  }

  // optional uint32 ability_handle = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_handle(), target);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::location(this), target, stream);
  }

  // optional .CMsgBotWorldState.Vector velocity = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::velocity(this), target, stream);
  }

  // optional uint32 radius = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_radius(), target);
  }

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_caster_unit_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.LinearProjectile)
  return target;
}

size_t CMsgBotWorldState_LinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.LinearProjectile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBotWorldState.Vector location = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .CMsgBotWorldState.Vector velocity = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_handle());
    }

    // optional uint32 caster_handle = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_caster_handle());
    }

    // optional int32 caster_player_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caster_player_id());
    }

    // optional uint32 ability_handle = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_handle());
    }

    // optional uint32 ability_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 radius = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radius());
    }

  }
  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caster_unit_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_LinearProjectile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.LinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_LinearProjectile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_LinearProjectile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.LinearProjectile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.LinearProjectile)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_LinearProjectile::MergeFrom(const CMsgBotWorldState_LinearProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.LinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      caster_player_id_ = from.caster_player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_caster_unit_type(from._internal_caster_unit_type());
  }
}

void CMsgBotWorldState_LinearProjectile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.LinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_LinearProjectile::CopyFrom(const CMsgBotWorldState_LinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.LinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_LinearProjectile::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_LinearProjectile::InternalSwap(CMsgBotWorldState_LinearProjectile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, caster_unit_type_)
      + sizeof(CMsgBotWorldState_LinearProjectile::caster_unit_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_LinearProjectile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_TrackingProjectile::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_TrackingProjectile>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caster_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_caster_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_TrackingProjectile* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_dodgeable(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_attack(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_TrackingProjectile::_Internal::location(const CMsgBotWorldState_TrackingProjectile* msg) {
  return *msg->location_;
}
CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.TrackingProjectile)
}
CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(const CMsgBotWorldState_TrackingProjectile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&caster_handle_, &from.caster_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&caster_handle_)) + sizeof(handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.TrackingProjectile)
}

void CMsgBotWorldState_TrackingProjectile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&handle_) -
    reinterpret_cast<char*>(&location_)) + sizeof(handle_));
}

CMsgBotWorldState_TrackingProjectile::~CMsgBotWorldState_TrackingProjectile() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.TrackingProjectile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_TrackingProjectile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_TrackingProjectile::ArenaDtor(void* object) {
  CMsgBotWorldState_TrackingProjectile* _this = reinterpret_cast< CMsgBotWorldState_TrackingProjectile* >(object);
  (void)_this;
}
void CMsgBotWorldState_TrackingProjectile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_TrackingProjectile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_TrackingProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.TrackingProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&caster_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_attack_) -
        reinterpret_cast<char*>(&caster_handle_)) + sizeof(is_attack_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&caster_unit_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&handle_) -
        reinterpret_cast<char*>(&caster_unit_type_)) + sizeof(handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_TrackingProjectile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 caster_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_caster_handle(&has_bits);
          caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caster_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caster_player_id(&has_bits);
          caster_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ability_handle(&has_bits);
          ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_velocity(&has_bits);
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dodgeable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_dodgeable(&has_bits);
          is_dodgeable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_attack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_attack(&has_bits);
          is_attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_caster_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 handle = 10 [(.map_key) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_TrackingProjectile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.TrackingProjectile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 caster_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_caster_handle(), target);
  }

  // optional int32 caster_player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_caster_player_id(), target);
  }

  // optional uint32 ability_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ability_handle(), target);
  }

  // optional uint32 ability_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_id(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::location(this), target, stream);
  }

  // optional uint32 velocity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_velocity(), target);
  }

  // optional bool is_dodgeable = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_dodgeable(), target);
  }

  // optional bool is_attack = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_attack(), target);
  }

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_caster_unit_type(), target);
  }

  // optional uint32 handle = 10 [(.map_key) = true];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.TrackingProjectile)
  return target;
}

size_t CMsgBotWorldState_TrackingProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.TrackingProjectile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgBotWorldState.Vector location = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 caster_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_caster_handle());
    }

    // optional int32 caster_player_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caster_player_id());
    }

    // optional uint32 ability_handle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_handle());
    }

    // optional uint32 ability_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 velocity = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_velocity());
    }

    // optional bool is_dodgeable = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_attack = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional .CMsgBotWorldState.UnitType caster_unit_type = 9 [default = INVALID];
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caster_unit_type());
    }

    // optional uint32 handle = 10 [(.map_key) = true];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_TrackingProjectile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.TrackingProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_TrackingProjectile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_TrackingProjectile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.TrackingProjectile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.TrackingProjectile)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_TrackingProjectile::MergeFrom(const CMsgBotWorldState_TrackingProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.TrackingProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      caster_player_id_ = from.caster_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_dodgeable_ = from.is_dodgeable_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_attack_ = from.is_attack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      caster_unit_type_ = from.caster_unit_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      handle_ = from.handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_TrackingProjectile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.TrackingProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_TrackingProjectile::CopyFrom(const CMsgBotWorldState_TrackingProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.TrackingProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_TrackingProjectile::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_TrackingProjectile::InternalSwap(CMsgBotWorldState_TrackingProjectile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, handle_)
      + sizeof(CMsgBotWorldState_TrackingProjectile::handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_TrackingProjectile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_AvoidanceZone::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_AvoidanceZone>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_AvoidanceZone* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_caster_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_caster_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_caster_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ability_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_AvoidanceZone::_Internal::location(const CMsgBotWorldState_AvoidanceZone* msg) {
  return *msg->location_;
}
CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.AvoidanceZone)
}
CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(const CMsgBotWorldState_AvoidanceZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&caster_handle_, &from.caster_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&caster_unit_type_) -
    reinterpret_cast<char*>(&caster_handle_)) + sizeof(caster_unit_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.AvoidanceZone)
}

void CMsgBotWorldState_AvoidanceZone::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&caster_unit_type_) -
    reinterpret_cast<char*>(&location_)) + sizeof(caster_unit_type_));
}

CMsgBotWorldState_AvoidanceZone::~CMsgBotWorldState_AvoidanceZone() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.AvoidanceZone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_AvoidanceZone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_AvoidanceZone::ArenaDtor(void* object) {
  CMsgBotWorldState_AvoidanceZone* _this = reinterpret_cast< CMsgBotWorldState_AvoidanceZone* >(object);
  (void)_this;
}
void CMsgBotWorldState_AvoidanceZone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_AvoidanceZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_AvoidanceZone::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.AvoidanceZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&caster_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&caster_unit_type_) -
        reinterpret_cast<char*>(&caster_handle_)) + sizeof(caster_unit_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_AvoidanceZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgBotWorldState.Vector location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 caster_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_caster_handle(&has_bits);
          caster_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 caster_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_caster_player_id(&has_bits);
          caster_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ability_handle(&has_bits);
          ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_caster_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_AvoidanceZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.AvoidanceZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgBotWorldState.Vector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // optional uint32 caster_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_caster_handle(), target);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_caster_player_id(), target);
  }

  // optional uint32 ability_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ability_handle(), target);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ability_id(), target);
  }

  // optional uint32 radius = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_radius(), target);
  }

  // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_caster_unit_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.AvoidanceZone)
  return target;
}

size_t CMsgBotWorldState_AvoidanceZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.AvoidanceZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgBotWorldState.Vector location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 caster_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_caster_handle());
    }

    // optional int32 caster_player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_caster_player_id());
    }

    // optional uint32 ability_handle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_handle());
    }

    // optional uint32 ability_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 radius = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radius());
    }

    // optional .CMsgBotWorldState.UnitType caster_unit_type = 7 [default = INVALID];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_caster_unit_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_AvoidanceZone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.AvoidanceZone)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_AvoidanceZone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_AvoidanceZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.AvoidanceZone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.AvoidanceZone)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_AvoidanceZone::MergeFrom(const CMsgBotWorldState_AvoidanceZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.AvoidanceZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      caster_player_id_ = from.caster_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000040u) {
      caster_unit_type_ = from.caster_unit_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_AvoidanceZone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.AvoidanceZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_AvoidanceZone::CopyFrom(const CMsgBotWorldState_AvoidanceZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.AvoidanceZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_AvoidanceZone::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_AvoidanceZone::InternalSwap(CMsgBotWorldState_AvoidanceZone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, caster_unit_type_)
      + sizeof(CMsgBotWorldState_AvoidanceZone::caster_unit_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_AvoidanceZone::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Courier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Courier>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBotWorldState_Courier::CMsgBotWorldState_Courier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Courier)
}
CMsgBotWorldState_Courier::CMsgBotWorldState_Courier(const CMsgBotWorldState_Courier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Courier)
}

void CMsgBotWorldState_Courier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&handle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(player_id_));
state_ = -1;
}

CMsgBotWorldState_Courier::~CMsgBotWorldState_Courier() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Courier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Courier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Courier::ArenaDtor(void* object) {
  CMsgBotWorldState_Courier* _this = reinterpret_cast< CMsgBotWorldState_Courier* >(object);
  (void)_this;
}
void CMsgBotWorldState_Courier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Courier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Courier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Courier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_id_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(player_id_));
    state_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Courier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&has_bits);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_CourierState_IsValid(val))) {
            _internal_set_state(static_cast<::CMsgBotWorldState_CourierState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Courier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Courier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // optional int32 player_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Courier)
  return target;
}

size_t CMsgBotWorldState_Courier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Courier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_handle());
    }

    // optional int32 player_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional .CMsgBotWorldState.CourierState state = 2 [default = COURIER_STATE_INIT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Courier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Courier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Courier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Courier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Courier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Courier)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Courier::MergeFrom(const CMsgBotWorldState_Courier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Courier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Courier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Courier::CopyFrom(const CMsgBotWorldState_Courier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Courier::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Courier::InternalSwap(CMsgBotWorldState_Courier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Courier, player_id_)
      + sizeof(CMsgBotWorldState_Courier::player_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Courier, handle_)>(
          reinterpret_cast<char*>(&handle_),
          reinterpret_cast<char*>(&other->handle_));
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Courier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_EventAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventAbility>()._has_bits_);
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_EventAbility* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_channel_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_EventAbility::_Internal::location(const CMsgBotWorldState_EventAbility* msg) {
  return *msg->location_;
}
CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventAbility)
}
CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(const CMsgBotWorldState_EventAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_channel_start_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(is_channel_start_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventAbility)
}

void CMsgBotWorldState_EventAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_channel_start_) -
    reinterpret_cast<char*>(&location_)) + sizeof(is_channel_start_));
}

CMsgBotWorldState_EventAbility::~CMsgBotWorldState_EventAbility() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_EventAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_EventAbility::ArenaDtor(void* object) {
  CMsgBotWorldState_EventAbility* _this = reinterpret_cast< CMsgBotWorldState_EventAbility* >(object);
  (void)_this;
}
void CMsgBotWorldState_EventAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_EventAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_EventAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_channel_start_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(is_channel_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 unit_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unit_handle(&has_bits);
          unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_channel_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_channel_start(&has_bits);
          is_channel_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_EventAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional uint32 unit_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_unit_handle(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // optional bool is_channel_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_channel_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventAbility)
  return target;
}

size_t CMsgBotWorldState_EventAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgBotWorldState.Vector location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional int32 player_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional uint32 unit_handle = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unit_handle());
    }

    // optional bool is_channel_start = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_EventAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.EventAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_EventAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.EventAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.EventAbility)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventAbility::MergeFrom(const CMsgBotWorldState_EventAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      unit_handle_ = from.unit_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_channel_start_ = from.is_channel_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.EventAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventAbility::CopyFrom(const CMsgBotWorldState_EventAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventAbility::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventAbility::InternalSwap(CMsgBotWorldState_EventAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventAbility, is_channel_start_)
      + sizeof(CMsgBotWorldState_EventAbility::is_channel_start_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventAbility, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_EventDamage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventDamage>()._has_bits_);
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_victim_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_victim_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_attacker_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_attacker_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventDamage)
}
CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(const CMsgBotWorldState_EventDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&damage_, &from.damage_,
    static_cast<size_t>(reinterpret_cast<char*>(&ability_id_) -
    reinterpret_cast<char*>(&damage_)) + sizeof(ability_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventDamage)
}

void CMsgBotWorldState_EventDamage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&damage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ability_id_) -
    reinterpret_cast<char*>(&damage_)) + sizeof(ability_id_));
}

CMsgBotWorldState_EventDamage::~CMsgBotWorldState_EventDamage() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventDamage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_EventDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_EventDamage::ArenaDtor(void* object) {
  CMsgBotWorldState_EventDamage* _this = reinterpret_cast< CMsgBotWorldState_EventDamage* >(object);
  (void)_this;
}
void CMsgBotWorldState_EventDamage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_EventDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_EventDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ability_id_) -
        reinterpret_cast<char*>(&damage_)) + sizeof(ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 damage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 victim_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_victim_player_id(&has_bits);
          victim_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 victim_unit_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_victim_unit_handle(&has_bits);
          victim_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attacker_player_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_attacker_player_id(&has_bits);
          attacker_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attacker_unit_handle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_attacker_unit_handle(&has_bits);
          attacker_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_EventDamage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 damage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_damage(), target);
  }

  // optional int32 victim_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_victim_player_id(), target);
  }

  // optional uint32 victim_unit_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_victim_unit_handle(), target);
  }

  // optional int32 attacker_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_attacker_player_id(), target);
  }

  // optional uint32 attacker_unit_handle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_attacker_unit_handle(), target);
  }

  // optional uint32 ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_ability_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventDamage)
  return target;
}

size_t CMsgBotWorldState_EventDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventDamage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 damage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

    // optional int32 victim_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_victim_player_id());
    }

    // optional uint32 victim_unit_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim_unit_handle());
    }

    // optional int32 attacker_player_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attacker_player_id());
    }

    // optional uint32 attacker_unit_handle = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attacker_unit_handle());
    }

    // optional uint32 ability_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_EventDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.EventDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_EventDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.EventDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.EventDamage)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventDamage::MergeFrom(const CMsgBotWorldState_EventDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000002u) {
      victim_player_id_ = from.victim_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      victim_unit_handle_ = from.victim_unit_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      attacker_player_id_ = from.attacker_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      attacker_unit_handle_ = from.attacker_unit_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      ability_id_ = from.ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.EventDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventDamage::CopyFrom(const CMsgBotWorldState_EventDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventDamage::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventDamage::InternalSwap(CMsgBotWorldState_EventDamage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventDamage, ability_id_)
      + sizeof(CMsgBotWorldState_EventDamage::ability_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventDamage, damage_)>(
          reinterpret_cast<char*>(&damage_),
          reinterpret_cast<char*>(&other->damage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventDamage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_EventCourierKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventCourierKilled>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_courier_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_killer_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventCourierKilled)
}
CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(const CMsgBotWorldState_EventCourierKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(killer_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventCourierKilled)
}

void CMsgBotWorldState_EventCourierKilled::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(killer_unit_handle_));
}

CMsgBotWorldState_EventCourierKilled::~CMsgBotWorldState_EventCourierKilled() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventCourierKilled)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_EventCourierKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_EventCourierKilled::ArenaDtor(void* object) {
  CMsgBotWorldState_EventCourierKilled* _this = reinterpret_cast< CMsgBotWorldState_EventCourierKilled* >(object);
  (void)_this;
}
void CMsgBotWorldState_EventCourierKilled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_EventCourierKilled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_EventCourierKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventCourierKilled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killer_unit_handle_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(killer_unit_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventCourierKilled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 courier_unit_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_courier_unit_handle(&has_bits);
          courier_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 killer_player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_killer_player_id(&has_bits);
          killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killer_unit_handle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_killer_unit_handle(&has_bits);
          killer_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_EventCourierKilled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventCourierKilled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional uint32 courier_unit_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_courier_unit_handle(), target);
  }

  // optional int32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_killer_player_id(), target);
  }

  // optional uint32 killer_unit_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_killer_unit_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventCourierKilled)
  return target;
}

size_t CMsgBotWorldState_EventCourierKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventCourierKilled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 courier_unit_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_courier_unit_handle());
    }

    // optional int32 killer_player_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_killer_player_id());
    }

    // optional uint32 killer_unit_handle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killer_unit_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_EventCourierKilled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.EventCourierKilled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventCourierKilled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_EventCourierKilled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.EventCourierKilled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.EventCourierKilled)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventCourierKilled::MergeFrom(const CMsgBotWorldState_EventCourierKilled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventCourierKilled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      courier_unit_handle_ = from.courier_unit_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      killer_player_id_ = from.killer_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      killer_unit_handle_ = from.killer_unit_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventCourierKilled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.EventCourierKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventCourierKilled::CopyFrom(const CMsgBotWorldState_EventCourierKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventCourierKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventCourierKilled::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventCourierKilled::InternalSwap(CMsgBotWorldState_EventCourierKilled* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, killer_unit_handle_)
      + sizeof(CMsgBotWorldState_EventCourierKilled::killer_unit_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventCourierKilled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_EventRoshanKilled::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventRoshanKilled>()._has_bits_);
  static void set_has_killer_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_killer_unit_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventRoshanKilled)
}
CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(const CMsgBotWorldState_EventRoshanKilled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&killer_player_id_, &from.killer_player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&killer_player_id_)) + sizeof(killer_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventRoshanKilled)
}

void CMsgBotWorldState_EventRoshanKilled::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&killer_player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&killer_player_id_)) + sizeof(killer_unit_handle_));
}

CMsgBotWorldState_EventRoshanKilled::~CMsgBotWorldState_EventRoshanKilled() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventRoshanKilled)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_EventRoshanKilled::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_EventRoshanKilled::ArenaDtor(void* object) {
  CMsgBotWorldState_EventRoshanKilled* _this = reinterpret_cast< CMsgBotWorldState_EventRoshanKilled* >(object);
  (void)_this;
}
void CMsgBotWorldState_EventRoshanKilled::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_EventRoshanKilled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_EventRoshanKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventRoshanKilled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&killer_player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&killer_unit_handle_) -
        reinterpret_cast<char*>(&killer_player_id_)) + sizeof(killer_unit_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventRoshanKilled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 killer_player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_killer_player_id(&has_bits);
          killer_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 killer_unit_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_killer_unit_handle(&has_bits);
          killer_unit_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_EventRoshanKilled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventRoshanKilled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 killer_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_killer_player_id(), target);
  }

  // optional uint32 killer_unit_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_killer_unit_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventRoshanKilled)
  return target;
}

size_t CMsgBotWorldState_EventRoshanKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventRoshanKilled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 killer_player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_killer_player_id());
    }

    // optional uint32 killer_unit_handle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_killer_unit_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_EventRoshanKilled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.EventRoshanKilled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventRoshanKilled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_EventRoshanKilled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.EventRoshanKilled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.EventRoshanKilled)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventRoshanKilled::MergeFrom(const CMsgBotWorldState_EventRoshanKilled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventRoshanKilled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      killer_player_id_ = from.killer_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      killer_unit_handle_ = from.killer_unit_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventRoshanKilled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.EventRoshanKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventRoshanKilled::CopyFrom(const CMsgBotWorldState_EventRoshanKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventRoshanKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventRoshanKilled::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventRoshanKilled::InternalSwap(CMsgBotWorldState_EventRoshanKilled* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventRoshanKilled, killer_unit_handle_)
      + sizeof(CMsgBotWorldState_EventRoshanKilled::killer_unit_handle_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventRoshanKilled, killer_player_id_)>(
          reinterpret_cast<char*>(&killer_player_id_),
          reinterpret_cast<char*>(&other->killer_player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventRoshanKilled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_EventTree::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_EventTree>()._has_bits_);
  static void set_has_tree_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_respawned(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_EventTree* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_delayed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_EventTree::_Internal::location(const CMsgBotWorldState_EventTree* msg) {
  return *msg->location_;
}
CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.EventTree)
}
CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(const CMsgBotWorldState_EventTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&tree_id_, &from.tree_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&delayed_) -
    reinterpret_cast<char*>(&tree_id_)) + sizeof(delayed_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.EventTree)
}

void CMsgBotWorldState_EventTree::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&delayed_) -
    reinterpret_cast<char*>(&location_)) + sizeof(delayed_));
}

CMsgBotWorldState_EventTree::~CMsgBotWorldState_EventTree() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.EventTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_EventTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_EventTree::ArenaDtor(void* object) {
  CMsgBotWorldState_EventTree* _this = reinterpret_cast< CMsgBotWorldState_EventTree* >(object);
  (void)_this;
}
void CMsgBotWorldState_EventTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_EventTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_EventTree::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.EventTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&tree_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delayed_) -
        reinterpret_cast<char*>(&tree_id_)) + sizeof(delayed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_EventTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tree_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tree_id(&has_bits);
          tree_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool destroyed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_destroyed(&has_bits);
          destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool respawned = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_respawned(&has_bits);
          respawned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool delayed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_delayed(&has_bits);
          delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_EventTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.EventTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tree_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tree_id(), target);
  }

  // optional bool destroyed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_destroyed(), target);
  }

  // optional bool respawned = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_respawned(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::location(this), target, stream);
  }

  // optional bool delayed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_delayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.EventTree)
  return target;
}

size_t CMsgBotWorldState_EventTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.EventTree)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgBotWorldState.Vector location = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 tree_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tree_id());
    }

    // optional bool destroyed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool respawned = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool delayed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_EventTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.EventTree)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_EventTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.EventTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.EventTree)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventTree::MergeFrom(const CMsgBotWorldState_EventTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.EventTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      tree_id_ = from.tree_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      destroyed_ = from.destroyed_;
    }
    if (cached_has_bits & 0x00000008u) {
      respawned_ = from.respawned_;
    }
    if (cached_has_bits & 0x00000010u) {
      delayed_ = from.delayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.EventTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventTree::CopyFrom(const CMsgBotWorldState_EventTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.EventTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventTree::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventTree::InternalSwap(CMsgBotWorldState_EventTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventTree, delayed_)
      + sizeof(CMsgBotWorldState_EventTree::delayed_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_EventTree, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_EventTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Unit::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Unit>()._has_bits_);
  static void set_has_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unit_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Unit* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_alive(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bounding_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_facing(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ground_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_vision_range_daytime(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_vision_range_nighttime(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_health_max(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_health_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_mana_max(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_mana_regen(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_base_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_current_movement_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_anim_activity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_anim_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_base_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_base_damage_variance(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_bonus_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_attack_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_attack_range(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_attack_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_attack_anim_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_attack_acquisition_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_attack_projectile_speed(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_attack_target_handle(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_attack_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_attacks_per_second(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_last_attack_time(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_bounty_xp(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_bounty_gold_min(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_bounty_gold_max(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_is_channeling(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_active_ability_handle(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_is_attack_immune(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_is_blind(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_is_block_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_is_disarmed(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_is_dominated(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_is_evade_disabled(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_is_hexed(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_is_invisible(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_is_invulnerable(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_is_magic_immune(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_is_muted(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_is_nightmared(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_is_rooted(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_is_silenced(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_is_specially_deniable(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_is_stunned(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_is_unable_to_miss(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_has_scepter(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_is_specially_undeniable(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_ability_target_handle(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_ability_target_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_using_ability(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_primary_attribute(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_is_illusion(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_respawn_time(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_buyback_cost(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_buyback_cooldown(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_spell_amplification(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_armor(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_magic_resist(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_evasion(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_xp_needed_to_level(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_ability_points(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_reliable_gold(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_unreliable_gold(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_net_worth(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_strength(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_agility(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_intelligence(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_remaining_lifespan(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_flying_courier(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_shrine_cooldown(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_is_shrine_healing(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Unit::_Internal::location(const CMsgBotWorldState_Unit* msg) {
  return *msg->location_;
}
CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  abilities_(arena),
  items_(arena),
  modifiers_(arena),
  incoming_tracking_projectiles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Unit)
}
CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(const CMsgBotWorldState_Unit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      items_(from.items_),
      modifiers_(from.modifiers_),
      incoming_tracking_projectiles_(from.incoming_tracking_projectiles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  attack_target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_attack_target_name()) {
    attack_target_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attack_target_name(), 
      GetArena());
  }
  ability_target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ability_target_name()) {
    ability_target_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ability_target_name(), 
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&handle_, &from.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&unreliable_gold_) -
    reinterpret_cast<char*>(&handle_)) + sizeof(unreliable_gold_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Unit)
}

void CMsgBotWorldState_Unit::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
attack_target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ability_target_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shrine_cooldown_) -
    reinterpret_cast<char*>(&location_)) + sizeof(shrine_cooldown_));
attacks_per_second_ = -1;
last_attack_time_ = -1;
reliable_gold_ = -1;
unreliable_gold_ = -1;
}

CMsgBotWorldState_Unit::~CMsgBotWorldState_Unit() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Unit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Unit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attack_target_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ability_target_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_Unit::ArenaDtor(void* object) {
  CMsgBotWorldState_Unit* _this = reinterpret_cast< CMsgBotWorldState_Unit* >(object);
  (void)_this;
}
void CMsgBotWorldState_Unit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Unit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  abilities_.Clear();
  items_.Clear();
  modifiers_.Clear();
  incoming_tracking_projectiles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      attack_target_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ability_target_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&handle_)) + sizeof(level_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&health_max_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(health_max_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&health_regen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&anim_cycle_) -
        reinterpret_cast<char*>(&health_regen_)) + sizeof(anim_cycle_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&base_damage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attack_acquisition_range_) -
        reinterpret_cast<char*>(&base_damage_)) + sizeof(attack_acquisition_range_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&attack_projectile_speed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bounty_gold_min_) -
        reinterpret_cast<char*>(&attack_projectile_speed_)) + sizeof(bounty_gold_min_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&bounty_gold_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_invisible_) -
        reinterpret_cast<char*>(&bounty_gold_max_)) + sizeof(is_invisible_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_invulnerable_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_stunned_) -
        reinterpret_cast<char*>(&is_invulnerable_)) + sizeof(is_stunned_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&is_unable_to_miss_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_using_ability_) -
        reinterpret_cast<char*>(&is_unable_to_miss_)) + sizeof(is_using_ability_));
  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&is_illusion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&magic_resist_) -
        reinterpret_cast<char*>(&is_illusion_)) + sizeof(magic_resist_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&evasion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&agility_) -
        reinterpret_cast<char*>(&evasion_)) + sizeof(agility_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&intelligence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&shrine_cooldown_) -
        reinterpret_cast<char*>(&intelligence_)) + sizeof(shrine_cooldown_));
    attacks_per_second_ = -1;
    last_attack_time_ = -1;
    reliable_gold_ = -1;
    unreliable_gold_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Unit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 handle = 1 [(.map_key) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_handle(&_has_bits_);
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_UnitType_IsValid(val))) {
            _internal_set_unit_type(static_cast<::CMsgBotWorldState_UnitType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Unit.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_id(&_has_bits_);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_level(&_has_bits_);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_alive = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_alive(&_has_bits_);
          is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_player_id(&_has_bits_);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bounding_radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bounding_radius(&_has_bits_);
          bounding_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 facing = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_facing(&_has_bits_);
          facing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ground_height = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ground_height(&_has_bits_);
          ground_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vision_range_daytime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_vision_range_daytime(&_has_bits_);
          vision_range_daytime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vision_range_nighttime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_vision_range_nighttime(&_has_bits_);
          vision_range_nighttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 health = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_health(&_has_bits_);
          health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 health_max = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_health_max(&_has_bits_);
          health_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float health_regen = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_health_regen(&_has_bits_);
          health_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 mana = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_mana(&_has_bits_);
          mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mana_max = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_mana_max(&_has_bits_);
          mana_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float mana_regen = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 221)) {
          _Internal::set_has_mana_regen(&_has_bits_);
          mana_regen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 base_movement_speed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_base_movement_speed(&_has_bits_);
          base_movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current_movement_speed = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_current_movement_speed(&_has_bits_);
          current_movement_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 anim_activity = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_anim_activity(&_has_bits_);
          anim_activity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float anim_cycle = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_anim_cycle(&_has_bits_);
          anim_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 base_damage = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_base_damage(&_has_bits_);
          base_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 base_damage_variance = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_base_damage_variance(&_has_bits_);
          base_damage_variance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bonus_damage = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_bonus_damage(&_has_bits_);
          bonus_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attack_damage = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_attack_damage(&_has_bits_);
          attack_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attack_range = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_attack_range(&_has_bits_);
          attack_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float attack_speed = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_attack_speed(&_has_bits_);
          attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float attack_anim_point = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_attack_anim_point(&_has_bits_);
          attack_anim_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 attack_acquisition_range = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_attack_acquisition_range(&_has_bits_);
          attack_acquisition_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attack_projectile_speed = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_attack_projectile_speed(&_has_bits_);
          attack_projectile_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 attack_target_handle = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_attack_target_handle(&_has_bits_);
          attack_target_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 attacks_per_second = 50 [default = -1];
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_attacks_per_second(&_has_bits_);
          attacks_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float last_attack_time = 51 [default = -1];
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_last_attack_time(&_has_bits_);
          last_attack_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string attack_target_name = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_attack_target_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Unit.attack_target_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_xp = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_bounty_xp(&_has_bits_);
          bounty_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_gold_min = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_bounty_gold_min(&_has_bits_);
          bounty_gold_min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_gold_max = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_bounty_gold_max(&_has_bits_);
          bounty_gold_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_channeling = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_channeling(&_has_bits_);
          is_channeling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 active_ability_handle = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_active_ability_handle(&_has_bits_);
          active_ability_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_attack_immune = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_attack_immune(&_has_bits_);
          is_attack_immune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_blind = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_is_blind(&_has_bits_);
          is_blind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_block_disabled = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_is_block_disabled(&_has_bits_);
          is_block_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_disarmed = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_is_disarmed(&_has_bits_);
          is_disarmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_dominated = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_is_dominated(&_has_bits_);
          is_dominated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_evade_disabled = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_is_evade_disabled(&_has_bits_);
          is_evade_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_hexed = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_is_hexed(&_has_bits_);
          is_hexed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_invisible = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_is_invisible(&_has_bits_);
          is_invisible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_invulnerable = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_invulnerable(&_has_bits_);
          is_invulnerable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_magic_immune = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_magic_immune(&_has_bits_);
          is_magic_immune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_muted = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_muted(&_has_bits_);
          is_muted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_nightmared = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_nightmared(&_has_bits_);
          is_nightmared_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_rooted = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_rooted(&_has_bits_);
          is_rooted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_silenced = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_is_silenced(&_has_bits_);
          is_silenced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_specially_deniable = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_is_specially_deniable(&_has_bits_);
          is_specially_deniable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_stunned = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_is_stunned(&_has_bits_);
          is_stunned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_unable_to_miss = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_unable_to_miss(&_has_bits_);
          is_unable_to_miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool has_scepter = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_has_scepter(&_has_bits_);
          has_scepter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<722>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<730>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_modifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<738>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_incoming_tracking_projectiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<746>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_specially_undeniable = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_is_specially_undeniable(&_has_bits_);
          is_specially_undeniable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 action_type = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_action_type(&_has_bits_);
          action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_target_handle = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ability_target_handle(&_has_bits_);
          ability_target_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_using_ability = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_is_using_ability(&_has_bits_);
          is_using_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ability_target_name = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ability_target_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Unit.ability_target_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_attribute = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_primary_attribute(&_has_bits_);
          primary_attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_illusion = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_is_illusion(&_has_bits_);
          is_illusion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float respawn_time = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_respawn_time(&_has_bits_);
          respawn_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 buyback_cost = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_buyback_cost(&_has_bits_);
          buyback_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float buyback_cooldown = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_buyback_cooldown(&_has_bits_);
          buyback_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float spell_amplification = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_spell_amplification(&_has_bits_);
          spell_amplification_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float armor = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_armor(&_has_bits_);
          armor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float magic_resist = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_magic_resist(&_has_bits_);
          magic_resist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float evasion = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_evasion(&_has_bits_);
          evasion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 xp_needed_to_level = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_xp_needed_to_level(&_has_bits_);
          xp_needed_to_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ability_points = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ability_points(&_has_bits_);
          ability_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reliable_gold = 122 [default = -1];
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_reliable_gold(&_has_bits_);
          reliable_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unreliable_gold = 123 [default = -1];
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_unreliable_gold(&_has_bits_);
          unreliable_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_hits = 124;
      case 124:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_last_hits(&_has_bits_);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 denies = 125;
      case 125:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_denies(&_has_bits_);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth = 126;
      case 126:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_net_worth(&_has_bits_);
          net_worth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 strength = 127;
      case 127:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_strength(&_has_bits_);
          strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 agility = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_agility(&_has_bits_);
          agility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intelligence = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_intelligence(&_has_bits_);
          intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float remaining_lifespan = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_remaining_lifespan(&_has_bits_);
          remaining_lifespan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool flying_courier = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_flying_courier(&_has_bits_);
          flying_courier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float shrine_cooldown = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_shrine_cooldown(&_has_bits_);
          shrine_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_shrine_healing = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_is_shrine_healing(&_has_bits_);
          is_shrine_healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Unit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Unit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1 [(.map_key) = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_handle(), target);
  }

  // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_unit_type(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Unit.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_id(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_level(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::location(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_alive = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_alive(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_player_id(), target);
  }

  // optional int32 bounding_radius = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_bounding_radius(), target);
  }

  // optional int32 facing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_facing(), target);
  }

  // optional uint32 ground_height = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ground_height(), target);
  }

  // optional uint32 vision_range_daytime = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_vision_range_daytime(), target);
  }

  // optional uint32 vision_range_nighttime = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_vision_range_nighttime(), target);
  }

  // optional int32 health = 20;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_health(), target);
  }

  // optional int32 health_max = 21;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_health_max(), target);
  }

  // optional float health_regen = 22;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_health_regen(), target);
  }

  // optional int32 mana = 25;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_mana(), target);
  }

  // optional int32 mana_max = 26;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_mana_max(), target);
  }

  // optional float mana_regen = 27;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(27, this->_internal_mana_regen(), target);
  }

  // optional int32 base_movement_speed = 30;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_base_movement_speed(), target);
  }

  // optional int32 current_movement_speed = 31;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_current_movement_speed(), target);
  }

  // optional int32 anim_activity = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_anim_activity(), target);
  }

  // optional float anim_cycle = 36;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_anim_cycle(), target);
  }

  // optional int32 base_damage = 40;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(40, this->_internal_base_damage(), target);
  }

  // optional int32 base_damage_variance = 41;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(41, this->_internal_base_damage_variance(), target);
  }

  // optional int32 bonus_damage = 42;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(42, this->_internal_bonus_damage(), target);
  }

  // optional int32 attack_damage = 43;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(43, this->_internal_attack_damage(), target);
  }

  // optional int32 attack_range = 44;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(44, this->_internal_attack_range(), target);
  }

  // optional float attack_speed = 45;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_attack_speed(), target);
  }

  // optional float attack_anim_point = 46;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_attack_anim_point(), target);
  }

  // optional int32 attack_acquisition_range = 47;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_attack_acquisition_range(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 attack_projectile_speed = 48;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_attack_projectile_speed(), target);
  }

  // optional uint32 attack_target_handle = 49;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_attack_target_handle(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional int32 attacks_per_second = 50 [default = -1];
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_attacks_per_second(), target);
  }

  // optional float last_attack_time = 51 [default = -1];
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_last_attack_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string attack_target_name = 52;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_attack_target_name().data(), static_cast<int>(this->_internal_attack_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Unit.attack_target_name");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_attack_target_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bounty_xp = 60;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(60, this->_internal_bounty_xp(), target);
  }

  // optional uint32 bounty_gold_min = 61;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(61, this->_internal_bounty_gold_min(), target);
  }

  // optional uint32 bounty_gold_max = 62;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(62, this->_internal_bounty_gold_max(), target);
  }

  // optional bool is_channeling = 65;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(65, this->_internal_is_channeling(), target);
  }

  // optional uint32 active_ability_handle = 66;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(66, this->_internal_active_ability_handle(), target);
  }

  // optional bool is_attack_immune = 70;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(70, this->_internal_is_attack_immune(), target);
  }

  // optional bool is_blind = 71;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_is_blind(), target);
  }

  // optional bool is_block_disabled = 72;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_is_block_disabled(), target);
  }

  // optional bool is_disarmed = 73;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(73, this->_internal_is_disarmed(), target);
  }

  // optional bool is_dominated = 74;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(74, this->_internal_is_dominated(), target);
  }

  // optional bool is_evade_disabled = 75;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(75, this->_internal_is_evade_disabled(), target);
  }

  // optional bool is_hexed = 76;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(76, this->_internal_is_hexed(), target);
  }

  // optional bool is_invisible = 77;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(77, this->_internal_is_invisible(), target);
  }

  // optional bool is_invulnerable = 78;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(78, this->_internal_is_invulnerable(), target);
  }

  // optional bool is_magic_immune = 79;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(79, this->_internal_is_magic_immune(), target);
  }

  // optional bool is_muted = 80;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(80, this->_internal_is_muted(), target);
  }

  // optional bool is_nightmared = 82;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(82, this->_internal_is_nightmared(), target);
  }

  // optional bool is_rooted = 83;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(83, this->_internal_is_rooted(), target);
  }

  // optional bool is_silenced = 84;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(84, this->_internal_is_silenced(), target);
  }

  // optional bool is_specially_deniable = 85;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(85, this->_internal_is_specially_deniable(), target);
  }

  // optional bool is_stunned = 86;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(86, this->_internal_is_stunned(), target);
  }

  // optional bool is_unable_to_miss = 87;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(87, this->_internal_is_unable_to_miss(), target);
  }

  // optional bool has_scepter = 88;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(88, this->_internal_has_scepter(), target);
  }

  // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, this->_internal_abilities(i), target, stream);
  }

  // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, this->_internal_items(i), target, stream);
  }

  // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(92, this->_internal_modifiers(i), target, stream);
  }

  // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_incoming_tracking_projectiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(93, this->_internal_incoming_tracking_projectiles(i), target, stream);
  }

  // optional bool is_specially_undeniable = 94;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(94, this->_internal_is_specially_undeniable(), target);
  }

  // optional uint32 action_type = 100;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(100, this->_internal_action_type(), target);
  }

  // optional uint32 ability_target_handle = 101;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(101, this->_internal_ability_target_handle(), target);
  }

  // optional bool is_using_ability = 102;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_is_using_ability(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string ability_target_name = 103;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ability_target_name().data(), static_cast<int>(this->_internal_ability_target_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Unit.ability_target_name");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_ability_target_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 primary_attribute = 110;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(110, this->_internal_primary_attribute(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool is_illusion = 111;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(111, this->_internal_is_illusion(), target);
  }

  // optional float respawn_time = 112;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(112, this->_internal_respawn_time(), target);
  }

  // optional uint32 buyback_cost = 113;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(113, this->_internal_buyback_cost(), target);
  }

  // optional float buyback_cooldown = 114;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(114, this->_internal_buyback_cooldown(), target);
  }

  // optional float spell_amplification = 115;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(115, this->_internal_spell_amplification(), target);
  }

  // optional float armor = 116;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(116, this->_internal_armor(), target);
  }

  // optional float magic_resist = 117;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(117, this->_internal_magic_resist(), target);
  }

  // optional float evasion = 118;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(118, this->_internal_evasion(), target);
  }

  // optional uint32 xp_needed_to_level = 120;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(120, this->_internal_xp_needed_to_level(), target);
  }

  // optional uint32 ability_points = 121;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(121, this->_internal_ability_points(), target);
  }

  // optional int32 reliable_gold = 122 [default = -1];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(122, this->_internal_reliable_gold(), target);
  }

  // optional int32 unreliable_gold = 123 [default = -1];
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(123, this->_internal_unreliable_gold(), target);
  }

  // optional uint32 last_hits = 124;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(124, this->_internal_last_hits(), target);
  }

  // optional uint32 denies = 125;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(125, this->_internal_denies(), target);
  }

  // optional uint32 net_worth = 126;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(126, this->_internal_net_worth(), target);
  }

  // optional uint32 strength = 127;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(127, this->_internal_strength(), target);
  }

  // optional uint32 agility = 128;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(128, this->_internal_agility(), target);
  }

  // optional uint32 intelligence = 129;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(129, this->_internal_intelligence(), target);
  }

  // optional float remaining_lifespan = 130;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(130, this->_internal_remaining_lifespan(), target);
  }

  // optional bool flying_courier = 140;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(140, this->_internal_flying_courier(), target);
  }

  // optional float shrine_cooldown = 150;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(150, this->_internal_shrine_cooldown(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_shrine_healing = 151;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(151, this->_internal_is_shrine_healing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Unit)
  return target;
}

size_t CMsgBotWorldState_Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Unit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Ability abilities = 90 [(.map_field) = true];
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Ability items = 91 [(.map_field) = true];
  total_size += 2UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Modifier modifiers = 92 [(.map_field) = true];
  total_size += 2UL * this->_internal_modifiers_size();
  for (const auto& msg : this->modifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93 [(.map_field) = true];
  total_size += 2UL * this->_internal_incoming_tracking_projectiles_size();
  for (const auto& msg : this->incoming_tracking_projectiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string attack_target_name = 52;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_attack_target_name());
    }

    // optional string ability_target_name = 103;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ability_target_name());
    }

    // optional .CMsgBotWorldState.Vector location = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional uint32 handle = 1 [(.map_key) = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_handle());
    }

    // optional .CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_unit_type());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 level = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 player_id = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 bounding_radius = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bounding_radius());
    }

    // optional int32 facing = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_facing());
    }

    // optional uint32 ground_height = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ground_height());
    }

    // optional uint32 vision_range_daytime = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vision_range_daytime());
    }

    // optional uint32 vision_range_nighttime = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vision_range_nighttime());
    }

    // optional int32 health = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_health());
    }

    // optional int32 health_max = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_health_max());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float health_regen = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 mana = 25;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mana());
    }

    // optional int32 mana_max = 26;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mana_max());
    }

    // optional float mana_regen = 27;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 base_movement_speed = 30;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_base_movement_speed());
    }

    // optional int32 current_movement_speed = 31;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_current_movement_speed());
    }

    // optional int32 anim_activity = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_anim_activity());
    }

    // optional float anim_cycle = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 base_damage = 40;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_base_damage());
    }

    // optional int32 base_damage_variance = 41;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_base_damage_variance());
    }

    // optional int32 bonus_damage = 42;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bonus_damage());
    }

    // optional int32 attack_damage = 43;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attack_damage());
    }

    // optional int32 attack_range = 44;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attack_range());
    }

    // optional float attack_speed = 45;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional float attack_anim_point = 46;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional int32 attack_acquisition_range = 47;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attack_acquisition_range());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 attack_projectile_speed = 48;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attack_projectile_speed());
    }

    // optional uint32 attack_target_handle = 49;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_attack_target_handle());
    }

    // optional bool is_alive = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool is_channeling = 65;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool is_attack_immune = 70;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool is_blind = 71;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional uint32 bounty_xp = 60;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_xp());
    }

    // optional uint32 bounty_gold_min = 61;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_gold_min());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 bounty_gold_max = 62;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_gold_max());
    }

    // optional uint32 active_ability_handle = 66;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_ability_handle());
    }

    // optional bool is_block_disabled = 72;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool is_disarmed = 73;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool is_dominated = 74;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool is_evade_disabled = 75;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool is_hexed = 76;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_invisible = 77;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_invulnerable = 78;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_magic_immune = 79;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool is_muted = 80;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool is_nightmared = 82;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool is_rooted = 83;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool is_silenced = 84;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool is_specially_deniable = 85;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool is_stunned = 86;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_unable_to_miss = 87;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool has_scepter = 88;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 action_type = 100;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_type());
    }

    // optional bool is_shrine_healing = 151;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 ability_target_handle = 101;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_target_handle());
    }

    // optional uint32 primary_attribute = 110;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_attribute());
    }

    // optional bool is_specially_undeniable = 94;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_using_ability = 102;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool is_illusion = 111;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool flying_courier = 140;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional float respawn_time = 112;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional uint32 buyback_cost = 113;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_buyback_cost());
    }

    // optional float buyback_cooldown = 114;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional float spell_amplification = 115;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float armor = 116;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional float magic_resist = 117;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float evasion = 118;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 4;
    }

    // optional uint32 xp_needed_to_level = 120;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_xp_needed_to_level());
    }

    // optional uint32 ability_points = 121;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_points());
    }

    // optional uint32 last_hits = 124;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_hits());
    }

    // optional uint32 denies = 125;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_denies());
    }

    // optional uint32 net_worth = 126;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth());
    }

    // optional uint32 strength = 127;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_strength());
    }

    // optional uint32 agility = 128;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_agility());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 intelligence = 129;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_intelligence());
    }

    // optional float remaining_lifespan = 130;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float shrine_cooldown = 150;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional int32 attacks_per_second = 50 [default = -1];
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_attacks_per_second());
    }

    // optional float last_attack_time = 51 [default = -1];
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional int32 reliable_gold = 122 [default = -1];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reliable_gold());
    }

    // optional int32 unreliable_gold = 123 [default = -1];
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unreliable_gold());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Unit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Unit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Unit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Unit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Unit)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Unit::MergeFrom(const CMsgBotWorldState_Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  modifiers_.MergeFrom(from.modifiers_);
  incoming_tracking_projectiles_.MergeFrom(from.incoming_tracking_projectiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_attack_target_name(from._internal_attack_target_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ability_target_name(from._internal_ability_target_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000010u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      bounding_radius_ = from.bounding_radius_;
    }
    if (cached_has_bits & 0x00000400u) {
      facing_ = from.facing_;
    }
    if (cached_has_bits & 0x00000800u) {
      ground_height_ = from.ground_height_;
    }
    if (cached_has_bits & 0x00001000u) {
      vision_range_daytime_ = from.vision_range_daytime_;
    }
    if (cached_has_bits & 0x00002000u) {
      vision_range_nighttime_ = from.vision_range_nighttime_;
    }
    if (cached_has_bits & 0x00004000u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00008000u) {
      health_max_ = from.health_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      health_regen_ = from.health_regen_;
    }
    if (cached_has_bits & 0x00020000u) {
      mana_ = from.mana_;
    }
    if (cached_has_bits & 0x00040000u) {
      mana_max_ = from.mana_max_;
    }
    if (cached_has_bits & 0x00080000u) {
      mana_regen_ = from.mana_regen_;
    }
    if (cached_has_bits & 0x00100000u) {
      base_movement_speed_ = from.base_movement_speed_;
    }
    if (cached_has_bits & 0x00200000u) {
      current_movement_speed_ = from.current_movement_speed_;
    }
    if (cached_has_bits & 0x00400000u) {
      anim_activity_ = from.anim_activity_;
    }
    if (cached_has_bits & 0x00800000u) {
      anim_cycle_ = from.anim_cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      base_damage_ = from.base_damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      base_damage_variance_ = from.base_damage_variance_;
    }
    if (cached_has_bits & 0x04000000u) {
      bonus_damage_ = from.bonus_damage_;
    }
    if (cached_has_bits & 0x08000000u) {
      attack_damage_ = from.attack_damage_;
    }
    if (cached_has_bits & 0x10000000u) {
      attack_range_ = from.attack_range_;
    }
    if (cached_has_bits & 0x20000000u) {
      attack_speed_ = from.attack_speed_;
    }
    if (cached_has_bits & 0x40000000u) {
      attack_anim_point_ = from.attack_anim_point_;
    }
    if (cached_has_bits & 0x80000000u) {
      attack_acquisition_range_ = from.attack_acquisition_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      attack_projectile_speed_ = from.attack_projectile_speed_;
    }
    if (cached_has_bits & 0x00000002u) {
      attack_target_handle_ = from.attack_target_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_alive_ = from.is_alive_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_channeling_ = from.is_channeling_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_attack_immune_ = from.is_attack_immune_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_blind_ = from.is_blind_;
    }
    if (cached_has_bits & 0x00000040u) {
      bounty_xp_ = from.bounty_xp_;
    }
    if (cached_has_bits & 0x00000080u) {
      bounty_gold_min_ = from.bounty_gold_min_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      bounty_gold_max_ = from.bounty_gold_max_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_ability_handle_ = from.active_ability_handle_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_block_disabled_ = from.is_block_disabled_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_disarmed_ = from.is_disarmed_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_dominated_ = from.is_dominated_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_evade_disabled_ = from.is_evade_disabled_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_hexed_ = from.is_hexed_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_invisible_ = from.is_invisible_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_invulnerable_ = from.is_invulnerable_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_magic_immune_ = from.is_magic_immune_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_muted_ = from.is_muted_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_nightmared_ = from.is_nightmared_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_rooted_ = from.is_rooted_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_silenced_ = from.is_silenced_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_specially_deniable_ = from.is_specially_deniable_;
    }
    if (cached_has_bits & 0x00800000u) {
      is_stunned_ = from.is_stunned_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      is_unable_to_miss_ = from.is_unable_to_miss_;
    }
    if (cached_has_bits & 0x02000000u) {
      has_scepter_ = from.has_scepter_;
    }
    if (cached_has_bits & 0x04000000u) {
      action_type_ = from.action_type_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_shrine_healing_ = from.is_shrine_healing_;
    }
    if (cached_has_bits & 0x10000000u) {
      ability_target_handle_ = from.ability_target_handle_;
    }
    if (cached_has_bits & 0x20000000u) {
      primary_attribute_ = from.primary_attribute_;
    }
    if (cached_has_bits & 0x40000000u) {
      is_specially_undeniable_ = from.is_specially_undeniable_;
    }
    if (cached_has_bits & 0x80000000u) {
      is_using_ability_ = from.is_using_ability_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      is_illusion_ = from.is_illusion_;
    }
    if (cached_has_bits & 0x00000002u) {
      flying_courier_ = from.flying_courier_;
    }
    if (cached_has_bits & 0x00000004u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      buyback_cost_ = from.buyback_cost_;
    }
    if (cached_has_bits & 0x00000010u) {
      buyback_cooldown_ = from.buyback_cooldown_;
    }
    if (cached_has_bits & 0x00000020u) {
      spell_amplification_ = from.spell_amplification_;
    }
    if (cached_has_bits & 0x00000040u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00000080u) {
      magic_resist_ = from.magic_resist_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      evasion_ = from.evasion_;
    }
    if (cached_has_bits & 0x00000200u) {
      xp_needed_to_level_ = from.xp_needed_to_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      ability_points_ = from.ability_points_;
    }
    if (cached_has_bits & 0x00000800u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00001000u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00002000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00004000u) {
      strength_ = from.strength_;
    }
    if (cached_has_bits & 0x00008000u) {
      agility_ = from.agility_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      intelligence_ = from.intelligence_;
    }
    if (cached_has_bits & 0x00020000u) {
      remaining_lifespan_ = from.remaining_lifespan_;
    }
    if (cached_has_bits & 0x00040000u) {
      shrine_cooldown_ = from.shrine_cooldown_;
    }
    if (cached_has_bits & 0x00080000u) {
      attacks_per_second_ = from.attacks_per_second_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_attack_time_ = from.last_attack_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      reliable_gold_ = from.reliable_gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      unreliable_gold_ = from.unreliable_gold_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Unit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Unit::CopyFrom(const CMsgBotWorldState_Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Unit::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Unit::InternalSwap(CMsgBotWorldState_Unit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  swap(_has_bits_[2], other->_has_bits_[2]);
  abilities_.InternalSwap(&other->abilities_);
  items_.InternalSwap(&other->items_);
  modifiers_.InternalSwap(&other->modifiers_);
  incoming_tracking_projectiles_.InternalSwap(&other->incoming_tracking_projectiles_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  attack_target_name_.Swap(&other->attack_target_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ability_target_name_.Swap(&other->ability_target_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Unit, shrine_cooldown_)
      + sizeof(CMsgBotWorldState_Unit::shrine_cooldown_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Unit, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
  swap(attacks_per_second_, other->attacks_per_second_);
  swap(last_attack_time_, other->last_attack_time_);
  swap(reliable_gold_, other->reliable_gold_);
  swap(unreliable_gold_, other->unreliable_gold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Unit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Actions_OceanAnnotation_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Actions_OceanAnnotation_Hero>()._has_bits_);
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_valuefunction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_actionlogp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_actionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detailedstats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

CMsgBotWorldState_Actions_OceanAnnotation_Hero::CMsgBotWorldState_Actions_OceanAnnotation_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  internalaction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
}
CMsgBotWorldState_Actions_OceanAnnotation_Hero::CMsgBotWorldState_Actions_OceanAnnotation_Hero(const CMsgBotWorldState_Actions_OceanAnnotation_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      internalaction_(from.internalaction_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  actionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_actionname()) {
    actionname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_actionname(), 
      GetArena());
  }
  detailedstats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_detailedstats()) {
    detailedstats_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_detailedstats(), 
      GetArena());
  }
  ::memcpy(&playerid_, &from.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(reward_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::SharedCtor() {
actionname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
detailedstats_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&playerid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reward_) -
    reinterpret_cast<char*>(&playerid_)) + sizeof(reward_));
}

CMsgBotWorldState_Actions_OceanAnnotation_Hero::~CMsgBotWorldState_Actions_OceanAnnotation_Hero() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  actionname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  detailedstats_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::ArenaDtor(void* object) {
  CMsgBotWorldState_Actions_OceanAnnotation_Hero* _this = reinterpret_cast< CMsgBotWorldState_Actions_OceanAnnotation_Hero* >(object);
  (void)_this;
}
void CMsgBotWorldState_Actions_OceanAnnotation_Hero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Actions_OceanAnnotation_Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internalaction_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      actionname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      detailedstats_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&playerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_) -
        reinterpret_cast<char*>(&playerid_)) + sizeof(reward_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Actions_OceanAnnotation_Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 playerID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float valueFunction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_valuefunction(&has_bits);
          valuefunction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float actionLogp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_actionlogp(&has_bits);
          actionlogp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float reward = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_reward(&has_bits);
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 internalAction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_internalaction(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_internalaction(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string actionName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_actionname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Actions.OceanAnnotation.Hero.actionName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes detailedStats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_detailedstats();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Actions_OceanAnnotation_Hero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 playerID = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerid(), target);
  }

  // optional float valueFunction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_valuefunction(), target);
  }

  // optional float actionLogp = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_actionlogp(), target);
  }

  // optional float reward = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_reward(), target);
  }

  // repeated int32 internalAction = 5;
  for (int i = 0, n = this->_internal_internalaction_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_internalaction(i), target);
  }

  // optional string actionName = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_actionname().data(), static_cast<int>(this->_internal_actionname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Actions.OceanAnnotation.Hero.actionName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_actionname(), target);
  }

  // optional bytes detailedStats = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_detailedstats(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  return target;
}

size_t CMsgBotWorldState_Actions_OceanAnnotation_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  size_t total_size = 0;

  // required int32 playerID = 1;
  if (_internal_has_playerid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 internalAction = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->internalaction_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_internalaction_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string actionName = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_actionname());
    }

    // optional bytes detailedStats = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_detailedstats());
    }

  }
  if (cached_has_bits & 0x00000038u) {
    // optional float valueFunction = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float actionLogp = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float reward = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Actions_OceanAnnotation_Hero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Actions_OceanAnnotation_Hero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::MergeFrom(const CMsgBotWorldState_Actions_OceanAnnotation_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internalaction_.MergeFrom(from.internalaction_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_actionname(from._internal_actionname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_detailedstats(from._internal_detailedstats());
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      valuefunction_ = from.valuefunction_;
    }
    if (cached_has_bits & 0x00000010u) {
      actionlogp_ = from.actionlogp_;
    }
    if (cached_has_bits & 0x00000020u) {
      reward_ = from.reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::CopyFrom(const CMsgBotWorldState_Actions_OceanAnnotation_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Actions.OceanAnnotation.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Actions_OceanAnnotation_Hero::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Actions_OceanAnnotation_Hero::InternalSwap(CMsgBotWorldState_Actions_OceanAnnotation_Hero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  internalaction_.InternalSwap(&other->internalaction_);
  actionname_.Swap(&other->actionname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  detailedstats_.Swap(&other->detailedstats_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Actions_OceanAnnotation_Hero, reward_)
      + sizeof(CMsgBotWorldState_Actions_OceanAnnotation_Hero::reward_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Actions_OceanAnnotation_Hero, playerid_)>(
          reinterpret_cast<char*>(&playerid_),
          reinterpret_cast<char*>(&other->playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Actions_OceanAnnotation_Hero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Actions_OceanAnnotation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Actions_OceanAnnotation>()._has_bits_);
  static void set_has_agentid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBotWorldState_Actions_OceanAnnotation::CMsgBotWorldState_Actions_OceanAnnotation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  heroes_(arena),
  rewards_(arena),
  reward_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Actions.OceanAnnotation)
}
CMsgBotWorldState_Actions_OceanAnnotation::CMsgBotWorldState_Actions_OceanAnnotation(const CMsgBotWorldState_Actions_OceanAnnotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      heroes_(from.heroes_),
      rewards_(from.rewards_),
      reward_names_(from.reward_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_agentid()) {
    agentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agentid(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Actions.OceanAnnotation)
}

void CMsgBotWorldState_Actions_OceanAnnotation::SharedCtor() {
agentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgBotWorldState_Actions_OceanAnnotation::~CMsgBotWorldState_Actions_OceanAnnotation() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Actions.OceanAnnotation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Actions_OceanAnnotation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Actions_OceanAnnotation::ArenaDtor(void* object) {
  CMsgBotWorldState_Actions_OceanAnnotation* _this = reinterpret_cast< CMsgBotWorldState_Actions_OceanAnnotation* >(object);
  (void)_this;
}
void CMsgBotWorldState_Actions_OceanAnnotation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Actions_OceanAnnotation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Actions_OceanAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Actions.OceanAnnotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  heroes_.Clear();
  rewards_.Clear();
  reward_names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    agentid_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Actions_OceanAnnotation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgBotWorldState.Actions.OceanAnnotation.Hero heroes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string agentID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_agentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Actions.OceanAnnotation.agentID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float rewards = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rewards(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rewards(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string reward_names = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reward_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Actions.OceanAnnotation.reward_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Actions_OceanAnnotation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Actions.OceanAnnotation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Actions.OceanAnnotation.Hero heroes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_heroes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional string agentID = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_agentid().data(), static_cast<int>(this->_internal_agentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Actions.OceanAnnotation.agentID");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_agentid(), target);
  }

  // repeated float rewards = 6;
  for (int i = 0, n = this->_internal_rewards_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rewards(i), target);
  }

  // repeated string reward_names = 7;
  for (int i = 0, n = this->_internal_reward_names_size(); i < n; i++) {
    const auto& s = this->_internal_reward_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Actions.OceanAnnotation.reward_names");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Actions.OceanAnnotation)
  return target;
}

size_t CMsgBotWorldState_Actions_OceanAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Actions.OceanAnnotation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Actions.OceanAnnotation.Hero heroes = 1;
  total_size += 1UL * this->_internal_heroes_size();
  for (const auto& msg : this->heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float rewards = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rewards_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rewards_size());
    total_size += data_size;
  }

  // repeated string reward_names = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reward_names_.size());
  for (int i = 0, n = reward_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reward_names_.Get(i));
  }

  // optional string agentID = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agentid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Actions_OceanAnnotation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Actions.OceanAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Actions_OceanAnnotation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Actions_OceanAnnotation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Actions.OceanAnnotation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Actions.OceanAnnotation)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Actions_OceanAnnotation::MergeFrom(const CMsgBotWorldState_Actions_OceanAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Actions.OceanAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  heroes_.MergeFrom(from.heroes_);
  rewards_.MergeFrom(from.rewards_);
  reward_names_.MergeFrom(from.reward_names_);
  if (from._internal_has_agentid()) {
    _internal_set_agentid(from._internal_agentid());
  }
}

void CMsgBotWorldState_Actions_OceanAnnotation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Actions.OceanAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Actions_OceanAnnotation::CopyFrom(const CMsgBotWorldState_Actions_OceanAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Actions.OceanAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Actions_OceanAnnotation::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(heroes_)) return false;
  return true;
}

void CMsgBotWorldState_Actions_OceanAnnotation::InternalSwap(CMsgBotWorldState_Actions_OceanAnnotation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  heroes_.InternalSwap(&other->heroes_);
  rewards_.InternalSwap(&other->rewards_);
  reward_names_.InternalSwap(&other->reward_names_);
  agentid_.Swap(&other->agentid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Actions_OceanAnnotation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Actions_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Actions_Header>()._has_bits_);
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgBotWorldState_Actions_Header::CMsgBotWorldState_Actions_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Actions.Header)
}
CMsgBotWorldState_Actions_Header::CMsgBotWorldState_Actions_Header(const CMsgBotWorldState_Actions_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  starttime_ = from.starttime_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Actions.Header)
}

void CMsgBotWorldState_Actions_Header::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
starttime_ = 0;
}

CMsgBotWorldState_Actions_Header::~CMsgBotWorldState_Actions_Header() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Actions.Header)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Actions_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Actions_Header::ArenaDtor(void* object) {
  CMsgBotWorldState_Actions_Header* _this = reinterpret_cast< CMsgBotWorldState_Actions_Header* >(object);
  (void)_this;
}
void CMsgBotWorldState_Actions_Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Actions_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Actions_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Actions.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  starttime_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Actions_Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float startTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_starttime(&has_bits);
          starttime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Actions.Header.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Actions_Header::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Actions.Header)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float startTime = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_starttime(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Actions.Header.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Actions.Header)
  return target;
}

size_t CMsgBotWorldState_Actions_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Actions.Header)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional float startTime = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Actions_Header::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Actions.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Actions_Header* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Actions_Header>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Actions.Header)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Actions.Header)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Actions_Header::MergeFrom(const CMsgBotWorldState_Actions_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Actions.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      starttime_ = from.starttime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Actions_Header::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Actions.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Actions_Header::CopyFrom(const CMsgBotWorldState_Actions_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Actions.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Actions_Header::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Actions_Header::InternalSwap(CMsgBotWorldState_Actions_Header* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(starttime_, other->starttime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Actions_Header::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Actions::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Actions>()._has_bits_);
  static void set_has_dota_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_extradata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBotWorldState_Actions_OceanAnnotation& oceanannotation(const CMsgBotWorldState_Actions* msg);
  static void set_has_oceanannotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Actions_Header& header(const CMsgBotWorldState_Actions* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgBotWorldState_Actions_OceanAnnotation&
CMsgBotWorldState_Actions::_Internal::oceanannotation(const CMsgBotWorldState_Actions* msg) {
  return *msg->oceanannotation_;
}
const ::CMsgBotWorldState_Actions_Header&
CMsgBotWorldState_Actions::_Internal::header(const CMsgBotWorldState_Actions* msg) {
  return *msg->header_;
}
CMsgBotWorldState_Actions::CMsgBotWorldState_Actions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Actions)
}
CMsgBotWorldState_Actions::CMsgBotWorldState_Actions(const CMsgBotWorldState_Actions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  extradata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_extradata()) {
    extradata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extradata(), 
      GetArena());
  }
  if (from._internal_has_oceanannotation()) {
    oceanannotation_ = new ::CMsgBotWorldState_Actions_OceanAnnotation(*from.oceanannotation_);
  } else {
    oceanannotation_ = nullptr;
  }
  if (from._internal_has_header()) {
    header_ = new ::CMsgBotWorldState_Actions_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  dota_time_ = from.dota_time_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Actions)
}

void CMsgBotWorldState_Actions::SharedCtor() {
extradata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&oceanannotation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&header_) -
    reinterpret_cast<char*>(&oceanannotation_)) + sizeof(header_));
dota_time_ = -100;
}

CMsgBotWorldState_Actions::~CMsgBotWorldState_Actions() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Actions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Actions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  extradata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete oceanannotation_;
  if (this != internal_default_instance()) delete header_;
}

void CMsgBotWorldState_Actions::ArenaDtor(void* object) {
  CMsgBotWorldState_Actions* _this = reinterpret_cast< CMsgBotWorldState_Actions* >(object);
  (void)_this;
}
void CMsgBotWorldState_Actions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Actions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Actions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      extradata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(oceanannotation_ != nullptr);
      oceanannotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    dota_time_ = -100;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Actions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float dota_time = 1 [default = -100];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_dota_time(&has_bits);
          dota_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Action actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string extraData = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_extradata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Actions.extraData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Actions.OceanAnnotation oceanAnnotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oceanannotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Actions.Header header = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Actions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Actions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float dota_time = 1 [default = -100];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_dota_time(), target);
  }

  // repeated .CMsgBotWorldState.Action actions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actions(i), target, stream);
  }

  // optional string extraData = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extradata().data(), static_cast<int>(this->_internal_extradata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Actions.extraData");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_extradata(), target);
  }

  // optional .CMsgBotWorldState.Actions.OceanAnnotation oceanAnnotation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::oceanannotation(this), target, stream);
  }

  // optional .CMsgBotWorldState.Actions.Header header = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Actions)
  return target;
}

size_t CMsgBotWorldState_Actions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Actions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Action actions = 2;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string extraData = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_extradata());
    }

    // optional .CMsgBotWorldState.Actions.OceanAnnotation oceanAnnotation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *oceanannotation_);
    }

    // optional .CMsgBotWorldState.Actions.Header header = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional float dota_time = 1 [default = -100];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Actions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Actions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Actions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Actions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Actions)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Actions::MergeFrom(const CMsgBotWorldState_Actions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Actions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_extradata(from._internal_extradata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_oceanannotation()->::CMsgBotWorldState_Actions_OceanAnnotation::MergeFrom(from._internal_oceanannotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::CMsgBotWorldState_Actions_Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000008u) {
      dota_time_ = from.dota_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Actions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Actions::CopyFrom(const CMsgBotWorldState_Actions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Actions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Actions::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(actions_)) return false;
  if (_internal_has_oceanannotation()) {
    if (!oceanannotation_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_Actions::InternalSwap(CMsgBotWorldState_Actions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  actions_.InternalSwap(&other->actions_);
  extradata_.Swap(&other->extradata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Actions, header_)
      + sizeof(CMsgBotWorldState_Actions::header_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Actions, oceanannotation_)>(
          reinterpret_cast<char*>(&oceanannotation_),
          reinterpret_cast<char*>(&other->oceanannotation_));
  swap(dota_time_, other->dota_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Actions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_MoveToLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_MoveToLocation>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Action_MoveToLocation* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_MoveToLocation::_Internal::location(const CMsgBotWorldState_Action_MoveToLocation* msg) {
  return *msg->location_;
}
CMsgBotWorldState_Action_MoveToLocation::CMsgBotWorldState_Action_MoveToLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.MoveToLocation)
}
CMsgBotWorldState_Action_MoveToLocation::CMsgBotWorldState_Action_MoveToLocation(const CMsgBotWorldState_Action_MoveToLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.MoveToLocation)
}

void CMsgBotWorldState_Action_MoveToLocation::SharedCtor() {
location_ = nullptr;
}

CMsgBotWorldState_Action_MoveToLocation::~CMsgBotWorldState_Action_MoveToLocation() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.MoveToLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_MoveToLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_Action_MoveToLocation::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_MoveToLocation* _this = reinterpret_cast< CMsgBotWorldState_Action_MoveToLocation* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_MoveToLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_MoveToLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_MoveToLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.MoveToLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_MoveToLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_MoveToLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.MoveToLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.MoveToLocation)
  return target;
}

size_t CMsgBotWorldState_Action_MoveToLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.MoveToLocation)
  size_t total_size = 0;

  // required .CMsgBotWorldState.Vector location = 2;
  if (_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_MoveToLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.MoveToLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_MoveToLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_MoveToLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.MoveToLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.MoveToLocation)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_MoveToLocation::MergeFrom(const CMsgBotWorldState_Action_MoveToLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.MoveToLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_location()) {
    _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
  }
}

void CMsgBotWorldState_Action_MoveToLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.MoveToLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_MoveToLocation::CopyFrom(const CMsgBotWorldState_Action_MoveToLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.MoveToLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_MoveToLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_MoveToLocation::InternalSwap(CMsgBotWorldState_Action_MoveToLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_MoveToLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_MoveToTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_MoveToTarget>()._has_bits_);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_MoveToTarget::CMsgBotWorldState_Action_MoveToTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.MoveToTarget)
}
CMsgBotWorldState_Action_MoveToTarget::CMsgBotWorldState_Action_MoveToTarget(const CMsgBotWorldState_Action_MoveToTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_ = from.target_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.MoveToTarget)
}

void CMsgBotWorldState_Action_MoveToTarget::SharedCtor() {
target_ = 0;
}

CMsgBotWorldState_Action_MoveToTarget::~CMsgBotWorldState_Action_MoveToTarget() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.MoveToTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_MoveToTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_MoveToTarget::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_MoveToTarget* _this = reinterpret_cast< CMsgBotWorldState_Action_MoveToTarget* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_MoveToTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_MoveToTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_MoveToTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.MoveToTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  target_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_MoveToTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target(&has_bits);
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_MoveToTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.MoveToTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 target = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.MoveToTarget)
  return target;
}

size_t CMsgBotWorldState_Action_MoveToTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.MoveToTarget)
  size_t total_size = 0;

  // required int32 target = 2;
  if (_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_MoveToTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.MoveToTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_MoveToTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_MoveToTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.MoveToTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.MoveToTarget)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_MoveToTarget::MergeFrom(const CMsgBotWorldState_Action_MoveToTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.MoveToTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_target()) {
    _internal_set_target(from._internal_target());
  }
}

void CMsgBotWorldState_Action_MoveToTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.MoveToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_MoveToTarget::CopyFrom(const CMsgBotWorldState_Action_MoveToTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.MoveToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_MoveToTarget::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_MoveToTarget::InternalSwap(CMsgBotWorldState_Action_MoveToTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(target_, other->target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_MoveToTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_AttackMove::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_AttackMove>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Action_AttackMove* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_AttackMove::_Internal::location(const CMsgBotWorldState_Action_AttackMove* msg) {
  return *msg->location_;
}
CMsgBotWorldState_Action_AttackMove::CMsgBotWorldState_Action_AttackMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.AttackMove)
}
CMsgBotWorldState_Action_AttackMove::CMsgBotWorldState_Action_AttackMove(const CMsgBotWorldState_Action_AttackMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.AttackMove)
}

void CMsgBotWorldState_Action_AttackMove::SharedCtor() {
location_ = nullptr;
}

CMsgBotWorldState_Action_AttackMove::~CMsgBotWorldState_Action_AttackMove() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.AttackMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_AttackMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_Action_AttackMove::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_AttackMove* _this = reinterpret_cast< CMsgBotWorldState_Action_AttackMove* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_AttackMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_AttackMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_AttackMove::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.AttackMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_AttackMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_AttackMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.AttackMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.AttackMove)
  return target;
}

size_t CMsgBotWorldState_Action_AttackMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.AttackMove)
  size_t total_size = 0;

  // required .CMsgBotWorldState.Vector location = 2;
  if (_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_AttackMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.AttackMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_AttackMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_AttackMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.AttackMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.AttackMove)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_AttackMove::MergeFrom(const CMsgBotWorldState_Action_AttackMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.AttackMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_location()) {
    _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
  }
}

void CMsgBotWorldState_Action_AttackMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.AttackMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_AttackMove::CopyFrom(const CMsgBotWorldState_Action_AttackMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.AttackMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_AttackMove::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_AttackMove::InternalSwap(CMsgBotWorldState_Action_AttackMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_AttackMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_AttackTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_AttackTarget>()._has_bits_);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_once(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_AttackTarget::CMsgBotWorldState_Action_AttackTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.AttackTarget)
}
CMsgBotWorldState_Action_AttackTarget::CMsgBotWorldState_Action_AttackTarget(const CMsgBotWorldState_Action_AttackTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&target_, &from.target_,
    static_cast<size_t>(reinterpret_cast<char*>(&once_) -
    reinterpret_cast<char*>(&target_)) + sizeof(once_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.AttackTarget)
}

void CMsgBotWorldState_Action_AttackTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&once_) -
    reinterpret_cast<char*>(&target_)) + sizeof(once_));
}

CMsgBotWorldState_Action_AttackTarget::~CMsgBotWorldState_Action_AttackTarget() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.AttackTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_AttackTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_AttackTarget::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_AttackTarget* _this = reinterpret_cast< CMsgBotWorldState_Action_AttackTarget* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_AttackTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_AttackTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_AttackTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.AttackTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&once_) -
        reinterpret_cast<char*>(&target_)) + sizeof(once_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_AttackTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target(&has_bits);
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool once = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_once(&has_bits);
          once_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_AttackTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.AttackTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 target = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target(), target);
  }

  // optional bool once = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_once(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.AttackTarget)
  return target;
}

size_t CMsgBotWorldState_Action_AttackTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.AttackTarget)
  size_t total_size = 0;

  // required int32 target = 2;
  if (_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  // optional bool once = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_AttackTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.AttackTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_AttackTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_AttackTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.AttackTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.AttackTarget)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_AttackTarget::MergeFrom(const CMsgBotWorldState_Action_AttackTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.AttackTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000002u) {
      once_ = from.once_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_AttackTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.AttackTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_AttackTarget::CopyFrom(const CMsgBotWorldState_Action_AttackTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.AttackTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_AttackTarget::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_AttackTarget::InternalSwap(CMsgBotWorldState_Action_AttackTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_AttackTarget, once_)
      + sizeof(CMsgBotWorldState_Action_AttackTarget::once_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_AttackTarget, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_AttackTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_HoldLocation::_Internal {
 public:
};

CMsgBotWorldState_Action_HoldLocation::CMsgBotWorldState_Action_HoldLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.HoldLocation)
}
CMsgBotWorldState_Action_HoldLocation::CMsgBotWorldState_Action_HoldLocation(const CMsgBotWorldState_Action_HoldLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.HoldLocation)
}

void CMsgBotWorldState_Action_HoldLocation::SharedCtor() {
}

CMsgBotWorldState_Action_HoldLocation::~CMsgBotWorldState_Action_HoldLocation() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.HoldLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_HoldLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_HoldLocation::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_HoldLocation* _this = reinterpret_cast< CMsgBotWorldState_Action_HoldLocation* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_HoldLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_HoldLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_HoldLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.HoldLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_HoldLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_HoldLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.HoldLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.HoldLocation)
  return target;
}

size_t CMsgBotWorldState_Action_HoldLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.HoldLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_HoldLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.HoldLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_HoldLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_HoldLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.HoldLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.HoldLocation)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_HoldLocation::MergeFrom(const CMsgBotWorldState_Action_HoldLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.HoldLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
}

void CMsgBotWorldState_Action_HoldLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.HoldLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_HoldLocation::CopyFrom(const CMsgBotWorldState_Action_HoldLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.HoldLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_HoldLocation::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_HoldLocation::InternalSwap(CMsgBotWorldState_Action_HoldLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_HoldLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_Stop::_Internal {
 public:
};

CMsgBotWorldState_Action_Stop::CMsgBotWorldState_Action_Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.Stop)
}
CMsgBotWorldState_Action_Stop::CMsgBotWorldState_Action_Stop(const CMsgBotWorldState_Action_Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.Stop)
}

void CMsgBotWorldState_Action_Stop::SharedCtor() {
}

CMsgBotWorldState_Action_Stop::~CMsgBotWorldState_Action_Stop() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.Stop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_Stop::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_Stop* _this = reinterpret_cast< CMsgBotWorldState_Action_Stop* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.Stop)
  return target;
}

size_t CMsgBotWorldState_Action_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.Stop)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_Stop::MergeFrom(const CMsgBotWorldState_Action_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
}

void CMsgBotWorldState_Action_Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_Stop::CopyFrom(const CMsgBotWorldState_Action_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_Stop::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_Stop::InternalSwap(CMsgBotWorldState_Action_Stop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  units_.InternalSwap(&other->units_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_CastLocation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_CastLocation>()._has_bits_);
  static void set_has_abilityslot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Action_CastLocation* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_CastLocation::_Internal::location(const CMsgBotWorldState_Action_CastLocation* msg) {
  return *msg->location_;
}
CMsgBotWorldState_Action_CastLocation::CMsgBotWorldState_Action_CastLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.CastLocation)
}
CMsgBotWorldState_Action_CastLocation::CMsgBotWorldState_Action_CastLocation(const CMsgBotWorldState_Action_CastLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  abilityslot_ = from.abilityslot_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.CastLocation)
}

void CMsgBotWorldState_Action_CastLocation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&abilityslot_) -
    reinterpret_cast<char*>(&location_)) + sizeof(abilityslot_));
}

CMsgBotWorldState_Action_CastLocation::~CMsgBotWorldState_Action_CastLocation() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.CastLocation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_CastLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_Action_CastLocation::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_CastLocation* _this = reinterpret_cast< CMsgBotWorldState_Action_CastLocation* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_CastLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_CastLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_CastLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.CastLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  abilityslot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_CastLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 abilitySlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abilityslot(&has_bits);
          abilityslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_CastLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.CastLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 abilitySlot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_abilityslot(), target);
  }

  // required .CMsgBotWorldState.Vector location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.CastLocation)
  return target;
}

size_t CMsgBotWorldState_Action_CastLocation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.CastLocation)
  size_t total_size = 0;

  if (_internal_has_location()) {
    // required .CMsgBotWorldState.Vector location = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (_internal_has_abilityslot()) {
    // required int32 abilitySlot = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_CastLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.CastLocation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .CMsgBotWorldState.Vector location = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);

    // required int32 abilitySlot = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_CastLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.CastLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_CastLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_CastLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.CastLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.CastLocation)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_CastLocation::MergeFrom(const CMsgBotWorldState_Action_CastLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.CastLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      abilityslot_ = from.abilityslot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_CastLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.CastLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_CastLocation::CopyFrom(const CMsgBotWorldState_Action_CastLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.CastLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_CastLocation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_CastLocation::InternalSwap(CMsgBotWorldState_Action_CastLocation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_CastLocation, abilityslot_)
      + sizeof(CMsgBotWorldState_Action_CastLocation::abilityslot_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_CastLocation, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_CastLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_CastTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_CastTarget>()._has_bits_);
  static void set_has_abilityslot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgBotWorldState_Action_CastTarget::CMsgBotWorldState_Action_CastTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.CastTarget)
}
CMsgBotWorldState_Action_CastTarget::CMsgBotWorldState_Action_CastTarget(const CMsgBotWorldState_Action_CastTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&abilityslot_, &from.abilityslot_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&abilityslot_)) + sizeof(target_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.CastTarget)
}

void CMsgBotWorldState_Action_CastTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&abilityslot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&abilityslot_)) + sizeof(target_));
}

CMsgBotWorldState_Action_CastTarget::~CMsgBotWorldState_Action_CastTarget() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.CastTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_CastTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_CastTarget::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_CastTarget* _this = reinterpret_cast< CMsgBotWorldState_Action_CastTarget* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_CastTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_CastTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_CastTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.CastTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&abilityslot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_) -
        reinterpret_cast<char*>(&abilityslot_)) + sizeof(target_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_CastTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 abilitySlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abilityslot(&has_bits);
          abilityslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target(&has_bits);
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_CastTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.CastTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 abilitySlot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_abilityslot(), target);
  }

  // required int32 target = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.CastTarget)
  return target;
}

size_t CMsgBotWorldState_Action_CastTarget::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.CastTarget)
  size_t total_size = 0;

  if (_internal_has_abilityslot()) {
    // required int32 abilitySlot = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());
  }

  if (_internal_has_target()) {
    // required int32 target = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_CastTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.CastTarget)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 abilitySlot = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());

    // required int32 target = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_CastTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.CastTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_CastTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_CastTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.CastTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.CastTarget)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_CastTarget::MergeFrom(const CMsgBotWorldState_Action_CastTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.CastTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      abilityslot_ = from.abilityslot_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_ = from.target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_CastTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.CastTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_CastTarget::CopyFrom(const CMsgBotWorldState_Action_CastTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.CastTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_CastTarget::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_CastTarget::InternalSwap(CMsgBotWorldState_Action_CastTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_CastTarget, target_)
      + sizeof(CMsgBotWorldState_Action_CastTarget::target_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_CastTarget, abilityslot_)>(
          reinterpret_cast<char*>(&abilityslot_),
          reinterpret_cast<char*>(&other->abilityslot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_CastTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_CastTree::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_CastTree>()._has_bits_);
  static void set_has_abilityslot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tree(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgBotWorldState_Action_CastTree::CMsgBotWorldState_Action_CastTree(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.CastTree)
}
CMsgBotWorldState_Action_CastTree::CMsgBotWorldState_Action_CastTree(const CMsgBotWorldState_Action_CastTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&abilityslot_, &from.abilityslot_,
    static_cast<size_t>(reinterpret_cast<char*>(&tree_) -
    reinterpret_cast<char*>(&abilityslot_)) + sizeof(tree_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.CastTree)
}

void CMsgBotWorldState_Action_CastTree::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&abilityslot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tree_) -
    reinterpret_cast<char*>(&abilityslot_)) + sizeof(tree_));
}

CMsgBotWorldState_Action_CastTree::~CMsgBotWorldState_Action_CastTree() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.CastTree)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_CastTree::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_CastTree::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_CastTree* _this = reinterpret_cast< CMsgBotWorldState_Action_CastTree* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_CastTree::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_CastTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_CastTree::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.CastTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&abilityslot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tree_) -
        reinterpret_cast<char*>(&abilityslot_)) + sizeof(tree_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_CastTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 abilitySlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abilityslot(&has_bits);
          abilityslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 tree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tree(&has_bits);
          tree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_CastTree::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.CastTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 abilitySlot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_abilityslot(), target);
  }

  // required int32 tree = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_tree(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.CastTree)
  return target;
}

size_t CMsgBotWorldState_Action_CastTree::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.CastTree)
  size_t total_size = 0;

  if (_internal_has_abilityslot()) {
    // required int32 abilitySlot = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());
  }

  if (_internal_has_tree()) {
    // required int32 tree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_CastTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.CastTree)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 abilitySlot = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());

    // required int32 tree = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tree());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_CastTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.CastTree)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_CastTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_CastTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.CastTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.CastTree)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_CastTree::MergeFrom(const CMsgBotWorldState_Action_CastTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.CastTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      abilityslot_ = from.abilityslot_;
    }
    if (cached_has_bits & 0x00000002u) {
      tree_ = from.tree_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_CastTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.CastTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_CastTree::CopyFrom(const CMsgBotWorldState_Action_CastTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.CastTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_CastTree::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_CastTree::InternalSwap(CMsgBotWorldState_Action_CastTree* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_CastTree, tree_)
      + sizeof(CMsgBotWorldState_Action_CastTree::tree_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_CastTree, abilityslot_)>(
          reinterpret_cast<char*>(&abilityslot_),
          reinterpret_cast<char*>(&other->abilityslot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_CastTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_Cast::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_Cast>()._has_bits_);
  static void set_has_abilityslot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_Cast::CMsgBotWorldState_Action_Cast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.Cast)
}
CMsgBotWorldState_Action_Cast::CMsgBotWorldState_Action_Cast(const CMsgBotWorldState_Action_Cast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  abilityslot_ = from.abilityslot_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.Cast)
}

void CMsgBotWorldState_Action_Cast::SharedCtor() {
abilityslot_ = 0;
}

CMsgBotWorldState_Action_Cast::~CMsgBotWorldState_Action_Cast() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.Cast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_Cast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_Cast::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_Cast* _this = reinterpret_cast< CMsgBotWorldState_Action_Cast* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_Cast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_Cast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_Cast::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.Cast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  abilityslot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_Cast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 abilitySlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abilityslot(&has_bits);
          abilityslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_Cast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.Cast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 abilitySlot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_abilityslot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.Cast)
  return target;
}

size_t CMsgBotWorldState_Action_Cast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.Cast)
  size_t total_size = 0;

  // required int32 abilitySlot = 2;
  if (_internal_has_abilityslot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_Cast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.Cast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_Cast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_Cast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.Cast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.Cast)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_Cast::MergeFrom(const CMsgBotWorldState_Action_Cast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.Cast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_abilityslot()) {
    _internal_set_abilityslot(from._internal_abilityslot());
  }
}

void CMsgBotWorldState_Action_Cast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_Cast::CopyFrom(const CMsgBotWorldState_Action_Cast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.Cast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_Cast::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_Cast::InternalSwap(CMsgBotWorldState_Action_Cast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(abilityslot_, other->abilityslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_Cast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_CastToggle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_CastToggle>()._has_bits_);
  static void set_has_abilityslot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_CastToggle::CMsgBotWorldState_Action_CastToggle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.CastToggle)
}
CMsgBotWorldState_Action_CastToggle::CMsgBotWorldState_Action_CastToggle(const CMsgBotWorldState_Action_CastToggle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  abilityslot_ = from.abilityslot_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.CastToggle)
}

void CMsgBotWorldState_Action_CastToggle::SharedCtor() {
abilityslot_ = 0;
}

CMsgBotWorldState_Action_CastToggle::~CMsgBotWorldState_Action_CastToggle() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.CastToggle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_CastToggle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_CastToggle::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_CastToggle* _this = reinterpret_cast< CMsgBotWorldState_Action_CastToggle* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_CastToggle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_CastToggle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_CastToggle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.CastToggle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  abilityslot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_CastToggle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 abilitySlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_abilityslot(&has_bits);
          abilityslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_CastToggle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.CastToggle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 abilitySlot = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_abilityslot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.CastToggle)
  return target;
}

size_t CMsgBotWorldState_Action_CastToggle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.CastToggle)
  size_t total_size = 0;

  // required int32 abilitySlot = 2;
  if (_internal_has_abilityslot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_abilityslot());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_CastToggle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.CastToggle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_CastToggle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_CastToggle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.CastToggle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.CastToggle)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_CastToggle::MergeFrom(const CMsgBotWorldState_Action_CastToggle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.CastToggle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_abilityslot()) {
    _internal_set_abilityslot(from._internal_abilityslot());
  }
}

void CMsgBotWorldState_Action_CastToggle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.CastToggle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_CastToggle::CopyFrom(const CMsgBotWorldState_Action_CastToggle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.CastToggle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_CastToggle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_CastToggle::InternalSwap(CMsgBotWorldState_Action_CastToggle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(abilityslot_, other->abilityslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_CastToggle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_TrainAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_TrainAbility>()._has_bits_);
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_TrainAbility::CMsgBotWorldState_Action_TrainAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.TrainAbility)
}
CMsgBotWorldState_Action_TrainAbility::CMsgBotWorldState_Action_TrainAbility(const CMsgBotWorldState_Action_TrainAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ability()) {
    ability_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ability(), 
      GetArena());
  }
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&level_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.TrainAbility)
}

void CMsgBotWorldState_Action_TrainAbility::SharedCtor() {
ability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&level_)) + sizeof(unit_));
}

CMsgBotWorldState_Action_TrainAbility::~CMsgBotWorldState_Action_TrainAbility() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.TrainAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_TrainAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ability_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_TrainAbility::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_TrainAbility* _this = reinterpret_cast< CMsgBotWorldState_Action_TrainAbility* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_TrainAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_TrainAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_TrainAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.TrainAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ability_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_) -
        reinterpret_cast<char*>(&level_)) + sizeof(unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_TrainAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string ability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ability();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.TrainAbility.ability");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_TrainAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.TrainAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ability().data(), static_cast<int>(this->_internal_ability().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.TrainAbility.ability");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ability(), target);
  }

  // optional int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  // optional int32 unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.TrainAbility)
  return target;
}

size_t CMsgBotWorldState_Action_TrainAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.TrainAbility)
  size_t total_size = 0;

  // required string ability = 1;
  if (_internal_has_ability()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ability());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

    // optional int32 unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_TrainAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.TrainAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_TrainAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_TrainAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.TrainAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.TrainAbility)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_TrainAbility::MergeFrom(const CMsgBotWorldState_Action_TrainAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.TrainAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ability(from._internal_ability());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_TrainAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.TrainAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_TrainAbility::CopyFrom(const CMsgBotWorldState_Action_TrainAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.TrainAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_TrainAbility::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_TrainAbility::InternalSwap(CMsgBotWorldState_Action_TrainAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ability_.Swap(&other->ability_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_TrainAbility, unit_)
      + sizeof(CMsgBotWorldState_Action_TrainAbility::unit_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_TrainAbility, level_)>(
          reinterpret_cast<char*>(&level_),
          reinterpret_cast<char*>(&other->level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_TrainAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_DropItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_DropItem>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgBotWorldState_Vector& location(const CMsgBotWorldState_Action_DropItem* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_DropItem::_Internal::location(const CMsgBotWorldState_Action_DropItem* msg) {
  return *msg->location_;
}
CMsgBotWorldState_Action_DropItem::CMsgBotWorldState_Action_DropItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.DropItem)
}
CMsgBotWorldState_Action_DropItem::CMsgBotWorldState_Action_DropItem(const CMsgBotWorldState_Action_DropItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.DropItem)
}

void CMsgBotWorldState_Action_DropItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&location_)) + sizeof(slot_));
}

CMsgBotWorldState_Action_DropItem::~CMsgBotWorldState_Action_DropItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.DropItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_DropItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete location_;
}

void CMsgBotWorldState_Action_DropItem::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_DropItem* _this = reinterpret_cast< CMsgBotWorldState_Action_DropItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_DropItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_DropItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_DropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.DropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&slot_) -
        reinterpret_cast<char*>(&unit_)) + sizeof(slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_DropItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgBotWorldState.Vector location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_DropItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.DropItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional .CMsgBotWorldState.Vector location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.DropItem)
  return target;
}

size_t CMsgBotWorldState_Action_DropItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.DropItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgBotWorldState.Vector location = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional int32 unit = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unit());
    }

    // optional int32 slot = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_DropItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.DropItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_DropItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_DropItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.DropItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.DropItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_DropItem::MergeFrom(const CMsgBotWorldState_Action_DropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.DropItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_location()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_ = from.slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_DropItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.DropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_DropItem::CopyFrom(const CMsgBotWorldState_Action_DropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.DropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_DropItem::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_DropItem::InternalSwap(CMsgBotWorldState_Action_DropItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_DropItem, slot_)
      + sizeof(CMsgBotWorldState_Action_DropItem::slot_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_DropItem, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_DropItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_PickUpItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_PickUpItem>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_itemid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBotWorldState_Action_PickUpItem::CMsgBotWorldState_Action_PickUpItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.PickUpItem)
}
CMsgBotWorldState_Action_PickUpItem::CMsgBotWorldState_Action_PickUpItem(const CMsgBotWorldState_Action_PickUpItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(itemid_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.PickUpItem)
}

void CMsgBotWorldState_Action_PickUpItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&itemid_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(itemid_));
}

CMsgBotWorldState_Action_PickUpItem::~CMsgBotWorldState_Action_PickUpItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.PickUpItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_PickUpItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_PickUpItem::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_PickUpItem* _this = reinterpret_cast< CMsgBotWorldState_Action_PickUpItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_PickUpItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_PickUpItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_PickUpItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.PickUpItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&itemid_) -
        reinterpret_cast<char*>(&unit_)) + sizeof(itemid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_PickUpItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 itemId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_itemid(&has_bits);
          itemid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_PickUpItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.PickUpItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  // optional int32 itemId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_itemid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.PickUpItem)
  return target;
}

size_t CMsgBotWorldState_Action_PickUpItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.PickUpItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 unit = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unit());
    }

    // optional int32 itemId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_itemid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_PickUpItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.PickUpItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_PickUpItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_PickUpItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.PickUpItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.PickUpItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_PickUpItem::MergeFrom(const CMsgBotWorldState_Action_PickUpItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.PickUpItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000002u) {
      itemid_ = from.itemid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_PickUpItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.PickUpItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_PickUpItem::CopyFrom(const CMsgBotWorldState_Action_PickUpItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.PickUpItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_PickUpItem::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_PickUpItem::InternalSwap(CMsgBotWorldState_Action_PickUpItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_PickUpItem, itemid_)
      + sizeof(CMsgBotWorldState_Action_PickUpItem::itemid_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_PickUpItem, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_PickUpItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_PurchaseItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_PurchaseItem>()._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_item_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgBotWorldState_Action_PurchaseItem::CMsgBotWorldState_Action_PurchaseItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.PurchaseItem)
}
CMsgBotWorldState_Action_PurchaseItem::CMsgBotWorldState_Action_PurchaseItem(const CMsgBotWorldState_Action_PurchaseItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_item_name()) {
    item_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_item_name(), 
      GetArena());
  }
  ::memcpy(&item_, &from.item_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&item_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.PurchaseItem)
}

void CMsgBotWorldState_Action_PurchaseItem::SharedCtor() {
item_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&item_)) + sizeof(unit_));
}

CMsgBotWorldState_Action_PurchaseItem::~CMsgBotWorldState_Action_PurchaseItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.PurchaseItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_PurchaseItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  item_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_PurchaseItem::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_PurchaseItem* _this = reinterpret_cast< CMsgBotWorldState_Action_PurchaseItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_PurchaseItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_PurchaseItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_PurchaseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.PurchaseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_) -
        reinterpret_cast<char*>(&item_)) + sizeof(unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_PurchaseItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item(&has_bits);
          item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string item_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_item_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.PurchaseItem.item_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_PurchaseItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.PurchaseItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item(), target);
  }

  // optional string item_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_item_name().data(), static_cast<int>(this->_internal_item_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.PurchaseItem.item_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_item_name(), target);
  }

  // optional int32 unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.PurchaseItem)
  return target;
}

size_t CMsgBotWorldState_Action_PurchaseItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.PurchaseItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_item_name());
    }

    // optional int32 item = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item());
    }

    // optional int32 unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_PurchaseItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.PurchaseItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_PurchaseItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_PurchaseItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.PurchaseItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.PurchaseItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_PurchaseItem::MergeFrom(const CMsgBotWorldState_Action_PurchaseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.PurchaseItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_item_name(from._internal_item_name());
    }
    if (cached_has_bits & 0x00000002u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_PurchaseItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.PurchaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_PurchaseItem::CopyFrom(const CMsgBotWorldState_Action_PurchaseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.PurchaseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_PurchaseItem::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_PurchaseItem::InternalSwap(CMsgBotWorldState_Action_PurchaseItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_name_.Swap(&other->item_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_PurchaseItem, unit_)
      + sizeof(CMsgBotWorldState_Action_PurchaseItem::unit_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_PurchaseItem, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_PurchaseItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_SellItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_SellItem>()._has_bits_);
  static void set_has_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgBotWorldState_Action_SellItem::CMsgBotWorldState_Action_SellItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.SellItem)
}
CMsgBotWorldState_Action_SellItem::CMsgBotWorldState_Action_SellItem(const CMsgBotWorldState_Action_SellItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_, &from.item_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&item_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.SellItem)
}

void CMsgBotWorldState_Action_SellItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&item_)) + sizeof(unit_));
}

CMsgBotWorldState_Action_SellItem::~CMsgBotWorldState_Action_SellItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.SellItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_SellItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_SellItem::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_SellItem* _this = reinterpret_cast< CMsgBotWorldState_Action_SellItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_SellItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_SellItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_SellItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.SellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&item_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_) -
        reinterpret_cast<char*>(&item_)) + sizeof(unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_SellItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item(&has_bits);
          item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_SellItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.SellItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_item(), target);
  }

  // optional int32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot(), target);
  }

  // optional int32 unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.SellItem)
  return target;
}

size_t CMsgBotWorldState_Action_SellItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.SellItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 item = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item());
    }

    // optional int32 slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_slot());
    }

    // optional int32 unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unit());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_SellItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.SellItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_SellItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_SellItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.SellItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.SellItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_SellItem::MergeFrom(const CMsgBotWorldState_Action_SellItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.SellItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      item_ = from.item_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_SellItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.SellItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_SellItem::CopyFrom(const CMsgBotWorldState_Action_SellItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.SellItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_SellItem::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_SellItem::InternalSwap(CMsgBotWorldState_Action_SellItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_SellItem, unit_)
      + sizeof(CMsgBotWorldState_Action_SellItem::unit_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_SellItem, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_SellItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_SwapItems::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_SwapItems>()._has_bits_);
  static void set_has_slot_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_slot_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgBotWorldState_Action_SwapItems::CMsgBotWorldState_Action_SwapItems(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.SwapItems)
}
CMsgBotWorldState_Action_SwapItems::CMsgBotWorldState_Action_SwapItems(const CMsgBotWorldState_Action_SwapItems& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_a_, &from.slot_a_,
    static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&slot_a_)) + sizeof(unit_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.SwapItems)
}

void CMsgBotWorldState_Action_SwapItems::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_) -
    reinterpret_cast<char*>(&slot_a_)) + sizeof(unit_));
}

CMsgBotWorldState_Action_SwapItems::~CMsgBotWorldState_Action_SwapItems() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.SwapItems)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_SwapItems::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_SwapItems::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_SwapItems* _this = reinterpret_cast< CMsgBotWorldState_Action_SwapItems* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_SwapItems::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_SwapItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_SwapItems::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.SwapItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&slot_a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unit_) -
        reinterpret_cast<char*>(&slot_a_)) + sizeof(unit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_SwapItems::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 slot_a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_a(&has_bits);
          slot_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 slot_b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_slot_b(&has_bits);
          slot_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_SwapItems::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.SwapItems)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 slot_a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot_a(), target);
  }

  // required int32 slot_b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_slot_b(), target);
  }

  // optional int32 unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.SwapItems)
  return target;
}

size_t CMsgBotWorldState_Action_SwapItems::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.SwapItems)
  size_t total_size = 0;

  if (_internal_has_slot_a()) {
    // required int32 slot_a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_a());
  }

  if (_internal_has_slot_b()) {
    // required int32 slot_b = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_b());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_SwapItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.SwapItems)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 slot_a = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_a());

    // required int32 slot_b = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot_b());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 unit = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_SwapItems::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.SwapItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_SwapItems* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_SwapItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.SwapItems)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.SwapItems)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_SwapItems::MergeFrom(const CMsgBotWorldState_Action_SwapItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.SwapItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      slot_a_ = from.slot_a_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_b_ = from.slot_b_;
    }
    if (cached_has_bits & 0x00000004u) {
      unit_ = from.unit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_SwapItems::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.SwapItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_SwapItems::CopyFrom(const CMsgBotWorldState_Action_SwapItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.SwapItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_SwapItems::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_SwapItems::InternalSwap(CMsgBotWorldState_Action_SwapItems* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_SwapItems, unit_)
      + sizeof(CMsgBotWorldState_Action_SwapItems::unit_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_SwapItems, slot_a_)>(
          reinterpret_cast<char*>(&slot_a_),
          reinterpret_cast<char*>(&other->slot_a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_SwapItems::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_DisassembleItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_DisassembleItem>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_DisassembleItem::CMsgBotWorldState_Action_DisassembleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.DisassembleItem)
}
CMsgBotWorldState_Action_DisassembleItem::CMsgBotWorldState_Action_DisassembleItem(const CMsgBotWorldState_Action_DisassembleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slot_ = from.slot_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.DisassembleItem)
}

void CMsgBotWorldState_Action_DisassembleItem::SharedCtor() {
slot_ = 0;
}

CMsgBotWorldState_Action_DisassembleItem::~CMsgBotWorldState_Action_DisassembleItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.DisassembleItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_DisassembleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_DisassembleItem::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_DisassembleItem* _this = reinterpret_cast< CMsgBotWorldState_Action_DisassembleItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_DisassembleItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_DisassembleItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_DisassembleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.DisassembleItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_DisassembleItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_DisassembleItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.DisassembleItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.DisassembleItem)
  return target;
}

size_t CMsgBotWorldState_Action_DisassembleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.DisassembleItem)
  size_t total_size = 0;

  // required int32 slot = 1;
  if (_internal_has_slot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_DisassembleItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.DisassembleItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_DisassembleItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_DisassembleItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.DisassembleItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.DisassembleItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_DisassembleItem::MergeFrom(const CMsgBotWorldState_Action_DisassembleItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.DisassembleItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_slot()) {
    _internal_set_slot(from._internal_slot());
  }
}

void CMsgBotWorldState_Action_DisassembleItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.DisassembleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_DisassembleItem::CopyFrom(const CMsgBotWorldState_Action_DisassembleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.DisassembleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_DisassembleItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_DisassembleItem::InternalSwap(CMsgBotWorldState_Action_DisassembleItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(slot_, other->slot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_DisassembleItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_SetCombineLockItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_SetCombineLockItem>()._has_bits_);
  static void set_has_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgBotWorldState_Action_SetCombineLockItem::CMsgBotWorldState_Action_SetCombineLockItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.SetCombineLockItem)
}
CMsgBotWorldState_Action_SetCombineLockItem::CMsgBotWorldState_Action_SetCombineLockItem(const CMsgBotWorldState_Action_SetCombineLockItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_, &from.slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.SetCombineLockItem)
}

void CMsgBotWorldState_Action_SetCombineLockItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&slot_)) + sizeof(value_));
}

CMsgBotWorldState_Action_SetCombineLockItem::~CMsgBotWorldState_Action_SetCombineLockItem() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.SetCombineLockItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_SetCombineLockItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_SetCombineLockItem::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_SetCombineLockItem* _this = reinterpret_cast< CMsgBotWorldState_Action_SetCombineLockItem* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_SetCombineLockItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_SetCombineLockItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_SetCombineLockItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.SetCombineLockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&slot_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_SetCombineLockItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot(&has_bits);
          slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_SetCombineLockItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.SetCombineLockItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_slot(), target);
  }

  // required bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.SetCombineLockItem)
  return target;
}

size_t CMsgBotWorldState_Action_SetCombineLockItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.SetCombineLockItem)
  size_t total_size = 0;

  if (_internal_has_slot()) {
    // required int32 slot = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());
  }

  if (_internal_has_value()) {
    // required bool value = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_SetCombineLockItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.SetCombineLockItem)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 slot = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_slot());

    // required bool value = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_SetCombineLockItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.SetCombineLockItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_SetCombineLockItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_SetCombineLockItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.SetCombineLockItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.SetCombineLockItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_SetCombineLockItem::MergeFrom(const CMsgBotWorldState_Action_SetCombineLockItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.SetCombineLockItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_SetCombineLockItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.SetCombineLockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_SetCombineLockItem::CopyFrom(const CMsgBotWorldState_Action_SetCombineLockItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.SetCombineLockItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_SetCombineLockItem::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_SetCombineLockItem::InternalSwap(CMsgBotWorldState_Action_SetCombineLockItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_SetCombineLockItem, value_)
      + sizeof(CMsgBotWorldState_Action_SetCombineLockItem::value_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_SetCombineLockItem, slot_)>(
          reinterpret_cast<char*>(&slot_),
          reinterpret_cast<char*>(&other->slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_SetCombineLockItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_PickupRune::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_PickupRune>()._has_bits_);
  static void set_has_rune(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_PickupRune::CMsgBotWorldState_Action_PickupRune(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.PickupRune)
}
CMsgBotWorldState_Action_PickupRune::CMsgBotWorldState_Action_PickupRune(const CMsgBotWorldState_Action_PickupRune& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rune_ = from.rune_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.PickupRune)
}

void CMsgBotWorldState_Action_PickupRune::SharedCtor() {
rune_ = 0;
}

CMsgBotWorldState_Action_PickupRune::~CMsgBotWorldState_Action_PickupRune() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.PickupRune)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_PickupRune::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_PickupRune::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_PickupRune* _this = reinterpret_cast< CMsgBotWorldState_Action_PickupRune* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_PickupRune::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_PickupRune::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_PickupRune::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.PickupRune)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  rune_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_PickupRune::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rune = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rune(&has_bits);
          rune_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_PickupRune::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.PickupRune)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 rune = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rune(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.PickupRune)
  return target;
}

size_t CMsgBotWorldState_Action_PickupRune::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.PickupRune)
  size_t total_size = 0;

  // required int32 rune = 2;
  if (_internal_has_rune()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rune());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_PickupRune::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.PickupRune)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_PickupRune* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_PickupRune>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.PickupRune)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.PickupRune)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_PickupRune::MergeFrom(const CMsgBotWorldState_Action_PickupRune& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.PickupRune)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_rune()) {
    _internal_set_rune(from._internal_rune());
  }
}

void CMsgBotWorldState_Action_PickupRune::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.PickupRune)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_PickupRune::CopyFrom(const CMsgBotWorldState_Action_PickupRune& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.PickupRune)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_PickupRune::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_PickupRune::InternalSwap(CMsgBotWorldState_Action_PickupRune* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(rune_, other->rune_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_PickupRune::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_Chat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_Chat>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_to_allchat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgBotWorldState_Action_Chat::CMsgBotWorldState_Action_Chat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.Chat)
}
CMsgBotWorldState_Action_Chat::CMsgBotWorldState_Action_Chat(const CMsgBotWorldState_Action_Chat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  to_allchat_ = from.to_allchat_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.Chat)
}

void CMsgBotWorldState_Action_Chat::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_allchat_ = false;
}

CMsgBotWorldState_Action_Chat::~CMsgBotWorldState_Action_Chat() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.Chat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_Chat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_Chat::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_Chat* _this = reinterpret_cast< CMsgBotWorldState_Action_Chat* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_Chat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_Chat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_Chat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  to_allchat_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_Chat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.Chat.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool to_allchat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_to_allchat(&has_bits);
          to_allchat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_Chat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.Chat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.Chat.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // required bool to_allchat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_to_allchat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.Chat)
  return target;
}

size_t CMsgBotWorldState_Action_Chat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.Chat)
  size_t total_size = 0;

  if (_internal_has_message()) {
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  if (_internal_has_to_allchat()) {
    // required bool to_allchat = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_Chat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.Chat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string message = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());

    // required bool to_allchat = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_Chat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_Chat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_Chat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.Chat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.Chat)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_Chat::MergeFrom(const CMsgBotWorldState_Action_Chat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.Chat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      to_allchat_ = from.to_allchat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_Chat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_Chat::CopyFrom(const CMsgBotWorldState_Action_Chat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.Chat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_Chat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_Chat::InternalSwap(CMsgBotWorldState_Action_Chat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(to_allchat_, other->to_allchat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_Chat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_UseShrine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_UseShrine>()._has_bits_);
  static void set_has_shrine(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_UseShrine::CMsgBotWorldState_Action_UseShrine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  units_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.UseShrine)
}
CMsgBotWorldState_Action_UseShrine::CMsgBotWorldState_Action_UseShrine(const CMsgBotWorldState_Action_UseShrine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      units_(from.units_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  shrine_ = from.shrine_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.UseShrine)
}

void CMsgBotWorldState_Action_UseShrine::SharedCtor() {
shrine_ = 0;
}

CMsgBotWorldState_Action_UseShrine::~CMsgBotWorldState_Action_UseShrine() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.UseShrine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_UseShrine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_UseShrine::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_UseShrine* _this = reinterpret_cast< CMsgBotWorldState_Action_UseShrine* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_UseShrine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_UseShrine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_UseShrine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.UseShrine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  units_.Clear();
  shrine_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_UseShrine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 units = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_units(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_units(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 shrine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shrine(&has_bits);
          shrine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_UseShrine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.UseShrine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 units = 1;
  for (int i = 0, n = this->_internal_units_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_units(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // required int32 shrine = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_shrine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.UseShrine)
  return target;
}

size_t CMsgBotWorldState_Action_UseShrine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.UseShrine)
  size_t total_size = 0;

  // required int32 shrine = 2;
  if (_internal_has_shrine()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shrine());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 units = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->units_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_units_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_UseShrine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.UseShrine)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_UseShrine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_UseShrine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.UseShrine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.UseShrine)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_UseShrine::MergeFrom(const CMsgBotWorldState_Action_UseShrine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.UseShrine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  units_.MergeFrom(from.units_);
  if (from._internal_has_shrine()) {
    _internal_set_shrine(from._internal_shrine());
  }
}

void CMsgBotWorldState_Action_UseShrine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.UseShrine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_UseShrine::CopyFrom(const CMsgBotWorldState_Action_UseShrine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.UseShrine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_UseShrine::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_UseShrine::InternalSwap(CMsgBotWorldState_Action_UseShrine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  units_.InternalSwap(&other->units_);
  swap(shrine_, other->shrine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_UseShrine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_Courier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_Courier>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_courier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CMsgBotWorldState_Action_Courier::CMsgBotWorldState_Action_Courier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.Courier)
}
CMsgBotWorldState_Action_Courier::CMsgBotWorldState_Action_Courier(const CMsgBotWorldState_Action_Courier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.Courier)
}

void CMsgBotWorldState_Action_Courier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(action_));
}

CMsgBotWorldState_Action_Courier::~CMsgBotWorldState_Action_Courier() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.Courier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_Courier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_Courier::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_Courier* _this = reinterpret_cast< CMsgBotWorldState_Action_Courier* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_Courier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_Courier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_Courier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.Courier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&unit_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_Courier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 courier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_courier(&has_bits);
          courier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_Courier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.Courier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  // required int32 courier = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_courier(), target);
  }

  // required int32 action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.Courier)
  return target;
}

size_t CMsgBotWorldState_Action_Courier::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.Courier)
  size_t total_size = 0;

  if (_internal_has_unit()) {
    // required int32 unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());
  }

  if (_internal_has_courier()) {
    // required int32 courier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_courier());
  }

  if (_internal_has_action()) {
    // required int32 action = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_Courier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.Courier)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());

    // required int32 courier = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_courier());

    // required int32 action = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_Courier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.Courier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_Courier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_Courier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.Courier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.Courier)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_Courier::MergeFrom(const CMsgBotWorldState_Action_Courier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.Courier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000002u) {
      courier_ = from.courier_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_Courier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_Courier::CopyFrom(const CMsgBotWorldState_Action_Courier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_Courier::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_Courier::InternalSwap(CMsgBotWorldState_Action_Courier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_Courier, action_)
      + sizeof(CMsgBotWorldState_Action_Courier::action_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_Courier, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_Courier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_GetActualIncomingDamage::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_GetActualIncomingDamage>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ndamage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ndamagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CMsgBotWorldState_Action_GetActualIncomingDamage::CMsgBotWorldState_Action_GetActualIncomingDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.GetActualIncomingDamage)
}
CMsgBotWorldState_Action_GetActualIncomingDamage::CMsgBotWorldState_Action_GetActualIncomingDamage(const CMsgBotWorldState_Action_GetActualIncomingDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndamagetype_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(ndamagetype_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.GetActualIncomingDamage)
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ndamagetype_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(ndamagetype_));
}

CMsgBotWorldState_Action_GetActualIncomingDamage::~CMsgBotWorldState_Action_GetActualIncomingDamage() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.GetActualIncomingDamage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_GetActualIncomingDamage* _this = reinterpret_cast< CMsgBotWorldState_Action_GetActualIncomingDamage* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_GetActualIncomingDamage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_GetActualIncomingDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ndamagetype_) -
        reinterpret_cast<char*>(&unit_)) + sizeof(ndamagetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_GetActualIncomingDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float nDamage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_ndamage(&has_bits);
          ndamage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 nDamageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ndamagetype(&has_bits);
          ndamagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_GetActualIncomingDamage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  // required float nDamage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_ndamage(), target);
  }

  // required int32 nDamageType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ndamagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.GetActualIncomingDamage)
  return target;
}

size_t CMsgBotWorldState_Action_GetActualIncomingDamage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  size_t total_size = 0;

  if (_internal_has_unit()) {
    // required int32 unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());
  }

  if (_internal_has_ndamage()) {
    // required float nDamage = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_ndamagetype()) {
    // required int32 nDamageType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndamagetype());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_GetActualIncomingDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());

    // required float nDamage = 2;
    total_size += 1 + 4;

    // required int32 nDamageType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndamagetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_GetActualIncomingDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_GetActualIncomingDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.GetActualIncomingDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.GetActualIncomingDamage)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::MergeFrom(const CMsgBotWorldState_Action_GetActualIncomingDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000002u) {
      ndamage_ = from.ndamage_;
    }
    if (cached_has_bits & 0x00000004u) {
      ndamagetype_ = from.ndamagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::CopyFrom(const CMsgBotWorldState_Action_GetActualIncomingDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.GetActualIncomingDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_GetActualIncomingDamage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_GetActualIncomingDamage::InternalSwap(CMsgBotWorldState_Action_GetActualIncomingDamage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_GetActualIncomingDamage, ndamagetype_)
      + sizeof(CMsgBotWorldState_Action_GetActualIncomingDamage::ndamagetype_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_GetActualIncomingDamage, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_GetActualIncomingDamage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_GetEstimatedDamageToTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_GetEstimatedDamageToTarget>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bcurrentlyavailable(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_htarget(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fduration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ndamagetypes(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

CMsgBotWorldState_Action_GetEstimatedDamageToTarget::CMsgBotWorldState_Action_GetEstimatedDamageToTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
}
CMsgBotWorldState_Action_GetEstimatedDamageToTarget::CMsgBotWorldState_Action_GetEstimatedDamageToTarget(const CMsgBotWorldState_Action_GetEstimatedDamageToTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_, &from.unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndamagetypes_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(ndamagetypes_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ndamagetypes_) -
    reinterpret_cast<char*>(&unit_)) + sizeof(ndamagetypes_));
}

CMsgBotWorldState_Action_GetEstimatedDamageToTarget::~CMsgBotWorldState_Action_GetEstimatedDamageToTarget() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_GetEstimatedDamageToTarget* _this = reinterpret_cast< CMsgBotWorldState_Action_GetEstimatedDamageToTarget* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ndamagetypes_) -
        reinterpret_cast<char*>(&unit_)) + sizeof(ndamagetypes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_GetEstimatedDamageToTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool bCurrentlyAvailable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bcurrentlyavailable(&has_bits);
          bcurrentlyavailable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hTarget = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_htarget(&has_bits);
          htarget_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float fDuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_fduration(&has_bits);
          fduration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 nDamageTypes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ndamagetypes(&has_bits);
          ndamagetypes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_GetEstimatedDamageToTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  // required bool bCurrentlyAvailable = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bcurrentlyavailable(), target);
  }

  // required int32 hTarget = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_htarget(), target);
  }

  // required float fDuration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fduration(), target);
  }

  // required int32 nDamageTypes = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ndamagetypes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  return target;
}

size_t CMsgBotWorldState_Action_GetEstimatedDamageToTarget::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  size_t total_size = 0;

  if (_internal_has_unit()) {
    // required int32 unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());
  }

  if (_internal_has_bcurrentlyavailable()) {
    // required bool bCurrentlyAvailable = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_htarget()) {
    // required int32 hTarget = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_htarget());
  }

  if (_internal_has_fduration()) {
    // required float fDuration = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_ndamagetypes()) {
    // required int32 nDamageTypes = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndamagetypes());
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_GetEstimatedDamageToTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 unit = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());

    // required bool bCurrentlyAvailable = 2;
    total_size += 1 + 1;

    // required int32 hTarget = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_htarget());

    // required float fDuration = 4;
    total_size += 1 + 4;

    // required int32 nDamageTypes = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndamagetypes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_GetEstimatedDamageToTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_GetEstimatedDamageToTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::MergeFrom(const CMsgBotWorldState_Action_GetEstimatedDamageToTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      unit_ = from.unit_;
    }
    if (cached_has_bits & 0x00000002u) {
      bcurrentlyavailable_ = from.bcurrentlyavailable_;
    }
    if (cached_has_bits & 0x00000004u) {
      htarget_ = from.htarget_;
    }
    if (cached_has_bits & 0x00000008u) {
      fduration_ = from.fduration_;
    }
    if (cached_has_bits & 0x00000010u) {
      ndamagetypes_ = from.ndamagetypes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::CopyFrom(const CMsgBotWorldState_Action_GetEstimatedDamageToTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.GetEstimatedDamageToTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_GetEstimatedDamageToTarget::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_GetEstimatedDamageToTarget::InternalSwap(CMsgBotWorldState_Action_GetEstimatedDamageToTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_GetEstimatedDamageToTarget, ndamagetypes_)
      + sizeof(CMsgBotWorldState_Action_GetEstimatedDamageToTarget::ndamagetypes_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_GetEstimatedDamageToTarget, unit_)>(
          reinterpret_cast<char*>(&unit_),
          reinterpret_cast<char*>(&other->unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_GetEstimatedDamageToTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_Glyph::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_Glyph>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_Glyph::CMsgBotWorldState_Action_Glyph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.Glyph)
}
CMsgBotWorldState_Action_Glyph::CMsgBotWorldState_Action_Glyph(const CMsgBotWorldState_Action_Glyph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.Glyph)
}

void CMsgBotWorldState_Action_Glyph::SharedCtor() {
unit_ = 0;
}

CMsgBotWorldState_Action_Glyph::~CMsgBotWorldState_Action_Glyph() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.Glyph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_Glyph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_Glyph::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_Glyph* _this = reinterpret_cast< CMsgBotWorldState_Action_Glyph* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_Glyph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_Glyph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_Glyph::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.Glyph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_Glyph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_Glyph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.Glyph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.Glyph)
  return target;
}

size_t CMsgBotWorldState_Action_Glyph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.Glyph)
  size_t total_size = 0;

  // required int32 unit = 1;
  if (_internal_has_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_Glyph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.Glyph)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_Glyph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_Glyph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.Glyph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.Glyph)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_Glyph::MergeFrom(const CMsgBotWorldState_Action_Glyph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.Glyph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit()) {
    _internal_set_unit(from._internal_unit());
  }
}

void CMsgBotWorldState_Action_Glyph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.Glyph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_Glyph::CopyFrom(const CMsgBotWorldState_Action_Glyph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.Glyph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_Glyph::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_Glyph::InternalSwap(CMsgBotWorldState_Action_Glyph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_Glyph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_SoftReset::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_SoftReset>()._has_bits_);
  static void set_has_minigameconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_snapshotdata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgBotWorldState_Action_SoftReset::CMsgBotWorldState_Action_SoftReset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.SoftReset)
}
CMsgBotWorldState_Action_SoftReset::CMsgBotWorldState_Action_SoftReset(const CMsgBotWorldState_Action_SoftReset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  minigameconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_minigameconfig()) {
    minigameconfig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_minigameconfig(), 
      GetArena());
  }
  snapshotdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_snapshotdata()) {
    snapshotdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_snapshotdata(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.SoftReset)
}

void CMsgBotWorldState_Action_SoftReset::SharedCtor() {
minigameconfig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
snapshotdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CMsgBotWorldState_Action_SoftReset::~CMsgBotWorldState_Action_SoftReset() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.SoftReset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_SoftReset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  minigameconfig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snapshotdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_SoftReset::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_SoftReset* _this = reinterpret_cast< CMsgBotWorldState_Action_SoftReset* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_SoftReset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_SoftReset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_SoftReset::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.SoftReset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      minigameconfig_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      snapshotdata_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_SoftReset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string minigameConfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_minigameconfig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.SoftReset.minigameConfig");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string snapshotData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_snapshotdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.SoftReset.snapshotData");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_SoftReset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.SoftReset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string minigameConfig = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_minigameconfig().data(), static_cast<int>(this->_internal_minigameconfig().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.SoftReset.minigameConfig");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_minigameconfig(), target);
  }

  // optional string snapshotData = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_snapshotdata().data(), static_cast<int>(this->_internal_snapshotdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.SoftReset.snapshotData");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_snapshotdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.SoftReset)
  return target;
}

size_t CMsgBotWorldState_Action_SoftReset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.SoftReset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string minigameConfig = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_minigameconfig());
    }

    // optional string snapshotData = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_snapshotdata());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_SoftReset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.SoftReset)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_SoftReset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_SoftReset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.SoftReset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.SoftReset)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_SoftReset::MergeFrom(const CMsgBotWorldState_Action_SoftReset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.SoftReset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_minigameconfig(from._internal_minigameconfig());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_snapshotdata(from._internal_snapshotdata());
    }
  }
}

void CMsgBotWorldState_Action_SoftReset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.SoftReset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_SoftReset::CopyFrom(const CMsgBotWorldState_Action_SoftReset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.SoftReset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_SoftReset::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_SoftReset::InternalSwap(CMsgBotWorldState_Action_SoftReset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  minigameconfig_.Swap(&other->minigameconfig_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snapshotdata_.Swap(&other->snapshotdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_SoftReset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_Buyback::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_Buyback>()._has_bits_);
  static void set_has_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_Buyback::CMsgBotWorldState_Action_Buyback(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.Buyback)
}
CMsgBotWorldState_Action_Buyback::CMsgBotWorldState_Action_Buyback(const CMsgBotWorldState_Action_Buyback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_ = from.unit_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.Buyback)
}

void CMsgBotWorldState_Action_Buyback::SharedCtor() {
unit_ = 0;
}

CMsgBotWorldState_Action_Buyback::~CMsgBotWorldState_Action_Buyback() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.Buyback)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_Buyback::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_Buyback::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_Buyback* _this = reinterpret_cast< CMsgBotWorldState_Action_Buyback* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_Buyback::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_Buyback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_Buyback::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.Buyback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_Buyback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 unit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unit(&has_bits);
          unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_Buyback::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.Buyback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 unit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.Buyback)
  return target;
}

size_t CMsgBotWorldState_Action_Buyback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.Buyback)
  size_t total_size = 0;

  // required int32 unit = 1;
  if (_internal_has_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_Buyback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.Buyback)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_Buyback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_Buyback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.Buyback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.Buyback)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_Buyback::MergeFrom(const CMsgBotWorldState_Action_Buyback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.Buyback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unit()) {
    _internal_set_unit(from._internal_unit());
  }
}

void CMsgBotWorldState_Action_Buyback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.Buyback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_Buyback::CopyFrom(const CMsgBotWorldState_Action_Buyback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.Buyback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_Buyback::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_Buyback::InternalSwap(CMsgBotWorldState_Action_Buyback* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unit_, other->unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_Buyback::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugDrawText::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_ScriptingDebugDrawText>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& origin(const CMsgBotWorldState_Action_ScriptingDebugDrawText* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bviewcheck(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawText::_Internal::origin(const CMsgBotWorldState_Action_ScriptingDebugDrawText* msg) {
  return *msg->origin_;
}
CMsgBotWorldState_Action_ScriptingDebugDrawText::CMsgBotWorldState_Action_ScriptingDebugDrawText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawText)
}
CMsgBotWorldState_Action_ScriptingDebugDrawText::CMsgBotWorldState_Action_ScriptingDebugDrawText(const CMsgBotWorldState_Action_ScriptingDebugDrawText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgBotWorldState_Vector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&bviewcheck_, &from.bviewcheck_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&bviewcheck_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawText)
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(duration_));
}

CMsgBotWorldState_Action_ScriptingDebugDrawText::~CMsgBotWorldState_Action_ScriptingDebugDrawText() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete origin_;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugDrawText* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugDrawText* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugDrawText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugDrawText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&bviewcheck_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&bviewcheck_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugDrawText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CMsgBotWorldState.Vector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.ScriptingDebugDrawText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool bViewCheck = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bviewcheck(&has_bits);
          bviewcheck_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugDrawText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Vector origin = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.ScriptingDebugDrawText.text");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text(), target);
  }

  // required bool bViewCheck = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_bviewcheck(), target);
  }

  // required float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugDrawText::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  size_t total_size = 0;

  if (_internal_has_text()) {
    // required string text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (_internal_has_origin()) {
    // required .CMsgBotWorldState.Vector origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (_internal_has_bviewcheck()) {
    // required bool bViewCheck = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_duration()) {
    // required float duration = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_ScriptingDebugDrawText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string text = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());

    // required .CMsgBotWorldState.Vector origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);

    // required bool bViewCheck = 3;
    total_size += 1 + 1;

    // required float duration = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugDrawText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugDrawText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugDrawText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugDrawText)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_origin()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000004u) {
      bviewcheck_ = from.bviewcheck_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugDrawText::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawText::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugDrawText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawText, duration_)
      + sizeof(CMsgBotWorldState_Action_ScriptingDebugDrawText::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawText, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugDrawText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugDrawLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_ScriptingDebugDrawLine>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& origin(const CMsgBotWorldState_Action_ScriptingDebugDrawLine* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBotWorldState_Vector& target(const CMsgBotWorldState_Action_ScriptingDebugDrawLine* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ztest(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawLine::_Internal::origin(const CMsgBotWorldState_Action_ScriptingDebugDrawLine* msg) {
  return *msg->origin_;
}
const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawLine::_Internal::target(const CMsgBotWorldState_Action_ScriptingDebugDrawLine* msg) {
  return *msg->target_;
}
CMsgBotWorldState_Action_ScriptingDebugDrawLine::CMsgBotWorldState_Action_ScriptingDebugDrawLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
}
CMsgBotWorldState_Action_ScriptingDebugDrawLine::CMsgBotWorldState_Action_ScriptingDebugDrawLine(const CMsgBotWorldState_Action_ScriptingDebugDrawLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgBotWorldState_Vector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::CMsgBotWorldState_Vector(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&r_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(duration_));
}

CMsgBotWorldState_Action_ScriptingDebugDrawLine::~CMsgBotWorldState_Action_ScriptingDebugDrawLine() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete target_;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugDrawLine* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugDrawLine* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugDrawLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugDrawLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&r_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugDrawLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CMsgBotWorldState.Vector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 g = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 b = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool ztest = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ztest(&has_bits);
          ztest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugDrawLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Vector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // required .CMsgBotWorldState.Vector target = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::target(this), target, stream);
  }

  // required int32 r = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_r(), target);
  }

  // required int32 g = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_g(), target);
  }

  // required int32 b = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_b(), target);
  }

  // required bool ztest = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ztest(), target);
  }

  // required float duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugDrawLine::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .CMsgBotWorldState.Vector origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (_internal_has_target()) {
    // required .CMsgBotWorldState.Vector target = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (_internal_has_r()) {
    // required int32 r = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  if (_internal_has_g()) {
    // required int32 g = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  if (_internal_has_b()) {
    // required int32 b = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (_internal_has_ztest()) {
    // required bool ztest = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_duration()) {
    // required float duration = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_ScriptingDebugDrawLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .CMsgBotWorldState.Vector origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);

    // required .CMsgBotWorldState.Vector target = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);

    // required int32 r = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());

    // required int32 g = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());

    // required int32 b = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());

    // required bool ztest = 6;
    total_size += 1 + 1;

    // required float duration = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugDrawLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugDrawLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_target()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000004u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000008u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000010u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000020u) {
      ztest_ = from.ztest_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugDrawLine::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawLine::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugDrawLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawLine, duration_)
      + sizeof(CMsgBotWorldState_Action_ScriptingDebugDrawLine::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawLine, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugDrawLine::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_ScriptingDebugDrawScreenText>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lineoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
}
CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText(const CMsgBotWorldState_Action_ScriptingDebugDrawScreenText& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&x_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&x_)) + sizeof(duration_));
}

CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::~CMsgBotWorldState_Action_ScriptingDebugDrawScreenText() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugDrawScreenText* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugDrawScreenText* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&a_) -
        reinterpret_cast<char*>(&x_)) + sizeof(a_));
  }
  duration_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 lineOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lineoffset(&has_bits);
          lineoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 r = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 g = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 a = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required int32 lineOffset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lineoffset(), target);
  }

  // required string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.ScriptingDebugDrawScreenText.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // required int32 r = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_r(), target);
  }

  // required int32 g = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_g(), target);
  }

  // required int32 b = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_b(), target);
  }

  // required int32 a = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_a(), target);
  }

  // required float duration = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  size_t total_size = 0;

  if (_internal_has_text()) {
    // required string text = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_lineoffset()) {
    // required int32 lineOffset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineoffset());
  }

  if (_internal_has_r()) {
    // required int32 r = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  if (_internal_has_g()) {
    // required int32 g = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  if (_internal_has_b()) {
    // required int32 b = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (_internal_has_a()) {
    // required int32 a = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (_internal_has_duration()) {
    // required float duration = 9;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string text = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());

    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required int32 lineOffset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineoffset());

    // required int32 r = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());

    // required int32 g = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());

    // required int32 b = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());

    // required int32 a = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());

    // required float duration = 9;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugDrawScreenText* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugDrawScreenText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawScreenText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      lineoffset_ = from.lineoffset_;
    }
    if (cached_has_bits & 0x00000010u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000020u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000040u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000080u) {
      a_ = from.a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_duration(from._internal_duration());
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawScreenText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawScreenText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugDrawScreenText* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, duration_)
      + sizeof(CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawScreenText, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lineoffset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_font(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_bbold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000fff) ^ 0x00000fff) != 0;
  }
};

CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
}
CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty(const CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font()) {
    font_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font(), 
      GetArena());
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&bbold_) -
    reinterpret_cast<char*>(&x_)) + sizeof(bbold_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
font_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bbold_) -
    reinterpret_cast<char*>(&x_)) + sizeof(bbold_));
}

CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::~CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  font_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      font_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&x_)) + sizeof(b_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bbold_) -
        reinterpret_cast<char*>(&a_)) + sizeof(bbold_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 lineOffset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lineoffset(&has_bits);
          lineoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 r = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 g = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 a = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string font = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_font();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.font");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float size = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool bBold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_bbold(&has_bits);
          bbold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required int32 lineOffset = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lineoffset(), target);
  }

  // required string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_text(), target);
  }

  // required int32 r = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_r(), target);
  }

  // required int32 g = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_g(), target);
  }

  // required int32 b = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_b(), target);
  }

  // required int32 a = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_a(), target);
  }

  // required float duration = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_duration(), target);
  }

  // required string font = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font().data(), static_cast<int>(this->_internal_font().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty.font");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_font(), target);
  }

  // required float size = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_size(), target);
  }

  // required bool bBold = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_bbold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  size_t total_size = 0;

  if (_internal_has_text()) {
    // required string text = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  if (_internal_has_font()) {
    // required string font = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font());
  }

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_lineoffset()) {
    // required int32 lineOffset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineoffset());
  }

  if (_internal_has_r()) {
    // required int32 r = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  if (_internal_has_g()) {
    // required int32 g = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  if (_internal_has_b()) {
    // required int32 b = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (_internal_has_a()) {
    // required int32 a = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (_internal_has_duration()) {
    // required float duration = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_size()) {
    // required float size = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_bbold()) {
    // required bool bBold = 12;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required string text = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());

    // required string font = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font());

    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required int32 lineOffset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lineoffset());

    // required int32 r = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());

    // required int32 g = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());

    // required int32 b = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());

    // required int32 a = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());

    // required float duration = 9;
    total_size += 1 + 4;

    // required float size = 11;
    total_size += 1 + 4;

    // required bool bBold = 12;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_font(from._internal_font());
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      lineoffset_ = from.lineoffset_;
    }
    if (cached_has_bits & 0x00000020u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000040u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000080u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000200u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000400u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000800u) {
      bbold_ = from.bbold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  font_.Swap(&other->font_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, bbold_)
      + sizeof(CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::bbold_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugDrawBox::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_ScriptingDebugDrawBox>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& origin(const CMsgBotWorldState_Action_ScriptingDebugDrawBox* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBotWorldState_Vector& minimum(const CMsgBotWorldState_Action_ScriptingDebugDrawBox* msg);
  static void set_has_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Vector& maximum(const CMsgBotWorldState_Action_ScriptingDebugDrawBox* msg);
  static void set_has_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_r(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawBox::_Internal::origin(const CMsgBotWorldState_Action_ScriptingDebugDrawBox* msg) {
  return *msg->origin_;
}
const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawBox::_Internal::minimum(const CMsgBotWorldState_Action_ScriptingDebugDrawBox* msg) {
  return *msg->minimum_;
}
const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawBox::_Internal::maximum(const CMsgBotWorldState_Action_ScriptingDebugDrawBox* msg) {
  return *msg->maximum_;
}
CMsgBotWorldState_Action_ScriptingDebugDrawBox::CMsgBotWorldState_Action_ScriptingDebugDrawBox(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
}
CMsgBotWorldState_Action_ScriptingDebugDrawBox::CMsgBotWorldState_Action_ScriptingDebugDrawBox(const CMsgBotWorldState_Action_ScriptingDebugDrawBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::CMsgBotWorldState_Vector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_minimum()) {
    minimum_ = new ::CMsgBotWorldState_Vector(*from.minimum_);
  } else {
    minimum_ = nullptr;
  }
  if (from._internal_has_maximum()) {
    maximum_ = new ::CMsgBotWorldState_Vector(*from.maximum_);
  } else {
    maximum_ = nullptr;
  }
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&r_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(duration_));
}

CMsgBotWorldState_Action_ScriptingDebugDrawBox::~CMsgBotWorldState_Action_ScriptingDebugDrawBox() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete minimum_;
  if (this != internal_default_instance()) delete maximum_;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugDrawBox* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugDrawBox* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugDrawBox::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugDrawBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_ != nullptr);
      origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(minimum_ != nullptr);
      minimum_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(maximum_ != nullptr);
      maximum_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&r_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&r_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugDrawBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CMsgBotWorldState.Vector origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector minimum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector maximum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 r = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_r(&has_bits);
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 g = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_g(&has_bits);
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 b = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 a = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugDrawBox::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Vector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::origin(this), target, stream);
  }

  // required .CMsgBotWorldState.Vector minimum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::minimum(this), target, stream);
  }

  // required .CMsgBotWorldState.Vector maximum = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::maximum(this), target, stream);
  }

  // required int32 r = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_r(), target);
  }

  // required int32 g = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_g(), target);
  }

  // required int32 b = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_b(), target);
  }

  // required int32 a = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_a(), target);
  }

  // required float duration = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugDrawBox::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .CMsgBotWorldState.Vector origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  if (_internal_has_minimum()) {
    // required .CMsgBotWorldState.Vector minimum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimum_);
  }

  if (_internal_has_maximum()) {
    // required .CMsgBotWorldState.Vector maximum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximum_);
  }

  if (_internal_has_r()) {
    // required int32 r = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  if (_internal_has_g()) {
    // required int32 g = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  if (_internal_has_b()) {
    // required int32 b = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  if (_internal_has_a()) {
    // required int32 a = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (_internal_has_duration()) {
    // required float duration = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_ScriptingDebugDrawBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .CMsgBotWorldState.Vector origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);

    // required .CMsgBotWorldState.Vector minimum = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimum_);

    // required .CMsgBotWorldState.Vector maximum = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximum_);

    // required int32 r = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());

    // required int32 g = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());

    // required int32 b = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());

    // required int32 a = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());

    // required float duration = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugDrawBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugDrawBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_origin()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_minimum()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_minimum());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_maximum()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_maximum());
    }
    if (cached_has_bits & 0x00000008u) {
      r_ = from.r_;
    }
    if (cached_has_bits & 0x00000010u) {
      g_ = from.g_;
    }
    if (cached_has_bits & 0x00000020u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000040u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000080u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugDrawBox::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawBox::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugDrawBox* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawBox, duration_)
      + sizeof(CMsgBotWorldState_Action_ScriptingDebugDrawBox::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawBox, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugDrawBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugDrawCircle::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_ScriptingDebugDrawCircle>()._has_bits_);
  static const ::CMsgBotWorldState_Vector& center(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgBotWorldState_Vector& vrgb(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle* msg);
  static void set_has_vrgb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rad(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ztest(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawCircle::_Internal::center(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle* msg) {
  return *msg->center_;
}
const ::CMsgBotWorldState_Vector&
CMsgBotWorldState_Action_ScriptingDebugDrawCircle::_Internal::vrgb(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle* msg) {
  return *msg->vrgb_;
}
CMsgBotWorldState_Action_ScriptingDebugDrawCircle::CMsgBotWorldState_Action_ScriptingDebugDrawCircle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
}
CMsgBotWorldState_Action_ScriptingDebugDrawCircle::CMsgBotWorldState_Action_ScriptingDebugDrawCircle(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::CMsgBotWorldState_Vector(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_vrgb()) {
    vrgb_ = new ::CMsgBotWorldState_Vector(*from.vrgb_);
  } else {
    vrgb_ = nullptr;
  }
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&a_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&center_)) + sizeof(duration_));
}

CMsgBotWorldState_Action_ScriptingDebugDrawCircle::~CMsgBotWorldState_Action_ScriptingDebugDrawCircle() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete vrgb_;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugDrawCircle* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugDrawCircle* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vrgb_ != nullptr);
      vrgb_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&a_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugDrawCircle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CMsgBotWorldState.Vector center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .CMsgBotWorldState.Vector vRgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vrgb(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float rad = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_rad(&has_bits);
          rad_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required bool ztest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ztest(&has_bits);
          ztest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float duration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugDrawCircle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Vector center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // required .CMsgBotWorldState.Vector vRgb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vrgb(this), target, stream);
  }

  // required float a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_a(), target);
  }

  // required float rad = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_rad(), target);
  }

  // required bool ztest = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ztest(), target);
  }

  // required float duration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugDrawCircle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  size_t total_size = 0;

  if (_internal_has_center()) {
    // required .CMsgBotWorldState.Vector center = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (_internal_has_vrgb()) {
    // required .CMsgBotWorldState.Vector vRgb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrgb_);
  }

  if (_internal_has_a()) {
    // required float a = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_rad()) {
    // required float rad = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_ztest()) {
    // required bool ztest = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_duration()) {
    // required float duration = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgBotWorldState_Action_ScriptingDebugDrawCircle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .CMsgBotWorldState.Vector center = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);

    // required .CMsgBotWorldState.Vector vRgb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vrgb_);

    // required float a = 3;
    total_size += 1 + 4;

    // required float rad = 4;
    total_size += 1 + 4;

    // required bool ztest = 5;
    total_size += 1 + 1;

    // required float duration = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugDrawCircle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugDrawCircle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vrgb()->::CMsgBotWorldState_Vector::MergeFrom(from._internal_vrgb());
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      rad_ = from.rad_;
    }
    if (cached_has_bits & 0x00000010u) {
      ztest_ = from.ztest_;
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugDrawCircle::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawCircle::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugDrawCircle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawCircle, duration_)
      + sizeof(CMsgBotWorldState_Action_ScriptingDebugDrawCircle::duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action_ScriptingDebugDrawCircle, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugDrawCircle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_ScriptingDebugDrawClear::_Internal {
 public:
};

CMsgBotWorldState_Action_ScriptingDebugDrawClear::CMsgBotWorldState_Action_ScriptingDebugDrawClear(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
}
CMsgBotWorldState_Action_ScriptingDebugDrawClear::CMsgBotWorldState_Action_ScriptingDebugDrawClear(const CMsgBotWorldState_Action_ScriptingDebugDrawClear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::SharedCtor() {
}

CMsgBotWorldState_Action_ScriptingDebugDrawClear::~CMsgBotWorldState_Action_ScriptingDebugDrawClear() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_ScriptingDebugDrawClear* _this = reinterpret_cast< CMsgBotWorldState_Action_ScriptingDebugDrawClear* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_ScriptingDebugDrawClear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_ScriptingDebugDrawClear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_ScriptingDebugDrawClear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_ScriptingDebugDrawClear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  return target;
}

size_t CMsgBotWorldState_Action_ScriptingDebugDrawClear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_ScriptingDebugDrawClear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_ScriptingDebugDrawClear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::MergeFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawClear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::CopyFrom(const CMsgBotWorldState_Action_ScriptingDebugDrawClear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.ScriptingDebugDrawClear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_ScriptingDebugDrawClear::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Action_ScriptingDebugDrawClear::InternalSwap(CMsgBotWorldState_Action_ScriptingDebugDrawClear* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_ScriptingDebugDrawClear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_OceanWinGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_OceanWinGame>()._has_bits_);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reward(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_OceanWinGame::CMsgBotWorldState_Action_OceanWinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.OceanWinGame)
}
CMsgBotWorldState_Action_OceanWinGame::CMsgBotWorldState_Action_OceanWinGame(const CMsgBotWorldState_Action_OceanWinGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team()) {
    team_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team(), 
      GetArena());
  }
  reward_ = from.reward_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.OceanWinGame)
}

void CMsgBotWorldState_Action_OceanWinGame::SharedCtor() {
team_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reward_ = 0;
}

CMsgBotWorldState_Action_OceanWinGame::~CMsgBotWorldState_Action_OceanWinGame() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.OceanWinGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_OceanWinGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Action_OceanWinGame::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_OceanWinGame* _this = reinterpret_cast< CMsgBotWorldState_Action_OceanWinGame* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_OceanWinGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_OceanWinGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_OceanWinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.OceanWinGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_.ClearNonDefaultToEmpty();
  }
  reward_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_OceanWinGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_team();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgBotWorldState.Action.OceanWinGame.team");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float reward = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_reward(&has_bits);
          reward_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_OceanWinGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.OceanWinGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team().data(), static_cast<int>(this->_internal_team().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgBotWorldState.Action.OceanWinGame.team");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_team(), target);
  }

  // optional float reward = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_reward(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.OceanWinGame)
  return target;
}

size_t CMsgBotWorldState_Action_OceanWinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.OceanWinGame)
  size_t total_size = 0;

  // required string team = 1;
  if (_internal_has_team()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_team());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float reward = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_OceanWinGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.OceanWinGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_OceanWinGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_OceanWinGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.OceanWinGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.OceanWinGame)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_OceanWinGame::MergeFrom(const CMsgBotWorldState_Action_OceanWinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.OceanWinGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team(from._internal_team());
    }
    if (cached_has_bits & 0x00000002u) {
      reward_ = from.reward_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Action_OceanWinGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.OceanWinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_OceanWinGame::CopyFrom(const CMsgBotWorldState_Action_OceanWinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.OceanWinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_OceanWinGame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_OceanWinGame::InternalSwap(CMsgBotWorldState_Action_OceanWinGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_.Swap(&other->team_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(reward_, other->reward_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_OceanWinGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action_OceanReplayCorrectTime::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action_OceanReplayCorrectTime>()._has_bits_);
  static void set_has_delta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CMsgBotWorldState_Action_OceanReplayCorrectTime::CMsgBotWorldState_Action_OceanReplayCorrectTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action.OceanReplayCorrectTime)
}
CMsgBotWorldState_Action_OceanReplayCorrectTime::CMsgBotWorldState_Action_OceanReplayCorrectTime(const CMsgBotWorldState_Action_OceanReplayCorrectTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delta_ = from.delta_;
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action.OceanReplayCorrectTime)
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::SharedCtor() {
delta_ = 0;
}

CMsgBotWorldState_Action_OceanReplayCorrectTime::~CMsgBotWorldState_Action_OceanReplayCorrectTime() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::ArenaDtor(void* object) {
  CMsgBotWorldState_Action_OceanReplayCorrectTime* _this = reinterpret_cast< CMsgBotWorldState_Action_OceanReplayCorrectTime* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action_OceanReplayCorrectTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action_OceanReplayCorrectTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delta_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action_OceanReplayCorrectTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_delta(&has_bits);
          delta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action_OceanReplayCorrectTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float delta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  return target;
}

size_t CMsgBotWorldState_Action_OceanReplayCorrectTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  size_t total_size = 0;

  // required float delta = 1;
  if (_internal_has_delta()) {
    total_size += 1 + 4;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action_OceanReplayCorrectTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action_OceanReplayCorrectTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action.OceanReplayCorrectTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action.OceanReplayCorrectTime)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::MergeFrom(const CMsgBotWorldState_Action_OceanReplayCorrectTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_delta()) {
    _internal_set_delta(from._internal_delta());
  }
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::CopyFrom(const CMsgBotWorldState_Action_OceanReplayCorrectTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action.OceanReplayCorrectTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action_OceanReplayCorrectTime::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgBotWorldState_Action_OceanReplayCorrectTime::InternalSwap(CMsgBotWorldState_Action_OceanReplayCorrectTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(delta_, other->delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action_OceanReplayCorrectTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState_Action::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState_Action>()._has_bits_);
  static void set_has_actiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_actionid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_actiondelay(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgBotWorldState_Action_MoveToLocation& movetolocation(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_MoveToTarget& movetotarget(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_AttackMove& attackmove(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_AttackTarget& attacktarget(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_CastLocation& castlocation(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_CastTarget& casttarget(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_CastTree& casttree(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_Cast& cast(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_CastToggle& casttoggle(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_HoldLocation& holdlocation(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_TrainAbility& trainability(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_DropItem& dropitem(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_PickUpItem& pickupitem(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_PickupRune& pickuprune(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_PurchaseItem& purchaseitem(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_SellItem& sellitem(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_DisassembleItem& disassembleitem(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_SetCombineLockItem& setcombinelockitem(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_Stop& stop(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_Chat& chat(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_SwapItems& swapitems(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_UseShrine& useshrine(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_Courier& courier(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_GetActualIncomingDamage& getactualincomingdamage(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_GetEstimatedDamageToTarget& getestimateddamagetotarget(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_Glyph& glyph(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_SoftReset& softreset(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_Buyback& buyback(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugDrawText& scriptingdebugdrawtext(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugDrawLine& scriptingdebugdrawline(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText& scriptingdebugdrawscreentext(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugDrawBox& scriptingdebugdrawbox(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugDrawCircle& scriptingdebugdrawcircle(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugDrawClear& scriptingdebugdrawclear(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty& scriptingdebugscreentextpretty(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_MoveToLocation& movedirectly(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_OceanWinGame& oceanwingame(const CMsgBotWorldState_Action* msg);
  static const ::CMsgBotWorldState_Action_OceanReplayCorrectTime& oceanreplaycorrecttime(const CMsgBotWorldState_Action* msg);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::CMsgBotWorldState_Action_MoveToLocation&
CMsgBotWorldState_Action::_Internal::movetolocation(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.movetolocation_;
}
const ::CMsgBotWorldState_Action_MoveToTarget&
CMsgBotWorldState_Action::_Internal::movetotarget(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.movetotarget_;
}
const ::CMsgBotWorldState_Action_AttackMove&
CMsgBotWorldState_Action::_Internal::attackmove(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.attackmove_;
}
const ::CMsgBotWorldState_Action_AttackTarget&
CMsgBotWorldState_Action::_Internal::attacktarget(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.attacktarget_;
}
const ::CMsgBotWorldState_Action_CastLocation&
CMsgBotWorldState_Action::_Internal::castlocation(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.castlocation_;
}
const ::CMsgBotWorldState_Action_CastTarget&
CMsgBotWorldState_Action::_Internal::casttarget(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.casttarget_;
}
const ::CMsgBotWorldState_Action_CastTree&
CMsgBotWorldState_Action::_Internal::casttree(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.casttree_;
}
const ::CMsgBotWorldState_Action_Cast&
CMsgBotWorldState_Action::_Internal::cast(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.cast_;
}
const ::CMsgBotWorldState_Action_CastToggle&
CMsgBotWorldState_Action::_Internal::casttoggle(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.casttoggle_;
}
const ::CMsgBotWorldState_Action_HoldLocation&
CMsgBotWorldState_Action::_Internal::holdlocation(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.holdlocation_;
}
const ::CMsgBotWorldState_Action_TrainAbility&
CMsgBotWorldState_Action::_Internal::trainability(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.trainability_;
}
const ::CMsgBotWorldState_Action_DropItem&
CMsgBotWorldState_Action::_Internal::dropitem(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.dropitem_;
}
const ::CMsgBotWorldState_Action_PickUpItem&
CMsgBotWorldState_Action::_Internal::pickupitem(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.pickupitem_;
}
const ::CMsgBotWorldState_Action_PickupRune&
CMsgBotWorldState_Action::_Internal::pickuprune(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.pickuprune_;
}
const ::CMsgBotWorldState_Action_PurchaseItem&
CMsgBotWorldState_Action::_Internal::purchaseitem(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.purchaseitem_;
}
const ::CMsgBotWorldState_Action_SellItem&
CMsgBotWorldState_Action::_Internal::sellitem(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.sellitem_;
}
const ::CMsgBotWorldState_Action_DisassembleItem&
CMsgBotWorldState_Action::_Internal::disassembleitem(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.disassembleitem_;
}
const ::CMsgBotWorldState_Action_SetCombineLockItem&
CMsgBotWorldState_Action::_Internal::setcombinelockitem(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.setcombinelockitem_;
}
const ::CMsgBotWorldState_Action_Stop&
CMsgBotWorldState_Action::_Internal::stop(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.stop_;
}
const ::CMsgBotWorldState_Action_Chat&
CMsgBotWorldState_Action::_Internal::chat(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.chat_;
}
const ::CMsgBotWorldState_Action_SwapItems&
CMsgBotWorldState_Action::_Internal::swapitems(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.swapitems_;
}
const ::CMsgBotWorldState_Action_UseShrine&
CMsgBotWorldState_Action::_Internal::useshrine(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.useshrine_;
}
const ::CMsgBotWorldState_Action_Courier&
CMsgBotWorldState_Action::_Internal::courier(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.courier_;
}
const ::CMsgBotWorldState_Action_GetActualIncomingDamage&
CMsgBotWorldState_Action::_Internal::getactualincomingdamage(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.getactualincomingdamage_;
}
const ::CMsgBotWorldState_Action_GetEstimatedDamageToTarget&
CMsgBotWorldState_Action::_Internal::getestimateddamagetotarget(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.getestimateddamagetotarget_;
}
const ::CMsgBotWorldState_Action_Glyph&
CMsgBotWorldState_Action::_Internal::glyph(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.glyph_;
}
const ::CMsgBotWorldState_Action_SoftReset&
CMsgBotWorldState_Action::_Internal::softreset(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.softreset_;
}
const ::CMsgBotWorldState_Action_Buyback&
CMsgBotWorldState_Action::_Internal::buyback(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.buyback_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugDrawText&
CMsgBotWorldState_Action::_Internal::scriptingdebugdrawtext(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugdrawtext_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugDrawLine&
CMsgBotWorldState_Action::_Internal::scriptingdebugdrawline(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugdrawline_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText&
CMsgBotWorldState_Action::_Internal::scriptingdebugdrawscreentext(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugdrawscreentext_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugDrawBox&
CMsgBotWorldState_Action::_Internal::scriptingdebugdrawbox(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugdrawbox_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugDrawCircle&
CMsgBotWorldState_Action::_Internal::scriptingdebugdrawcircle(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugdrawcircle_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugDrawClear&
CMsgBotWorldState_Action::_Internal::scriptingdebugdrawclear(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugdrawclear_;
}
const ::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty&
CMsgBotWorldState_Action::_Internal::scriptingdebugscreentextpretty(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.scriptingdebugscreentextpretty_;
}
const ::CMsgBotWorldState_Action_MoveToLocation&
CMsgBotWorldState_Action::_Internal::movedirectly(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.movedirectly_;
}
const ::CMsgBotWorldState_Action_OceanWinGame&
CMsgBotWorldState_Action::_Internal::oceanwingame(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.oceanwingame_;
}
const ::CMsgBotWorldState_Action_OceanReplayCorrectTime&
CMsgBotWorldState_Action::_Internal::oceanreplaycorrecttime(const CMsgBotWorldState_Action* msg) {
  return *msg->ActionData_.oceanreplaycorrecttime_;
}
void CMsgBotWorldState_Action::set_allocated_movetolocation(::CMsgBotWorldState_Action_MoveToLocation* movetolocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (movetolocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(movetolocation);
    if (message_arena != submessage_arena) {
      movetolocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movetolocation, submessage_arena);
    }
    set_has_movetolocation();
    ActionData_.movetolocation_ = movetolocation;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.moveToLocation)
}
void CMsgBotWorldState_Action::set_allocated_movetotarget(::CMsgBotWorldState_Action_MoveToTarget* movetotarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (movetotarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(movetotarget);
    if (message_arena != submessage_arena) {
      movetotarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movetotarget, submessage_arena);
    }
    set_has_movetotarget();
    ActionData_.movetotarget_ = movetotarget;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.moveToTarget)
}
void CMsgBotWorldState_Action::set_allocated_attackmove(::CMsgBotWorldState_Action_AttackMove* attackmove) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (attackmove) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attackmove);
    if (message_arena != submessage_arena) {
      attackmove = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attackmove, submessage_arena);
    }
    set_has_attackmove();
    ActionData_.attackmove_ = attackmove;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.attackMove)
}
void CMsgBotWorldState_Action::set_allocated_attacktarget(::CMsgBotWorldState_Action_AttackTarget* attacktarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (attacktarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attacktarget);
    if (message_arena != submessage_arena) {
      attacktarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacktarget, submessage_arena);
    }
    set_has_attacktarget();
    ActionData_.attacktarget_ = attacktarget;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.attackTarget)
}
void CMsgBotWorldState_Action::set_allocated_castlocation(::CMsgBotWorldState_Action_CastLocation* castlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (castlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(castlocation);
    if (message_arena != submessage_arena) {
      castlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, castlocation, submessage_arena);
    }
    set_has_castlocation();
    ActionData_.castlocation_ = castlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.castLocation)
}
void CMsgBotWorldState_Action::set_allocated_casttarget(::CMsgBotWorldState_Action_CastTarget* casttarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (casttarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casttarget);
    if (message_arena != submessage_arena) {
      casttarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casttarget, submessage_arena);
    }
    set_has_casttarget();
    ActionData_.casttarget_ = casttarget;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.castTarget)
}
void CMsgBotWorldState_Action::set_allocated_casttree(::CMsgBotWorldState_Action_CastTree* casttree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (casttree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casttree);
    if (message_arena != submessage_arena) {
      casttree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casttree, submessage_arena);
    }
    set_has_casttree();
    ActionData_.casttree_ = casttree;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.castTree)
}
void CMsgBotWorldState_Action::set_allocated_cast(::CMsgBotWorldState_Action_Cast* cast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (cast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cast);
    if (message_arena != submessage_arena) {
      cast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cast, submessage_arena);
    }
    set_has_cast();
    ActionData_.cast_ = cast;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.cast)
}
void CMsgBotWorldState_Action::set_allocated_casttoggle(::CMsgBotWorldState_Action_CastToggle* casttoggle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (casttoggle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(casttoggle);
    if (message_arena != submessage_arena) {
      casttoggle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, casttoggle, submessage_arena);
    }
    set_has_casttoggle();
    ActionData_.casttoggle_ = casttoggle;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.castToggle)
}
void CMsgBotWorldState_Action::set_allocated_holdlocation(::CMsgBotWorldState_Action_HoldLocation* holdlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (holdlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(holdlocation);
    if (message_arena != submessage_arena) {
      holdlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, holdlocation, submessage_arena);
    }
    set_has_holdlocation();
    ActionData_.holdlocation_ = holdlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.holdLocation)
}
void CMsgBotWorldState_Action::set_allocated_trainability(::CMsgBotWorldState_Action_TrainAbility* trainability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (trainability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trainability);
    if (message_arena != submessage_arena) {
      trainability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trainability, submessage_arena);
    }
    set_has_trainability();
    ActionData_.trainability_ = trainability;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.trainAbility)
}
void CMsgBotWorldState_Action::set_allocated_dropitem(::CMsgBotWorldState_Action_DropItem* dropitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (dropitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dropitem);
    if (message_arena != submessage_arena) {
      dropitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dropitem, submessage_arena);
    }
    set_has_dropitem();
    ActionData_.dropitem_ = dropitem;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.dropItem)
}
void CMsgBotWorldState_Action::set_allocated_pickupitem(::CMsgBotWorldState_Action_PickUpItem* pickupitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (pickupitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pickupitem);
    if (message_arena != submessage_arena) {
      pickupitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pickupitem, submessage_arena);
    }
    set_has_pickupitem();
    ActionData_.pickupitem_ = pickupitem;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.pickUpItem)
}
void CMsgBotWorldState_Action::set_allocated_pickuprune(::CMsgBotWorldState_Action_PickupRune* pickuprune) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (pickuprune) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pickuprune);
    if (message_arena != submessage_arena) {
      pickuprune = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pickuprune, submessage_arena);
    }
    set_has_pickuprune();
    ActionData_.pickuprune_ = pickuprune;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.pickupRune)
}
void CMsgBotWorldState_Action::set_allocated_purchaseitem(::CMsgBotWorldState_Action_PurchaseItem* purchaseitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (purchaseitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(purchaseitem);
    if (message_arena != submessage_arena) {
      purchaseitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, purchaseitem, submessage_arena);
    }
    set_has_purchaseitem();
    ActionData_.purchaseitem_ = purchaseitem;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.purchaseItem)
}
void CMsgBotWorldState_Action::set_allocated_sellitem(::CMsgBotWorldState_Action_SellItem* sellitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (sellitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sellitem);
    if (message_arena != submessage_arena) {
      sellitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sellitem, submessage_arena);
    }
    set_has_sellitem();
    ActionData_.sellitem_ = sellitem;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.sellItem)
}
void CMsgBotWorldState_Action::set_allocated_disassembleitem(::CMsgBotWorldState_Action_DisassembleItem* disassembleitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (disassembleitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(disassembleitem);
    if (message_arena != submessage_arena) {
      disassembleitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disassembleitem, submessage_arena);
    }
    set_has_disassembleitem();
    ActionData_.disassembleitem_ = disassembleitem;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.disassembleItem)
}
void CMsgBotWorldState_Action::set_allocated_setcombinelockitem(::CMsgBotWorldState_Action_SetCombineLockItem* setcombinelockitem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (setcombinelockitem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setcombinelockitem);
    if (message_arena != submessage_arena) {
      setcombinelockitem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setcombinelockitem, submessage_arena);
    }
    set_has_setcombinelockitem();
    ActionData_.setcombinelockitem_ = setcombinelockitem;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.setCombineLockItem)
}
void CMsgBotWorldState_Action::set_allocated_stop(::CMsgBotWorldState_Action_Stop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    ActionData_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.stop)
}
void CMsgBotWorldState_Action::set_allocated_chat(::CMsgBotWorldState_Action_Chat* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chat);
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    set_has_chat();
    ActionData_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.chat)
}
void CMsgBotWorldState_Action::set_allocated_swapitems(::CMsgBotWorldState_Action_SwapItems* swapitems) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (swapitems) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(swapitems);
    if (message_arena != submessage_arena) {
      swapitems = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapitems, submessage_arena);
    }
    set_has_swapitems();
    ActionData_.swapitems_ = swapitems;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.swapItems)
}
void CMsgBotWorldState_Action::set_allocated_useshrine(::CMsgBotWorldState_Action_UseShrine* useshrine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (useshrine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(useshrine);
    if (message_arena != submessage_arena) {
      useshrine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, useshrine, submessage_arena);
    }
    set_has_useshrine();
    ActionData_.useshrine_ = useshrine;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.useShrine)
}
void CMsgBotWorldState_Action::set_allocated_courier(::CMsgBotWorldState_Action_Courier* courier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (courier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(courier);
    if (message_arena != submessage_arena) {
      courier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, courier, submessage_arena);
    }
    set_has_courier();
    ActionData_.courier_ = courier;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.courier)
}
void CMsgBotWorldState_Action::set_allocated_getactualincomingdamage(::CMsgBotWorldState_Action_GetActualIncomingDamage* getactualincomingdamage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (getactualincomingdamage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getactualincomingdamage);
    if (message_arena != submessage_arena) {
      getactualincomingdamage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getactualincomingdamage, submessage_arena);
    }
    set_has_getactualincomingdamage();
    ActionData_.getactualincomingdamage_ = getactualincomingdamage;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.getActualIncomingDamage)
}
void CMsgBotWorldState_Action::set_allocated_getestimateddamagetotarget(::CMsgBotWorldState_Action_GetEstimatedDamageToTarget* getestimateddamagetotarget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (getestimateddamagetotarget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(getestimateddamagetotarget);
    if (message_arena != submessage_arena) {
      getestimateddamagetotarget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getestimateddamagetotarget, submessage_arena);
    }
    set_has_getestimateddamagetotarget();
    ActionData_.getestimateddamagetotarget_ = getestimateddamagetotarget;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.getEstimatedDamageToTarget)
}
void CMsgBotWorldState_Action::set_allocated_glyph(::CMsgBotWorldState_Action_Glyph* glyph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (glyph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(glyph);
    if (message_arena != submessage_arena) {
      glyph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, glyph, submessage_arena);
    }
    set_has_glyph();
    ActionData_.glyph_ = glyph;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.glyph)
}
void CMsgBotWorldState_Action::set_allocated_softreset(::CMsgBotWorldState_Action_SoftReset* softreset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (softreset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(softreset);
    if (message_arena != submessage_arena) {
      softreset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softreset, submessage_arena);
    }
    set_has_softreset();
    ActionData_.softreset_ = softreset;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.softReset)
}
void CMsgBotWorldState_Action::set_allocated_buyback(::CMsgBotWorldState_Action_Buyback* buyback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (buyback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(buyback);
    if (message_arena != submessage_arena) {
      buyback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buyback, submessage_arena);
    }
    set_has_buyback();
    ActionData_.buyback_ = buyback;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.buyback)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugdrawtext(::CMsgBotWorldState_Action_ScriptingDebugDrawText* scriptingdebugdrawtext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugdrawtext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugdrawtext);
    if (message_arena != submessage_arena) {
      scriptingdebugdrawtext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugdrawtext, submessage_arena);
    }
    set_has_scriptingdebugdrawtext();
    ActionData_.scriptingdebugdrawtext_ = scriptingdebugdrawtext;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugDrawText)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugdrawline(::CMsgBotWorldState_Action_ScriptingDebugDrawLine* scriptingdebugdrawline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugdrawline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugdrawline);
    if (message_arena != submessage_arena) {
      scriptingdebugdrawline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugdrawline, submessage_arena);
    }
    set_has_scriptingdebugdrawline();
    ActionData_.scriptingdebugdrawline_ = scriptingdebugdrawline;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugDrawLine)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugdrawscreentext(::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText* scriptingdebugdrawscreentext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugdrawscreentext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugdrawscreentext);
    if (message_arena != submessage_arena) {
      scriptingdebugdrawscreentext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugdrawscreentext, submessage_arena);
    }
    set_has_scriptingdebugdrawscreentext();
    ActionData_.scriptingdebugdrawscreentext_ = scriptingdebugdrawscreentext;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugDrawScreenText)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugdrawbox(::CMsgBotWorldState_Action_ScriptingDebugDrawBox* scriptingdebugdrawbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugdrawbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugdrawbox);
    if (message_arena != submessage_arena) {
      scriptingdebugdrawbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugdrawbox, submessage_arena);
    }
    set_has_scriptingdebugdrawbox();
    ActionData_.scriptingdebugdrawbox_ = scriptingdebugdrawbox;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugDrawBox)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugdrawcircle(::CMsgBotWorldState_Action_ScriptingDebugDrawCircle* scriptingdebugdrawcircle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugdrawcircle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugdrawcircle);
    if (message_arena != submessage_arena) {
      scriptingdebugdrawcircle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugdrawcircle, submessage_arena);
    }
    set_has_scriptingdebugdrawcircle();
    ActionData_.scriptingdebugdrawcircle_ = scriptingdebugdrawcircle;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugDrawCircle)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugdrawclear(::CMsgBotWorldState_Action_ScriptingDebugDrawClear* scriptingdebugdrawclear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugdrawclear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugdrawclear);
    if (message_arena != submessage_arena) {
      scriptingdebugdrawclear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugdrawclear, submessage_arena);
    }
    set_has_scriptingdebugdrawclear();
    ActionData_.scriptingdebugdrawclear_ = scriptingdebugdrawclear;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugDrawClear)
}
void CMsgBotWorldState_Action::set_allocated_scriptingdebugscreentextpretty(::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty* scriptingdebugscreentextpretty) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (scriptingdebugscreentextpretty) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scriptingdebugscreentextpretty);
    if (message_arena != submessage_arena) {
      scriptingdebugscreentextpretty = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptingdebugscreentextpretty, submessage_arena);
    }
    set_has_scriptingdebugscreentextpretty();
    ActionData_.scriptingdebugscreentextpretty_ = scriptingdebugscreentextpretty;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.scriptingDebugScreenTextPretty)
}
void CMsgBotWorldState_Action::set_allocated_movedirectly(::CMsgBotWorldState_Action_MoveToLocation* movedirectly) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (movedirectly) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(movedirectly);
    if (message_arena != submessage_arena) {
      movedirectly = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, movedirectly, submessage_arena);
    }
    set_has_movedirectly();
    ActionData_.movedirectly_ = movedirectly;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.moveDirectly)
}
void CMsgBotWorldState_Action::set_allocated_oceanwingame(::CMsgBotWorldState_Action_OceanWinGame* oceanwingame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (oceanwingame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oceanwingame);
    if (message_arena != submessage_arena) {
      oceanwingame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oceanwingame, submessage_arena);
    }
    set_has_oceanwingame();
    ActionData_.oceanwingame_ = oceanwingame;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.oceanWinGame)
}
void CMsgBotWorldState_Action::set_allocated_oceanreplaycorrecttime(::CMsgBotWorldState_Action_OceanReplayCorrectTime* oceanreplaycorrecttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_ActionData();
  if (oceanreplaycorrecttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oceanreplaycorrecttime);
    if (message_arena != submessage_arena) {
      oceanreplaycorrecttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oceanreplaycorrecttime, submessage_arena);
    }
    set_has_oceanreplaycorrecttime();
    ActionData_.oceanreplaycorrecttime_ = oceanreplaycorrecttime;
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgBotWorldState.Action.oceanReplayCorrectTime)
}
CMsgBotWorldState_Action::CMsgBotWorldState_Action(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState.Action)
}
CMsgBotWorldState_Action::CMsgBotWorldState_Action(const CMsgBotWorldState_Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&actiontype_, &from.actiontype_,
    static_cast<size_t>(reinterpret_cast<char*>(&actionid_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(actionid_));
  clear_has_ActionData();
  switch (from.ActionData_case()) {
    case kMoveToLocation: {
      _internal_mutable_movetolocation()->::CMsgBotWorldState_Action_MoveToLocation::MergeFrom(from._internal_movetolocation());
      break;
    }
    case kMoveToTarget: {
      _internal_mutable_movetotarget()->::CMsgBotWorldState_Action_MoveToTarget::MergeFrom(from._internal_movetotarget());
      break;
    }
    case kAttackMove: {
      _internal_mutable_attackmove()->::CMsgBotWorldState_Action_AttackMove::MergeFrom(from._internal_attackmove());
      break;
    }
    case kAttackTarget: {
      _internal_mutable_attacktarget()->::CMsgBotWorldState_Action_AttackTarget::MergeFrom(from._internal_attacktarget());
      break;
    }
    case kCastLocation: {
      _internal_mutable_castlocation()->::CMsgBotWorldState_Action_CastLocation::MergeFrom(from._internal_castlocation());
      break;
    }
    case kCastTarget: {
      _internal_mutable_casttarget()->::CMsgBotWorldState_Action_CastTarget::MergeFrom(from._internal_casttarget());
      break;
    }
    case kCastTree: {
      _internal_mutable_casttree()->::CMsgBotWorldState_Action_CastTree::MergeFrom(from._internal_casttree());
      break;
    }
    case kCast: {
      _internal_mutable_cast()->::CMsgBotWorldState_Action_Cast::MergeFrom(from._internal_cast());
      break;
    }
    case kCastToggle: {
      _internal_mutable_casttoggle()->::CMsgBotWorldState_Action_CastToggle::MergeFrom(from._internal_casttoggle());
      break;
    }
    case kHoldLocation: {
      _internal_mutable_holdlocation()->::CMsgBotWorldState_Action_HoldLocation::MergeFrom(from._internal_holdlocation());
      break;
    }
    case kTrainAbility: {
      _internal_mutable_trainability()->::CMsgBotWorldState_Action_TrainAbility::MergeFrom(from._internal_trainability());
      break;
    }
    case kDropItem: {
      _internal_mutable_dropitem()->::CMsgBotWorldState_Action_DropItem::MergeFrom(from._internal_dropitem());
      break;
    }
    case kPickUpItem: {
      _internal_mutable_pickupitem()->::CMsgBotWorldState_Action_PickUpItem::MergeFrom(from._internal_pickupitem());
      break;
    }
    case kPickupRune: {
      _internal_mutable_pickuprune()->::CMsgBotWorldState_Action_PickupRune::MergeFrom(from._internal_pickuprune());
      break;
    }
    case kPurchaseItem: {
      _internal_mutable_purchaseitem()->::CMsgBotWorldState_Action_PurchaseItem::MergeFrom(from._internal_purchaseitem());
      break;
    }
    case kSellItem: {
      _internal_mutable_sellitem()->::CMsgBotWorldState_Action_SellItem::MergeFrom(from._internal_sellitem());
      break;
    }
    case kDisassembleItem: {
      _internal_mutable_disassembleitem()->::CMsgBotWorldState_Action_DisassembleItem::MergeFrom(from._internal_disassembleitem());
      break;
    }
    case kSetCombineLockItem: {
      _internal_mutable_setcombinelockitem()->::CMsgBotWorldState_Action_SetCombineLockItem::MergeFrom(from._internal_setcombinelockitem());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::CMsgBotWorldState_Action_Stop::MergeFrom(from._internal_stop());
      break;
    }
    case kChat: {
      _internal_mutable_chat()->::CMsgBotWorldState_Action_Chat::MergeFrom(from._internal_chat());
      break;
    }
    case kSwapItems: {
      _internal_mutable_swapitems()->::CMsgBotWorldState_Action_SwapItems::MergeFrom(from._internal_swapitems());
      break;
    }
    case kUseShrine: {
      _internal_mutable_useshrine()->::CMsgBotWorldState_Action_UseShrine::MergeFrom(from._internal_useshrine());
      break;
    }
    case kCourier: {
      _internal_mutable_courier()->::CMsgBotWorldState_Action_Courier::MergeFrom(from._internal_courier());
      break;
    }
    case kGetActualIncomingDamage: {
      _internal_mutable_getactualincomingdamage()->::CMsgBotWorldState_Action_GetActualIncomingDamage::MergeFrom(from._internal_getactualincomingdamage());
      break;
    }
    case kGetEstimatedDamageToTarget: {
      _internal_mutable_getestimateddamagetotarget()->::CMsgBotWorldState_Action_GetEstimatedDamageToTarget::MergeFrom(from._internal_getestimateddamagetotarget());
      break;
    }
    case kGlyph: {
      _internal_mutable_glyph()->::CMsgBotWorldState_Action_Glyph::MergeFrom(from._internal_glyph());
      break;
    }
    case kSoftReset: {
      _internal_mutable_softreset()->::CMsgBotWorldState_Action_SoftReset::MergeFrom(from._internal_softreset());
      break;
    }
    case kBuyback: {
      _internal_mutable_buyback()->::CMsgBotWorldState_Action_Buyback::MergeFrom(from._internal_buyback());
      break;
    }
    case kScriptingDebugDrawText: {
      _internal_mutable_scriptingdebugdrawtext()->::CMsgBotWorldState_Action_ScriptingDebugDrawText::MergeFrom(from._internal_scriptingdebugdrawtext());
      break;
    }
    case kScriptingDebugDrawLine: {
      _internal_mutable_scriptingdebugdrawline()->::CMsgBotWorldState_Action_ScriptingDebugDrawLine::MergeFrom(from._internal_scriptingdebugdrawline());
      break;
    }
    case kScriptingDebugDrawScreenText: {
      _internal_mutable_scriptingdebugdrawscreentext()->::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::MergeFrom(from._internal_scriptingdebugdrawscreentext());
      break;
    }
    case kScriptingDebugDrawBox: {
      _internal_mutable_scriptingdebugdrawbox()->::CMsgBotWorldState_Action_ScriptingDebugDrawBox::MergeFrom(from._internal_scriptingdebugdrawbox());
      break;
    }
    case kScriptingDebugDrawCircle: {
      _internal_mutable_scriptingdebugdrawcircle()->::CMsgBotWorldState_Action_ScriptingDebugDrawCircle::MergeFrom(from._internal_scriptingdebugdrawcircle());
      break;
    }
    case kScriptingDebugDrawClear: {
      _internal_mutable_scriptingdebugdrawclear()->::CMsgBotWorldState_Action_ScriptingDebugDrawClear::MergeFrom(from._internal_scriptingdebugdrawclear());
      break;
    }
    case kScriptingDebugScreenTextPretty: {
      _internal_mutable_scriptingdebugscreentextpretty()->::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::MergeFrom(from._internal_scriptingdebugscreentextpretty());
      break;
    }
    case kMoveDirectly: {
      _internal_mutable_movedirectly()->::CMsgBotWorldState_Action_MoveToLocation::MergeFrom(from._internal_movedirectly());
      break;
    }
    case kOceanWinGame: {
      _internal_mutable_oceanwingame()->::CMsgBotWorldState_Action_OceanWinGame::MergeFrom(from._internal_oceanwingame());
      break;
    }
    case kOceanReplayCorrectTime: {
      _internal_mutable_oceanreplaycorrecttime()->::CMsgBotWorldState_Action_OceanReplayCorrectTime::MergeFrom(from._internal_oceanreplaycorrecttime());
      break;
    }
    case ACTIONDATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState.Action)
}

void CMsgBotWorldState_Action::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&actiontype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&actiondelay_) -
    reinterpret_cast<char*>(&actiontype_)) + sizeof(actiondelay_));
player_ = -1;
actionid_ = -1;
clear_has_ActionData();
}

CMsgBotWorldState_Action::~CMsgBotWorldState_Action() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState.Action)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState_Action::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_ActionData()) {
    clear_ActionData();
  }
}

void CMsgBotWorldState_Action::ArenaDtor(void* object) {
  CMsgBotWorldState_Action* _this = reinterpret_cast< CMsgBotWorldState_Action* >(object);
  (void)_this;
}
void CMsgBotWorldState_Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState_Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState_Action::clear_ActionData() {
// @@protoc_insertion_point(one_of_clear_start:CMsgBotWorldState.Action)
  switch (ActionData_case()) {
    case kMoveToLocation: {
      if (GetArena() == nullptr) {
        delete ActionData_.movetolocation_;
      }
      break;
    }
    case kMoveToTarget: {
      if (GetArena() == nullptr) {
        delete ActionData_.movetotarget_;
      }
      break;
    }
    case kAttackMove: {
      if (GetArena() == nullptr) {
        delete ActionData_.attackmove_;
      }
      break;
    }
    case kAttackTarget: {
      if (GetArena() == nullptr) {
        delete ActionData_.attacktarget_;
      }
      break;
    }
    case kCastLocation: {
      if (GetArena() == nullptr) {
        delete ActionData_.castlocation_;
      }
      break;
    }
    case kCastTarget: {
      if (GetArena() == nullptr) {
        delete ActionData_.casttarget_;
      }
      break;
    }
    case kCastTree: {
      if (GetArena() == nullptr) {
        delete ActionData_.casttree_;
      }
      break;
    }
    case kCast: {
      if (GetArena() == nullptr) {
        delete ActionData_.cast_;
      }
      break;
    }
    case kCastToggle: {
      if (GetArena() == nullptr) {
        delete ActionData_.casttoggle_;
      }
      break;
    }
    case kHoldLocation: {
      if (GetArena() == nullptr) {
        delete ActionData_.holdlocation_;
      }
      break;
    }
    case kTrainAbility: {
      if (GetArena() == nullptr) {
        delete ActionData_.trainability_;
      }
      break;
    }
    case kDropItem: {
      if (GetArena() == nullptr) {
        delete ActionData_.dropitem_;
      }
      break;
    }
    case kPickUpItem: {
      if (GetArena() == nullptr) {
        delete ActionData_.pickupitem_;
      }
      break;
    }
    case kPickupRune: {
      if (GetArena() == nullptr) {
        delete ActionData_.pickuprune_;
      }
      break;
    }
    case kPurchaseItem: {
      if (GetArena() == nullptr) {
        delete ActionData_.purchaseitem_;
      }
      break;
    }
    case kSellItem: {
      if (GetArena() == nullptr) {
        delete ActionData_.sellitem_;
      }
      break;
    }
    case kDisassembleItem: {
      if (GetArena() == nullptr) {
        delete ActionData_.disassembleitem_;
      }
      break;
    }
    case kSetCombineLockItem: {
      if (GetArena() == nullptr) {
        delete ActionData_.setcombinelockitem_;
      }
      break;
    }
    case kStop: {
      if (GetArena() == nullptr) {
        delete ActionData_.stop_;
      }
      break;
    }
    case kChat: {
      if (GetArena() == nullptr) {
        delete ActionData_.chat_;
      }
      break;
    }
    case kSwapItems: {
      if (GetArena() == nullptr) {
        delete ActionData_.swapitems_;
      }
      break;
    }
    case kUseShrine: {
      if (GetArena() == nullptr) {
        delete ActionData_.useshrine_;
      }
      break;
    }
    case kCourier: {
      if (GetArena() == nullptr) {
        delete ActionData_.courier_;
      }
      break;
    }
    case kGetActualIncomingDamage: {
      if (GetArena() == nullptr) {
        delete ActionData_.getactualincomingdamage_;
      }
      break;
    }
    case kGetEstimatedDamageToTarget: {
      if (GetArena() == nullptr) {
        delete ActionData_.getestimateddamagetotarget_;
      }
      break;
    }
    case kGlyph: {
      if (GetArena() == nullptr) {
        delete ActionData_.glyph_;
      }
      break;
    }
    case kSoftReset: {
      if (GetArena() == nullptr) {
        delete ActionData_.softreset_;
      }
      break;
    }
    case kBuyback: {
      if (GetArena() == nullptr) {
        delete ActionData_.buyback_;
      }
      break;
    }
    case kScriptingDebugDrawText: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugdrawtext_;
      }
      break;
    }
    case kScriptingDebugDrawLine: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugdrawline_;
      }
      break;
    }
    case kScriptingDebugDrawScreenText: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugdrawscreentext_;
      }
      break;
    }
    case kScriptingDebugDrawBox: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugdrawbox_;
      }
      break;
    }
    case kScriptingDebugDrawCircle: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugdrawcircle_;
      }
      break;
    }
    case kScriptingDebugDrawClear: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugdrawclear_;
      }
      break;
    }
    case kScriptingDebugScreenTextPretty: {
      if (GetArena() == nullptr) {
        delete ActionData_.scriptingdebugscreentextpretty_;
      }
      break;
    }
    case kMoveDirectly: {
      if (GetArena() == nullptr) {
        delete ActionData_.movedirectly_;
      }
      break;
    }
    case kOceanWinGame: {
      if (GetArena() == nullptr) {
        delete ActionData_.oceanwingame_;
      }
      break;
    }
    case kOceanReplayCorrectTime: {
      if (GetArena() == nullptr) {
        delete ActionData_.oceanreplaycorrecttime_;
      }
      break;
    }
    case ACTIONDATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTIONDATA_NOT_SET;
}


void CMsgBotWorldState_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&actiontype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&actiondelay_) -
        reinterpret_cast<char*>(&actiontype_)) + sizeof(actiondelay_));
    player_ = -1;
    actionid_ = -1;
  }
  clear_ActionData();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState_Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .CMsgBotWorldState.Action.Type actionType = 1 [default = DOTA_UNIT_ORDER_NONE];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgBotWorldState_Action_Type_IsValid(val))) {
            _internal_set_actiontype(static_cast<::CMsgBotWorldState_Action_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 player = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player(&has_bits);
          player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 actionID = 4 [default = -1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_actionid(&has_bits);
          actionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 actionDelay = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_actiondelay(&has_bits);
          actiondelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.MoveToLocation moveToLocation = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_movetolocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.MoveToTarget moveToTarget = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_movetotarget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.AttackMove attackMove = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_attackmove(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.AttackTarget attackTarget = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_attacktarget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.CastLocation castLocation = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_castlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.CastTarget castTarget = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_casttarget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.CastTree castTree = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_casttree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.Cast cast = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cast(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.CastToggle castToggle = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_casttoggle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.HoldLocation holdLocation = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_holdlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.TrainAbility trainAbility = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_trainability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.DropItem dropItem = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.PickUpItem pickUpItem = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pickupitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.PickupRune pickupRune = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pickuprune(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.PurchaseItem purchaseItem = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_purchaseitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.SellItem sellItem = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_sellitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.DisassembleItem disassembleItem = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_disassembleitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.Stop stop = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.SetCombineLockItem setCombineLockItem = 132;
      case 132:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_setcombinelockitem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.Chat chat = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.SwapItems swapItems = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapitems(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.UseShrine useShrine = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_useshrine(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.Courier courier = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_courier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.GetActualIncomingDamage getActualIncomingDamage = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_getactualincomingdamage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.GetEstimatedDamageToTarget getEstimatedDamageToTarget = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_getestimateddamagetotarget(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.Glyph glyph = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_glyph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.SoftReset softReset = 148;
      case 148:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_softreset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.Buyback buyback = 149;
      case 149:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyback(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugDrawText scriptingDebugDrawText = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugdrawtext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugDrawLine scriptingDebugDrawLine = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugdrawline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugDrawScreenText scriptingDebugDrawScreenText = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugdrawscreentext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugDrawBox scriptingDebugDrawBox = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugdrawbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugDrawCircle scriptingDebugDrawCircle = 154;
      case 154:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugdrawcircle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugDrawClear scriptingDebugDrawClear = 155;
      case 155:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugdrawclear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.MoveToLocation moveDirectly = 156;
      case 156:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_movedirectly(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.OceanWinGame oceanWinGame = 157;
      case 157:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_oceanwingame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.OceanReplayCorrectTime oceanReplayCorrectTime = 158;
      case 158:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_oceanreplaycorrecttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty scriptingDebugScreenTextPretty = 159;
      case 159:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_scriptingdebugscreentextpretty(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState_Action::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .CMsgBotWorldState.Action.Type actionType = 1 [default = DOTA_UNIT_ORDER_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_actiontype(), target);
  }

  // optional int32 player = 2 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player(), target);
  }

  // optional int32 actionID = 4 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_actionid(), target);
  }

  // optional int32 actionDelay = 10 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_actiondelay(), target);
  }

  switch (ActionData_case()) {
    case kMoveToLocation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          101, _Internal::movetolocation(this), target, stream);
      break;
    }
    case kMoveToTarget: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          102, _Internal::movetotarget(this), target, stream);
      break;
    }
    case kAttackMove: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          103, _Internal::attackmove(this), target, stream);
      break;
    }
    case kAttackTarget: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          104, _Internal::attacktarget(this), target, stream);
      break;
    }
    case kCastLocation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          105, _Internal::castlocation(this), target, stream);
      break;
    }
    case kCastTarget: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          106, _Internal::casttarget(this), target, stream);
      break;
    }
    case kCastTree: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          107, _Internal::casttree(this), target, stream);
      break;
    }
    case kCast: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          108, _Internal::cast(this), target, stream);
      break;
    }
    case kCastToggle: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          109, _Internal::casttoggle(this), target, stream);
      break;
    }
    case kHoldLocation: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          110, _Internal::holdlocation(this), target, stream);
      break;
    }
    case kTrainAbility: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          111, _Internal::trainability(this), target, stream);
      break;
    }
    case kDropItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          112, _Internal::dropitem(this), target, stream);
      break;
    }
    case kPickUpItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          114, _Internal::pickupitem(this), target, stream);
      break;
    }
    case kPickupRune: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          115, _Internal::pickuprune(this), target, stream);
      break;
    }
    case kPurchaseItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          116, _Internal::purchaseitem(this), target, stream);
      break;
    }
    case kSellItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          117, _Internal::sellitem(this), target, stream);
      break;
    }
    case kDisassembleItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          118, _Internal::disassembleitem(this), target, stream);
      break;
    }
    case kStop: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          121, _Internal::stop(this), target, stream);
      break;
    }
    case kSetCombineLockItem: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          132, _Internal::setcombinelockitem(this), target, stream);
      break;
    }
    case kChat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          140, _Internal::chat(this), target, stream);
      break;
    }
    case kSwapItems: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          141, _Internal::swapitems(this), target, stream);
      break;
    }
    case kUseShrine: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          142, _Internal::useshrine(this), target, stream);
      break;
    }
    case kCourier: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          143, _Internal::courier(this), target, stream);
      break;
    }
    case kGetActualIncomingDamage: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          144, _Internal::getactualincomingdamage(this), target, stream);
      break;
    }
    case kGetEstimatedDamageToTarget: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          145, _Internal::getestimateddamagetotarget(this), target, stream);
      break;
    }
    case kGlyph: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          146, _Internal::glyph(this), target, stream);
      break;
    }
    case kSoftReset: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          148, _Internal::softreset(this), target, stream);
      break;
    }
    case kBuyback: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          149, _Internal::buyback(this), target, stream);
      break;
    }
    case kScriptingDebugDrawText: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          150, _Internal::scriptingdebugdrawtext(this), target, stream);
      break;
    }
    case kScriptingDebugDrawLine: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          151, _Internal::scriptingdebugdrawline(this), target, stream);
      break;
    }
    case kScriptingDebugDrawScreenText: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          152, _Internal::scriptingdebugdrawscreentext(this), target, stream);
      break;
    }
    case kScriptingDebugDrawBox: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          153, _Internal::scriptingdebugdrawbox(this), target, stream);
      break;
    }
    case kScriptingDebugDrawCircle: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          154, _Internal::scriptingdebugdrawcircle(this), target, stream);
      break;
    }
    case kScriptingDebugDrawClear: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          155, _Internal::scriptingdebugdrawclear(this), target, stream);
      break;
    }
    case kMoveDirectly: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          156, _Internal::movedirectly(this), target, stream);
      break;
    }
    case kOceanWinGame: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          157, _Internal::oceanwingame(this), target, stream);
      break;
    }
    case kOceanReplayCorrectTime: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          158, _Internal::oceanreplaycorrecttime(this), target, stream);
      break;
    }
    case kScriptingDebugScreenTextPretty: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          159, _Internal::scriptingdebugscreentextpretty(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState.Action)
  return target;
}

size_t CMsgBotWorldState_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState.Action)
  size_t total_size = 0;

  // required .CMsgBotWorldState.Action.Type actionType = 1 [default = DOTA_UNIT_ORDER_NONE];
  if (_internal_has_actiontype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_actiontype());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional int32 actionDelay = 10 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_actiondelay());
    }

    // optional int32 player = 2 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player());
    }

    // optional int32 actionID = 4 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_actionid());
    }

  }
  switch (ActionData_case()) {
    // .CMsgBotWorldState.Action.MoveToLocation moveToLocation = 101;
    case kMoveToLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.movetolocation_);
      break;
    }
    // .CMsgBotWorldState.Action.MoveToTarget moveToTarget = 102;
    case kMoveToTarget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.movetotarget_);
      break;
    }
    // .CMsgBotWorldState.Action.AttackMove attackMove = 103;
    case kAttackMove: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.attackmove_);
      break;
    }
    // .CMsgBotWorldState.Action.AttackTarget attackTarget = 104;
    case kAttackTarget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.attacktarget_);
      break;
    }
    // .CMsgBotWorldState.Action.CastLocation castLocation = 105;
    case kCastLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.castlocation_);
      break;
    }
    // .CMsgBotWorldState.Action.CastTarget castTarget = 106;
    case kCastTarget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.casttarget_);
      break;
    }
    // .CMsgBotWorldState.Action.CastTree castTree = 107;
    case kCastTree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.casttree_);
      break;
    }
    // .CMsgBotWorldState.Action.Cast cast = 108;
    case kCast: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.cast_);
      break;
    }
    // .CMsgBotWorldState.Action.CastToggle castToggle = 109;
    case kCastToggle: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.casttoggle_);
      break;
    }
    // .CMsgBotWorldState.Action.HoldLocation holdLocation = 110;
    case kHoldLocation: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.holdlocation_);
      break;
    }
    // .CMsgBotWorldState.Action.TrainAbility trainAbility = 111;
    case kTrainAbility: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.trainability_);
      break;
    }
    // .CMsgBotWorldState.Action.DropItem dropItem = 112;
    case kDropItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.dropitem_);
      break;
    }
    // .CMsgBotWorldState.Action.PickUpItem pickUpItem = 114;
    case kPickUpItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.pickupitem_);
      break;
    }
    // .CMsgBotWorldState.Action.PickupRune pickupRune = 115;
    case kPickupRune: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.pickuprune_);
      break;
    }
    // .CMsgBotWorldState.Action.PurchaseItem purchaseItem = 116;
    case kPurchaseItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.purchaseitem_);
      break;
    }
    // .CMsgBotWorldState.Action.SellItem sellItem = 117;
    case kSellItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.sellitem_);
      break;
    }
    // .CMsgBotWorldState.Action.DisassembleItem disassembleItem = 118;
    case kDisassembleItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.disassembleitem_);
      break;
    }
    // .CMsgBotWorldState.Action.SetCombineLockItem setCombineLockItem = 132;
    case kSetCombineLockItem: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.setcombinelockitem_);
      break;
    }
    // .CMsgBotWorldState.Action.Stop stop = 121;
    case kStop: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.stop_);
      break;
    }
    // .CMsgBotWorldState.Action.Chat chat = 140;
    case kChat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.chat_);
      break;
    }
    // .CMsgBotWorldState.Action.SwapItems swapItems = 141;
    case kSwapItems: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.swapitems_);
      break;
    }
    // .CMsgBotWorldState.Action.UseShrine useShrine = 142;
    case kUseShrine: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.useshrine_);
      break;
    }
    // .CMsgBotWorldState.Action.Courier courier = 143;
    case kCourier: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.courier_);
      break;
    }
    // .CMsgBotWorldState.Action.GetActualIncomingDamage getActualIncomingDamage = 144;
    case kGetActualIncomingDamage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.getactualincomingdamage_);
      break;
    }
    // .CMsgBotWorldState.Action.GetEstimatedDamageToTarget getEstimatedDamageToTarget = 145;
    case kGetEstimatedDamageToTarget: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.getestimateddamagetotarget_);
      break;
    }
    // .CMsgBotWorldState.Action.Glyph glyph = 146;
    case kGlyph: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.glyph_);
      break;
    }
    // .CMsgBotWorldState.Action.SoftReset softReset = 148;
    case kSoftReset: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.softreset_);
      break;
    }
    // .CMsgBotWorldState.Action.Buyback buyback = 149;
    case kBuyback: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.buyback_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugDrawText scriptingDebugDrawText = 150;
    case kScriptingDebugDrawText: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugdrawtext_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugDrawLine scriptingDebugDrawLine = 151;
    case kScriptingDebugDrawLine: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugdrawline_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugDrawScreenText scriptingDebugDrawScreenText = 152;
    case kScriptingDebugDrawScreenText: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugdrawscreentext_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugDrawBox scriptingDebugDrawBox = 153;
    case kScriptingDebugDrawBox: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugdrawbox_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugDrawCircle scriptingDebugDrawCircle = 154;
    case kScriptingDebugDrawCircle: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugdrawcircle_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugDrawClear scriptingDebugDrawClear = 155;
    case kScriptingDebugDrawClear: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugdrawclear_);
      break;
    }
    // .CMsgBotWorldState.Action.ScriptingDebugScreenTextPretty scriptingDebugScreenTextPretty = 159;
    case kScriptingDebugScreenTextPretty: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.scriptingdebugscreentextpretty_);
      break;
    }
    // .CMsgBotWorldState.Action.MoveToLocation moveDirectly = 156;
    case kMoveDirectly: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.movedirectly_);
      break;
    }
    // .CMsgBotWorldState.Action.OceanWinGame oceanWinGame = 157;
    case kOceanWinGame: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.oceanwingame_);
      break;
    }
    // .CMsgBotWorldState.Action.OceanReplayCorrectTime oceanReplayCorrectTime = 158;
    case kOceanReplayCorrectTime: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ActionData_.oceanreplaycorrecttime_);
      break;
    }
    case ACTIONDATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState_Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState_Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState.Action)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Action::MergeFrom(const CMsgBotWorldState_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      actiontype_ = from.actiontype_;
    }
    if (cached_has_bits & 0x00000002u) {
      actiondelay_ = from.actiondelay_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000008u) {
      actionid_ = from.actionid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.ActionData_case()) {
    case kMoveToLocation: {
      _internal_mutable_movetolocation()->::CMsgBotWorldState_Action_MoveToLocation::MergeFrom(from._internal_movetolocation());
      break;
    }
    case kMoveToTarget: {
      _internal_mutable_movetotarget()->::CMsgBotWorldState_Action_MoveToTarget::MergeFrom(from._internal_movetotarget());
      break;
    }
    case kAttackMove: {
      _internal_mutable_attackmove()->::CMsgBotWorldState_Action_AttackMove::MergeFrom(from._internal_attackmove());
      break;
    }
    case kAttackTarget: {
      _internal_mutable_attacktarget()->::CMsgBotWorldState_Action_AttackTarget::MergeFrom(from._internal_attacktarget());
      break;
    }
    case kCastLocation: {
      _internal_mutable_castlocation()->::CMsgBotWorldState_Action_CastLocation::MergeFrom(from._internal_castlocation());
      break;
    }
    case kCastTarget: {
      _internal_mutable_casttarget()->::CMsgBotWorldState_Action_CastTarget::MergeFrom(from._internal_casttarget());
      break;
    }
    case kCastTree: {
      _internal_mutable_casttree()->::CMsgBotWorldState_Action_CastTree::MergeFrom(from._internal_casttree());
      break;
    }
    case kCast: {
      _internal_mutable_cast()->::CMsgBotWorldState_Action_Cast::MergeFrom(from._internal_cast());
      break;
    }
    case kCastToggle: {
      _internal_mutable_casttoggle()->::CMsgBotWorldState_Action_CastToggle::MergeFrom(from._internal_casttoggle());
      break;
    }
    case kHoldLocation: {
      _internal_mutable_holdlocation()->::CMsgBotWorldState_Action_HoldLocation::MergeFrom(from._internal_holdlocation());
      break;
    }
    case kTrainAbility: {
      _internal_mutable_trainability()->::CMsgBotWorldState_Action_TrainAbility::MergeFrom(from._internal_trainability());
      break;
    }
    case kDropItem: {
      _internal_mutable_dropitem()->::CMsgBotWorldState_Action_DropItem::MergeFrom(from._internal_dropitem());
      break;
    }
    case kPickUpItem: {
      _internal_mutable_pickupitem()->::CMsgBotWorldState_Action_PickUpItem::MergeFrom(from._internal_pickupitem());
      break;
    }
    case kPickupRune: {
      _internal_mutable_pickuprune()->::CMsgBotWorldState_Action_PickupRune::MergeFrom(from._internal_pickuprune());
      break;
    }
    case kPurchaseItem: {
      _internal_mutable_purchaseitem()->::CMsgBotWorldState_Action_PurchaseItem::MergeFrom(from._internal_purchaseitem());
      break;
    }
    case kSellItem: {
      _internal_mutable_sellitem()->::CMsgBotWorldState_Action_SellItem::MergeFrom(from._internal_sellitem());
      break;
    }
    case kDisassembleItem: {
      _internal_mutable_disassembleitem()->::CMsgBotWorldState_Action_DisassembleItem::MergeFrom(from._internal_disassembleitem());
      break;
    }
    case kSetCombineLockItem: {
      _internal_mutable_setcombinelockitem()->::CMsgBotWorldState_Action_SetCombineLockItem::MergeFrom(from._internal_setcombinelockitem());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::CMsgBotWorldState_Action_Stop::MergeFrom(from._internal_stop());
      break;
    }
    case kChat: {
      _internal_mutable_chat()->::CMsgBotWorldState_Action_Chat::MergeFrom(from._internal_chat());
      break;
    }
    case kSwapItems: {
      _internal_mutable_swapitems()->::CMsgBotWorldState_Action_SwapItems::MergeFrom(from._internal_swapitems());
      break;
    }
    case kUseShrine: {
      _internal_mutable_useshrine()->::CMsgBotWorldState_Action_UseShrine::MergeFrom(from._internal_useshrine());
      break;
    }
    case kCourier: {
      _internal_mutable_courier()->::CMsgBotWorldState_Action_Courier::MergeFrom(from._internal_courier());
      break;
    }
    case kGetActualIncomingDamage: {
      _internal_mutable_getactualincomingdamage()->::CMsgBotWorldState_Action_GetActualIncomingDamage::MergeFrom(from._internal_getactualincomingdamage());
      break;
    }
    case kGetEstimatedDamageToTarget: {
      _internal_mutable_getestimateddamagetotarget()->::CMsgBotWorldState_Action_GetEstimatedDamageToTarget::MergeFrom(from._internal_getestimateddamagetotarget());
      break;
    }
    case kGlyph: {
      _internal_mutable_glyph()->::CMsgBotWorldState_Action_Glyph::MergeFrom(from._internal_glyph());
      break;
    }
    case kSoftReset: {
      _internal_mutable_softreset()->::CMsgBotWorldState_Action_SoftReset::MergeFrom(from._internal_softreset());
      break;
    }
    case kBuyback: {
      _internal_mutable_buyback()->::CMsgBotWorldState_Action_Buyback::MergeFrom(from._internal_buyback());
      break;
    }
    case kScriptingDebugDrawText: {
      _internal_mutable_scriptingdebugdrawtext()->::CMsgBotWorldState_Action_ScriptingDebugDrawText::MergeFrom(from._internal_scriptingdebugdrawtext());
      break;
    }
    case kScriptingDebugDrawLine: {
      _internal_mutable_scriptingdebugdrawline()->::CMsgBotWorldState_Action_ScriptingDebugDrawLine::MergeFrom(from._internal_scriptingdebugdrawline());
      break;
    }
    case kScriptingDebugDrawScreenText: {
      _internal_mutable_scriptingdebugdrawscreentext()->::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText::MergeFrom(from._internal_scriptingdebugdrawscreentext());
      break;
    }
    case kScriptingDebugDrawBox: {
      _internal_mutable_scriptingdebugdrawbox()->::CMsgBotWorldState_Action_ScriptingDebugDrawBox::MergeFrom(from._internal_scriptingdebugdrawbox());
      break;
    }
    case kScriptingDebugDrawCircle: {
      _internal_mutable_scriptingdebugdrawcircle()->::CMsgBotWorldState_Action_ScriptingDebugDrawCircle::MergeFrom(from._internal_scriptingdebugdrawcircle());
      break;
    }
    case kScriptingDebugDrawClear: {
      _internal_mutable_scriptingdebugdrawclear()->::CMsgBotWorldState_Action_ScriptingDebugDrawClear::MergeFrom(from._internal_scriptingdebugdrawclear());
      break;
    }
    case kScriptingDebugScreenTextPretty: {
      _internal_mutable_scriptingdebugscreentextpretty()->::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty::MergeFrom(from._internal_scriptingdebugscreentextpretty());
      break;
    }
    case kMoveDirectly: {
      _internal_mutable_movedirectly()->::CMsgBotWorldState_Action_MoveToLocation::MergeFrom(from._internal_movedirectly());
      break;
    }
    case kOceanWinGame: {
      _internal_mutable_oceanwingame()->::CMsgBotWorldState_Action_OceanWinGame::MergeFrom(from._internal_oceanwingame());
      break;
    }
    case kOceanReplayCorrectTime: {
      _internal_mutable_oceanreplaycorrecttime()->::CMsgBotWorldState_Action_OceanReplayCorrectTime::MergeFrom(from._internal_oceanreplaycorrecttime());
      break;
    }
    case ACTIONDATA_NOT_SET: {
      break;
    }
  }
}

void CMsgBotWorldState_Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Action::CopyFrom(const CMsgBotWorldState_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Action::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  switch (ActionData_case()) {
    case kMoveToLocation: {
      if (has_movetolocation()) {
        if (!this->movetolocation().IsInitialized()) return false;
      }
      break;
    }
    case kMoveToTarget: {
      if (has_movetotarget()) {
        if (!this->movetotarget().IsInitialized()) return false;
      }
      break;
    }
    case kAttackMove: {
      if (has_attackmove()) {
        if (!this->attackmove().IsInitialized()) return false;
      }
      break;
    }
    case kAttackTarget: {
      if (has_attacktarget()) {
        if (!this->attacktarget().IsInitialized()) return false;
      }
      break;
    }
    case kCastLocation: {
      if (has_castlocation()) {
        if (!this->castlocation().IsInitialized()) return false;
      }
      break;
    }
    case kCastTarget: {
      if (has_casttarget()) {
        if (!this->casttarget().IsInitialized()) return false;
      }
      break;
    }
    case kCastTree: {
      if (has_casttree()) {
        if (!this->casttree().IsInitialized()) return false;
      }
      break;
    }
    case kCast: {
      if (has_cast()) {
        if (!this->cast().IsInitialized()) return false;
      }
      break;
    }
    case kCastToggle: {
      if (has_casttoggle()) {
        if (!this->casttoggle().IsInitialized()) return false;
      }
      break;
    }
    case kHoldLocation: {
      break;
    }
    case kTrainAbility: {
      if (has_trainability()) {
        if (!this->trainability().IsInitialized()) return false;
      }
      break;
    }
    case kDropItem: {
      break;
    }
    case kPickUpItem: {
      break;
    }
    case kPickupRune: {
      if (has_pickuprune()) {
        if (!this->pickuprune().IsInitialized()) return false;
      }
      break;
    }
    case kPurchaseItem: {
      break;
    }
    case kSellItem: {
      break;
    }
    case kDisassembleItem: {
      if (has_disassembleitem()) {
        if (!this->disassembleitem().IsInitialized()) return false;
      }
      break;
    }
    case kSetCombineLockItem: {
      if (has_setcombinelockitem()) {
        if (!this->setcombinelockitem().IsInitialized()) return false;
      }
      break;
    }
    case kStop: {
      break;
    }
    case kChat: {
      if (has_chat()) {
        if (!this->chat().IsInitialized()) return false;
      }
      break;
    }
    case kSwapItems: {
      if (has_swapitems()) {
        if (!this->swapitems().IsInitialized()) return false;
      }
      break;
    }
    case kUseShrine: {
      if (has_useshrine()) {
        if (!this->useshrine().IsInitialized()) return false;
      }
      break;
    }
    case kCourier: {
      if (has_courier()) {
        if (!this->courier().IsInitialized()) return false;
      }
      break;
    }
    case kGetActualIncomingDamage: {
      if (has_getactualincomingdamage()) {
        if (!this->getactualincomingdamage().IsInitialized()) return false;
      }
      break;
    }
    case kGetEstimatedDamageToTarget: {
      if (has_getestimateddamagetotarget()) {
        if (!this->getestimateddamagetotarget().IsInitialized()) return false;
      }
      break;
    }
    case kGlyph: {
      if (has_glyph()) {
        if (!this->glyph().IsInitialized()) return false;
      }
      break;
    }
    case kSoftReset: {
      break;
    }
    case kBuyback: {
      if (has_buyback()) {
        if (!this->buyback().IsInitialized()) return false;
      }
      break;
    }
    case kScriptingDebugDrawText: {
      if (has_scriptingdebugdrawtext()) {
        if (!this->scriptingdebugdrawtext().IsInitialized()) return false;
      }
      break;
    }
    case kScriptingDebugDrawLine: {
      if (has_scriptingdebugdrawline()) {
        if (!this->scriptingdebugdrawline().IsInitialized()) return false;
      }
      break;
    }
    case kScriptingDebugDrawScreenText: {
      if (has_scriptingdebugdrawscreentext()) {
        if (!this->scriptingdebugdrawscreentext().IsInitialized()) return false;
      }
      break;
    }
    case kScriptingDebugDrawBox: {
      if (has_scriptingdebugdrawbox()) {
        if (!this->scriptingdebugdrawbox().IsInitialized()) return false;
      }
      break;
    }
    case kScriptingDebugDrawCircle: {
      if (has_scriptingdebugdrawcircle()) {
        if (!this->scriptingdebugdrawcircle().IsInitialized()) return false;
      }
      break;
    }
    case kScriptingDebugDrawClear: {
      break;
    }
    case kScriptingDebugScreenTextPretty: {
      if (has_scriptingdebugscreentextpretty()) {
        if (!this->scriptingdebugscreentextpretty().IsInitialized()) return false;
      }
      break;
    }
    case kMoveDirectly: {
      if (has_movedirectly()) {
        if (!this->movedirectly().IsInitialized()) return false;
      }
      break;
    }
    case kOceanWinGame: {
      if (has_oceanwingame()) {
        if (!this->oceanwingame().IsInitialized()) return false;
      }
      break;
    }
    case kOceanReplayCorrectTime: {
      if (has_oceanreplaycorrecttime()) {
        if (!this->oceanreplaycorrecttime().IsInitialized()) return false;
      }
      break;
    }
    case ACTIONDATA_NOT_SET: {
      break;
    }
  }
  return true;
}

void CMsgBotWorldState_Action::InternalSwap(CMsgBotWorldState_Action* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action, actiondelay_)
      + sizeof(CMsgBotWorldState_Action::actiondelay_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState_Action, actiontype_)>(
          reinterpret_cast<char*>(&actiontype_),
          reinterpret_cast<char*>(&other->actiontype_));
  swap(player_, other->player_);
  swap(actionid_, other->actionid_);
  swap(ActionData_, other->ActionData_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState_Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgBotWorldState::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgBotWorldState>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dota_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_game_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero_pick_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_of_day(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_glyph_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_glyph_cooldown_enemy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgBotWorldState::CMsgBotWorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  units_(arena),
  dropped_items_(arena),
  rune_infos_(arena),
  incoming_teleports_(arena),
  linear_projectiles_(arena),
  avoidance_zones_(arena),
  couriers_(arena),
  ability_events_(arena),
  damage_events_(arena),
  courier_killed_events_(arena),
  roshan_killed_events_(arena),
  tree_events_(arena),
  dropped_items_deltas_(arena),
  rune_infos_deltas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgBotWorldState)
}
CMsgBotWorldState::CMsgBotWorldState(const CMsgBotWorldState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      units_(from.units_),
      dropped_items_(from.dropped_items_),
      rune_infos_(from.rune_infos_),
      incoming_teleports_(from.incoming_teleports_),
      linear_projectiles_(from.linear_projectiles_),
      avoidance_zones_(from.avoidance_zones_),
      couriers_(from.couriers_),
      ability_events_(from.ability_events_),
      damage_events_(from.damage_events_),
      courier_killed_events_(from.courier_killed_events_),
      roshan_killed_events_(from.roshan_killed_events_),
      tree_events_(from.tree_events_),
      dropped_items_deltas_(from.dropped_items_deltas_),
      rune_infos_deltas_(from.rune_infos_deltas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&glyph_cooldown_enemy_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(glyph_cooldown_enemy_));
  // @@protoc_insertion_point(copy_constructor:CMsgBotWorldState)
}

void CMsgBotWorldState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&glyph_cooldown_enemy_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(glyph_cooldown_enemy_));
}

CMsgBotWorldState::~CMsgBotWorldState() {
  // @@protoc_insertion_point(destructor:CMsgBotWorldState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgBotWorldState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgBotWorldState::ArenaDtor(void* object) {
  CMsgBotWorldState* _this = reinterpret_cast< CMsgBotWorldState* >(object);
  (void)_this;
}
void CMsgBotWorldState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgBotWorldState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgBotWorldState::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgBotWorldState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  units_.Clear();
  dropped_items_.Clear();
  rune_infos_.Clear();
  incoming_teleports_.Clear();
  linear_projectiles_.Clear();
  avoidance_zones_.Clear();
  couriers_.Clear();
  ability_events_.Clear();
  damage_events_.Clear();
  courier_killed_events_.Clear();
  roshan_killed_events_.Clear();
  tree_events_.Clear();
  dropped_items_deltas_.Clear();
  rune_infos_deltas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&glyph_cooldown_enemy_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(glyph_cooldown_enemy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgBotWorldState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float dota_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_dota_time(&has_bits);
          dota_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_game_state(&has_bits);
          game_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_pick_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hero_pick_state(&has_bits);
          hero_pick_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float time_of_day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_time_of_day(&has_bits);
          time_of_day_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float glyph_cooldown = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_glyph_cooldown(&has_bits);
          glyph_cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 glyph_cooldown_enemy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_glyph_cooldown_enemy(&has_bits);
          glyph_cooldown_enemy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_units(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dropped_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rune_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_incoming_teleports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_linear_projectiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_avoidance_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_couriers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_ability_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_damage_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_courier_killed_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_roshan_killed_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgBotWorldState.EventTree tree_events = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tree_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 dropped_items_deltas = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_dropped_items_deltas(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<896>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_dropped_items_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 rune_infos_deltas = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_rune_infos_deltas(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<904>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_rune_infos_deltas(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgBotWorldState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgBotWorldState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional float game_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_game_time(), target);
  }

  // optional float dota_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_dota_time(), target);
  }

  // optional uint32 game_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_game_state(), target);
  }

  // optional uint32 hero_pick_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hero_pick_state(), target);
  }

  // optional float time_of_day = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_time_of_day(), target);
  }

  // optional float glyph_cooldown = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_glyph_cooldown(), target);
  }

  // optional uint32 glyph_cooldown_enemy = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_glyph_cooldown_enemy(), target);
  }

  // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_players(i), target, stream);
  }

  // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_units_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_units(i), target, stream);
  }

  // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dropped_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_dropped_items(i), target, stream);
  }

  // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rune_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_rune_infos(i), target, stream);
  }

  // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_incoming_teleports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_incoming_teleports(i), target, stream);
  }

  // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_linear_projectiles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_linear_projectiles(i), target, stream);
  }

  // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_avoidance_zones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_avoidance_zones(i), target, stream);
  }

  // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_couriers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_couriers(i), target, stream);
  }

  // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ability_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_ability_events(i), target, stream);
  }

  // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_damage_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_damage_events(i), target, stream);
  }

  // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_courier_killed_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_courier_killed_events(i), target, stream);
  }

  // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roshan_killed_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_roshan_killed_events(i), target, stream);
  }

  // repeated .CMsgBotWorldState.EventTree tree_events = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tree_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_tree_events(i), target, stream);
  }

  // repeated int32 dropped_items_deltas = 112;
  for (int i = 0, n = this->_internal_dropped_items_deltas_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(112, this->_internal_dropped_items_deltas(i), target);
  }

  // repeated int32 rune_infos_deltas = 113;
  for (int i = 0, n = this->_internal_rune_infos_deltas_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(113, this->_internal_rune_infos_deltas(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgBotWorldState)
  return target;
}

size_t CMsgBotWorldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgBotWorldState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgBotWorldState.Player players = 10 [(.map_field) = true];
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Unit units = 11 [(.map_field) = true];
  total_size += 1UL * this->_internal_units_size();
  for (const auto& msg : this->units_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.DroppedItem dropped_items = 12 [(.diff_encode_field) = 112];
  total_size += 1UL * this->_internal_dropped_items_size();
  for (const auto& msg : this->dropped_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.RuneInfo rune_infos = 13 [(.diff_encode_field) = 113];
  total_size += 1UL * this->_internal_rune_infos_size();
  for (const auto& msg : this->rune_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  total_size += 1UL * this->_internal_incoming_teleports_size();
  for (const auto& msg : this->incoming_teleports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.LinearProjectile linear_projectiles = 15 [(.map_field) = true];
  total_size += 1UL * this->_internal_linear_projectiles_size();
  for (const auto& msg : this->linear_projectiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  total_size += 2UL * this->_internal_avoidance_zones_size();
  for (const auto& msg : this->avoidance_zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.Courier couriers = 17 [(.map_field) = true];
  total_size += 2UL * this->_internal_couriers_size();
  for (const auto& msg : this->couriers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventAbility ability_events = 20;
  total_size += 2UL * this->_internal_ability_events_size();
  for (const auto& msg : this->ability_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventDamage damage_events = 21;
  total_size += 2UL * this->_internal_damage_events_size();
  for (const auto& msg : this->damage_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  total_size += 2UL * this->_internal_courier_killed_events_size();
  for (const auto& msg : this->courier_killed_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  total_size += 2UL * this->_internal_roshan_killed_events_size();
  for (const auto& msg : this->roshan_killed_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgBotWorldState.EventTree tree_events = 24;
  total_size += 2UL * this->_internal_tree_events_size();
  for (const auto& msg : this->tree_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 dropped_items_deltas = 112;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->dropped_items_deltas_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dropped_items_deltas_size());
    total_size += data_size;
  }

  // repeated int32 rune_infos_deltas = 113;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->rune_infos_deltas_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rune_infos_deltas_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional float game_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float dota_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 game_state = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_state());
    }

    // optional uint32 hero_pick_state = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_pick_state());
    }

    // optional float time_of_day = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float glyph_cooldown = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional uint32 glyph_cooldown_enemy = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_glyph_cooldown_enemy());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgBotWorldState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgBotWorldState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgBotWorldState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgBotWorldState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgBotWorldState)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState::MergeFrom(const CMsgBotWorldState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgBotWorldState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  units_.MergeFrom(from.units_);
  dropped_items_.MergeFrom(from.dropped_items_);
  rune_infos_.MergeFrom(from.rune_infos_);
  incoming_teleports_.MergeFrom(from.incoming_teleports_);
  linear_projectiles_.MergeFrom(from.linear_projectiles_);
  avoidance_zones_.MergeFrom(from.avoidance_zones_);
  couriers_.MergeFrom(from.couriers_);
  ability_events_.MergeFrom(from.ability_events_);
  damage_events_.MergeFrom(from.damage_events_);
  courier_killed_events_.MergeFrom(from.courier_killed_events_);
  roshan_killed_events_.MergeFrom(from.roshan_killed_events_);
  tree_events_.MergeFrom(from.tree_events_);
  dropped_items_deltas_.MergeFrom(from.dropped_items_deltas_);
  rune_infos_deltas_.MergeFrom(from.rune_infos_deltas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      dota_time_ = from.dota_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      hero_pick_state_ = from.hero_pick_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000040u) {
      glyph_cooldown_ = from.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000080u) {
      glyph_cooldown_enemy_ = from.glyph_cooldown_enemy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgBotWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState::CopyFrom(const CMsgBotWorldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgBotWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState::IsInitialized() const {
  return true;
}

void CMsgBotWorldState::InternalSwap(CMsgBotWorldState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  units_.InternalSwap(&other->units_);
  dropped_items_.InternalSwap(&other->dropped_items_);
  rune_infos_.InternalSwap(&other->rune_infos_);
  incoming_teleports_.InternalSwap(&other->incoming_teleports_);
  linear_projectiles_.InternalSwap(&other->linear_projectiles_);
  avoidance_zones_.InternalSwap(&other->avoidance_zones_);
  couriers_.InternalSwap(&other->couriers_);
  ability_events_.InternalSwap(&other->ability_events_);
  damage_events_.InternalSwap(&other->damage_events_);
  courier_killed_events_.InternalSwap(&other->courier_killed_events_);
  roshan_killed_events_.InternalSwap(&other->roshan_killed_events_);
  tree_events_.InternalSwap(&other->tree_events_);
  dropped_items_deltas_.InternalSwap(&other->dropped_items_deltas_);
  rune_infos_deltas_.InternalSwap(&other->rune_infos_deltas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgBotWorldState, glyph_cooldown_enemy_)
      + sizeof(CMsgBotWorldState::glyph_cooldown_enemy_)
      - PROTOBUF_FIELD_OFFSET(CMsgBotWorldState, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgBotWorldState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Vector* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Player* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Ability* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Ability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Ability >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_DroppedItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_DroppedItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_DroppedItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_RuneInfo* Arena::CreateMaybeMessage< ::CMsgBotWorldState_RuneInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_RuneInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_TeleportInfo* Arena::CreateMaybeMessage< ::CMsgBotWorldState_TeleportInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_TeleportInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Modifier* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Modifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Modifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_LinearProjectile* Arena::CreateMaybeMessage< ::CMsgBotWorldState_LinearProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_LinearProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_TrackingProjectile* Arena::CreateMaybeMessage< ::CMsgBotWorldState_TrackingProjectile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_TrackingProjectile >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_AvoidanceZone* Arena::CreateMaybeMessage< ::CMsgBotWorldState_AvoidanceZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_AvoidanceZone >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Courier* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Courier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Courier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventAbility* Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventDamage* Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventCourierKilled* Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventCourierKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventCourierKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventRoshanKilled* Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventRoshanKilled >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventRoshanKilled >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_EventTree* Arena::CreateMaybeMessage< ::CMsgBotWorldState_EventTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_EventTree >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Unit* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Unit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Unit >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Actions_OceanAnnotation_Hero* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Actions_OceanAnnotation_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Actions_OceanAnnotation_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Actions_OceanAnnotation* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Actions_OceanAnnotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Actions_OceanAnnotation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Actions_Header* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Actions_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Actions_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Actions* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Actions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Actions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_MoveToLocation* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_MoveToLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_MoveToLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_MoveToTarget* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_MoveToTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_MoveToTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_AttackMove* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_AttackMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_AttackMove >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_AttackTarget* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_AttackTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_AttackTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_HoldLocation* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_HoldLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_HoldLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_Stop* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_CastLocation* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_CastLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_CastLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_CastTarget* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_CastTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_CastTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_CastTree* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_CastTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_CastTree >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_Cast* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_Cast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_Cast >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_CastToggle* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_CastToggle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_CastToggle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_TrainAbility* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_TrainAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_TrainAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_DropItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_DropItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_DropItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_PickUpItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_PickUpItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_PickUpItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_PurchaseItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_PurchaseItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_PurchaseItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_SellItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_SellItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_SellItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_SwapItems* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_SwapItems >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_SwapItems >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_DisassembleItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_DisassembleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_DisassembleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_SetCombineLockItem* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_SetCombineLockItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_SetCombineLockItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_PickupRune* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_PickupRune >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_PickupRune >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_Chat* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_Chat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_Chat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_UseShrine* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_UseShrine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_UseShrine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_Courier* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_Courier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_Courier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_GetActualIncomingDamage* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_GetActualIncomingDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_GetActualIncomingDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_GetEstimatedDamageToTarget* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_GetEstimatedDamageToTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_GetEstimatedDamageToTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_Glyph* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_Glyph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_Glyph >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_SoftReset* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_SoftReset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_SoftReset >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_Buyback* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_Buyback >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_Buyback >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugDrawText* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugDrawText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugDrawText >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugDrawLine* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugDrawLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugDrawLine >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugDrawScreenText >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugScreenTextPretty >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugDrawBox* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugDrawBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugDrawBox >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugDrawCircle* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugDrawCircle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugDrawCircle >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_ScriptingDebugDrawClear* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_ScriptingDebugDrawClear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_ScriptingDebugDrawClear >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_OceanWinGame* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_OceanWinGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_OceanWinGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action_OceanReplayCorrectTime* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action_OceanReplayCorrectTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action_OceanReplayCorrectTime >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState_Action* Arena::CreateMaybeMessage< ::CMsgBotWorldState_Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState_Action >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgBotWorldState* Arena::CreateMaybeMessage< ::CMsgBotWorldState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgBotWorldState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
