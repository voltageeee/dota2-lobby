// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "steammessages.pb.h"
#include "dota_shared_enums.pb.h"
#include "dota_client_enums.pb.h"
#include "base_gcmessages.pb.h"
#include "dota_gcmessages_common_match_management.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[65]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(int index);
class CMsgAbandonCurrentGame;
struct CMsgAbandonCurrentGameDefaultTypeInternal;
extern CMsgAbandonCurrentGameDefaultTypeInternal _CMsgAbandonCurrentGame_default_instance_;
class CMsgApplyTeamToPracticeLobby;
struct CMsgApplyTeamToPracticeLobbyDefaultTypeInternal;
extern CMsgApplyTeamToPracticeLobbyDefaultTypeInternal _CMsgApplyTeamToPracticeLobby_default_instance_;
class CMsgBotGameCreate;
struct CMsgBotGameCreateDefaultTypeInternal;
extern CMsgBotGameCreateDefaultTypeInternal _CMsgBotGameCreate_default_instance_;
class CMsgClearPracticeLobbyTeam;
struct CMsgClearPracticeLobbyTeamDefaultTypeInternal;
extern CMsgClearPracticeLobbyTeamDefaultTypeInternal _CMsgClearPracticeLobbyTeam_default_instance_;
class CMsgClientToGCMMInfo;
struct CMsgClientToGCMMInfoDefaultTypeInternal;
extern CMsgClientToGCMMInfoDefaultTypeInternal _CMsgClientToGCMMInfo_default_instance_;
class CMsgClientToGCRequestSteamDatagramTicket;
struct CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal;
extern CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal _CMsgClientToGCRequestSteamDatagramTicket_default_instance_;
class CMsgClientToGCRequestSteamDatagramTicketResponse;
struct CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal;
extern CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_;
class CMsgCreateSpectatorLobby;
struct CMsgCreateSpectatorLobbyDefaultTypeInternal;
extern CMsgCreateSpectatorLobbyDefaultTypeInternal _CMsgCreateSpectatorLobby_default_instance_;
class CMsgCustomGameCreate;
struct CMsgCustomGameCreateDefaultTypeInternal;
extern CMsgCustomGameCreateDefaultTypeInternal _CMsgCustomGameCreate_default_instance_;
class CMsgDOTACancelGroupInvites;
struct CMsgDOTACancelGroupInvitesDefaultTypeInternal;
extern CMsgDOTACancelGroupInvitesDefaultTypeInternal _CMsgDOTACancelGroupInvites_default_instance_;
class CMsgDOTAGroupMergeInvite;
struct CMsgDOTAGroupMergeInviteDefaultTypeInternal;
extern CMsgDOTAGroupMergeInviteDefaultTypeInternal _CMsgDOTAGroupMergeInvite_default_instance_;
class CMsgDOTAGroupMergeReply;
struct CMsgDOTAGroupMergeReplyDefaultTypeInternal;
extern CMsgDOTAGroupMergeReplyDefaultTypeInternal _CMsgDOTAGroupMergeReply_default_instance_;
class CMsgDOTAGroupMergeResponse;
struct CMsgDOTAGroupMergeResponseDefaultTypeInternal;
extern CMsgDOTAGroupMergeResponseDefaultTypeInternal _CMsgDOTAGroupMergeResponse_default_instance_;
class CMsgDOTAPartyMemberSetCoach;
struct CMsgDOTAPartyMemberSetCoachDefaultTypeInternal;
extern CMsgDOTAPartyMemberSetCoachDefaultTypeInternal _CMsgDOTAPartyMemberSetCoach_default_instance_;
class CMsgDOTASetGroupLeader;
struct CMsgDOTASetGroupLeaderDefaultTypeInternal;
extern CMsgDOTASetGroupLeaderDefaultTypeInternal _CMsgDOTASetGroupLeader_default_instance_;
class CMsgDOTASetGroupOpenStatus;
struct CMsgDOTASetGroupOpenStatusDefaultTypeInternal;
extern CMsgDOTASetGroupOpenStatusDefaultTypeInternal _CMsgDOTASetGroupOpenStatus_default_instance_;
class CMsgEventGameCreate;
struct CMsgEventGameCreateDefaultTypeInternal;
extern CMsgEventGameCreateDefaultTypeInternal _CMsgEventGameCreate_default_instance_;
class CMsgFriendPracticeLobbyListRequest;
struct CMsgFriendPracticeLobbyListRequestDefaultTypeInternal;
extern CMsgFriendPracticeLobbyListRequestDefaultTypeInternal _CMsgFriendPracticeLobbyListRequest_default_instance_;
class CMsgFriendPracticeLobbyListResponse;
struct CMsgFriendPracticeLobbyListResponseDefaultTypeInternal;
extern CMsgFriendPracticeLobbyListResponseDefaultTypeInternal _CMsgFriendPracticeLobbyListResponse_default_instance_;
class CMsgGCToClientRequestLaneSelection;
struct CMsgGCToClientRequestLaneSelectionDefaultTypeInternal;
extern CMsgGCToClientRequestLaneSelectionDefaultTypeInternal _CMsgGCToClientRequestLaneSelection_default_instance_;
class CMsgGCToClientRequestLaneSelectionResponse;
struct CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal;
extern CMsgGCToClientRequestLaneSelectionResponseDefaultTypeInternal _CMsgGCToClientRequestLaneSelectionResponse_default_instance_;
class CMsgGCToClientRequestMMInfo;
struct CMsgGCToClientRequestMMInfoDefaultTypeInternal;
extern CMsgGCToClientRequestMMInfoDefaultTypeInternal _CMsgGCToClientRequestMMInfo_default_instance_;
class CMsgGCToClientSteamDatagramTicket;
struct CMsgGCToClientSteamDatagramTicketDefaultTypeInternal;
extern CMsgGCToClientSteamDatagramTicketDefaultTypeInternal _CMsgGCToClientSteamDatagramTicket_default_instance_;
class CMsgJoinableCustomGameModesRequest;
struct CMsgJoinableCustomGameModesRequestDefaultTypeInternal;
extern CMsgJoinableCustomGameModesRequestDefaultTypeInternal _CMsgJoinableCustomGameModesRequest_default_instance_;
class CMsgJoinableCustomGameModesResponse;
struct CMsgJoinableCustomGameModesResponseDefaultTypeInternal;
extern CMsgJoinableCustomGameModesResponseDefaultTypeInternal _CMsgJoinableCustomGameModesResponse_default_instance_;
class CMsgJoinableCustomGameModesResponseEntry;
struct CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal;
extern CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal _CMsgJoinableCustomGameModesResponseEntry_default_instance_;
class CMsgJoinableCustomLobbiesRequest;
struct CMsgJoinableCustomLobbiesRequestDefaultTypeInternal;
extern CMsgJoinableCustomLobbiesRequestDefaultTypeInternal _CMsgJoinableCustomLobbiesRequest_default_instance_;
class CMsgJoinableCustomLobbiesResponse;
struct CMsgJoinableCustomLobbiesResponseDefaultTypeInternal;
extern CMsgJoinableCustomLobbiesResponseDefaultTypeInternal _CMsgJoinableCustomLobbiesResponse_default_instance_;
class CMsgJoinableCustomLobbiesResponseEntry;
struct CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal;
extern CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal _CMsgJoinableCustomLobbiesResponseEntry_default_instance_;
class CMsgLobbyList;
struct CMsgLobbyListDefaultTypeInternal;
extern CMsgLobbyListDefaultTypeInternal _CMsgLobbyList_default_instance_;
class CMsgLobbyListResponse;
struct CMsgLobbyListResponseDefaultTypeInternal;
extern CMsgLobbyListResponseDefaultTypeInternal _CMsgLobbyListResponse_default_instance_;
class CMsgLobbyScenarioSave;
struct CMsgLobbyScenarioSaveDefaultTypeInternal;
extern CMsgLobbyScenarioSaveDefaultTypeInternal _CMsgLobbyScenarioSave_default_instance_;
class CMsgPartyBuilderOptions;
struct CMsgPartyBuilderOptionsDefaultTypeInternal;
extern CMsgPartyBuilderOptionsDefaultTypeInternal _CMsgPartyBuilderOptions_default_instance_;
class CMsgPracticeLobbyCloseBroadcastChannel;
struct CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal;
extern CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_;
class CMsgPracticeLobbyCreate;
struct CMsgPracticeLobbyCreateDefaultTypeInternal;
extern CMsgPracticeLobbyCreateDefaultTypeInternal _CMsgPracticeLobbyCreate_default_instance_;
class CMsgPracticeLobbyCreate_SaveGame;
struct CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal;
extern CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal _CMsgPracticeLobbyCreate_SaveGame_default_instance_;
class CMsgPracticeLobbyJoin;
struct CMsgPracticeLobbyJoinDefaultTypeInternal;
extern CMsgPracticeLobbyJoinDefaultTypeInternal _CMsgPracticeLobbyJoin_default_instance_;
class CMsgPracticeLobbyJoinBroadcastChannel;
struct CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal;
extern CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
class CMsgPracticeLobbyJoinResponse;
struct CMsgPracticeLobbyJoinResponseDefaultTypeInternal;
extern CMsgPracticeLobbyJoinResponseDefaultTypeInternal _CMsgPracticeLobbyJoinResponse_default_instance_;
class CMsgPracticeLobbyKick;
struct CMsgPracticeLobbyKickDefaultTypeInternal;
extern CMsgPracticeLobbyKickDefaultTypeInternal _CMsgPracticeLobbyKick_default_instance_;
class CMsgPracticeLobbyKickFromTeam;
struct CMsgPracticeLobbyKickFromTeamDefaultTypeInternal;
extern CMsgPracticeLobbyKickFromTeamDefaultTypeInternal _CMsgPracticeLobbyKickFromTeam_default_instance_;
class CMsgPracticeLobbyLaunch;
struct CMsgPracticeLobbyLaunchDefaultTypeInternal;
extern CMsgPracticeLobbyLaunchDefaultTypeInternal _CMsgPracticeLobbyLaunch_default_instance_;
class CMsgPracticeLobbyLeave;
struct CMsgPracticeLobbyLeaveDefaultTypeInternal;
extern CMsgPracticeLobbyLeaveDefaultTypeInternal _CMsgPracticeLobbyLeave_default_instance_;
class CMsgPracticeLobbyList;
struct CMsgPracticeLobbyListDefaultTypeInternal;
extern CMsgPracticeLobbyListDefaultTypeInternal _CMsgPracticeLobbyList_default_instance_;
class CMsgPracticeLobbyListResponse;
struct CMsgPracticeLobbyListResponseDefaultTypeInternal;
extern CMsgPracticeLobbyListResponseDefaultTypeInternal _CMsgPracticeLobbyListResponse_default_instance_;
class CMsgPracticeLobbyListResponseEntry;
struct CMsgPracticeLobbyListResponseEntryDefaultTypeInternal;
extern CMsgPracticeLobbyListResponseEntryDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_default_instance_;
class CMsgPracticeLobbyListResponseEntry_CLobbyMember;
struct CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal;
extern CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
class CMsgPracticeLobbySetCoach;
struct CMsgPracticeLobbySetCoachDefaultTypeInternal;
extern CMsgPracticeLobbySetCoachDefaultTypeInternal _CMsgPracticeLobbySetCoach_default_instance_;
class CMsgPracticeLobbySetDetails;
struct CMsgPracticeLobbySetDetailsDefaultTypeInternal;
extern CMsgPracticeLobbySetDetailsDefaultTypeInternal _CMsgPracticeLobbySetDetails_default_instance_;
class CMsgPracticeLobbySetTeamSlot;
struct CMsgPracticeLobbySetTeamSlotDefaultTypeInternal;
extern CMsgPracticeLobbySetTeamSlotDefaultTypeInternal _CMsgPracticeLobbySetTeamSlot_default_instance_;
class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus;
struct CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal;
extern CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_;
class CMsgQuickJoinCustomLobby;
struct CMsgQuickJoinCustomLobbyDefaultTypeInternal;
extern CMsgQuickJoinCustomLobbyDefaultTypeInternal _CMsgQuickJoinCustomLobby_default_instance_;
class CMsgQuickJoinCustomLobbyResponse;
struct CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal;
extern CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal _CMsgQuickJoinCustomLobbyResponse_default_instance_;
class CMsgQuickJoinCustomLobby_LegacyRegionPing;
struct CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal;
extern CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_;
class CMsgReadyUp;
struct CMsgReadyUpDefaultTypeInternal;
extern CMsgReadyUpDefaultTypeInternal _CMsgReadyUp_default_instance_;
class CMsgReadyUpStatus;
struct CMsgReadyUpStatusDefaultTypeInternal;
extern CMsgReadyUpStatusDefaultTypeInternal _CMsgReadyUpStatus_default_instance_;
class CMsgSetSpectatorLobbyDetails;
struct CMsgSetSpectatorLobbyDetailsDefaultTypeInternal;
extern CMsgSetSpectatorLobbyDetailsDefaultTypeInternal _CMsgSetSpectatorLobbyDetails_default_instance_;
class CMsgSpectatorLobbyGameDetails;
struct CMsgSpectatorLobbyGameDetailsDefaultTypeInternal;
extern CMsgSpectatorLobbyGameDetailsDefaultTypeInternal _CMsgSpectatorLobbyGameDetails_default_instance_;
class CMsgSpectatorLobbyGameDetails_Team;
struct CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal;
extern CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal _CMsgSpectatorLobbyGameDetails_Team_default_instance_;
class CMsgSpectatorLobbyList;
struct CMsgSpectatorLobbyListDefaultTypeInternal;
extern CMsgSpectatorLobbyListDefaultTypeInternal _CMsgSpectatorLobbyList_default_instance_;
class CMsgSpectatorLobbyListResponse;
struct CMsgSpectatorLobbyListResponseDefaultTypeInternal;
extern CMsgSpectatorLobbyListResponseDefaultTypeInternal _CMsgSpectatorLobbyListResponse_default_instance_;
class CMsgSpectatorLobbyListResponse_SpectatorLobby;
struct CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal;
extern CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_;
class CMsgStartFindingMatch;
struct CMsgStartFindingMatchDefaultTypeInternal;
extern CMsgStartFindingMatchDefaultTypeInternal _CMsgStartFindingMatch_default_instance_;
class CMsgStartFindingMatchResult;
struct CMsgStartFindingMatchResultDefaultTypeInternal;
extern CMsgStartFindingMatchResultDefaultTypeInternal _CMsgStartFindingMatchResult_default_instance_;
class CMsgStopFindingMatch;
struct CMsgStopFindingMatchDefaultTypeInternal;
extern CMsgStopFindingMatchDefaultTypeInternal _CMsgStopFindingMatch_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgAbandonCurrentGame* Arena::CreateMaybeMessage<::CMsgAbandonCurrentGame>(Arena*);
template<> ::CMsgApplyTeamToPracticeLobby* Arena::CreateMaybeMessage<::CMsgApplyTeamToPracticeLobby>(Arena*);
template<> ::CMsgBotGameCreate* Arena::CreateMaybeMessage<::CMsgBotGameCreate>(Arena*);
template<> ::CMsgClearPracticeLobbyTeam* Arena::CreateMaybeMessage<::CMsgClearPracticeLobbyTeam>(Arena*);
template<> ::CMsgClientToGCMMInfo* Arena::CreateMaybeMessage<::CMsgClientToGCMMInfo>(Arena*);
template<> ::CMsgClientToGCRequestSteamDatagramTicket* Arena::CreateMaybeMessage<::CMsgClientToGCRequestSteamDatagramTicket>(Arena*);
template<> ::CMsgClientToGCRequestSteamDatagramTicketResponse* Arena::CreateMaybeMessage<::CMsgClientToGCRequestSteamDatagramTicketResponse>(Arena*);
template<> ::CMsgCreateSpectatorLobby* Arena::CreateMaybeMessage<::CMsgCreateSpectatorLobby>(Arena*);
template<> ::CMsgCustomGameCreate* Arena::CreateMaybeMessage<::CMsgCustomGameCreate>(Arena*);
template<> ::CMsgDOTACancelGroupInvites* Arena::CreateMaybeMessage<::CMsgDOTACancelGroupInvites>(Arena*);
template<> ::CMsgDOTAGroupMergeInvite* Arena::CreateMaybeMessage<::CMsgDOTAGroupMergeInvite>(Arena*);
template<> ::CMsgDOTAGroupMergeReply* Arena::CreateMaybeMessage<::CMsgDOTAGroupMergeReply>(Arena*);
template<> ::CMsgDOTAGroupMergeResponse* Arena::CreateMaybeMessage<::CMsgDOTAGroupMergeResponse>(Arena*);
template<> ::CMsgDOTAPartyMemberSetCoach* Arena::CreateMaybeMessage<::CMsgDOTAPartyMemberSetCoach>(Arena*);
template<> ::CMsgDOTASetGroupLeader* Arena::CreateMaybeMessage<::CMsgDOTASetGroupLeader>(Arena*);
template<> ::CMsgDOTASetGroupOpenStatus* Arena::CreateMaybeMessage<::CMsgDOTASetGroupOpenStatus>(Arena*);
template<> ::CMsgEventGameCreate* Arena::CreateMaybeMessage<::CMsgEventGameCreate>(Arena*);
template<> ::CMsgFriendPracticeLobbyListRequest* Arena::CreateMaybeMessage<::CMsgFriendPracticeLobbyListRequest>(Arena*);
template<> ::CMsgFriendPracticeLobbyListResponse* Arena::CreateMaybeMessage<::CMsgFriendPracticeLobbyListResponse>(Arena*);
template<> ::CMsgGCToClientRequestLaneSelection* Arena::CreateMaybeMessage<::CMsgGCToClientRequestLaneSelection>(Arena*);
template<> ::CMsgGCToClientRequestLaneSelectionResponse* Arena::CreateMaybeMessage<::CMsgGCToClientRequestLaneSelectionResponse>(Arena*);
template<> ::CMsgGCToClientRequestMMInfo* Arena::CreateMaybeMessage<::CMsgGCToClientRequestMMInfo>(Arena*);
template<> ::CMsgGCToClientSteamDatagramTicket* Arena::CreateMaybeMessage<::CMsgGCToClientSteamDatagramTicket>(Arena*);
template<> ::CMsgJoinableCustomGameModesRequest* Arena::CreateMaybeMessage<::CMsgJoinableCustomGameModesRequest>(Arena*);
template<> ::CMsgJoinableCustomGameModesResponse* Arena::CreateMaybeMessage<::CMsgJoinableCustomGameModesResponse>(Arena*);
template<> ::CMsgJoinableCustomGameModesResponseEntry* Arena::CreateMaybeMessage<::CMsgJoinableCustomGameModesResponseEntry>(Arena*);
template<> ::CMsgJoinableCustomLobbiesRequest* Arena::CreateMaybeMessage<::CMsgJoinableCustomLobbiesRequest>(Arena*);
template<> ::CMsgJoinableCustomLobbiesResponse* Arena::CreateMaybeMessage<::CMsgJoinableCustomLobbiesResponse>(Arena*);
template<> ::CMsgJoinableCustomLobbiesResponseEntry* Arena::CreateMaybeMessage<::CMsgJoinableCustomLobbiesResponseEntry>(Arena*);
template<> ::CMsgLobbyList* Arena::CreateMaybeMessage<::CMsgLobbyList>(Arena*);
template<> ::CMsgLobbyListResponse* Arena::CreateMaybeMessage<::CMsgLobbyListResponse>(Arena*);
template<> ::CMsgLobbyScenarioSave* Arena::CreateMaybeMessage<::CMsgLobbyScenarioSave>(Arena*);
template<> ::CMsgPartyBuilderOptions* Arena::CreateMaybeMessage<::CMsgPartyBuilderOptions>(Arena*);
template<> ::CMsgPracticeLobbyCloseBroadcastChannel* Arena::CreateMaybeMessage<::CMsgPracticeLobbyCloseBroadcastChannel>(Arena*);
template<> ::CMsgPracticeLobbyCreate* Arena::CreateMaybeMessage<::CMsgPracticeLobbyCreate>(Arena*);
template<> ::CMsgPracticeLobbyCreate_SaveGame* Arena::CreateMaybeMessage<::CMsgPracticeLobbyCreate_SaveGame>(Arena*);
template<> ::CMsgPracticeLobbyJoin* Arena::CreateMaybeMessage<::CMsgPracticeLobbyJoin>(Arena*);
template<> ::CMsgPracticeLobbyJoinBroadcastChannel* Arena::CreateMaybeMessage<::CMsgPracticeLobbyJoinBroadcastChannel>(Arena*);
template<> ::CMsgPracticeLobbyJoinResponse* Arena::CreateMaybeMessage<::CMsgPracticeLobbyJoinResponse>(Arena*);
template<> ::CMsgPracticeLobbyKick* Arena::CreateMaybeMessage<::CMsgPracticeLobbyKick>(Arena*);
template<> ::CMsgPracticeLobbyKickFromTeam* Arena::CreateMaybeMessage<::CMsgPracticeLobbyKickFromTeam>(Arena*);
template<> ::CMsgPracticeLobbyLaunch* Arena::CreateMaybeMessage<::CMsgPracticeLobbyLaunch>(Arena*);
template<> ::CMsgPracticeLobbyLeave* Arena::CreateMaybeMessage<::CMsgPracticeLobbyLeave>(Arena*);
template<> ::CMsgPracticeLobbyList* Arena::CreateMaybeMessage<::CMsgPracticeLobbyList>(Arena*);
template<> ::CMsgPracticeLobbyListResponse* Arena::CreateMaybeMessage<::CMsgPracticeLobbyListResponse>(Arena*);
template<> ::CMsgPracticeLobbyListResponseEntry* Arena::CreateMaybeMessage<::CMsgPracticeLobbyListResponseEntry>(Arena*);
template<> ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* Arena::CreateMaybeMessage<::CMsgPracticeLobbyListResponseEntry_CLobbyMember>(Arena*);
template<> ::CMsgPracticeLobbySetCoach* Arena::CreateMaybeMessage<::CMsgPracticeLobbySetCoach>(Arena*);
template<> ::CMsgPracticeLobbySetDetails* Arena::CreateMaybeMessage<::CMsgPracticeLobbySetDetails>(Arena*);
template<> ::CMsgPracticeLobbySetTeamSlot* Arena::CreateMaybeMessage<::CMsgPracticeLobbySetTeamSlot>(Arena*);
template<> ::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* Arena::CreateMaybeMessage<::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus>(Arena*);
template<> ::CMsgQuickJoinCustomLobby* Arena::CreateMaybeMessage<::CMsgQuickJoinCustomLobby>(Arena*);
template<> ::CMsgQuickJoinCustomLobbyResponse* Arena::CreateMaybeMessage<::CMsgQuickJoinCustomLobbyResponse>(Arena*);
template<> ::CMsgQuickJoinCustomLobby_LegacyRegionPing* Arena::CreateMaybeMessage<::CMsgQuickJoinCustomLobby_LegacyRegionPing>(Arena*);
template<> ::CMsgReadyUp* Arena::CreateMaybeMessage<::CMsgReadyUp>(Arena*);
template<> ::CMsgReadyUpStatus* Arena::CreateMaybeMessage<::CMsgReadyUpStatus>(Arena*);
template<> ::CMsgSetSpectatorLobbyDetails* Arena::CreateMaybeMessage<::CMsgSetSpectatorLobbyDetails>(Arena*);
template<> ::CMsgSpectatorLobbyGameDetails* Arena::CreateMaybeMessage<::CMsgSpectatorLobbyGameDetails>(Arena*);
template<> ::CMsgSpectatorLobbyGameDetails_Team* Arena::CreateMaybeMessage<::CMsgSpectatorLobbyGameDetails_Team>(Arena*);
template<> ::CMsgSpectatorLobbyList* Arena::CreateMaybeMessage<::CMsgSpectatorLobbyList>(Arena*);
template<> ::CMsgSpectatorLobbyListResponse* Arena::CreateMaybeMessage<::CMsgSpectatorLobbyListResponse>(Arena*);
template<> ::CMsgSpectatorLobbyListResponse_SpectatorLobby* Arena::CreateMaybeMessage<::CMsgSpectatorLobbyListResponse_SpectatorLobby>(Arena*);
template<> ::CMsgStartFindingMatch* Arena::CreateMaybeMessage<::CMsgStartFindingMatch>(Arena*);
template<> ::CMsgStartFindingMatchResult* Arena::CreateMaybeMessage<::CMsgStartFindingMatchResult>(Arena*);
template<> ::CMsgStopFindingMatch* Arena::CreateMaybeMessage<::CMsgStopFindingMatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EStartFindingMatchResult : int {
  k_EStartFindingMatchResult_Invalid = 0,
  k_EStartFindingMatchResult_OK = 1,
  k_EStartFindingMatchResult_AlreadySearching = 2,
  k_EStartFindingMatchResult_FailGeneric = 100,
  k_EStartFindingMatchResult_FailedIgnore = 101,
  k_EStartFindingMatchResult_MatchmakingDisabled = 102,
  k_EStartFindingMatchResult_RegionOffline = 103,
  k_EStartFindingMatchResult_MatchmakingCooldown = 104,
  k_EStartFindingMatchResult_ClientOutOfDate = 105,
  k_EStartFindingMatchResult_CompetitiveNoLowPriority = 106,
  k_EStartFindingMatchResult_CompetitiveNotUnlocked = 107,
  k_EStartFindingMatchResult_GameModeNotUnlocked = 108,
  k_EStartFindingMatchResult_CompetitiveNotEnoughPlayTime = 109,
  k_EStartFindingMatchResult_MissingInitialSkill = 110,
  k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge = 111,
  k_EStartFindingMatchResult_MemberAlreadyInLobby = 112,
  k_EStartFindingMatchResult_MemberNotVACVerified = 113,
  k_EStartFindingMatchResult_WeekendTourneyBadPartySize = 114,
  k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall = 115,
  k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge = 116,
  k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge = 117,
  k_EStartFindingMatchResult_MemberMissingEventOwnership = 118,
  k_EStartFindingMatchResult_WeekendTourneyNotUnlocked = 119,
  k_EStartFindingMatchResult_WeekendTourneyRecentParticipation = 120,
  k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber = 121,
  k_EStartFindingMatchResult_NotMemberOfClan = 122,
  k_EStartFindingMatchResult_CoachesChallengeBadPartySize = 123,
  k_EStartFindingMatchResult_CoachesChallengeRequirementsNotMet = 124,
  k_EStartFindingMatchResult_InvalidRoleSelections = 125,
  k_EStartFindingMatchResult_PhoneNumberDiscrepancy = 126,
  k_EStartFindingMatchResult_NoQueuePoints = 127,
  k_EStartFindingMatchResult_MemberMissingGauntletFlag = 128,
  k_EStartFindingMatchResult_MemberGauntletTooRecent = 129,
  k_EStartFindingMatchResult_DifficultyNotUnlocked = 130,
  k_EStartFindingMatchResult_CoachesNotAllowedInParty = 131,
  k_EStartFindingMatchResult_MatchmakingBusy = 132,
  k_EStartFindingMatchResult_SteamChinaBanned = 133,
  k_EStartFindingMatchResult_SteamChinaInvalidMixedParty = 134
};
bool EStartFindingMatchResult_IsValid(int value);
constexpr EStartFindingMatchResult EStartFindingMatchResult_MIN = k_EStartFindingMatchResult_Invalid;
constexpr EStartFindingMatchResult EStartFindingMatchResult_MAX = k_EStartFindingMatchResult_SteamChinaInvalidMixedParty;
constexpr int EStartFindingMatchResult_ARRAYSIZE = EStartFindingMatchResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EStartFindingMatchResult_descriptor();
template<typename T>
inline const std::string& EStartFindingMatchResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EStartFindingMatchResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EStartFindingMatchResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EStartFindingMatchResult_descriptor(), enum_t_value);
}
inline bool EStartFindingMatchResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EStartFindingMatchResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EStartFindingMatchResult>(
    EStartFindingMatchResult_descriptor(), name, value);
}
// ===================================================================

class CMsgStartFindingMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStartFindingMatch) */ {
 public:
  inline CMsgStartFindingMatch() : CMsgStartFindingMatch(nullptr) {}
  virtual ~CMsgStartFindingMatch();
  explicit constexpr CMsgStartFindingMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStartFindingMatch(const CMsgStartFindingMatch& from);
  CMsgStartFindingMatch(CMsgStartFindingMatch&& from) noexcept
    : CMsgStartFindingMatch() {
    *this = ::std::move(from);
  }

  inline CMsgStartFindingMatch& operator=(const CMsgStartFindingMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStartFindingMatch& operator=(CMsgStartFindingMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgStartFindingMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStartFindingMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgStartFindingMatch*>(
               &_CMsgStartFindingMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgStartFindingMatch& a, CMsgStartFindingMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStartFindingMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStartFindingMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgStartFindingMatch* New() const final {
    return CreateMaybeMessage<CMsgStartFindingMatch>(nullptr);
  }

  CMsgStartFindingMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgStartFindingMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgStartFindingMatch& from);
  void MergeFrom(const CMsgStartFindingMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStartFindingMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStartFindingMatch";
  }
  protected:
  explicit CMsgStartFindingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kGameLanguageNameFieldNumber = 11,
    kPingDataFieldNumber = 12,
    kClientVersionFieldNumber = 3,
    kMatchTypeFieldNumber = 6,
    kTeamIdFieldNumber = 8,
    kGameLanguageEnumFieldNumber = 10,
    kRegionSelectFlagsFieldNumber = 13,
    kBotScriptIndexFieldNumber = 15,
    kSteamClanAccountIdFieldNumber = 16,
    kSoloQueueFieldNumber = 14,
    kIsChallengeMatchFieldNumber = 17,
    kHighPriorityDisabledFieldNumber = 19,
    kDisableExperimentalGameplayFieldNumber = 20,
    kLaneSelectionFlagsFieldNumber = 18,
    kCustomGameDifficultyMaskFieldNumber = 21,
    kMatchgroupsFieldNumber = 2,
    kGameModesFieldNumber = 4,
    kBotDifficultyFieldNumber = 5,
    kMatchlanguagesFieldNumber = 7,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string game_language_name = 11;
  bool has_game_language_name() const;
  private:
  bool _internal_has_game_language_name() const;
  public:
  void clear_game_language_name();
  const std::string& game_language_name() const;
  void set_game_language_name(const std::string& value);
  void set_game_language_name(std::string&& value);
  void set_game_language_name(const char* value);
  void set_game_language_name(const char* value, size_t size);
  std::string* mutable_game_language_name();
  std::string* release_game_language_name();
  void set_allocated_game_language_name(std::string* game_language_name);
  private:
  const std::string& _internal_game_language_name() const;
  void _internal_set_game_language_name(const std::string& value);
  std::string* _internal_mutable_game_language_name();
  public:

  // optional .CMsgClientPingData ping_data = 12;
  bool has_ping_data() const;
  private:
  bool _internal_has_ping_data() const;
  public:
  void clear_ping_data();
  const ::CMsgClientPingData& ping_data() const;
  ::CMsgClientPingData* release_ping_data();
  ::CMsgClientPingData* mutable_ping_data();
  void set_allocated_ping_data(::CMsgClientPingData* ping_data);
  private:
  const ::CMsgClientPingData& _internal_ping_data() const;
  ::CMsgClientPingData* _internal_mutable_ping_data();
  public:
  void unsafe_arena_set_allocated_ping_data(
      ::CMsgClientPingData* ping_data);
  ::CMsgClientPingData* unsafe_arena_release_ping_data();

  // optional uint32 client_version = 3;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // optional uint32 team_id = 8;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  bool has_game_language_enum() const;
  private:
  bool _internal_has_game_language_enum() const;
  public:
  void clear_game_language_enum();
  ::MatchLanguages game_language_enum() const;
  void set_game_language_enum(::MatchLanguages value);
  private:
  ::MatchLanguages _internal_game_language_enum() const;
  void _internal_set_game_language_enum(::MatchLanguages value);
  public:

  // optional uint32 region_select_flags = 13;
  bool has_region_select_flags() const;
  private:
  bool _internal_has_region_select_flags() const;
  public:
  void clear_region_select_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 region_select_flags() const;
  void set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_select_flags() const;
  void _internal_set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bot_script_index = 15;
  bool has_bot_script_index() const;
  private:
  bool _internal_has_bot_script_index() const;
  public:
  void clear_bot_script_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 bot_script_index() const;
  void set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bot_script_index() const;
  void _internal_set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 steam_clan_account_id = 16;
  bool has_steam_clan_account_id() const;
  private:
  bool _internal_has_steam_clan_account_id() const;
  public:
  void clear_steam_clan_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 steam_clan_account_id() const;
  void set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_steam_clan_account_id() const;
  void _internal_set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool solo_queue = 14;
  bool has_solo_queue() const;
  private:
  bool _internal_has_solo_queue() const;
  public:
  void clear_solo_queue();
  bool solo_queue() const;
  void set_solo_queue(bool value);
  private:
  bool _internal_solo_queue() const;
  void _internal_set_solo_queue(bool value);
  public:

  // optional bool is_challenge_match = 17;
  bool has_is_challenge_match() const;
  private:
  bool _internal_has_is_challenge_match() const;
  public:
  void clear_is_challenge_match();
  bool is_challenge_match() const;
  void set_is_challenge_match(bool value);
  private:
  bool _internal_is_challenge_match() const;
  void _internal_set_is_challenge_match(bool value);
  public:

  // optional bool high_priority_disabled = 19;
  bool has_high_priority_disabled() const;
  private:
  bool _internal_has_high_priority_disabled() const;
  public:
  void clear_high_priority_disabled();
  bool high_priority_disabled() const;
  void set_high_priority_disabled(bool value);
  private:
  bool _internal_high_priority_disabled() const;
  void _internal_set_high_priority_disabled(bool value);
  public:

  // optional bool disable_experimental_gameplay = 20;
  bool has_disable_experimental_gameplay() const;
  private:
  bool _internal_has_disable_experimental_gameplay() const;
  public:
  void clear_disable_experimental_gameplay();
  bool disable_experimental_gameplay() const;
  void set_disable_experimental_gameplay(bool value);
  private:
  bool _internal_disable_experimental_gameplay() const;
  void _internal_set_disable_experimental_gameplay(bool value);
  public:

  // optional uint32 lane_selection_flags = 18;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_game_difficulty_mask = 21;
  bool has_custom_game_difficulty_mask() const;
  private:
  bool _internal_has_custom_game_difficulty_mask() const;
  public:
  void clear_custom_game_difficulty_mask();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_difficulty_mask() const;
  void set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_difficulty_mask() const;
  void _internal_set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 matchgroups = 2 [default = 4294967295];
  bool has_matchgroups() const;
  private:
  bool _internal_has_matchgroups() const;
  public:
  void clear_matchgroups();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroups() const;
  void set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchgroups() const;
  void _internal_set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_modes = 4 [default = 4294967295];
  bool has_game_modes() const;
  private:
  bool _internal_has_game_modes() const;
  public:
  void clear_game_modes();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_modes() const;
  void set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_modes() const;
  void _internal_set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  bool has_bot_difficulty() const;
  private:
  bool _internal_has_bot_difficulty() const;
  public:
  void clear_bot_difficulty();
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty() const;
  void _internal_set_bot_difficulty(::DOTABotDifficulty value);
  public:

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  bool has_matchlanguages() const;
  private:
  bool _internal_has_matchlanguages() const;
  public:
  void clear_matchlanguages();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchlanguages() const;
  void set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchlanguages() const;
  void _internal_set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStartFindingMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_language_name_;
  ::CMsgClientPingData* ping_data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  int match_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  int game_language_enum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_select_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bot_script_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 steam_clan_account_id_;
  bool solo_queue_;
  bool is_challenge_match_;
  bool high_priority_disabled_;
  bool disable_experimental_gameplay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_difficulty_mask_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_modes_;
  int bot_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchlanguages_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgStartFindingMatchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStartFindingMatchResult) */ {
 public:
  inline CMsgStartFindingMatchResult() : CMsgStartFindingMatchResult(nullptr) {}
  virtual ~CMsgStartFindingMatchResult();
  explicit constexpr CMsgStartFindingMatchResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from);
  CMsgStartFindingMatchResult(CMsgStartFindingMatchResult&& from) noexcept
    : CMsgStartFindingMatchResult() {
    *this = ::std::move(from);
  }

  inline CMsgStartFindingMatchResult& operator=(const CMsgStartFindingMatchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStartFindingMatchResult& operator=(CMsgStartFindingMatchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgStartFindingMatchResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStartFindingMatchResult* internal_default_instance() {
    return reinterpret_cast<const CMsgStartFindingMatchResult*>(
               &_CMsgStartFindingMatchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgStartFindingMatchResult& a, CMsgStartFindingMatchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStartFindingMatchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStartFindingMatchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgStartFindingMatchResult* New() const final {
    return CreateMaybeMessage<CMsgStartFindingMatchResult>(nullptr);
  }

  CMsgStartFindingMatchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgStartFindingMatchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgStartFindingMatchResult& from);
  void MergeFrom(const CMsgStartFindingMatchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStartFindingMatchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStartFindingMatchResult";
  }
  protected:
  explicit CMsgStartFindingMatchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsiblePartyMembersFieldNumber = 5,
    kErrorTokenFieldNumber = 3,
    kDebugMessageFieldNumber = 4,
    kResultFieldNumber = 2,
    kResultMetadataFieldNumber = 6,
    kLegacyGenericEresultFieldNumber = 1,
  };
  // repeated fixed64 responsible_party_members = 5;
  int responsible_party_members_size() const;
  private:
  int _internal_responsible_party_members_size() const;
  public:
  void clear_responsible_party_members();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_responsible_party_members(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_responsible_party_members() const;
  void _internal_add_responsible_party_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_responsible_party_members();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 responsible_party_members(int index) const;
  void set_responsible_party_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_responsible_party_members(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      responsible_party_members() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_responsible_party_members();

  // optional string error_token = 3;
  bool has_error_token() const;
  private:
  bool _internal_has_error_token() const;
  public:
  void clear_error_token();
  const std::string& error_token() const;
  void set_error_token(const std::string& value);
  void set_error_token(std::string&& value);
  void set_error_token(const char* value);
  void set_error_token(const char* value, size_t size);
  std::string* mutable_error_token();
  std::string* release_error_token();
  void set_allocated_error_token(std::string* error_token);
  private:
  const std::string& _internal_error_token() const;
  void _internal_set_error_token(const std::string& value);
  std::string* _internal_mutable_error_token();
  public:

  // optional string debug_message = 4;
  bool has_debug_message() const;
  private:
  bool _internal_has_debug_message() const;
  public:
  void clear_debug_message();
  const std::string& debug_message() const;
  void set_debug_message(const std::string& value);
  void set_debug_message(std::string&& value);
  void set_debug_message(const char* value);
  void set_debug_message(const char* value, size_t size);
  std::string* mutable_debug_message();
  std::string* release_debug_message();
  void set_allocated_debug_message(std::string* debug_message);
  private:
  const std::string& _internal_debug_message() const;
  void _internal_set_debug_message(const std::string& value);
  std::string* _internal_mutable_debug_message();
  public:

  // optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::EStartFindingMatchResult result() const;
  void set_result(::EStartFindingMatchResult value);
  private:
  ::EStartFindingMatchResult _internal_result() const;
  void _internal_set_result(::EStartFindingMatchResult value);
  public:

  // optional uint32 result_metadata = 6;
  bool has_result_metadata() const;
  private:
  bool _internal_has_result_metadata() const;
  public:
  void clear_result_metadata();
  ::PROTOBUF_NAMESPACE_ID::uint32 result_metadata() const;
  void set_result_metadata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_result_metadata() const;
  void _internal_set_result_metadata(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  bool has_legacy_generic_eresult() const;
  private:
  bool _internal_has_legacy_generic_eresult() const;
  public:
  void clear_legacy_generic_eresult();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_generic_eresult() const;
  void set_legacy_generic_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_generic_eresult() const;
  void _internal_set_legacy_generic_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStartFindingMatchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > responsible_party_members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_message_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 result_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_generic_eresult_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgStopFindingMatch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgStopFindingMatch) */ {
 public:
  inline CMsgStopFindingMatch() : CMsgStopFindingMatch(nullptr) {}
  virtual ~CMsgStopFindingMatch();
  explicit constexpr CMsgStopFindingMatch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgStopFindingMatch(const CMsgStopFindingMatch& from);
  CMsgStopFindingMatch(CMsgStopFindingMatch&& from) noexcept
    : CMsgStopFindingMatch() {
    *this = ::std::move(from);
  }

  inline CMsgStopFindingMatch& operator=(const CMsgStopFindingMatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgStopFindingMatch& operator=(CMsgStopFindingMatch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgStopFindingMatch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgStopFindingMatch* internal_default_instance() {
    return reinterpret_cast<const CMsgStopFindingMatch*>(
               &_CMsgStopFindingMatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgStopFindingMatch& a, CMsgStopFindingMatch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgStopFindingMatch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgStopFindingMatch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgStopFindingMatch* New() const final {
    return CreateMaybeMessage<CMsgStopFindingMatch>(nullptr);
  }

  CMsgStopFindingMatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgStopFindingMatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgStopFindingMatch& from);
  void MergeFrom(const CMsgStopFindingMatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgStopFindingMatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgStopFindingMatch";
  }
  protected:
  explicit CMsgStopFindingMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptCooldownFieldNumber = 1,
  };
  // optional bool accept_cooldown = 1;
  bool has_accept_cooldown() const;
  private:
  bool _internal_has_accept_cooldown() const;
  public:
  void clear_accept_cooldown();
  bool accept_cooldown() const;
  void set_accept_cooldown(bool value);
  private:
  bool _internal_accept_cooldown() const;
  void _internal_set_accept_cooldown(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgStopFindingMatch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool accept_cooldown_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPartyBuilderOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPartyBuilderOptions) */ {
 public:
  inline CMsgPartyBuilderOptions() : CMsgPartyBuilderOptions(nullptr) {}
  virtual ~CMsgPartyBuilderOptions();
  explicit constexpr CMsgPartyBuilderOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from);
  CMsgPartyBuilderOptions(CMsgPartyBuilderOptions&& from) noexcept
    : CMsgPartyBuilderOptions() {
    *this = ::std::move(from);
  }

  inline CMsgPartyBuilderOptions& operator=(const CMsgPartyBuilderOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPartyBuilderOptions& operator=(CMsgPartyBuilderOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPartyBuilderOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPartyBuilderOptions* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyBuilderOptions*>(
               &_CMsgPartyBuilderOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgPartyBuilderOptions& a, CMsgPartyBuilderOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPartyBuilderOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPartyBuilderOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPartyBuilderOptions* New() const final {
    return CreateMaybeMessage<CMsgPartyBuilderOptions>(nullptr);
  }

  CMsgPartyBuilderOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPartyBuilderOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPartyBuilderOptions& from);
  void MergeFrom(const CMsgPartyBuilderOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPartyBuilderOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPartyBuilderOptions";
  }
  protected:
  explicit CMsgPartyBuilderOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalSlotsFieldNumber = 1,
    kMatchTypeFieldNumber = 2,
    kMatchgroupsFieldNumber = 3,
    kClientVersionFieldNumber = 4,
    kLanguageFieldNumber = 5,
  };
  // optional uint32 additional_slots = 1;
  bool has_additional_slots() const;
  private:
  bool _internal_has_additional_slots() const;
  public:
  void clear_additional_slots();
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_slots() const;
  void set_additional_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_additional_slots() const;
  void _internal_set_additional_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  bool has_match_type() const;
  private:
  bool _internal_has_match_type() const;
  public:
  void clear_match_type();
  ::MatchType match_type() const;
  void set_match_type(::MatchType value);
  private:
  ::MatchType _internal_match_type() const;
  void _internal_set_match_type(::MatchType value);
  public:

  // optional uint32 matchgroups = 3;
  bool has_matchgroups() const;
  private:
  bool _internal_has_matchgroups() const;
  public:
  void clear_matchgroups();
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroups() const;
  void set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matchgroups() const;
  void _internal_set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_version = 4;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::MatchLanguages language() const;
  void set_language(::MatchLanguages value);
  private:
  ::MatchLanguages _internal_language() const;
  void _internal_set_language(::MatchLanguages value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPartyBuilderOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 additional_slots_;
  int match_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matchgroups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  int language_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyUp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReadyUp) */ {
 public:
  inline CMsgReadyUp() : CMsgReadyUp(nullptr) {}
  virtual ~CMsgReadyUp();
  explicit constexpr CMsgReadyUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReadyUp(const CMsgReadyUp& from);
  CMsgReadyUp(CMsgReadyUp&& from) noexcept
    : CMsgReadyUp() {
    *this = ::std::move(from);
  }

  inline CMsgReadyUp& operator=(const CMsgReadyUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReadyUp& operator=(CMsgReadyUp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgReadyUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReadyUp* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyUp*>(
               &_CMsgReadyUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgReadyUp& a, CMsgReadyUp& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReadyUp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReadyUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyUp* New() const final {
    return CreateMaybeMessage<CMsgReadyUp>(nullptr);
  }

  CMsgReadyUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReadyUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgReadyUp& from);
  void MergeFrom(const CMsgReadyUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReadyUp";
  }
  protected:
  explicit CMsgReadyUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHardwareSpecsFieldNumber = 3,
    kReadyUpKeyFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // optional .CDOTAClientHardwareSpecs hardware_specs = 3;
  bool has_hardware_specs() const;
  private:
  bool _internal_has_hardware_specs() const;
  public:
  void clear_hardware_specs();
  const ::CDOTAClientHardwareSpecs& hardware_specs() const;
  ::CDOTAClientHardwareSpecs* release_hardware_specs();
  ::CDOTAClientHardwareSpecs* mutable_hardware_specs();
  void set_allocated_hardware_specs(::CDOTAClientHardwareSpecs* hardware_specs);
  private:
  const ::CDOTAClientHardwareSpecs& _internal_hardware_specs() const;
  ::CDOTAClientHardwareSpecs* _internal_mutable_hardware_specs();
  public:
  void unsafe_arena_set_allocated_hardware_specs(
      ::CDOTAClientHardwareSpecs* hardware_specs);
  ::CDOTAClientHardwareSpecs* unsafe_arena_release_hardware_specs();

  // optional fixed64 ready_up_key = 2;
  bool has_ready_up_key() const;
  private:
  bool _internal_has_ready_up_key() const;
  public:
  void clear_ready_up_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 ready_up_key() const;
  void set_ready_up_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ready_up_key() const;
  void _internal_set_ready_up_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::DOTALobbyReadyState state() const;
  void set_state(::DOTALobbyReadyState value);
  private:
  ::DOTALobbyReadyState _internal_state() const;
  void _internal_set_state(::DOTALobbyReadyState value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReadyUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CDOTAClientHardwareSpecs* hardware_specs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ready_up_key_;
  int state_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgReadyUpStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgReadyUpStatus) */ {
 public:
  inline CMsgReadyUpStatus() : CMsgReadyUpStatus(nullptr) {}
  virtual ~CMsgReadyUpStatus();
  explicit constexpr CMsgReadyUpStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgReadyUpStatus(const CMsgReadyUpStatus& from);
  CMsgReadyUpStatus(CMsgReadyUpStatus&& from) noexcept
    : CMsgReadyUpStatus() {
    *this = ::std::move(from);
  }

  inline CMsgReadyUpStatus& operator=(const CMsgReadyUpStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgReadyUpStatus& operator=(CMsgReadyUpStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgReadyUpStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgReadyUpStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgReadyUpStatus*>(
               &_CMsgReadyUpStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgReadyUpStatus& a, CMsgReadyUpStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgReadyUpStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgReadyUpStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgReadyUpStatus* New() const final {
    return CreateMaybeMessage<CMsgReadyUpStatus>(nullptr);
  }

  CMsgReadyUpStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgReadyUpStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgReadyUpStatus& from);
  void MergeFrom(const CMsgReadyUpStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgReadyUpStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgReadyUpStatus";
  }
  protected:
  explicit CMsgReadyUpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcceptedIdsFieldNumber = 2,
    kDeclinedIdsFieldNumber = 3,
    kLobbyIdFieldNumber = 1,
  };
  // repeated uint32 accepted_ids = 2;
  int accepted_ids_size() const;
  private:
  int _internal_accepted_ids_size() const;
  public:
  void clear_accepted_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_accepted_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_accepted_ids() const;
  void _internal_add_accepted_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_accepted_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 accepted_ids(int index) const;
  void set_accepted_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_accepted_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      accepted_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_accepted_ids();

  // repeated uint32 declined_ids = 3;
  int declined_ids_size() const;
  private:
  int _internal_declined_ids_size() const;
  public:
  void clear_declined_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_declined_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_declined_ids() const;
  void _internal_add_declined_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_declined_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 declined_ids(int index) const;
  void set_declined_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_declined_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      declined_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_declined_ids();

  // optional fixed64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgReadyUpStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > accepted_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > declined_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgAbandonCurrentGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgAbandonCurrentGame) */ {
 public:
  inline CMsgAbandonCurrentGame() : CMsgAbandonCurrentGame(nullptr) {}
  virtual ~CMsgAbandonCurrentGame();
  explicit constexpr CMsgAbandonCurrentGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from);
  CMsgAbandonCurrentGame(CMsgAbandonCurrentGame&& from) noexcept
    : CMsgAbandonCurrentGame() {
    *this = ::std::move(from);
  }

  inline CMsgAbandonCurrentGame& operator=(const CMsgAbandonCurrentGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgAbandonCurrentGame& operator=(CMsgAbandonCurrentGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgAbandonCurrentGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgAbandonCurrentGame* internal_default_instance() {
    return reinterpret_cast<const CMsgAbandonCurrentGame*>(
               &_CMsgAbandonCurrentGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgAbandonCurrentGame& a, CMsgAbandonCurrentGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgAbandonCurrentGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgAbandonCurrentGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgAbandonCurrentGame* New() const final {
    return CreateMaybeMessage<CMsgAbandonCurrentGame>(nullptr);
  }

  CMsgAbandonCurrentGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgAbandonCurrentGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgAbandonCurrentGame& from);
  void MergeFrom(const CMsgAbandonCurrentGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgAbandonCurrentGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgAbandonCurrentGame";
  }
  protected:
  explicit CMsgAbandonCurrentGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgAbandonCurrentGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyScenarioSave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyScenarioSave) */ {
 public:
  inline CMsgLobbyScenarioSave() : CMsgLobbyScenarioSave(nullptr) {}
  virtual ~CMsgLobbyScenarioSave();
  explicit constexpr CMsgLobbyScenarioSave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyScenarioSave(const CMsgLobbyScenarioSave& from);
  CMsgLobbyScenarioSave(CMsgLobbyScenarioSave&& from) noexcept
    : CMsgLobbyScenarioSave() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyScenarioSave& operator=(const CMsgLobbyScenarioSave& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyScenarioSave& operator=(CMsgLobbyScenarioSave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLobbyScenarioSave& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyScenarioSave* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyScenarioSave*>(
               &_CMsgLobbyScenarioSave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgLobbyScenarioSave& a, CMsgLobbyScenarioSave& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyScenarioSave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyScenarioSave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyScenarioSave* New() const final {
    return CreateMaybeMessage<CMsgLobbyScenarioSave>(nullptr);
  }

  CMsgLobbyScenarioSave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyScenarioSave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLobbyScenarioSave& from);
  void MergeFrom(const CMsgLobbyScenarioSave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyScenarioSave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyScenarioSave";
  }
  protected:
  explicit CMsgLobbyScenarioSave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kVersionFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyScenarioSave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbySetDetails) */ {
 public:
  inline CMsgPracticeLobbySetDetails() : CMsgPracticeLobbySetDetails(nullptr) {}
  virtual ~CMsgPracticeLobbySetDetails();
  explicit constexpr CMsgPracticeLobbySetDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from);
  CMsgPracticeLobbySetDetails(CMsgPracticeLobbySetDetails&& from) noexcept
    : CMsgPracticeLobbySetDetails() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbySetDetails& operator=(const CMsgPracticeLobbySetDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbySetDetails& operator=(CMsgPracticeLobbySetDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbySetDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbySetDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbySetDetails*>(
               &_CMsgPracticeLobbySetDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgPracticeLobbySetDetails& a, CMsgPracticeLobbySetDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbySetDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbySetDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbySetDetails* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbySetDetails>(nullptr);
  }

  CMsgPracticeLobbySetDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbySetDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbySetDetails& from);
  void MergeFrom(const CMsgPracticeLobbySetDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbySetDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbySetDetails";
  }
  protected:
  explicit CMsgPracticeLobbySetDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamDetailsFieldNumber = 3,
    kRequestedHeroIdsFieldNumber = 50,
    kGameNameFieldNumber = 2,
    kPassKeyFieldNumber = 15,
    kCustomGameModeFieldNumber = 26,
    kCustomMapNameFieldNumber = 27,
    kLanHostPingLocationFieldNumber = 48,
    kScenarioSaveFieldNumber = 51,
    kLobbyIdFieldNumber = 1,
    kServerRegionFieldNumber = 4,
    kGameModeFieldNumber = 5,
    kCmPickFieldNumber = 6,
    kBotDifficultyRadiantFieldNumber = 9,
    kAllowCheatsFieldNumber = 10,
    kFillWithBotsFieldNumber = 11,
    kIntroModeFieldNumber = 12,
    kAllowSpectatingFieldNumber = 13,
    kGameVersionFieldNumber = 14,
    kLeagueidFieldNumber = 16,
    kPenaltyLevelRadiantFieldNumber = 17,
    kPenaltyLevelDireFieldNumber = 18,
    kLoadGameIdFieldNumber = 19,
    kSeriesTypeFieldNumber = 20,
    kRadiantSeriesWinsFieldNumber = 21,
    kDireSeriesWinsFieldNumber = 22,
    kCustomDifficultyFieldNumber = 28,
    kCustomGameIdFieldNumber = 29,
    kCustomMinPlayersFieldNumber = 30,
    kCustomMaxPlayersFieldNumber = 31,
    kAllchatFieldNumber = 23,
    kLanFieldNumber = 25,
    kCustomGamePenaltiesFieldNumber = 47,
    kVisibilityFieldNumber = 33,
    kCustomGameCrcFieldNumber = 34,
    kPreviousMatchOverrideFieldNumber = 38,
    kCustomGameTimestampFieldNumber = 37,
    kPauseSettingFieldNumber = 42,
    kBotRadiantFieldNumber = 44,
    kLeagueNodeIdFieldNumber = 49,
    kBotDifficultyDireFieldNumber = 43,
    kSelectionPriorityRulesFieldNumber = 46,
    kBotDireFieldNumber = 45,
    kDotaTvDelayFieldNumber = 24,
  };
  // repeated .CLobbyTeamDetails team_details = 3;
  int team_details_size() const;
  private:
  int _internal_team_details_size() const;
  public:
  void clear_team_details();
  ::CLobbyTeamDetails* mutable_team_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >*
      mutable_team_details();
  private:
  const ::CLobbyTeamDetails& _internal_team_details(int index) const;
  ::CLobbyTeamDetails* _internal_add_team_details();
  public:
  const ::CLobbyTeamDetails& team_details(int index) const;
  ::CLobbyTeamDetails* add_team_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >&
      team_details() const;

  // repeated uint32 requested_hero_ids = 50;
  int requested_hero_ids_size() const;
  private:
  int _internal_requested_hero_ids_size() const;
  public:
  void clear_requested_hero_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requested_hero_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_requested_hero_ids() const;
  void _internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_requested_hero_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 requested_hero_ids(int index) const;
  void set_requested_hero_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      requested_hero_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_requested_hero_ids();

  // optional string game_name = 2;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  void set_game_name(const std::string& value);
  void set_game_name(std::string&& value);
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  std::string* mutable_game_name();
  std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional string pass_key = 15;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  void set_pass_key(const std::string& value);
  void set_pass_key(std::string&& value);
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  std::string* mutable_pass_key();
  std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional string custom_game_mode = 26;
  bool has_custom_game_mode() const;
  private:
  bool _internal_has_custom_game_mode() const;
  public:
  void clear_custom_game_mode();
  const std::string& custom_game_mode() const;
  void set_custom_game_mode(const std::string& value);
  void set_custom_game_mode(std::string&& value);
  void set_custom_game_mode(const char* value);
  void set_custom_game_mode(const char* value, size_t size);
  std::string* mutable_custom_game_mode();
  std::string* release_custom_game_mode();
  void set_allocated_custom_game_mode(std::string* custom_game_mode);
  private:
  const std::string& _internal_custom_game_mode() const;
  void _internal_set_custom_game_mode(const std::string& value);
  std::string* _internal_mutable_custom_game_mode();
  public:

  // optional string custom_map_name = 27;
  bool has_custom_map_name() const;
  private:
  bool _internal_has_custom_map_name() const;
  public:
  void clear_custom_map_name();
  const std::string& custom_map_name() const;
  void set_custom_map_name(const std::string& value);
  void set_custom_map_name(std::string&& value);
  void set_custom_map_name(const char* value);
  void set_custom_map_name(const char* value, size_t size);
  std::string* mutable_custom_map_name();
  std::string* release_custom_map_name();
  void set_allocated_custom_map_name(std::string* custom_map_name);
  private:
  const std::string& _internal_custom_map_name() const;
  void _internal_set_custom_map_name(const std::string& value);
  std::string* _internal_mutable_custom_map_name();
  public:

  // optional string lan_host_ping_location = 48;
  bool has_lan_host_ping_location() const;
  private:
  bool _internal_has_lan_host_ping_location() const;
  public:
  void clear_lan_host_ping_location();
  const std::string& lan_host_ping_location() const;
  void set_lan_host_ping_location(const std::string& value);
  void set_lan_host_ping_location(std::string&& value);
  void set_lan_host_ping_location(const char* value);
  void set_lan_host_ping_location(const char* value, size_t size);
  std::string* mutable_lan_host_ping_location();
  std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(std::string* lan_host_ping_location);
  private:
  const std::string& _internal_lan_host_ping_location() const;
  void _internal_set_lan_host_ping_location(const std::string& value);
  std::string* _internal_mutable_lan_host_ping_location();
  public:

  // optional .CMsgLobbyScenarioSave scenario_save = 51;
  bool has_scenario_save() const;
  private:
  bool _internal_has_scenario_save() const;
  public:
  void clear_scenario_save();
  const ::CMsgLobbyScenarioSave& scenario_save() const;
  ::CMsgLobbyScenarioSave* release_scenario_save();
  ::CMsgLobbyScenarioSave* mutable_scenario_save();
  void set_allocated_scenario_save(::CMsgLobbyScenarioSave* scenario_save);
  private:
  const ::CMsgLobbyScenarioSave& _internal_scenario_save() const;
  ::CMsgLobbyScenarioSave* _internal_mutable_scenario_save();
  public:
  void unsafe_arena_set_allocated_scenario_save(
      ::CMsgLobbyScenarioSave* scenario_save);
  ::CMsgLobbyScenarioSave* unsafe_arena_release_scenario_save();

  // optional uint64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 server_region = 4;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_mode = 5;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_mode() const;
  void _internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  bool has_cm_pick() const;
  private:
  bool _internal_has_cm_pick() const;
  public:
  void clear_cm_pick();
  ::DOTA_CM_PICK cm_pick() const;
  void set_cm_pick(::DOTA_CM_PICK value);
  private:
  ::DOTA_CM_PICK _internal_cm_pick() const;
  void _internal_set_cm_pick(::DOTA_CM_PICK value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty_radiant() const;
  private:
  bool _internal_has_bot_difficulty_radiant() const;
  public:
  void clear_bot_difficulty_radiant();
  ::DOTABotDifficulty bot_difficulty_radiant() const;
  void set_bot_difficulty_radiant(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_radiant() const;
  void _internal_set_bot_difficulty_radiant(::DOTABotDifficulty value);
  public:

  // optional bool allow_cheats = 10;
  bool has_allow_cheats() const;
  private:
  bool _internal_has_allow_cheats() const;
  public:
  void clear_allow_cheats();
  bool allow_cheats() const;
  void set_allow_cheats(bool value);
  private:
  bool _internal_allow_cheats() const;
  void _internal_set_allow_cheats(bool value);
  public:

  // optional bool fill_with_bots = 11;
  bool has_fill_with_bots() const;
  private:
  bool _internal_has_fill_with_bots() const;
  public:
  void clear_fill_with_bots();
  bool fill_with_bots() const;
  void set_fill_with_bots(bool value);
  private:
  bool _internal_fill_with_bots() const;
  void _internal_set_fill_with_bots(bool value);
  public:

  // optional bool intro_mode = 12;
  bool has_intro_mode() const;
  private:
  bool _internal_has_intro_mode() const;
  public:
  void clear_intro_mode();
  bool intro_mode() const;
  void set_intro_mode(bool value);
  private:
  bool _internal_intro_mode() const;
  void _internal_set_intro_mode(bool value);
  public:

  // optional bool allow_spectating = 13;
  bool has_allow_spectating() const;
  private:
  bool _internal_has_allow_spectating() const;
  public:
  void clear_allow_spectating();
  bool allow_spectating() const;
  void set_allow_spectating(bool value);
  private:
  bool _internal_allow_spectating() const;
  void _internal_set_allow_spectating(bool value);
  public:

  // optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  bool has_game_version() const;
  private:
  bool _internal_has_game_version() const;
  public:
  void clear_game_version();
  ::DOTAGameVersion game_version() const;
  void set_game_version(::DOTAGameVersion value);
  private:
  ::DOTAGameVersion _internal_game_version() const;
  void _internal_set_game_version(::DOTAGameVersion value);
  public:

  // optional uint32 leagueid = 16;
  bool has_leagueid() const;
  private:
  bool _internal_has_leagueid() const;
  public:
  void clear_leagueid();
  ::PROTOBUF_NAMESPACE_ID::uint32 leagueid() const;
  void set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leagueid() const;
  void _internal_set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_level_radiant = 17;
  bool has_penalty_level_radiant() const;
  private:
  bool _internal_has_penalty_level_radiant() const;
  public:
  void clear_penalty_level_radiant();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_radiant() const;
  void set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_level_radiant() const;
  void _internal_set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 penalty_level_dire = 18;
  bool has_penalty_level_dire() const;
  private:
  bool _internal_has_penalty_level_dire() const;
  public:
  void clear_penalty_level_dire();
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_dire() const;
  void set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_penalty_level_dire() const;
  void _internal_set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 load_game_id = 19;
  bool has_load_game_id() const;
  private:
  bool _internal_has_load_game_id() const;
  public:
  void clear_load_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 load_game_id() const;
  void set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_load_game_id() const;
  void _internal_set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_type = 20;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type() const;
  void set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_type() const;
  void _internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 radiant_series_wins = 21;
  bool has_radiant_series_wins() const;
  private:
  bool _internal_has_radiant_series_wins() const;
  public:
  void clear_radiant_series_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 radiant_series_wins() const;
  void set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_radiant_series_wins() const;
  void _internal_set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dire_series_wins = 22;
  bool has_dire_series_wins() const;
  private:
  bool _internal_has_dire_series_wins() const;
  public:
  void clear_dire_series_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 dire_series_wins() const;
  void set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dire_series_wins() const;
  void _internal_set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_difficulty = 28;
  bool has_custom_difficulty() const;
  private:
  bool _internal_has_custom_difficulty() const;
  public:
  void clear_custom_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_difficulty() const;
  void set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_difficulty() const;
  void _internal_set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 custom_game_id = 29;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 custom_min_players = 30;
  bool has_custom_min_players() const;
  private:
  bool _internal_has_custom_min_players() const;
  public:
  void clear_custom_min_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_min_players() const;
  void set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_min_players() const;
  void _internal_set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 custom_max_players = 31;
  bool has_custom_max_players() const;
  private:
  bool _internal_has_custom_max_players() const;
  public:
  void clear_custom_max_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_max_players() const;
  void set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_max_players() const;
  void _internal_set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool allchat = 23 [default = false];
  bool has_allchat() const;
  private:
  bool _internal_has_allchat() const;
  public:
  void clear_allchat();
  bool allchat() const;
  void set_allchat(bool value);
  private:
  bool _internal_allchat() const;
  void _internal_set_allchat(bool value);
  public:

  // optional bool lan = 25;
  bool has_lan() const;
  private:
  bool _internal_has_lan() const;
  public:
  void clear_lan();
  bool lan() const;
  void set_lan(bool value);
  private:
  bool _internal_lan() const;
  void _internal_set_lan(bool value);
  public:

  // optional bool custom_game_penalties = 47;
  bool has_custom_game_penalties() const;
  private:
  bool _internal_has_custom_game_penalties() const;
  public:
  void clear_custom_game_penalties();
  bool custom_game_penalties() const;
  void set_custom_game_penalties(bool value);
  private:
  bool _internal_custom_game_penalties() const;
  void _internal_set_custom_game_penalties(bool value);
  public:

  // optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  ::DOTALobbyVisibility visibility() const;
  void set_visibility(::DOTALobbyVisibility value);
  private:
  ::DOTALobbyVisibility _internal_visibility() const;
  void _internal_set_visibility(::DOTALobbyVisibility value);
  public:

  // optional fixed64 custom_game_crc = 34;
  bool has_custom_game_crc() const;
  private:
  bool _internal_has_custom_game_crc() const;
  public:
  void clear_custom_game_crc();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc() const;
  void set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_crc() const;
  void _internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 previous_match_override = 38;
  bool has_previous_match_override() const;
  private:
  bool _internal_has_previous_match_override() const;
  public:
  void clear_previous_match_override();
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_match_override() const;
  void set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_previous_match_override() const;
  void _internal_set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 custom_game_timestamp = 37;
  bool has_custom_game_timestamp() const;
  private:
  bool _internal_has_custom_game_timestamp() const;
  public:
  void clear_custom_game_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_timestamp() const;
  void _internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  bool has_pause_setting() const;
  private:
  bool _internal_has_pause_setting() const;
  public:
  void clear_pause_setting();
  ::LobbyDotaPauseSetting pause_setting() const;
  void set_pause_setting(::LobbyDotaPauseSetting value);
  private:
  ::LobbyDotaPauseSetting _internal_pause_setting() const;
  void _internal_set_pause_setting(::LobbyDotaPauseSetting value);
  public:

  // optional uint64 bot_radiant = 44;
  bool has_bot_radiant() const;
  private:
  bool _internal_has_bot_radiant() const;
  public:
  void clear_bot_radiant();
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_radiant() const;
  void set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bot_radiant() const;
  void _internal_set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 league_node_id = 49;
  bool has_league_node_id() const;
  private:
  bool _internal_has_league_node_id() const;
  public:
  void clear_league_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_node_id() const;
  void set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_node_id() const;
  void _internal_set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty_dire() const;
  private:
  bool _internal_has_bot_difficulty_dire() const;
  public:
  void clear_bot_difficulty_dire();
  ::DOTABotDifficulty bot_difficulty_dire() const;
  void set_bot_difficulty_dire(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty_dire() const;
  void _internal_set_bot_difficulty_dire(::DOTABotDifficulty value);
  public:

  // optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  bool has_selection_priority_rules() const;
  private:
  bool _internal_has_selection_priority_rules() const;
  public:
  void clear_selection_priority_rules();
  ::DOTASelectionPriorityRules selection_priority_rules() const;
  void set_selection_priority_rules(::DOTASelectionPriorityRules value);
  private:
  ::DOTASelectionPriorityRules _internal_selection_priority_rules() const;
  void _internal_set_selection_priority_rules(::DOTASelectionPriorityRules value);
  public:

  // optional uint64 bot_dire = 45;
  bool has_bot_dire() const;
  private:
  bool _internal_has_bot_dire() const;
  public:
  void clear_bot_dire();
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_dire() const;
  void set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bot_dire() const;
  void _internal_set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  bool has_dota_tv_delay() const;
  private:
  bool _internal_has_dota_tv_delay() const;
  public:
  void clear_dota_tv_delay();
  ::LobbyDotaTVDelay dota_tv_delay() const;
  void set_dota_tv_delay(::LobbyDotaTVDelay value);
  private:
  ::LobbyDotaTVDelay _internal_dota_tv_delay() const;
  void _internal_set_dota_tv_delay(::LobbyDotaTVDelay value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails > team_details_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > requested_hero_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_game_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_host_ping_location_;
  ::CMsgLobbyScenarioSave* scenario_save_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode_;
  int cm_pick_;
  int bot_difficulty_radiant_;
  bool allow_cheats_;
  bool fill_with_bots_;
  bool intro_mode_;
  bool allow_spectating_;
  int game_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leagueid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_radiant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 penalty_level_dire_;
  ::PROTOBUF_NAMESPACE_ID::uint32 load_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 radiant_series_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dire_series_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_min_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_max_players_;
  bool allchat_;
  bool lan_;
  bool custom_game_penalties_;
  int visibility_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 previous_match_override_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp_;
  int pause_setting_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_radiant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_node_id_;
  int bot_difficulty_dire_;
  int selection_priority_rules_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bot_dire_;
  int dota_tv_delay_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCreate_SaveGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyCreate.SaveGame) */ {
 public:
  inline CMsgPracticeLobbyCreate_SaveGame() : CMsgPracticeLobbyCreate_SaveGame(nullptr) {}
  virtual ~CMsgPracticeLobbyCreate_SaveGame();
  explicit constexpr CMsgPracticeLobbyCreate_SaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from);
  CMsgPracticeLobbyCreate_SaveGame(CMsgPracticeLobbyCreate_SaveGame&& from) noexcept
    : CMsgPracticeLobbyCreate_SaveGame() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyCreate_SaveGame& operator=(const CMsgPracticeLobbyCreate_SaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyCreate_SaveGame& operator=(CMsgPracticeLobbyCreate_SaveGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyCreate_SaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyCreate_SaveGame* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyCreate_SaveGame*>(
               &_CMsgPracticeLobbyCreate_SaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgPracticeLobbyCreate_SaveGame& a, CMsgPracticeLobbyCreate_SaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyCreate_SaveGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyCreate_SaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyCreate_SaveGame* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyCreate_SaveGame>(nullptr);
  }

  CMsgPracticeLobbyCreate_SaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyCreate_SaveGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from);
  void MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyCreate_SaveGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyCreate.SaveGame";
  }
  protected:
  explicit CMsgPracticeLobbyCreate_SaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kSteamIdFieldNumber = 3,
    kSignatureFieldNumber = 4,
    kVersionFieldNumber = 2,
  };
  // optional bytes data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional fixed64 steam_id = 3;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 signature = 4;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  ::PROTOBUF_NAMESPACE_ID::uint64 signature() const;
  void set_signature(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_signature() const;
  void _internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCreate.SaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 signature_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyCreate) */ {
 public:
  inline CMsgPracticeLobbyCreate() : CMsgPracticeLobbyCreate(nullptr) {}
  virtual ~CMsgPracticeLobbyCreate();
  explicit constexpr CMsgPracticeLobbyCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from);
  CMsgPracticeLobbyCreate(CMsgPracticeLobbyCreate&& from) noexcept
    : CMsgPracticeLobbyCreate() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyCreate& operator=(const CMsgPracticeLobbyCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyCreate& operator=(CMsgPracticeLobbyCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyCreate*>(
               &_CMsgPracticeLobbyCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgPracticeLobbyCreate& a, CMsgPracticeLobbyCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyCreate* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyCreate>(nullptr);
  }

  CMsgPracticeLobbyCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyCreate& from);
  void MergeFrom(const CMsgPracticeLobbyCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyCreate";
  }
  protected:
  explicit CMsgPracticeLobbyCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgPracticeLobbyCreate_SaveGame SaveGame;

  // accessors -------------------------------------------------------

  enum : int {
    kSearchKeyFieldNumber = 1,
    kPassKeyFieldNumber = 5,
    kLobbyDetailsFieldNumber = 7,
    kSaveGameFieldNumber = 8,
    kClientVersionFieldNumber = 6,
  };
  // optional string search_key = 1;
  bool has_search_key() const;
  private:
  bool _internal_has_search_key() const;
  public:
  void clear_search_key();
  const std::string& search_key() const;
  void set_search_key(const std::string& value);
  void set_search_key(std::string&& value);
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  std::string* mutable_search_key();
  std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional string pass_key = 5;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  void set_pass_key(const std::string& value);
  void set_pass_key(std::string&& value);
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  std::string* mutable_pass_key();
  std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional .CMsgPracticeLobbySetDetails lobby_details = 7;
  bool has_lobby_details() const;
  private:
  bool _internal_has_lobby_details() const;
  public:
  void clear_lobby_details();
  const ::CMsgPracticeLobbySetDetails& lobby_details() const;
  ::CMsgPracticeLobbySetDetails* release_lobby_details();
  ::CMsgPracticeLobbySetDetails* mutable_lobby_details();
  void set_allocated_lobby_details(::CMsgPracticeLobbySetDetails* lobby_details);
  private:
  const ::CMsgPracticeLobbySetDetails& _internal_lobby_details() const;
  ::CMsgPracticeLobbySetDetails* _internal_mutable_lobby_details();
  public:
  void unsafe_arena_set_allocated_lobby_details(
      ::CMsgPracticeLobbySetDetails* lobby_details);
  ::CMsgPracticeLobbySetDetails* unsafe_arena_release_lobby_details();

  // optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  bool has_save_game() const;
  private:
  bool _internal_has_save_game() const;
  public:
  void clear_save_game();
  const ::CMsgPracticeLobbyCreate_SaveGame& save_game() const;
  ::CMsgPracticeLobbyCreate_SaveGame* release_save_game();
  ::CMsgPracticeLobbyCreate_SaveGame* mutable_save_game();
  void set_allocated_save_game(::CMsgPracticeLobbyCreate_SaveGame* save_game);
  private:
  const ::CMsgPracticeLobbyCreate_SaveGame& _internal_save_game() const;
  ::CMsgPracticeLobbyCreate_SaveGame* _internal_mutable_save_game();
  public:
  void unsafe_arena_set_allocated_save_game(
      ::CMsgPracticeLobbyCreate_SaveGame* save_game);
  ::CMsgPracticeLobbyCreate_SaveGame* unsafe_arena_release_save_game();

  // optional uint32 client_version = 6;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
  ::CMsgPracticeLobbySetDetails* lobby_details_;
  ::CMsgPracticeLobbyCreate_SaveGame* save_game_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetTeamSlot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbySetTeamSlot) */ {
 public:
  inline CMsgPracticeLobbySetTeamSlot() : CMsgPracticeLobbySetTeamSlot(nullptr) {}
  virtual ~CMsgPracticeLobbySetTeamSlot();
  explicit constexpr CMsgPracticeLobbySetTeamSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from);
  CMsgPracticeLobbySetTeamSlot(CMsgPracticeLobbySetTeamSlot&& from) noexcept
    : CMsgPracticeLobbySetTeamSlot() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbySetTeamSlot& operator=(const CMsgPracticeLobbySetTeamSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbySetTeamSlot& operator=(CMsgPracticeLobbySetTeamSlot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbySetTeamSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbySetTeamSlot* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbySetTeamSlot*>(
               &_CMsgPracticeLobbySetTeamSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgPracticeLobbySetTeamSlot& a, CMsgPracticeLobbySetTeamSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbySetTeamSlot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbySetTeamSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbySetTeamSlot* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbySetTeamSlot>(nullptr);
  }

  CMsgPracticeLobbySetTeamSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbySetTeamSlot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbySetTeamSlot& from);
  void MergeFrom(const CMsgPracticeLobbySetTeamSlot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbySetTeamSlot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbySetTeamSlot";
  }
  protected:
  explicit CMsgPracticeLobbySetTeamSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 1,
    kSlotFieldNumber = 2,
    kBotDifficultyFieldNumber = 3,
  };
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team() const;
  void _internal_set_team(::DOTA_GC_TEAM value);
  public:

  // optional uint32 slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_bot_difficulty() const;
  private:
  bool _internal_has_bot_difficulty() const;
  public:
  void clear_bot_difficulty();
  ::DOTABotDifficulty bot_difficulty() const;
  void set_bot_difficulty(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_bot_difficulty() const;
  void _internal_set_bot_difficulty(::DOTABotDifficulty value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetTeamSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  int bot_difficulty_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbySetCoach PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbySetCoach) */ {
 public:
  inline CMsgPracticeLobbySetCoach() : CMsgPracticeLobbySetCoach(nullptr) {}
  virtual ~CMsgPracticeLobbySetCoach();
  explicit constexpr CMsgPracticeLobbySetCoach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from);
  CMsgPracticeLobbySetCoach(CMsgPracticeLobbySetCoach&& from) noexcept
    : CMsgPracticeLobbySetCoach() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbySetCoach& operator=(const CMsgPracticeLobbySetCoach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbySetCoach& operator=(CMsgPracticeLobbySetCoach&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbySetCoach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbySetCoach* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbySetCoach*>(
               &_CMsgPracticeLobbySetCoach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgPracticeLobbySetCoach& a, CMsgPracticeLobbySetCoach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbySetCoach* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbySetCoach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbySetCoach* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbySetCoach>(nullptr);
  }

  CMsgPracticeLobbySetCoach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbySetCoach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbySetCoach& from);
  void MergeFrom(const CMsgPracticeLobbySetCoach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbySetCoach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbySetCoach";
  }
  protected:
  explicit CMsgPracticeLobbySetCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamFieldNumber = 1,
  };
  // optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team() const;
  void _internal_set_team(::DOTA_GC_TEAM value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbySetCoach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int team_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoinBroadcastChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyJoinBroadcastChannel) */ {
 public:
  inline CMsgPracticeLobbyJoinBroadcastChannel() : CMsgPracticeLobbyJoinBroadcastChannel(nullptr) {}
  virtual ~CMsgPracticeLobbyJoinBroadcastChannel();
  explicit constexpr CMsgPracticeLobbyJoinBroadcastChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  CMsgPracticeLobbyJoinBroadcastChannel(CMsgPracticeLobbyJoinBroadcastChannel&& from) noexcept
    : CMsgPracticeLobbyJoinBroadcastChannel() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyJoinBroadcastChannel& operator=(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyJoinBroadcastChannel& operator=(CMsgPracticeLobbyJoinBroadcastChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyJoinBroadcastChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyJoinBroadcastChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyJoinBroadcastChannel*>(
               &_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgPracticeLobbyJoinBroadcastChannel& a, CMsgPracticeLobbyJoinBroadcastChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyJoinBroadcastChannel* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyJoinBroadcastChannel>(nullptr);
  }

  CMsgPracticeLobbyJoinBroadcastChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyJoinBroadcastChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  void MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyJoinBroadcastChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyJoinBroadcastChannel";
  }
  protected:
  explicit CMsgPracticeLobbyJoinBroadcastChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreferredDescriptionFieldNumber = 2,
    kPreferredCountryCodeFieldNumber = 3,
    kPreferredLanguageCodeFieldNumber = 4,
    kChannelFieldNumber = 1,
  };
  // optional string preferred_description = 2;
  bool has_preferred_description() const;
  private:
  bool _internal_has_preferred_description() const;
  public:
  void clear_preferred_description();
  const std::string& preferred_description() const;
  void set_preferred_description(const std::string& value);
  void set_preferred_description(std::string&& value);
  void set_preferred_description(const char* value);
  void set_preferred_description(const char* value, size_t size);
  std::string* mutable_preferred_description();
  std::string* release_preferred_description();
  void set_allocated_preferred_description(std::string* preferred_description);
  private:
  const std::string& _internal_preferred_description() const;
  void _internal_set_preferred_description(const std::string& value);
  std::string* _internal_mutable_preferred_description();
  public:

  // optional string preferred_country_code = 3;
  bool has_preferred_country_code() const;
  private:
  bool _internal_has_preferred_country_code() const;
  public:
  void clear_preferred_country_code();
  const std::string& preferred_country_code() const;
  void set_preferred_country_code(const std::string& value);
  void set_preferred_country_code(std::string&& value);
  void set_preferred_country_code(const char* value);
  void set_preferred_country_code(const char* value, size_t size);
  std::string* mutable_preferred_country_code();
  std::string* release_preferred_country_code();
  void set_allocated_preferred_country_code(std::string* preferred_country_code);
  private:
  const std::string& _internal_preferred_country_code() const;
  void _internal_set_preferred_country_code(const std::string& value);
  std::string* _internal_mutable_preferred_country_code();
  public:

  // optional string preferred_language_code = 4;
  bool has_preferred_language_code() const;
  private:
  bool _internal_has_preferred_language_code() const;
  public:
  void clear_preferred_language_code();
  const std::string& preferred_language_code() const;
  void set_preferred_language_code(const std::string& value);
  void set_preferred_language_code(std::string&& value);
  void set_preferred_language_code(const char* value);
  void set_preferred_language_code(const char* value, size_t size);
  std::string* mutable_preferred_language_code();
  std::string* release_preferred_language_code();
  void set_allocated_preferred_language_code(std::string* preferred_language_code);
  private:
  const std::string& _internal_preferred_language_code() const;
  void _internal_set_preferred_language_code(const std::string& value);
  std::string* _internal_mutable_preferred_language_code();
  public:

  // optional uint32 channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoinBroadcastChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preferred_language_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyCloseBroadcastChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyCloseBroadcastChannel) */ {
 public:
  inline CMsgPracticeLobbyCloseBroadcastChannel() : CMsgPracticeLobbyCloseBroadcastChannel(nullptr) {}
  virtual ~CMsgPracticeLobbyCloseBroadcastChannel();
  explicit constexpr CMsgPracticeLobbyCloseBroadcastChannel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from);
  CMsgPracticeLobbyCloseBroadcastChannel(CMsgPracticeLobbyCloseBroadcastChannel&& from) noexcept
    : CMsgPracticeLobbyCloseBroadcastChannel() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyCloseBroadcastChannel& operator=(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyCloseBroadcastChannel& operator=(CMsgPracticeLobbyCloseBroadcastChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyCloseBroadcastChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyCloseBroadcastChannel* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyCloseBroadcastChannel*>(
               &_CMsgPracticeLobbyCloseBroadcastChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgPracticeLobbyCloseBroadcastChannel& a, CMsgPracticeLobbyCloseBroadcastChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyCloseBroadcastChannel* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyCloseBroadcastChannel>(nullptr);
  }

  CMsgPracticeLobbyCloseBroadcastChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyCloseBroadcastChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from);
  void MergeFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyCloseBroadcastChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyCloseBroadcastChannel";
  }
  protected:
  explicit CMsgPracticeLobbyCloseBroadcastChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
  };
  // optional uint32 channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyCloseBroadcastChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) */ {
 public:
  inline CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus() : CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(nullptr) {}
  virtual ~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus();
  explicit constexpr CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from);
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus&& from) noexcept
    : CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& operator=(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& operator=(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus*>(
               &_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& a, CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus>(nullptr);
  }

  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from);
  void MergeFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus";
  }
  protected:
  explicit CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyKick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyKick) */ {
 public:
  inline CMsgPracticeLobbyKick() : CMsgPracticeLobbyKick(nullptr) {}
  virtual ~CMsgPracticeLobbyKick();
  explicit constexpr CMsgPracticeLobbyKick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from);
  CMsgPracticeLobbyKick(CMsgPracticeLobbyKick&& from) noexcept
    : CMsgPracticeLobbyKick() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyKick& operator=(const CMsgPracticeLobbyKick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyKick& operator=(CMsgPracticeLobbyKick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyKick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyKick* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyKick*>(
               &_CMsgPracticeLobbyKick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgPracticeLobbyKick& a, CMsgPracticeLobbyKick& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyKick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyKick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyKick* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyKick>(nullptr);
  }

  CMsgPracticeLobbyKick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyKick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyKick& from);
  void MergeFrom(const CMsgPracticeLobbyKick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyKick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyKick";
  }
  protected:
  explicit CMsgPracticeLobbyKick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 3,
  };
  // optional uint32 account_id = 3;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyKick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyKickFromTeam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyKickFromTeam) */ {
 public:
  inline CMsgPracticeLobbyKickFromTeam() : CMsgPracticeLobbyKickFromTeam(nullptr) {}
  virtual ~CMsgPracticeLobbyKickFromTeam();
  explicit constexpr CMsgPracticeLobbyKickFromTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from);
  CMsgPracticeLobbyKickFromTeam(CMsgPracticeLobbyKickFromTeam&& from) noexcept
    : CMsgPracticeLobbyKickFromTeam() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyKickFromTeam& operator=(const CMsgPracticeLobbyKickFromTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyKickFromTeam& operator=(CMsgPracticeLobbyKickFromTeam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyKickFromTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyKickFromTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyKickFromTeam*>(
               &_CMsgPracticeLobbyKickFromTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgPracticeLobbyKickFromTeam& a, CMsgPracticeLobbyKickFromTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyKickFromTeam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyKickFromTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyKickFromTeam* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyKickFromTeam>(nullptr);
  }

  CMsgPracticeLobbyKickFromTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyKickFromTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyKickFromTeam& from);
  void MergeFrom(const CMsgPracticeLobbyKickFromTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyKickFromTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyKickFromTeam";
  }
  protected:
  explicit CMsgPracticeLobbyKickFromTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyKickFromTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyLeave PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyLeave) */ {
 public:
  inline CMsgPracticeLobbyLeave() : CMsgPracticeLobbyLeave(nullptr) {}
  virtual ~CMsgPracticeLobbyLeave();
  explicit constexpr CMsgPracticeLobbyLeave(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from);
  CMsgPracticeLobbyLeave(CMsgPracticeLobbyLeave&& from) noexcept
    : CMsgPracticeLobbyLeave() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyLeave& operator=(const CMsgPracticeLobbyLeave& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyLeave& operator=(CMsgPracticeLobbyLeave&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyLeave& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyLeave* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyLeave*>(
               &_CMsgPracticeLobbyLeave_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgPracticeLobbyLeave& a, CMsgPracticeLobbyLeave& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyLeave* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyLeave* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyLeave* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyLeave>(nullptr);
  }

  CMsgPracticeLobbyLeave* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyLeave>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyLeave& from);
  void MergeFrom(const CMsgPracticeLobbyLeave& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyLeave* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyLeave";
  }
  protected:
  explicit CMsgPracticeLobbyLeave(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyLeave)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyLaunch PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyLaunch) */ {
 public:
  inline CMsgPracticeLobbyLaunch() : CMsgPracticeLobbyLaunch(nullptr) {}
  virtual ~CMsgPracticeLobbyLaunch();
  explicit constexpr CMsgPracticeLobbyLaunch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from);
  CMsgPracticeLobbyLaunch(CMsgPracticeLobbyLaunch&& from) noexcept
    : CMsgPracticeLobbyLaunch() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyLaunch& operator=(const CMsgPracticeLobbyLaunch& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyLaunch& operator=(CMsgPracticeLobbyLaunch&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyLaunch& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyLaunch* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyLaunch*>(
               &_CMsgPracticeLobbyLaunch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgPracticeLobbyLaunch& a, CMsgPracticeLobbyLaunch& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyLaunch* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyLaunch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyLaunch* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyLaunch>(nullptr);
  }

  CMsgPracticeLobbyLaunch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyLaunch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyLaunch& from);
  void MergeFrom(const CMsgPracticeLobbyLaunch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyLaunch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyLaunch";
  }
  protected:
  explicit CMsgPracticeLobbyLaunch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientVersionFieldNumber = 5,
  };
  // optional uint32 client_version = 5;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyLaunch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgApplyTeamToPracticeLobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgApplyTeamToPracticeLobby) */ {
 public:
  inline CMsgApplyTeamToPracticeLobby() : CMsgApplyTeamToPracticeLobby(nullptr) {}
  virtual ~CMsgApplyTeamToPracticeLobby();
  explicit constexpr CMsgApplyTeamToPracticeLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from);
  CMsgApplyTeamToPracticeLobby(CMsgApplyTeamToPracticeLobby&& from) noexcept
    : CMsgApplyTeamToPracticeLobby() {
    *this = ::std::move(from);
  }

  inline CMsgApplyTeamToPracticeLobby& operator=(const CMsgApplyTeamToPracticeLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgApplyTeamToPracticeLobby& operator=(CMsgApplyTeamToPracticeLobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgApplyTeamToPracticeLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgApplyTeamToPracticeLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgApplyTeamToPracticeLobby*>(
               &_CMsgApplyTeamToPracticeLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgApplyTeamToPracticeLobby& a, CMsgApplyTeamToPracticeLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgApplyTeamToPracticeLobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgApplyTeamToPracticeLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgApplyTeamToPracticeLobby* New() const final {
    return CreateMaybeMessage<CMsgApplyTeamToPracticeLobby>(nullptr);
  }

  CMsgApplyTeamToPracticeLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgApplyTeamToPracticeLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgApplyTeamToPracticeLobby& from);
  void MergeFrom(const CMsgApplyTeamToPracticeLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgApplyTeamToPracticeLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgApplyTeamToPracticeLobby";
  }
  protected:
  explicit CMsgApplyTeamToPracticeLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
  };
  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgApplyTeamToPracticeLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgClearPracticeLobbyTeam PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClearPracticeLobbyTeam) */ {
 public:
  inline CMsgClearPracticeLobbyTeam() : CMsgClearPracticeLobbyTeam(nullptr) {}
  virtual ~CMsgClearPracticeLobbyTeam();
  explicit constexpr CMsgClearPracticeLobbyTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClearPracticeLobbyTeam(const CMsgClearPracticeLobbyTeam& from);
  CMsgClearPracticeLobbyTeam(CMsgClearPracticeLobbyTeam&& from) noexcept
    : CMsgClearPracticeLobbyTeam() {
    *this = ::std::move(from);
  }

  inline CMsgClearPracticeLobbyTeam& operator=(const CMsgClearPracticeLobbyTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClearPracticeLobbyTeam& operator=(CMsgClearPracticeLobbyTeam&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClearPracticeLobbyTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClearPracticeLobbyTeam* internal_default_instance() {
    return reinterpret_cast<const CMsgClearPracticeLobbyTeam*>(
               &_CMsgClearPracticeLobbyTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgClearPracticeLobbyTeam& a, CMsgClearPracticeLobbyTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClearPracticeLobbyTeam* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClearPracticeLobbyTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClearPracticeLobbyTeam* New() const final {
    return CreateMaybeMessage<CMsgClearPracticeLobbyTeam>(nullptr);
  }

  CMsgClearPracticeLobbyTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClearPracticeLobbyTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClearPracticeLobbyTeam& from);
  void MergeFrom(const CMsgClearPracticeLobbyTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClearPracticeLobbyTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClearPracticeLobbyTeam";
  }
  protected:
  explicit CMsgClearPracticeLobbyTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgClearPracticeLobbyTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyList) */ {
 public:
  inline CMsgPracticeLobbyList() : CMsgPracticeLobbyList(nullptr) {}
  virtual ~CMsgPracticeLobbyList();
  explicit constexpr CMsgPracticeLobbyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from);
  CMsgPracticeLobbyList(CMsgPracticeLobbyList&& from) noexcept
    : CMsgPracticeLobbyList() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyList& operator=(const CMsgPracticeLobbyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyList& operator=(CMsgPracticeLobbyList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyList* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyList*>(
               &_CMsgPracticeLobbyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgPracticeLobbyList& a, CMsgPracticeLobbyList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyList* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyList>(nullptr);
  }

  CMsgPracticeLobbyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyList& from);
  void MergeFrom(const CMsgPracticeLobbyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyList";
  }
  protected:
  explicit CMsgPracticeLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassKeyFieldNumber = 2,
    kRegionFieldNumber = 3,
    kGameModeFieldNumber = 4,
  };
  // optional string pass_key = 2;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  void set_pass_key(const std::string& value);
  void set_pass_key(std::string&& value);
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  std::string* mutable_pass_key();
  std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional uint32 region = 3;
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_;
  int game_mode_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponseEntry_CLobbyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyListResponseEntry.CLobbyMember) */ {
 public:
  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember() : CMsgPracticeLobbyListResponseEntry_CLobbyMember(nullptr) {}
  virtual ~CMsgPracticeLobbyListResponseEntry_CLobbyMember();
  explicit constexpr CMsgPracticeLobbyListResponseEntry_CLobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  CMsgPracticeLobbyListResponseEntry_CLobbyMember(CMsgPracticeLobbyListResponseEntry_CLobbyMember&& from) noexcept
    : CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember& operator=(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember& operator=(CMsgPracticeLobbyListResponseEntry_CLobbyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyListResponseEntry_CLobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyListResponseEntry_CLobbyMember* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyListResponseEntry_CLobbyMember*>(
               &_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember& a, CMsgPracticeLobbyListResponseEntry_CLobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyListResponseEntry_CLobbyMember* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyListResponseEntry_CLobbyMember>(nullptr);
  }

  CMsgPracticeLobbyListResponseEntry_CLobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyListResponseEntry_CLobbyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  void MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyListResponseEntry.CLobbyMember";
  }
  protected:
  explicit CMsgPracticeLobbyListResponseEntry_CLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponseEntry.CLobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponseEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyListResponseEntry) */ {
 public:
  inline CMsgPracticeLobbyListResponseEntry() : CMsgPracticeLobbyListResponseEntry(nullptr) {}
  virtual ~CMsgPracticeLobbyListResponseEntry();
  explicit constexpr CMsgPracticeLobbyListResponseEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from);
  CMsgPracticeLobbyListResponseEntry(CMsgPracticeLobbyListResponseEntry&& from) noexcept
    : CMsgPracticeLobbyListResponseEntry() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyListResponseEntry& operator=(const CMsgPracticeLobbyListResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyListResponseEntry& operator=(CMsgPracticeLobbyListResponseEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyListResponseEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyListResponseEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyListResponseEntry*>(
               &_CMsgPracticeLobbyListResponseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgPracticeLobbyListResponseEntry& a, CMsgPracticeLobbyListResponseEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyListResponseEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyListResponseEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyListResponseEntry* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyListResponseEntry>(nullptr);
  }

  CMsgPracticeLobbyListResponseEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyListResponseEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyListResponseEntry& from);
  void MergeFrom(const CMsgPracticeLobbyListResponseEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyListResponseEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyListResponseEntry";
  }
  protected:
  explicit CMsgPracticeLobbyListResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgPracticeLobbyListResponseEntry_CLobbyMember CLobbyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 5,
    kNameFieldNumber = 10,
    kCustomGameModeFieldNumber = 11,
    kCustomMapNameFieldNumber = 15,
    kLanHostPingLocationFieldNumber = 20,
    kIdFieldNumber = 1,
    kLeaderAccountIdFieldNumber = 7,
    kRequiresPassKeyFieldNumber = 6,
    kFriendPresentFieldNumber = 13,
    kGameModeFieldNumber = 12,
    kPlayersFieldNumber = 14,
    kLeagueIdFieldNumber = 19,
    kMaxPlayerCountFieldNumber = 16,
    kServerRegionFieldNumber = 17,
  };
  // repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
      mutable_members();
  private:
  const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& _internal_members(int index) const;
  ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* _internal_add_members();
  public:
  const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& members(int index) const;
  ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
      members() const;

  // optional string name = 10;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string custom_game_mode = 11;
  bool has_custom_game_mode() const;
  private:
  bool _internal_has_custom_game_mode() const;
  public:
  void clear_custom_game_mode();
  const std::string& custom_game_mode() const;
  void set_custom_game_mode(const std::string& value);
  void set_custom_game_mode(std::string&& value);
  void set_custom_game_mode(const char* value);
  void set_custom_game_mode(const char* value, size_t size);
  std::string* mutable_custom_game_mode();
  std::string* release_custom_game_mode();
  void set_allocated_custom_game_mode(std::string* custom_game_mode);
  private:
  const std::string& _internal_custom_game_mode() const;
  void _internal_set_custom_game_mode(const std::string& value);
  std::string* _internal_mutable_custom_game_mode();
  public:

  // optional string custom_map_name = 15;
  bool has_custom_map_name() const;
  private:
  bool _internal_has_custom_map_name() const;
  public:
  void clear_custom_map_name();
  const std::string& custom_map_name() const;
  void set_custom_map_name(const std::string& value);
  void set_custom_map_name(std::string&& value);
  void set_custom_map_name(const char* value);
  void set_custom_map_name(const char* value, size_t size);
  std::string* mutable_custom_map_name();
  std::string* release_custom_map_name();
  void set_allocated_custom_map_name(std::string* custom_map_name);
  private:
  const std::string& _internal_custom_map_name() const;
  void _internal_set_custom_map_name(const std::string& value);
  std::string* _internal_mutable_custom_map_name();
  public:

  // optional string lan_host_ping_location = 20;
  bool has_lan_host_ping_location() const;
  private:
  bool _internal_has_lan_host_ping_location() const;
  public:
  void clear_lan_host_ping_location();
  const std::string& lan_host_ping_location() const;
  void set_lan_host_ping_location(const std::string& value);
  void set_lan_host_ping_location(std::string&& value);
  void set_lan_host_ping_location(const char* value);
  void set_lan_host_ping_location(const char* value, size_t size);
  std::string* mutable_lan_host_ping_location();
  std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(std::string* lan_host_ping_location);
  private:
  const std::string& _internal_lan_host_ping_location() const;
  void _internal_set_lan_host_ping_location(const std::string& value);
  std::string* _internal_mutable_lan_host_ping_location();
  public:

  // optional uint64 id = 1 [(.key_field) = true];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 leader_account_id = 7;
  bool has_leader_account_id() const;
  private:
  bool _internal_has_leader_account_id() const;
  public:
  void clear_leader_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id() const;
  void set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_account_id() const;
  void _internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool requires_pass_key = 6;
  bool has_requires_pass_key() const;
  private:
  bool _internal_has_requires_pass_key() const;
  public:
  void clear_requires_pass_key();
  bool requires_pass_key() const;
  void set_requires_pass_key(bool value);
  private:
  bool _internal_requires_pass_key() const;
  void _internal_set_requires_pass_key(bool value);
  public:

  // optional bool friend_present = 13;
  bool has_friend_present() const;
  private:
  bool _internal_has_friend_present() const;
  public:
  void clear_friend_present();
  bool friend_present() const;
  void set_friend_present(bool value);
  private:
  bool _internal_friend_present() const;
  void _internal_set_friend_present(bool value);
  public:

  // optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // optional uint32 players = 14;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 players() const;
  void set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players() const;
  void _internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 league_id = 19;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_player_count = 16;
  bool has_max_player_count() const;
  private:
  bool _internal_has_max_player_count() const;
  public:
  void clear_max_player_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_player_count() const;
  void set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_player_count() const;
  void _internal_set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_region = 17;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponseEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_game_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_host_ping_location_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id_;
  bool requires_pass_key_;
  bool friend_present_;
  int game_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_player_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyListResponse) */ {
 public:
  inline CMsgPracticeLobbyListResponse() : CMsgPracticeLobbyListResponse(nullptr) {}
  virtual ~CMsgPracticeLobbyListResponse();
  explicit constexpr CMsgPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from);
  CMsgPracticeLobbyListResponse(CMsgPracticeLobbyListResponse&& from) noexcept
    : CMsgPracticeLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyListResponse& operator=(const CMsgPracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyListResponse& operator=(CMsgPracticeLobbyListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyListResponse*>(
               &_CMsgPracticeLobbyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgPracticeLobbyListResponse& a, CMsgPracticeLobbyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyListResponse* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyListResponse>(nullptr);
  }

  CMsgPracticeLobbyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyListResponse& from);
  void MergeFrom(const CMsgPracticeLobbyListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyListResponse";
  }
  protected:
  explicit CMsgPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbiesFieldNumber = 2,
  };
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
  int lobbies_size() const;
  private:
  int _internal_lobbies_size() const;
  public:
  void clear_lobbies();
  ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();
  private:
  const ::CMsgPracticeLobbyListResponseEntry& _internal_lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* _internal_add_lobbies();
  public:
  const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyList) */ {
 public:
  inline CMsgLobbyList() : CMsgLobbyList(nullptr) {}
  virtual ~CMsgLobbyList();
  explicit constexpr CMsgLobbyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyList(const CMsgLobbyList& from);
  CMsgLobbyList(CMsgLobbyList&& from) noexcept
    : CMsgLobbyList() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyList& operator=(const CMsgLobbyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyList& operator=(CMsgLobbyList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLobbyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyList* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyList*>(
               &_CMsgLobbyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgLobbyList& a, CMsgLobbyList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyList* New() const final {
    return CreateMaybeMessage<CMsgLobbyList>(nullptr);
  }

  CMsgLobbyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLobbyList& from);
  void MergeFrom(const CMsgLobbyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyList";
  }
  protected:
  explicit CMsgLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerRegionFieldNumber = 1,
    kGameModeFieldNumber = 2,
  };
  // optional uint32 server_region = 1 [default = 0];
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::DOTA_GameMode game_mode() const;
  void set_game_mode(::DOTA_GameMode value);
  private:
  ::DOTA_GameMode _internal_game_mode() const;
  void _internal_set_game_mode(::DOTA_GameMode value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgLobbyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  int game_mode_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgLobbyListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgLobbyListResponse) */ {
 public:
  inline CMsgLobbyListResponse() : CMsgLobbyListResponse(nullptr) {}
  virtual ~CMsgLobbyListResponse();
  explicit constexpr CMsgLobbyListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgLobbyListResponse(const CMsgLobbyListResponse& from);
  CMsgLobbyListResponse(CMsgLobbyListResponse&& from) noexcept
    : CMsgLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgLobbyListResponse& operator=(const CMsgLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgLobbyListResponse& operator=(CMsgLobbyListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgLobbyListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgLobbyListResponse*>(
               &_CMsgLobbyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgLobbyListResponse& a, CMsgLobbyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgLobbyListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgLobbyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgLobbyListResponse* New() const final {
    return CreateMaybeMessage<CMsgLobbyListResponse>(nullptr);
  }

  CMsgLobbyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgLobbyListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgLobbyListResponse& from);
  void MergeFrom(const CMsgLobbyListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgLobbyListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgLobbyListResponse";
  }
  protected:
  explicit CMsgLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbiesFieldNumber = 1,
  };
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  int lobbies_size() const;
  private:
  int _internal_lobbies_size() const;
  public:
  void clear_lobbies();
  ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();
  private:
  const ::CMsgPracticeLobbyListResponseEntry& _internal_lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* _internal_add_lobbies();
  public:
  const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgLobbyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyJoin) */ {
 public:
  inline CMsgPracticeLobbyJoin() : CMsgPracticeLobbyJoin(nullptr) {}
  virtual ~CMsgPracticeLobbyJoin();
  explicit constexpr CMsgPracticeLobbyJoin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from);
  CMsgPracticeLobbyJoin(CMsgPracticeLobbyJoin&& from) noexcept
    : CMsgPracticeLobbyJoin() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyJoin& operator=(const CMsgPracticeLobbyJoin& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyJoin& operator=(CMsgPracticeLobbyJoin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyJoin& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyJoin* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyJoin*>(
               &_CMsgPracticeLobbyJoin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgPracticeLobbyJoin& a, CMsgPracticeLobbyJoin& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyJoin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyJoin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyJoin* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyJoin>(nullptr);
  }

  CMsgPracticeLobbyJoin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyJoin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyJoin& from);
  void MergeFrom(const CMsgPracticeLobbyJoin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyJoin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyJoin";
  }
  protected:
  explicit CMsgPracticeLobbyJoin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPassKeyFieldNumber = 3,
    kLobbyIdFieldNumber = 1,
    kClientVersionFieldNumber = 2,
    kCustomGameTimestampFieldNumber = 5,
    kCustomGameCrcFieldNumber = 4,
  };
  // optional string pass_key = 3;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  void set_pass_key(const std::string& value);
  void set_pass_key(std::string&& value);
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  std::string* mutable_pass_key();
  std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional uint64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 custom_game_timestamp = 5;
  bool has_custom_game_timestamp() const;
  private:
  bool _internal_has_custom_game_timestamp() const;
  public:
  void clear_custom_game_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp() const;
  void set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_custom_game_timestamp() const;
  void _internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 custom_game_crc = 4;
  bool has_custom_game_crc() const;
  private:
  bool _internal_has_custom_game_crc() const;
  public:
  void clear_custom_game_crc();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc() const;
  void set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_crc() const;
  void _internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 custom_game_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_crc_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgPracticeLobbyJoinResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPracticeLobbyJoinResponse) */ {
 public:
  inline CMsgPracticeLobbyJoinResponse() : CMsgPracticeLobbyJoinResponse(nullptr) {}
  virtual ~CMsgPracticeLobbyJoinResponse();
  explicit constexpr CMsgPracticeLobbyJoinResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from);
  CMsgPracticeLobbyJoinResponse(CMsgPracticeLobbyJoinResponse&& from) noexcept
    : CMsgPracticeLobbyJoinResponse() {
    *this = ::std::move(from);
  }

  inline CMsgPracticeLobbyJoinResponse& operator=(const CMsgPracticeLobbyJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPracticeLobbyJoinResponse& operator=(CMsgPracticeLobbyJoinResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPracticeLobbyJoinResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPracticeLobbyJoinResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgPracticeLobbyJoinResponse*>(
               &_CMsgPracticeLobbyJoinResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgPracticeLobbyJoinResponse& a, CMsgPracticeLobbyJoinResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPracticeLobbyJoinResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPracticeLobbyJoinResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPracticeLobbyJoinResponse* New() const final {
    return CreateMaybeMessage<CMsgPracticeLobbyJoinResponse>(nullptr);
  }

  CMsgPracticeLobbyJoinResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPracticeLobbyJoinResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPracticeLobbyJoinResponse& from);
  void MergeFrom(const CMsgPracticeLobbyJoinResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPracticeLobbyJoinResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPracticeLobbyJoinResponse";
  }
  protected:
  explicit CMsgPracticeLobbyJoinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::DOTAJoinLobbyResult result() const;
  void set_result(::DOTAJoinLobbyResult value);
  private:
  ::DOTAJoinLobbyResult _internal_result() const;
  void _internal_set_result(::DOTAJoinLobbyResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPracticeLobbyJoinResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgFriendPracticeLobbyListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFriendPracticeLobbyListRequest) */ {
 public:
  inline CMsgFriendPracticeLobbyListRequest() : CMsgFriendPracticeLobbyListRequest(nullptr) {}
  virtual ~CMsgFriendPracticeLobbyListRequest();
  explicit constexpr CMsgFriendPracticeLobbyListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from);
  CMsgFriendPracticeLobbyListRequest(CMsgFriendPracticeLobbyListRequest&& from) noexcept
    : CMsgFriendPracticeLobbyListRequest() {
    *this = ::std::move(from);
  }

  inline CMsgFriendPracticeLobbyListRequest& operator=(const CMsgFriendPracticeLobbyListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFriendPracticeLobbyListRequest& operator=(CMsgFriendPracticeLobbyListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgFriendPracticeLobbyListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFriendPracticeLobbyListRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgFriendPracticeLobbyListRequest*>(
               &_CMsgFriendPracticeLobbyListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgFriendPracticeLobbyListRequest& a, CMsgFriendPracticeLobbyListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFriendPracticeLobbyListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFriendPracticeLobbyListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgFriendPracticeLobbyListRequest* New() const final {
    return CreateMaybeMessage<CMsgFriendPracticeLobbyListRequest>(nullptr);
  }

  CMsgFriendPracticeLobbyListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgFriendPracticeLobbyListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgFriendPracticeLobbyListRequest& from);
  void MergeFrom(const CMsgFriendPracticeLobbyListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFriendPracticeLobbyListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFriendPracticeLobbyListRequest";
  }
  protected:
  explicit CMsgFriendPracticeLobbyListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated uint32 friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_friends(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_friends() const;
  void _internal_add_friends(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_friends();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 friends(int index) const;
  void set_friends(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_friends(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      friends() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_friends();

  // @@protoc_insertion_point(class_scope:CMsgFriendPracticeLobbyListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgFriendPracticeLobbyListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFriendPracticeLobbyListResponse) */ {
 public:
  inline CMsgFriendPracticeLobbyListResponse() : CMsgFriendPracticeLobbyListResponse(nullptr) {}
  virtual ~CMsgFriendPracticeLobbyListResponse();
  explicit constexpr CMsgFriendPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from);
  CMsgFriendPracticeLobbyListResponse(CMsgFriendPracticeLobbyListResponse&& from) noexcept
    : CMsgFriendPracticeLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgFriendPracticeLobbyListResponse& operator=(const CMsgFriendPracticeLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFriendPracticeLobbyListResponse& operator=(CMsgFriendPracticeLobbyListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgFriendPracticeLobbyListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFriendPracticeLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgFriendPracticeLobbyListResponse*>(
               &_CMsgFriendPracticeLobbyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgFriendPracticeLobbyListResponse& a, CMsgFriendPracticeLobbyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFriendPracticeLobbyListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFriendPracticeLobbyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgFriendPracticeLobbyListResponse* New() const final {
    return CreateMaybeMessage<CMsgFriendPracticeLobbyListResponse>(nullptr);
  }

  CMsgFriendPracticeLobbyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgFriendPracticeLobbyListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgFriendPracticeLobbyListResponse& from);
  void MergeFrom(const CMsgFriendPracticeLobbyListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFriendPracticeLobbyListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFriendPracticeLobbyListResponse";
  }
  protected:
  explicit CMsgFriendPracticeLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbiesFieldNumber = 1,
  };
  // repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
  int lobbies_size() const;
  private:
  int _internal_lobbies_size() const;
  public:
  void clear_lobbies();
  ::CMsgPracticeLobbyListResponseEntry* mutable_lobbies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
      mutable_lobbies();
  private:
  const ::CMsgPracticeLobbyListResponseEntry& _internal_lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* _internal_add_lobbies();
  public:
  const ::CMsgPracticeLobbyListResponseEntry& lobbies(int index) const;
  ::CMsgPracticeLobbyListResponseEntry* add_lobbies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgFriendPracticeLobbyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry > lobbies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomGameModesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJoinableCustomGameModesRequest) */ {
 public:
  inline CMsgJoinableCustomGameModesRequest() : CMsgJoinableCustomGameModesRequest(nullptr) {}
  virtual ~CMsgJoinableCustomGameModesRequest();
  explicit constexpr CMsgJoinableCustomGameModesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from);
  CMsgJoinableCustomGameModesRequest(CMsgJoinableCustomGameModesRequest&& from) noexcept
    : CMsgJoinableCustomGameModesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgJoinableCustomGameModesRequest& operator=(const CMsgJoinableCustomGameModesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJoinableCustomGameModesRequest& operator=(CMsgJoinableCustomGameModesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgJoinableCustomGameModesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJoinableCustomGameModesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgJoinableCustomGameModesRequest*>(
               &_CMsgJoinableCustomGameModesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgJoinableCustomGameModesRequest& a, CMsgJoinableCustomGameModesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJoinableCustomGameModesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJoinableCustomGameModesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgJoinableCustomGameModesRequest* New() const final {
    return CreateMaybeMessage<CMsgJoinableCustomGameModesRequest>(nullptr);
  }

  CMsgJoinableCustomGameModesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgJoinableCustomGameModesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgJoinableCustomGameModesRequest& from);
  void MergeFrom(const CMsgJoinableCustomGameModesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJoinableCustomGameModesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJoinableCustomGameModesRequest";
  }
  protected:
  explicit CMsgJoinableCustomGameModesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerRegionFieldNumber = 1,
  };
  // optional uint32 server_region = 1;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomGameModesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomGameModesResponseEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJoinableCustomGameModesResponseEntry) */ {
 public:
  inline CMsgJoinableCustomGameModesResponseEntry() : CMsgJoinableCustomGameModesResponseEntry(nullptr) {}
  virtual ~CMsgJoinableCustomGameModesResponseEntry();
  explicit constexpr CMsgJoinableCustomGameModesResponseEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from);
  CMsgJoinableCustomGameModesResponseEntry(CMsgJoinableCustomGameModesResponseEntry&& from) noexcept
    : CMsgJoinableCustomGameModesResponseEntry() {
    *this = ::std::move(from);
  }

  inline CMsgJoinableCustomGameModesResponseEntry& operator=(const CMsgJoinableCustomGameModesResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJoinableCustomGameModesResponseEntry& operator=(CMsgJoinableCustomGameModesResponseEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgJoinableCustomGameModesResponseEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJoinableCustomGameModesResponseEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgJoinableCustomGameModesResponseEntry*>(
               &_CMsgJoinableCustomGameModesResponseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgJoinableCustomGameModesResponseEntry& a, CMsgJoinableCustomGameModesResponseEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJoinableCustomGameModesResponseEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJoinableCustomGameModesResponseEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgJoinableCustomGameModesResponseEntry* New() const final {
    return CreateMaybeMessage<CMsgJoinableCustomGameModesResponseEntry>(nullptr);
  }

  CMsgJoinableCustomGameModesResponseEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgJoinableCustomGameModesResponseEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from);
  void MergeFrom(const CMsgJoinableCustomGameModesResponseEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJoinableCustomGameModesResponseEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJoinableCustomGameModesResponseEntry";
  }
  protected:
  explicit CMsgJoinableCustomGameModesResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomGameIdFieldNumber = 1,
    kLobbyCountFieldNumber = 2,
    kPlayerCountFieldNumber = 3,
  };
  // optional uint64 custom_game_id = 1;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 lobby_count = 2;
  bool has_lobby_count() const;
  private:
  bool _internal_has_lobby_count() const;
  public:
  void clear_lobby_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_count() const;
  void set_lobby_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lobby_count() const;
  void _internal_set_lobby_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_count = 3;
  bool has_player_count() const;
  private:
  bool _internal_has_player_count() const;
  public:
  void clear_player_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_count() const;
  void set_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_count() const;
  void _internal_set_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomGameModesResponseEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lobby_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_count_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomGameModesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJoinableCustomGameModesResponse) */ {
 public:
  inline CMsgJoinableCustomGameModesResponse() : CMsgJoinableCustomGameModesResponse(nullptr) {}
  virtual ~CMsgJoinableCustomGameModesResponse();
  explicit constexpr CMsgJoinableCustomGameModesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from);
  CMsgJoinableCustomGameModesResponse(CMsgJoinableCustomGameModesResponse&& from) noexcept
    : CMsgJoinableCustomGameModesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgJoinableCustomGameModesResponse& operator=(const CMsgJoinableCustomGameModesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJoinableCustomGameModesResponse& operator=(CMsgJoinableCustomGameModesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgJoinableCustomGameModesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJoinableCustomGameModesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgJoinableCustomGameModesResponse*>(
               &_CMsgJoinableCustomGameModesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgJoinableCustomGameModesResponse& a, CMsgJoinableCustomGameModesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJoinableCustomGameModesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJoinableCustomGameModesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgJoinableCustomGameModesResponse* New() const final {
    return CreateMaybeMessage<CMsgJoinableCustomGameModesResponse>(nullptr);
  }

  CMsgJoinableCustomGameModesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgJoinableCustomGameModesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgJoinableCustomGameModesResponse& from);
  void MergeFrom(const CMsgJoinableCustomGameModesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJoinableCustomGameModesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJoinableCustomGameModesResponse";
  }
  protected:
  explicit CMsgJoinableCustomGameModesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameModesFieldNumber = 1,
  };
  // repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  int game_modes_size() const;
  private:
  int _internal_game_modes_size() const;
  public:
  void clear_game_modes();
  ::CMsgJoinableCustomGameModesResponseEntry* mutable_game_modes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >*
      mutable_game_modes();
  private:
  const ::CMsgJoinableCustomGameModesResponseEntry& _internal_game_modes(int index) const;
  ::CMsgJoinableCustomGameModesResponseEntry* _internal_add_game_modes();
  public:
  const ::CMsgJoinableCustomGameModesResponseEntry& game_modes(int index) const;
  ::CMsgJoinableCustomGameModesResponseEntry* add_game_modes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >&
      game_modes() const;

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomGameModesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry > game_modes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomLobbiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJoinableCustomLobbiesRequest) */ {
 public:
  inline CMsgJoinableCustomLobbiesRequest() : CMsgJoinableCustomLobbiesRequest(nullptr) {}
  virtual ~CMsgJoinableCustomLobbiesRequest();
  explicit constexpr CMsgJoinableCustomLobbiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from);
  CMsgJoinableCustomLobbiesRequest(CMsgJoinableCustomLobbiesRequest&& from) noexcept
    : CMsgJoinableCustomLobbiesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgJoinableCustomLobbiesRequest& operator=(const CMsgJoinableCustomLobbiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJoinableCustomLobbiesRequest& operator=(CMsgJoinableCustomLobbiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgJoinableCustomLobbiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJoinableCustomLobbiesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgJoinableCustomLobbiesRequest*>(
               &_CMsgJoinableCustomLobbiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgJoinableCustomLobbiesRequest& a, CMsgJoinableCustomLobbiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJoinableCustomLobbiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJoinableCustomLobbiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgJoinableCustomLobbiesRequest* New() const final {
    return CreateMaybeMessage<CMsgJoinableCustomLobbiesRequest>(nullptr);
  }

  CMsgJoinableCustomLobbiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgJoinableCustomLobbiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgJoinableCustomLobbiesRequest& from);
  void MergeFrom(const CMsgJoinableCustomLobbiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJoinableCustomLobbiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJoinableCustomLobbiesRequest";
  }
  protected:
  explicit CMsgJoinableCustomLobbiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomGameIdFieldNumber = 2,
    kServerRegionFieldNumber = 1,
  };
  // optional uint64 custom_game_id = 2;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 server_region = 1;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomLobbiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomLobbiesResponseEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJoinableCustomLobbiesResponseEntry) */ {
 public:
  inline CMsgJoinableCustomLobbiesResponseEntry() : CMsgJoinableCustomLobbiesResponseEntry(nullptr) {}
  virtual ~CMsgJoinableCustomLobbiesResponseEntry();
  explicit constexpr CMsgJoinableCustomLobbiesResponseEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from);
  CMsgJoinableCustomLobbiesResponseEntry(CMsgJoinableCustomLobbiesResponseEntry&& from) noexcept
    : CMsgJoinableCustomLobbiesResponseEntry() {
    *this = ::std::move(from);
  }

  inline CMsgJoinableCustomLobbiesResponseEntry& operator=(const CMsgJoinableCustomLobbiesResponseEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJoinableCustomLobbiesResponseEntry& operator=(CMsgJoinableCustomLobbiesResponseEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgJoinableCustomLobbiesResponseEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJoinableCustomLobbiesResponseEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgJoinableCustomLobbiesResponseEntry*>(
               &_CMsgJoinableCustomLobbiesResponseEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgJoinableCustomLobbiesResponseEntry& a, CMsgJoinableCustomLobbiesResponseEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJoinableCustomLobbiesResponseEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJoinableCustomLobbiesResponseEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgJoinableCustomLobbiesResponseEntry* New() const final {
    return CreateMaybeMessage<CMsgJoinableCustomLobbiesResponseEntry>(nullptr);
  }

  CMsgJoinableCustomLobbiesResponseEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgJoinableCustomLobbiesResponseEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from);
  void MergeFrom(const CMsgJoinableCustomLobbiesResponseEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJoinableCustomLobbiesResponseEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJoinableCustomLobbiesResponseEntry";
  }
  protected:
  explicit CMsgJoinableCustomLobbiesResponseEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyNameFieldNumber = 3,
    kLeaderNameFieldNumber = 6,
    kCustomMapNameFieldNumber = 7,
    kLanHostPingLocationFieldNumber = 12,
    kLobbyIdFieldNumber = 1,
    kCustomGameIdFieldNumber = 2,
    kMemberCountFieldNumber = 4,
    kLeaderAccountIdFieldNumber = 5,
    kMaxPlayerCountFieldNumber = 8,
    kServerRegionFieldNumber = 9,
    kHasPassKeyFieldNumber = 11,
  };
  // optional string lobby_name = 3;
  bool has_lobby_name() const;
  private:
  bool _internal_has_lobby_name() const;
  public:
  void clear_lobby_name();
  const std::string& lobby_name() const;
  void set_lobby_name(const std::string& value);
  void set_lobby_name(std::string&& value);
  void set_lobby_name(const char* value);
  void set_lobby_name(const char* value, size_t size);
  std::string* mutable_lobby_name();
  std::string* release_lobby_name();
  void set_allocated_lobby_name(std::string* lobby_name);
  private:
  const std::string& _internal_lobby_name() const;
  void _internal_set_lobby_name(const std::string& value);
  std::string* _internal_mutable_lobby_name();
  public:

  // optional string leader_name = 6;
  bool has_leader_name() const;
  private:
  bool _internal_has_leader_name() const;
  public:
  void clear_leader_name();
  const std::string& leader_name() const;
  void set_leader_name(const std::string& value);
  void set_leader_name(std::string&& value);
  void set_leader_name(const char* value);
  void set_leader_name(const char* value, size_t size);
  std::string* mutable_leader_name();
  std::string* release_leader_name();
  void set_allocated_leader_name(std::string* leader_name);
  private:
  const std::string& _internal_leader_name() const;
  void _internal_set_leader_name(const std::string& value);
  std::string* _internal_mutable_leader_name();
  public:

  // optional string custom_map_name = 7;
  bool has_custom_map_name() const;
  private:
  bool _internal_has_custom_map_name() const;
  public:
  void clear_custom_map_name();
  const std::string& custom_map_name() const;
  void set_custom_map_name(const std::string& value);
  void set_custom_map_name(std::string&& value);
  void set_custom_map_name(const char* value);
  void set_custom_map_name(const char* value, size_t size);
  std::string* mutable_custom_map_name();
  std::string* release_custom_map_name();
  void set_allocated_custom_map_name(std::string* custom_map_name);
  private:
  const std::string& _internal_custom_map_name() const;
  void _internal_set_custom_map_name(const std::string& value);
  std::string* _internal_mutable_custom_map_name();
  public:

  // optional string lan_host_ping_location = 12;
  bool has_lan_host_ping_location() const;
  private:
  bool _internal_has_lan_host_ping_location() const;
  public:
  void clear_lan_host_ping_location();
  const std::string& lan_host_ping_location() const;
  void set_lan_host_ping_location(const std::string& value);
  void set_lan_host_ping_location(std::string&& value);
  void set_lan_host_ping_location(const char* value);
  void set_lan_host_ping_location(const char* value, size_t size);
  std::string* mutable_lan_host_ping_location();
  std::string* release_lan_host_ping_location();
  void set_allocated_lan_host_ping_location(std::string* lan_host_ping_location);
  private:
  const std::string& _internal_lan_host_ping_location() const;
  void _internal_set_lan_host_ping_location(const std::string& value);
  std::string* _internal_mutable_lan_host_ping_location();
  public:

  // optional fixed64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 custom_game_id = 2;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 member_count = 4;
  bool has_member_count() const;
  private:
  bool _internal_has_member_count() const;
  public:
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 leader_account_id = 5;
  bool has_leader_account_id() const;
  private:
  bool _internal_has_leader_account_id() const;
  public:
  void clear_leader_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id() const;
  void set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_account_id() const;
  void _internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_player_count = 8;
  bool has_max_player_count() const;
  private:
  bool _internal_has_max_player_count() const;
  public:
  void clear_max_player_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_player_count() const;
  void set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_player_count() const;
  void _internal_set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 server_region = 9;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool has_pass_key = 11;
  bool has_has_pass_key() const;
  private:
  bool _internal_has_has_pass_key() const;
  public:
  void clear_has_pass_key();
  bool has_pass_key() const;
  void set_has_pass_key(bool value);
  private:
  bool _internal_has_pass_key() const;
  void _internal_set_has_pass_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomLobbiesResponseEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lobby_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr leader_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lan_host_ping_location_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_player_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  bool has_pass_key_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgJoinableCustomLobbiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgJoinableCustomLobbiesResponse) */ {
 public:
  inline CMsgJoinableCustomLobbiesResponse() : CMsgJoinableCustomLobbiesResponse(nullptr) {}
  virtual ~CMsgJoinableCustomLobbiesResponse();
  explicit constexpr CMsgJoinableCustomLobbiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from);
  CMsgJoinableCustomLobbiesResponse(CMsgJoinableCustomLobbiesResponse&& from) noexcept
    : CMsgJoinableCustomLobbiesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgJoinableCustomLobbiesResponse& operator=(const CMsgJoinableCustomLobbiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgJoinableCustomLobbiesResponse& operator=(CMsgJoinableCustomLobbiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgJoinableCustomLobbiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgJoinableCustomLobbiesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgJoinableCustomLobbiesResponse*>(
               &_CMsgJoinableCustomLobbiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgJoinableCustomLobbiesResponse& a, CMsgJoinableCustomLobbiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgJoinableCustomLobbiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgJoinableCustomLobbiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgJoinableCustomLobbiesResponse* New() const final {
    return CreateMaybeMessage<CMsgJoinableCustomLobbiesResponse>(nullptr);
  }

  CMsgJoinableCustomLobbiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgJoinableCustomLobbiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgJoinableCustomLobbiesResponse& from);
  void MergeFrom(const CMsgJoinableCustomLobbiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgJoinableCustomLobbiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgJoinableCustomLobbiesResponse";
  }
  protected:
  explicit CMsgJoinableCustomLobbiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbiesFieldNumber = 1,
  };
  // repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  int lobbies_size() const;
  private:
  int _internal_lobbies_size() const;
  public:
  void clear_lobbies();
  ::CMsgJoinableCustomLobbiesResponseEntry* mutable_lobbies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >*
      mutable_lobbies();
  private:
  const ::CMsgJoinableCustomLobbiesResponseEntry& _internal_lobbies(int index) const;
  ::CMsgJoinableCustomLobbiesResponseEntry* _internal_add_lobbies();
  public:
  const ::CMsgJoinableCustomLobbiesResponseEntry& lobbies(int index) const;
  ::CMsgJoinableCustomLobbiesResponseEntry* add_lobbies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgJoinableCustomLobbiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry > lobbies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgQuickJoinCustomLobby_LegacyRegionPing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuickJoinCustomLobby.LegacyRegionPing) */ {
 public:
  inline CMsgQuickJoinCustomLobby_LegacyRegionPing() : CMsgQuickJoinCustomLobby_LegacyRegionPing(nullptr) {}
  virtual ~CMsgQuickJoinCustomLobby_LegacyRegionPing();
  explicit constexpr CMsgQuickJoinCustomLobby_LegacyRegionPing(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from);
  CMsgQuickJoinCustomLobby_LegacyRegionPing(CMsgQuickJoinCustomLobby_LegacyRegionPing&& from) noexcept
    : CMsgQuickJoinCustomLobby_LegacyRegionPing() {
    *this = ::std::move(from);
  }

  inline CMsgQuickJoinCustomLobby_LegacyRegionPing& operator=(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuickJoinCustomLobby_LegacyRegionPing& operator=(CMsgQuickJoinCustomLobby_LegacyRegionPing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgQuickJoinCustomLobby_LegacyRegionPing& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuickJoinCustomLobby_LegacyRegionPing* internal_default_instance() {
    return reinterpret_cast<const CMsgQuickJoinCustomLobby_LegacyRegionPing*>(
               &_CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgQuickJoinCustomLobby_LegacyRegionPing& a, CMsgQuickJoinCustomLobby_LegacyRegionPing& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuickJoinCustomLobby_LegacyRegionPing* New() const final {
    return CreateMaybeMessage<CMsgQuickJoinCustomLobby_LegacyRegionPing>(nullptr);
  }

  CMsgQuickJoinCustomLobby_LegacyRegionPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuickJoinCustomLobby_LegacyRegionPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from);
  void MergeFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuickJoinCustomLobby.LegacyRegionPing";
  }
  protected:
  explicit CMsgQuickJoinCustomLobby_LegacyRegionPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerRegionFieldNumber = 1,
    kPingFieldNumber = 2,
    kRegionCodeFieldNumber = 3,
  };
  // optional uint32 server_region = 1;
  bool has_server_region() const;
  private:
  bool _internal_has_server_region() const;
  public:
  void clear_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region() const;
  void set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_server_region() const;
  void _internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ping = 2;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  ::PROTOBUF_NAMESPACE_ID::uint32 ping() const;
  void set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ping() const;
  void _internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 region_code = 3;
  bool has_region_code() const;
  private:
  bool _internal_has_region_code() const;
  public:
  void clear_region_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 region_code() const;
  void set_region_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_region_code() const;
  void _internal_set_region_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuickJoinCustomLobby.LegacyRegionPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 server_region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 region_code_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgQuickJoinCustomLobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuickJoinCustomLobby) */ {
 public:
  inline CMsgQuickJoinCustomLobby() : CMsgQuickJoinCustomLobby(nullptr) {}
  virtual ~CMsgQuickJoinCustomLobby();
  explicit constexpr CMsgQuickJoinCustomLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from);
  CMsgQuickJoinCustomLobby(CMsgQuickJoinCustomLobby&& from) noexcept
    : CMsgQuickJoinCustomLobby() {
    *this = ::std::move(from);
  }

  inline CMsgQuickJoinCustomLobby& operator=(const CMsgQuickJoinCustomLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuickJoinCustomLobby& operator=(CMsgQuickJoinCustomLobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgQuickJoinCustomLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuickJoinCustomLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgQuickJoinCustomLobby*>(
               &_CMsgQuickJoinCustomLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgQuickJoinCustomLobby& a, CMsgQuickJoinCustomLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuickJoinCustomLobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuickJoinCustomLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuickJoinCustomLobby* New() const final {
    return CreateMaybeMessage<CMsgQuickJoinCustomLobby>(nullptr);
  }

  CMsgQuickJoinCustomLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuickJoinCustomLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuickJoinCustomLobby& from);
  void MergeFrom(const CMsgQuickJoinCustomLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuickJoinCustomLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuickJoinCustomLobby";
  }
  protected:
  explicit CMsgQuickJoinCustomLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgQuickJoinCustomLobby_LegacyRegionPing LegacyRegionPing;

  // accessors -------------------------------------------------------

  enum : int {
    kLegacyRegionPingsFieldNumber = 6,
    kCreateLobbyDetailsFieldNumber = 4,
    kPingDataFieldNumber = 7,
    kCustomGameIdFieldNumber = 2,
    kLegacyServerRegionFieldNumber = 1,
    kClientVersionFieldNumber = 3,
    kAllowAnyMapFieldNumber = 5,
  };
  // repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  int legacy_region_pings_size() const;
  private:
  int _internal_legacy_region_pings_size() const;
  public:
  void clear_legacy_region_pings();
  ::CMsgQuickJoinCustomLobby_LegacyRegionPing* mutable_legacy_region_pings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >*
      mutable_legacy_region_pings();
  private:
  const ::CMsgQuickJoinCustomLobby_LegacyRegionPing& _internal_legacy_region_pings(int index) const;
  ::CMsgQuickJoinCustomLobby_LegacyRegionPing* _internal_add_legacy_region_pings();
  public:
  const ::CMsgQuickJoinCustomLobby_LegacyRegionPing& legacy_region_pings(int index) const;
  ::CMsgQuickJoinCustomLobby_LegacyRegionPing* add_legacy_region_pings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >&
      legacy_region_pings() const;

  // optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
  bool has_create_lobby_details() const;
  private:
  bool _internal_has_create_lobby_details() const;
  public:
  void clear_create_lobby_details();
  const ::CMsgPracticeLobbySetDetails& create_lobby_details() const;
  ::CMsgPracticeLobbySetDetails* release_create_lobby_details();
  ::CMsgPracticeLobbySetDetails* mutable_create_lobby_details();
  void set_allocated_create_lobby_details(::CMsgPracticeLobbySetDetails* create_lobby_details);
  private:
  const ::CMsgPracticeLobbySetDetails& _internal_create_lobby_details() const;
  ::CMsgPracticeLobbySetDetails* _internal_mutable_create_lobby_details();
  public:
  void unsafe_arena_set_allocated_create_lobby_details(
      ::CMsgPracticeLobbySetDetails* create_lobby_details);
  ::CMsgPracticeLobbySetDetails* unsafe_arena_release_create_lobby_details();

  // optional .CMsgClientPingData ping_data = 7;
  bool has_ping_data() const;
  private:
  bool _internal_has_ping_data() const;
  public:
  void clear_ping_data();
  const ::CMsgClientPingData& ping_data() const;
  ::CMsgClientPingData* release_ping_data();
  ::CMsgClientPingData* mutable_ping_data();
  void set_allocated_ping_data(::CMsgClientPingData* ping_data);
  private:
  const ::CMsgClientPingData& _internal_ping_data() const;
  ::CMsgClientPingData* _internal_mutable_ping_data();
  public:
  void unsafe_arena_set_allocated_ping_data(
      ::CMsgClientPingData* ping_data);
  ::CMsgClientPingData* unsafe_arena_release_ping_data();

  // optional uint64 custom_game_id = 2;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 legacy_server_region = 1;
  bool has_legacy_server_region() const;
  private:
  bool _internal_has_legacy_server_region() const;
  public:
  void clear_legacy_server_region();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_server_region() const;
  void set_legacy_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_server_region() const;
  void _internal_set_legacy_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 client_version = 3;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool allow_any_map = 5;
  bool has_allow_any_map() const;
  private:
  bool _internal_has_allow_any_map() const;
  public:
  void clear_allow_any_map();
  bool allow_any_map() const;
  void set_allow_any_map(bool value);
  private:
  bool _internal_allow_any_map() const;
  void _internal_set_allow_any_map(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuickJoinCustomLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing > legacy_region_pings_;
  ::CMsgPracticeLobbySetDetails* create_lobby_details_;
  ::CMsgClientPingData* ping_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_server_region_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  bool allow_any_map_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgQuickJoinCustomLobbyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQuickJoinCustomLobbyResponse) */ {
 public:
  inline CMsgQuickJoinCustomLobbyResponse() : CMsgQuickJoinCustomLobbyResponse(nullptr) {}
  virtual ~CMsgQuickJoinCustomLobbyResponse();
  explicit constexpr CMsgQuickJoinCustomLobbyResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from);
  CMsgQuickJoinCustomLobbyResponse(CMsgQuickJoinCustomLobbyResponse&& from) noexcept
    : CMsgQuickJoinCustomLobbyResponse() {
    *this = ::std::move(from);
  }

  inline CMsgQuickJoinCustomLobbyResponse& operator=(const CMsgQuickJoinCustomLobbyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQuickJoinCustomLobbyResponse& operator=(CMsgQuickJoinCustomLobbyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgQuickJoinCustomLobbyResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQuickJoinCustomLobbyResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgQuickJoinCustomLobbyResponse*>(
               &_CMsgQuickJoinCustomLobbyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgQuickJoinCustomLobbyResponse& a, CMsgQuickJoinCustomLobbyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQuickJoinCustomLobbyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQuickJoinCustomLobbyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQuickJoinCustomLobbyResponse* New() const final {
    return CreateMaybeMessage<CMsgQuickJoinCustomLobbyResponse>(nullptr);
  }

  CMsgQuickJoinCustomLobbyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQuickJoinCustomLobbyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from);
  void MergeFrom(const CMsgQuickJoinCustomLobbyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQuickJoinCustomLobbyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQuickJoinCustomLobbyResponse";
  }
  protected:
  explicit CMsgQuickJoinCustomLobbyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::DOTAJoinLobbyResult result() const;
  void set_result(::DOTAJoinLobbyResult value);
  private:
  ::DOTAJoinLobbyResult _internal_result() const;
  void _internal_set_result(::DOTAJoinLobbyResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQuickJoinCustomLobbyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgBotGameCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgBotGameCreate) */ {
 public:
  inline CMsgBotGameCreate() : CMsgBotGameCreate(nullptr) {}
  virtual ~CMsgBotGameCreate();
  explicit constexpr CMsgBotGameCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgBotGameCreate(const CMsgBotGameCreate& from);
  CMsgBotGameCreate(CMsgBotGameCreate&& from) noexcept
    : CMsgBotGameCreate() {
    *this = ::std::move(from);
  }

  inline CMsgBotGameCreate& operator=(const CMsgBotGameCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgBotGameCreate& operator=(CMsgBotGameCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgBotGameCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgBotGameCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgBotGameCreate*>(
               &_CMsgBotGameCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgBotGameCreate& a, CMsgBotGameCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgBotGameCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgBotGameCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgBotGameCreate* New() const final {
    return CreateMaybeMessage<CMsgBotGameCreate>(nullptr);
  }

  CMsgBotGameCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgBotGameCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgBotGameCreate& from);
  void MergeFrom(const CMsgBotGameCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgBotGameCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgBotGameCreate";
  }
  protected:
  explicit CMsgBotGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchKeyFieldNumber = 1,
    kClientVersionFieldNumber = 2,
    kDifficultyRadiantFieldNumber = 3,
    kTeamFieldNumber = 4,
    kGameModeFieldNumber = 5,
    kDifficultyDireFieldNumber = 6,
  };
  // optional string search_key = 1;
  bool has_search_key() const;
  private:
  bool _internal_has_search_key() const;
  public:
  void clear_search_key();
  const std::string& search_key() const;
  void set_search_key(const std::string& value);
  void set_search_key(std::string&& value);
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  std::string* mutable_search_key();
  std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_difficulty_radiant() const;
  private:
  bool _internal_has_difficulty_radiant() const;
  public:
  void clear_difficulty_radiant();
  ::DOTABotDifficulty difficulty_radiant() const;
  void set_difficulty_radiant(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_difficulty_radiant() const;
  void _internal_set_difficulty_radiant(::DOTABotDifficulty value);
  public:

  // optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  private:
  bool _internal_has_team() const;
  public:
  void clear_team();
  ::DOTA_GC_TEAM team() const;
  void set_team(::DOTA_GC_TEAM value);
  private:
  ::DOTA_GC_TEAM _internal_team() const;
  void _internal_set_team(::DOTA_GC_TEAM value);
  public:

  // optional uint32 game_mode = 5;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_mode() const;
  void _internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  bool has_difficulty_dire() const;
  private:
  bool _internal_has_difficulty_dire() const;
  public:
  void clear_difficulty_dire();
  ::DOTABotDifficulty difficulty_dire() const;
  void set_difficulty_dire(::DOTABotDifficulty value);
  private:
  ::DOTABotDifficulty _internal_difficulty_dire() const;
  void _internal_set_difficulty_dire(::DOTABotDifficulty value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgBotGameCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  int difficulty_radiant_;
  int team_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode_;
  int difficulty_dire_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgCustomGameCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCustomGameCreate) */ {
 public:
  inline CMsgCustomGameCreate() : CMsgCustomGameCreate(nullptr) {}
  virtual ~CMsgCustomGameCreate();
  explicit constexpr CMsgCustomGameCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCustomGameCreate(const CMsgCustomGameCreate& from);
  CMsgCustomGameCreate(CMsgCustomGameCreate&& from) noexcept
    : CMsgCustomGameCreate() {
    *this = ::std::move(from);
  }

  inline CMsgCustomGameCreate& operator=(const CMsgCustomGameCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCustomGameCreate& operator=(CMsgCustomGameCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgCustomGameCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCustomGameCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgCustomGameCreate*>(
               &_CMsgCustomGameCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgCustomGameCreate& a, CMsgCustomGameCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCustomGameCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCustomGameCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgCustomGameCreate* New() const final {
    return CreateMaybeMessage<CMsgCustomGameCreate>(nullptr);
  }

  CMsgCustomGameCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgCustomGameCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgCustomGameCreate& from);
  void MergeFrom(const CMsgCustomGameCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCustomGameCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCustomGameCreate";
  }
  protected:
  explicit CMsgCustomGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchKeyFieldNumber = 1,
    kGameModeFieldNumber = 4,
    kMapFieldNumber = 5,
    kClientVersionFieldNumber = 2,
    kDifficultyFieldNumber = 3,
    kCustomGameIdFieldNumber = 7,
  };
  // optional string search_key = 1;
  bool has_search_key() const;
  private:
  bool _internal_has_search_key() const;
  public:
  void clear_search_key();
  const std::string& search_key() const;
  void set_search_key(const std::string& value);
  void set_search_key(std::string&& value);
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  std::string* mutable_search_key();
  std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional string game_mode = 4;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  const std::string& game_mode() const;
  void set_game_mode(const std::string& value);
  void set_game_mode(std::string&& value);
  void set_game_mode(const char* value);
  void set_game_mode(const char* value, size_t size);
  std::string* mutable_game_mode();
  std::string* release_game_mode();
  void set_allocated_game_mode(std::string* game_mode);
  private:
  const std::string& _internal_game_mode() const;
  void _internal_set_game_mode(const std::string& value);
  std::string* _internal_mutable_game_mode();
  public:

  // optional string map = 5;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 difficulty = 3;
  bool has_difficulty() const;
  private:
  bool _internal_has_difficulty() const;
  public:
  void clear_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty() const;
  void set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_difficulty() const;
  void _internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 custom_game_id = 7;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCustomGameCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgEventGameCreate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgEventGameCreate) */ {
 public:
  inline CMsgEventGameCreate() : CMsgEventGameCreate(nullptr) {}
  virtual ~CMsgEventGameCreate();
  explicit constexpr CMsgEventGameCreate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgEventGameCreate(const CMsgEventGameCreate& from);
  CMsgEventGameCreate(CMsgEventGameCreate&& from) noexcept
    : CMsgEventGameCreate() {
    *this = ::std::move(from);
  }

  inline CMsgEventGameCreate& operator=(const CMsgEventGameCreate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgEventGameCreate& operator=(CMsgEventGameCreate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgEventGameCreate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgEventGameCreate* internal_default_instance() {
    return reinterpret_cast<const CMsgEventGameCreate*>(
               &_CMsgEventGameCreate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgEventGameCreate& a, CMsgEventGameCreate& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgEventGameCreate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgEventGameCreate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgEventGameCreate* New() const final {
    return CreateMaybeMessage<CMsgEventGameCreate>(nullptr);
  }

  CMsgEventGameCreate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgEventGameCreate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgEventGameCreate& from);
  void MergeFrom(const CMsgEventGameCreate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgEventGameCreate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgEventGameCreate";
  }
  protected:
  explicit CMsgEventGameCreate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchKeyFieldNumber = 1,
    kGameModeFieldNumber = 4,
    kMapFieldNumber = 5,
    kClientVersionFieldNumber = 2,
    kDifficultyFieldNumber = 3,
    kCustomGameIdFieldNumber = 7,
  };
  // optional string search_key = 1;
  bool has_search_key() const;
  private:
  bool _internal_has_search_key() const;
  public:
  void clear_search_key();
  const std::string& search_key() const;
  void set_search_key(const std::string& value);
  void set_search_key(std::string&& value);
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  std::string* mutable_search_key();
  std::string* release_search_key();
  void set_allocated_search_key(std::string* search_key);
  private:
  const std::string& _internal_search_key() const;
  void _internal_set_search_key(const std::string& value);
  std::string* _internal_mutable_search_key();
  public:

  // optional string game_mode = 4;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  const std::string& game_mode() const;
  void set_game_mode(const std::string& value);
  void set_game_mode(std::string&& value);
  void set_game_mode(const char* value);
  void set_game_mode(const char* value, size_t size);
  std::string* mutable_game_mode();
  std::string* release_game_mode();
  void set_allocated_game_mode(std::string* game_mode);
  private:
  const std::string& _internal_game_mode() const;
  void _internal_set_game_mode(const std::string& value);
  std::string* _internal_mutable_game_mode();
  public:

  // optional string map = 5;
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const std::string& map() const;
  void set_map(const std::string& value);
  void set_map(std::string&& value);
  void set_map(const char* value);
  void set_map(const char* value, size_t size);
  std::string* mutable_map();
  std::string* release_map();
  void set_allocated_map(std::string* map);
  private:
  const std::string& _internal_map() const;
  void _internal_set_map(const std::string& value);
  std::string* _internal_mutable_map();
  public:

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 difficulty = 3;
  bool has_difficulty() const;
  private:
  bool _internal_has_difficulty() const;
  public:
  void clear_difficulty();
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty() const;
  void set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_difficulty() const;
  void _internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 custom_game_id = 7;
  bool has_custom_game_id() const;
  private:
  bool _internal_has_custom_game_id() const;
  public:
  void clear_custom_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id() const;
  void set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_custom_game_id() const;
  void _internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgEventGameCreate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 difficulty_;
  ::PROTOBUF_NAMESPACE_ID::uint64 custom_game_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPartyMemberSetCoach PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPartyMemberSetCoach) */ {
 public:
  inline CMsgDOTAPartyMemberSetCoach() : CMsgDOTAPartyMemberSetCoach(nullptr) {}
  virtual ~CMsgDOTAPartyMemberSetCoach();
  explicit constexpr CMsgDOTAPartyMemberSetCoach(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from);
  CMsgDOTAPartyMemberSetCoach(CMsgDOTAPartyMemberSetCoach&& from) noexcept
    : CMsgDOTAPartyMemberSetCoach() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPartyMemberSetCoach& operator=(const CMsgDOTAPartyMemberSetCoach& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPartyMemberSetCoach& operator=(CMsgDOTAPartyMemberSetCoach&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPartyMemberSetCoach& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPartyMemberSetCoach* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPartyMemberSetCoach*>(
               &_CMsgDOTAPartyMemberSetCoach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgDOTAPartyMemberSetCoach& a, CMsgDOTAPartyMemberSetCoach& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPartyMemberSetCoach* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPartyMemberSetCoach* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPartyMemberSetCoach* New() const final {
    return CreateMaybeMessage<CMsgDOTAPartyMemberSetCoach>(nullptr);
  }

  CMsgDOTAPartyMemberSetCoach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPartyMemberSetCoach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPartyMemberSetCoach& from);
  void MergeFrom(const CMsgDOTAPartyMemberSetCoach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPartyMemberSetCoach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPartyMemberSetCoach";
  }
  protected:
  explicit CMsgDOTAPartyMemberSetCoach(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWantsCoachFieldNumber = 1,
  };
  // optional bool wants_coach = 1;
  bool has_wants_coach() const;
  private:
  bool _internal_has_wants_coach() const;
  public:
  void clear_wants_coach();
  bool wants_coach() const;
  void set_wants_coach(bool value);
  private:
  bool _internal_wants_coach() const;
  void _internal_set_wants_coach(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPartyMemberSetCoach)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool wants_coach_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASetGroupLeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASetGroupLeader) */ {
 public:
  inline CMsgDOTASetGroupLeader() : CMsgDOTASetGroupLeader(nullptr) {}
  virtual ~CMsgDOTASetGroupLeader();
  explicit constexpr CMsgDOTASetGroupLeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from);
  CMsgDOTASetGroupLeader(CMsgDOTASetGroupLeader&& from) noexcept
    : CMsgDOTASetGroupLeader() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASetGroupLeader& operator=(const CMsgDOTASetGroupLeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASetGroupLeader& operator=(CMsgDOTASetGroupLeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTASetGroupLeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASetGroupLeader* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASetGroupLeader*>(
               &_CMsgDOTASetGroupLeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgDOTASetGroupLeader& a, CMsgDOTASetGroupLeader& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASetGroupLeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASetGroupLeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASetGroupLeader* New() const final {
    return CreateMaybeMessage<CMsgDOTASetGroupLeader>(nullptr);
  }

  CMsgDOTASetGroupLeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASetGroupLeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTASetGroupLeader& from);
  void MergeFrom(const CMsgDOTASetGroupLeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASetGroupLeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASetGroupLeader";
  }
  protected:
  explicit CMsgDOTASetGroupLeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewLeaderSteamidFieldNumber = 1,
  };
  // optional fixed64 new_leader_steamid = 1;
  bool has_new_leader_steamid() const;
  private:
  bool _internal_has_new_leader_steamid() const;
  public:
  void clear_new_leader_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_steamid() const;
  void set_new_leader_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_new_leader_steamid() const;
  void _internal_set_new_leader_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASetGroupLeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 new_leader_steamid_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTACancelGroupInvites PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTACancelGroupInvites) */ {
 public:
  inline CMsgDOTACancelGroupInvites() : CMsgDOTACancelGroupInvites(nullptr) {}
  virtual ~CMsgDOTACancelGroupInvites();
  explicit constexpr CMsgDOTACancelGroupInvites(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from);
  CMsgDOTACancelGroupInvites(CMsgDOTACancelGroupInvites&& from) noexcept
    : CMsgDOTACancelGroupInvites() {
    *this = ::std::move(from);
  }

  inline CMsgDOTACancelGroupInvites& operator=(const CMsgDOTACancelGroupInvites& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTACancelGroupInvites& operator=(CMsgDOTACancelGroupInvites&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTACancelGroupInvites& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTACancelGroupInvites* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACancelGroupInvites*>(
               &_CMsgDOTACancelGroupInvites_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgDOTACancelGroupInvites& a, CMsgDOTACancelGroupInvites& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTACancelGroupInvites* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTACancelGroupInvites* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTACancelGroupInvites* New() const final {
    return CreateMaybeMessage<CMsgDOTACancelGroupInvites>(nullptr);
  }

  CMsgDOTACancelGroupInvites* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTACancelGroupInvites>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTACancelGroupInvites& from);
  void MergeFrom(const CMsgDOTACancelGroupInvites& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTACancelGroupInvites* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTACancelGroupInvites";
  }
  protected:
  explicit CMsgDOTACancelGroupInvites(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvitedSteamidsFieldNumber = 1,
    kInvitedGroupidsFieldNumber = 2,
  };
  // repeated fixed64 invited_steamids = 1;
  int invited_steamids_size() const;
  private:
  int _internal_invited_steamids_size() const;
  public:
  void clear_invited_steamids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invited_steamids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_invited_steamids() const;
  void _internal_add_invited_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_invited_steamids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 invited_steamids(int index) const;
  void set_invited_steamids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_invited_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      invited_steamids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_invited_steamids();

  // repeated fixed64 invited_groupids = 2;
  int invited_groupids_size() const;
  private:
  int _internal_invited_groupids_size() const;
  public:
  void clear_invited_groupids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_invited_groupids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_invited_groupids() const;
  void _internal_add_invited_groupids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_invited_groupids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 invited_groupids(int index) const;
  void set_invited_groupids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_invited_groupids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      invited_groupids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_invited_groupids();

  // @@protoc_insertion_point(class_scope:CMsgDOTACancelGroupInvites)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > invited_steamids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > invited_groupids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTASetGroupOpenStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTASetGroupOpenStatus) */ {
 public:
  inline CMsgDOTASetGroupOpenStatus() : CMsgDOTASetGroupOpenStatus(nullptr) {}
  virtual ~CMsgDOTASetGroupOpenStatus();
  explicit constexpr CMsgDOTASetGroupOpenStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from);
  CMsgDOTASetGroupOpenStatus(CMsgDOTASetGroupOpenStatus&& from) noexcept
    : CMsgDOTASetGroupOpenStatus() {
    *this = ::std::move(from);
  }

  inline CMsgDOTASetGroupOpenStatus& operator=(const CMsgDOTASetGroupOpenStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTASetGroupOpenStatus& operator=(CMsgDOTASetGroupOpenStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTASetGroupOpenStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTASetGroupOpenStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTASetGroupOpenStatus*>(
               &_CMsgDOTASetGroupOpenStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgDOTASetGroupOpenStatus& a, CMsgDOTASetGroupOpenStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTASetGroupOpenStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTASetGroupOpenStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTASetGroupOpenStatus* New() const final {
    return CreateMaybeMessage<CMsgDOTASetGroupOpenStatus>(nullptr);
  }

  CMsgDOTASetGroupOpenStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTASetGroupOpenStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTASetGroupOpenStatus& from);
  void MergeFrom(const CMsgDOTASetGroupOpenStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTASetGroupOpenStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTASetGroupOpenStatus";
  }
  protected:
  explicit CMsgDOTASetGroupOpenStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 1,
  };
  // optional bool open = 1;
  bool has_open() const;
  private:
  bool _internal_has_open() const;
  public:
  void clear_open();
  bool open() const;
  void set_open(bool value);
  private:
  bool _internal_open() const;
  void _internal_set_open(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTASetGroupOpenStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool open_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAGroupMergeInvite PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGroupMergeInvite) */ {
 public:
  inline CMsgDOTAGroupMergeInvite() : CMsgDOTAGroupMergeInvite(nullptr) {}
  virtual ~CMsgDOTAGroupMergeInvite();
  explicit constexpr CMsgDOTAGroupMergeInvite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from);
  CMsgDOTAGroupMergeInvite(CMsgDOTAGroupMergeInvite&& from) noexcept
    : CMsgDOTAGroupMergeInvite() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGroupMergeInvite& operator=(const CMsgDOTAGroupMergeInvite& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAGroupMergeInvite& operator=(CMsgDOTAGroupMergeInvite&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAGroupMergeInvite& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAGroupMergeInvite* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGroupMergeInvite*>(
               &_CMsgDOTAGroupMergeInvite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgDOTAGroupMergeInvite& a, CMsgDOTAGroupMergeInvite& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAGroupMergeInvite* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAGroupMergeInvite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGroupMergeInvite* New() const final {
    return CreateMaybeMessage<CMsgDOTAGroupMergeInvite>(nullptr);
  }

  CMsgDOTAGroupMergeInvite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAGroupMergeInvite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAGroupMergeInvite& from);
  void MergeFrom(const CMsgDOTAGroupMergeInvite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAGroupMergeInvite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAGroupMergeInvite";
  }
  protected:
  explicit CMsgDOTAGroupMergeInvite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherGroupIdFieldNumber = 1,
  };
  // optional fixed64 other_group_id = 1;
  bool has_other_group_id() const;
  private:
  bool _internal_has_other_group_id() const;
  public:
  void clear_other_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 other_group_id() const;
  void set_other_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_other_group_id() const;
  void _internal_set_other_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAGroupMergeInvite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 other_group_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAGroupMergeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGroupMergeResponse) */ {
 public:
  inline CMsgDOTAGroupMergeResponse() : CMsgDOTAGroupMergeResponse(nullptr) {}
  virtual ~CMsgDOTAGroupMergeResponse();
  explicit constexpr CMsgDOTAGroupMergeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from);
  CMsgDOTAGroupMergeResponse(CMsgDOTAGroupMergeResponse&& from) noexcept
    : CMsgDOTAGroupMergeResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGroupMergeResponse& operator=(const CMsgDOTAGroupMergeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAGroupMergeResponse& operator=(CMsgDOTAGroupMergeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAGroupMergeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAGroupMergeResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGroupMergeResponse*>(
               &_CMsgDOTAGroupMergeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgDOTAGroupMergeResponse& a, CMsgDOTAGroupMergeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAGroupMergeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAGroupMergeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGroupMergeResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAGroupMergeResponse>(nullptr);
  }

  CMsgDOTAGroupMergeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAGroupMergeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAGroupMergeResponse& from);
  void MergeFrom(const CMsgDOTAGroupMergeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAGroupMergeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAGroupMergeResponse";
  }
  protected:
  explicit CMsgDOTAGroupMergeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitiatorGroupIdFieldNumber = 1,
    kAcceptFieldNumber = 2,
  };
  // optional fixed64 initiator_group_id = 1;
  bool has_initiator_group_id() const;
  private:
  bool _internal_has_initiator_group_id() const;
  public:
  void clear_initiator_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 initiator_group_id() const;
  void set_initiator_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_initiator_group_id() const;
  void _internal_set_initiator_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool accept = 2;
  bool has_accept() const;
  private:
  bool _internal_has_accept() const;
  public:
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAGroupMergeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 initiator_group_id_;
  bool accept_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAGroupMergeReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAGroupMergeReply) */ {
 public:
  inline CMsgDOTAGroupMergeReply() : CMsgDOTAGroupMergeReply(nullptr) {}
  virtual ~CMsgDOTAGroupMergeReply();
  explicit constexpr CMsgDOTAGroupMergeReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from);
  CMsgDOTAGroupMergeReply(CMsgDOTAGroupMergeReply&& from) noexcept
    : CMsgDOTAGroupMergeReply() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAGroupMergeReply& operator=(const CMsgDOTAGroupMergeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAGroupMergeReply& operator=(CMsgDOTAGroupMergeReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAGroupMergeReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAGroupMergeReply* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAGroupMergeReply*>(
               &_CMsgDOTAGroupMergeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgDOTAGroupMergeReply& a, CMsgDOTAGroupMergeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAGroupMergeReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAGroupMergeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAGroupMergeReply* New() const final {
    return CreateMaybeMessage<CMsgDOTAGroupMergeReply>(nullptr);
  }

  CMsgDOTAGroupMergeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAGroupMergeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAGroupMergeReply& from);
  void MergeFrom(const CMsgDOTAGroupMergeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAGroupMergeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAGroupMergeReply";
  }
  protected:
  explicit CMsgDOTAGroupMergeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::EDOTAGroupMergeResult result() const;
  void set_result(::EDOTAGroupMergeResult value);
  private:
  ::EDOTAGroupMergeResult _internal_result() const;
  void _internal_set_result(::EDOTAGroupMergeResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAGroupMergeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyGameDetails_Team PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorLobbyGameDetails.Team) */ {
 public:
  inline CMsgSpectatorLobbyGameDetails_Team() : CMsgSpectatorLobbyGameDetails_Team(nullptr) {}
  virtual ~CMsgSpectatorLobbyGameDetails_Team();
  explicit constexpr CMsgSpectatorLobbyGameDetails_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from);
  CMsgSpectatorLobbyGameDetails_Team(CMsgSpectatorLobbyGameDetails_Team&& from) noexcept
    : CMsgSpectatorLobbyGameDetails_Team() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorLobbyGameDetails_Team& operator=(const CMsgSpectatorLobbyGameDetails_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectatorLobbyGameDetails_Team& operator=(CMsgSpectatorLobbyGameDetails_Team&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSpectatorLobbyGameDetails_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectatorLobbyGameDetails_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorLobbyGameDetails_Team*>(
               &_CMsgSpectatorLobbyGameDetails_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgSpectatorLobbyGameDetails_Team& a, CMsgSpectatorLobbyGameDetails_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectatorLobbyGameDetails_Team* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectatorLobbyGameDetails_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorLobbyGameDetails_Team* New() const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyGameDetails_Team>(nullptr);
  }

  CMsgSpectatorLobbyGameDetails_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyGameDetails_Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from);
  void MergeFrom(const CMsgSpectatorLobbyGameDetails_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectatorLobbyGameDetails_Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectatorLobbyGameDetails.Team";
  }
  protected:
  explicit CMsgSpectatorLobbyGameDetails_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 2,
    kTeamLogoFieldNumber = 3,
    kTeamIdFieldNumber = 1,
  };
  // optional string team_name = 2;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional fixed64 team_logo = 3;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo() const;
  void set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_logo() const;
  void _internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyGameDetails.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyGameDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorLobbyGameDetails) */ {
 public:
  inline CMsgSpectatorLobbyGameDetails() : CMsgSpectatorLobbyGameDetails(nullptr) {}
  virtual ~CMsgSpectatorLobbyGameDetails();
  explicit constexpr CMsgSpectatorLobbyGameDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from);
  CMsgSpectatorLobbyGameDetails(CMsgSpectatorLobbyGameDetails&& from) noexcept
    : CMsgSpectatorLobbyGameDetails() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorLobbyGameDetails& operator=(const CMsgSpectatorLobbyGameDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectatorLobbyGameDetails& operator=(CMsgSpectatorLobbyGameDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSpectatorLobbyGameDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectatorLobbyGameDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorLobbyGameDetails*>(
               &_CMsgSpectatorLobbyGameDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgSpectatorLobbyGameDetails& a, CMsgSpectatorLobbyGameDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectatorLobbyGameDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectatorLobbyGameDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorLobbyGameDetails* New() const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyGameDetails>(nullptr);
  }

  CMsgSpectatorLobbyGameDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyGameDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSpectatorLobbyGameDetails& from);
  void MergeFrom(const CMsgSpectatorLobbyGameDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectatorLobbyGameDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectatorLobbyGameDetails";
  }
  protected:
  explicit CMsgSpectatorLobbyGameDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgSpectatorLobbyGameDetails_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamUrlFieldNumber = 4,
    kStreamNameFieldNumber = 5,
    kRadiantTeamFieldNumber = 9,
    kDireTeamFieldNumber = 10,
    kMatchIdFieldNumber = 2,
    kServerSteamIdFieldNumber = 3,
    kLanguageFieldNumber = 1,
    kLeagueIdFieldNumber = 6,
    kSeriesTypeFieldNumber = 7,
    kSeriesGameFieldNumber = 8,
  };
  // optional string stream_url = 4;
  bool has_stream_url() const;
  private:
  bool _internal_has_stream_url() const;
  public:
  void clear_stream_url();
  const std::string& stream_url() const;
  void set_stream_url(const std::string& value);
  void set_stream_url(std::string&& value);
  void set_stream_url(const char* value);
  void set_stream_url(const char* value, size_t size);
  std::string* mutable_stream_url();
  std::string* release_stream_url();
  void set_allocated_stream_url(std::string* stream_url);
  private:
  const std::string& _internal_stream_url() const;
  void _internal_set_stream_url(const std::string& value);
  std::string* _internal_mutable_stream_url();
  public:

  // optional string stream_name = 5;
  bool has_stream_name() const;
  private:
  bool _internal_has_stream_name() const;
  public:
  void clear_stream_name();
  const std::string& stream_name() const;
  void set_stream_name(const std::string& value);
  void set_stream_name(std::string&& value);
  void set_stream_name(const char* value);
  void set_stream_name(const char* value, size_t size);
  std::string* mutable_stream_name();
  std::string* release_stream_name();
  void set_allocated_stream_name(std::string* stream_name);
  private:
  const std::string& _internal_stream_name() const;
  void _internal_set_stream_name(const std::string& value);
  std::string* _internal_mutable_stream_name();
  public:

  // optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  bool has_radiant_team() const;
  private:
  bool _internal_has_radiant_team() const;
  public:
  void clear_radiant_team();
  const ::CMsgSpectatorLobbyGameDetails_Team& radiant_team() const;
  ::CMsgSpectatorLobbyGameDetails_Team* release_radiant_team();
  ::CMsgSpectatorLobbyGameDetails_Team* mutable_radiant_team();
  void set_allocated_radiant_team(::CMsgSpectatorLobbyGameDetails_Team* radiant_team);
  private:
  const ::CMsgSpectatorLobbyGameDetails_Team& _internal_radiant_team() const;
  ::CMsgSpectatorLobbyGameDetails_Team* _internal_mutable_radiant_team();
  public:
  void unsafe_arena_set_allocated_radiant_team(
      ::CMsgSpectatorLobbyGameDetails_Team* radiant_team);
  ::CMsgSpectatorLobbyGameDetails_Team* unsafe_arena_release_radiant_team();

  // optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  bool has_dire_team() const;
  private:
  bool _internal_has_dire_team() const;
  public:
  void clear_dire_team();
  const ::CMsgSpectatorLobbyGameDetails_Team& dire_team() const;
  ::CMsgSpectatorLobbyGameDetails_Team* release_dire_team();
  ::CMsgSpectatorLobbyGameDetails_Team* mutable_dire_team();
  void set_allocated_dire_team(::CMsgSpectatorLobbyGameDetails_Team* dire_team);
  private:
  const ::CMsgSpectatorLobbyGameDetails_Team& _internal_dire_team() const;
  ::CMsgSpectatorLobbyGameDetails_Team* _internal_mutable_dire_team();
  public:
  void unsafe_arena_set_allocated_dire_team(
      ::CMsgSpectatorLobbyGameDetails_Team* dire_team);
  ::CMsgSpectatorLobbyGameDetails_Team* unsafe_arena_release_dire_team();

  // optional uint64 match_id = 2;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 server_steam_id = 3;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_steam_id() const;
  void set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_steam_id() const;
  void _internal_set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 language = 1;
  bool has_language() const;
  private:
  bool _internal_has_language() const;
  public:
  void clear_language();
  ::PROTOBUF_NAMESPACE_ID::uint32 language() const;
  void set_language(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_language() const;
  void _internal_set_language(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 league_id = 6;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_type = 7;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type() const;
  void set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_type() const;
  void _internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_game = 8;
  bool has_series_game() const;
  private:
  bool _internal_has_series_game() const;
  public:
  void clear_series_game();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_game() const;
  void set_series_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_game() const;
  void _internal_set_series_game(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyGameDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_name_;
  ::CMsgSpectatorLobbyGameDetails_Team* radiant_team_;
  ::CMsgSpectatorLobbyGameDetails_Team* dire_team_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 language_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_game_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgSetSpectatorLobbyDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSetSpectatorLobbyDetails) */ {
 public:
  inline CMsgSetSpectatorLobbyDetails() : CMsgSetSpectatorLobbyDetails(nullptr) {}
  virtual ~CMsgSetSpectatorLobbyDetails();
  explicit constexpr CMsgSetSpectatorLobbyDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from);
  CMsgSetSpectatorLobbyDetails(CMsgSetSpectatorLobbyDetails&& from) noexcept
    : CMsgSetSpectatorLobbyDetails() {
    *this = ::std::move(from);
  }

  inline CMsgSetSpectatorLobbyDetails& operator=(const CMsgSetSpectatorLobbyDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSetSpectatorLobbyDetails& operator=(CMsgSetSpectatorLobbyDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSetSpectatorLobbyDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSetSpectatorLobbyDetails* internal_default_instance() {
    return reinterpret_cast<const CMsgSetSpectatorLobbyDetails*>(
               &_CMsgSetSpectatorLobbyDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgSetSpectatorLobbyDetails& a, CMsgSetSpectatorLobbyDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSetSpectatorLobbyDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSetSpectatorLobbyDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSetSpectatorLobbyDetails* New() const final {
    return CreateMaybeMessage<CMsgSetSpectatorLobbyDetails>(nullptr);
  }

  CMsgSetSpectatorLobbyDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSetSpectatorLobbyDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSetSpectatorLobbyDetails& from);
  void MergeFrom(const CMsgSetSpectatorLobbyDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSetSpectatorLobbyDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSetSpectatorLobbyDetails";
  }
  protected:
  explicit CMsgSetSpectatorLobbyDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLobbyNameFieldNumber = 2,
    kPassKeyFieldNumber = 3,
    kGameDetailsFieldNumber = 4,
    kLobbyIdFieldNumber = 1,
  };
  // optional string lobby_name = 2;
  bool has_lobby_name() const;
  private:
  bool _internal_has_lobby_name() const;
  public:
  void clear_lobby_name();
  const std::string& lobby_name() const;
  void set_lobby_name(const std::string& value);
  void set_lobby_name(std::string&& value);
  void set_lobby_name(const char* value);
  void set_lobby_name(const char* value, size_t size);
  std::string* mutable_lobby_name();
  std::string* release_lobby_name();
  void set_allocated_lobby_name(std::string* lobby_name);
  private:
  const std::string& _internal_lobby_name() const;
  void _internal_set_lobby_name(const std::string& value);
  std::string* _internal_mutable_lobby_name();
  public:

  // optional string pass_key = 3;
  bool has_pass_key() const;
  private:
  bool _internal_has_pass_key() const;
  public:
  void clear_pass_key();
  const std::string& pass_key() const;
  void set_pass_key(const std::string& value);
  void set_pass_key(std::string&& value);
  void set_pass_key(const char* value);
  void set_pass_key(const char* value, size_t size);
  std::string* mutable_pass_key();
  std::string* release_pass_key();
  void set_allocated_pass_key(std::string* pass_key);
  private:
  const std::string& _internal_pass_key() const;
  void _internal_set_pass_key(const std::string& value);
  std::string* _internal_mutable_pass_key();
  public:

  // optional .CMsgSpectatorLobbyGameDetails game_details = 4;
  bool has_game_details() const;
  private:
  bool _internal_has_game_details() const;
  public:
  void clear_game_details();
  const ::CMsgSpectatorLobbyGameDetails& game_details() const;
  ::CMsgSpectatorLobbyGameDetails* release_game_details();
  ::CMsgSpectatorLobbyGameDetails* mutable_game_details();
  void set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details);
  private:
  const ::CMsgSpectatorLobbyGameDetails& _internal_game_details() const;
  ::CMsgSpectatorLobbyGameDetails* _internal_mutable_game_details();
  public:
  void unsafe_arena_set_allocated_game_details(
      ::CMsgSpectatorLobbyGameDetails* game_details);
  ::CMsgSpectatorLobbyGameDetails* unsafe_arena_release_game_details();

  // optional uint64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSetSpectatorLobbyDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lobby_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pass_key_;
  ::CMsgSpectatorLobbyGameDetails* game_details_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgCreateSpectatorLobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgCreateSpectatorLobby) */ {
 public:
  inline CMsgCreateSpectatorLobby() : CMsgCreateSpectatorLobby(nullptr) {}
  virtual ~CMsgCreateSpectatorLobby();
  explicit constexpr CMsgCreateSpectatorLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from);
  CMsgCreateSpectatorLobby(CMsgCreateSpectatorLobby&& from) noexcept
    : CMsgCreateSpectatorLobby() {
    *this = ::std::move(from);
  }

  inline CMsgCreateSpectatorLobby& operator=(const CMsgCreateSpectatorLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgCreateSpectatorLobby& operator=(CMsgCreateSpectatorLobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgCreateSpectatorLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgCreateSpectatorLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgCreateSpectatorLobby*>(
               &_CMsgCreateSpectatorLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgCreateSpectatorLobby& a, CMsgCreateSpectatorLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgCreateSpectatorLobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgCreateSpectatorLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgCreateSpectatorLobby* New() const final {
    return CreateMaybeMessage<CMsgCreateSpectatorLobby>(nullptr);
  }

  CMsgCreateSpectatorLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgCreateSpectatorLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgCreateSpectatorLobby& from);
  void MergeFrom(const CMsgCreateSpectatorLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgCreateSpectatorLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgCreateSpectatorLobby";
  }
  protected:
  explicit CMsgCreateSpectatorLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 2,
    kClientVersionFieldNumber = 1,
  };
  // optional .CMsgSetSpectatorLobbyDetails details = 2;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::CMsgSetSpectatorLobbyDetails& details() const;
  ::CMsgSetSpectatorLobbyDetails* release_details();
  ::CMsgSetSpectatorLobbyDetails* mutable_details();
  void set_allocated_details(::CMsgSetSpectatorLobbyDetails* details);
  private:
  const ::CMsgSetSpectatorLobbyDetails& _internal_details() const;
  ::CMsgSetSpectatorLobbyDetails* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::CMsgSetSpectatorLobbyDetails* details);
  ::CMsgSetSpectatorLobbyDetails* unsafe_arena_release_details();

  // optional uint32 client_version = 1;
  bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgCreateSpectatorLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSetSpectatorLobbyDetails* details_;
  ::PROTOBUF_NAMESPACE_ID::uint32 client_version_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorLobbyList) */ {
 public:
  inline CMsgSpectatorLobbyList() : CMsgSpectatorLobbyList(nullptr) {}
  virtual ~CMsgSpectatorLobbyList();
  explicit constexpr CMsgSpectatorLobbyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from);
  CMsgSpectatorLobbyList(CMsgSpectatorLobbyList&& from) noexcept
    : CMsgSpectatorLobbyList() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorLobbyList& operator=(const CMsgSpectatorLobbyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectatorLobbyList& operator=(CMsgSpectatorLobbyList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSpectatorLobbyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectatorLobbyList* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorLobbyList*>(
               &_CMsgSpectatorLobbyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgSpectatorLobbyList& a, CMsgSpectatorLobbyList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectatorLobbyList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectatorLobbyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorLobbyList* New() const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyList>(nullptr);
  }

  CMsgSpectatorLobbyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSpectatorLobbyList& from);
  void MergeFrom(const CMsgSpectatorLobbyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectatorLobbyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectatorLobbyList";
  }
  protected:
  explicit CMsgSpectatorLobbyList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyListResponse_SpectatorLobby PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorLobbyListResponse.SpectatorLobby) */ {
 public:
  inline CMsgSpectatorLobbyListResponse_SpectatorLobby() : CMsgSpectatorLobbyListResponse_SpectatorLobby(nullptr) {}
  virtual ~CMsgSpectatorLobbyListResponse_SpectatorLobby();
  explicit constexpr CMsgSpectatorLobbyListResponse_SpectatorLobby(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from);
  CMsgSpectatorLobbyListResponse_SpectatorLobby(CMsgSpectatorLobbyListResponse_SpectatorLobby&& from) noexcept
    : CMsgSpectatorLobbyListResponse_SpectatorLobby() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorLobbyListResponse_SpectatorLobby& operator=(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectatorLobbyListResponse_SpectatorLobby& operator=(CMsgSpectatorLobbyListResponse_SpectatorLobby&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSpectatorLobbyListResponse_SpectatorLobby& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectatorLobbyListResponse_SpectatorLobby* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorLobbyListResponse_SpectatorLobby*>(
               &_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgSpectatorLobbyListResponse_SpectatorLobby& a, CMsgSpectatorLobbyListResponse_SpectatorLobby& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorLobbyListResponse_SpectatorLobby* New() const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyListResponse_SpectatorLobby>(nullptr);
  }

  CMsgSpectatorLobbyListResponse_SpectatorLobby* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyListResponse_SpectatorLobby>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from);
  void MergeFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectatorLobbyListResponse.SpectatorLobby";
  }
  protected:
  explicit CMsgSpectatorLobbyListResponse_SpectatorLobby(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameNameFieldNumber = 2,
    kGameDetailsFieldNumber = 7,
    kLobbyIdFieldNumber = 1,
    kRequiresPassKeyFieldNumber = 3,
    kLeaderAccountIdFieldNumber = 4,
    kMemberCountFieldNumber = 5,
  };
  // optional string game_name = 2;
  bool has_game_name() const;
  private:
  bool _internal_has_game_name() const;
  public:
  void clear_game_name();
  const std::string& game_name() const;
  void set_game_name(const std::string& value);
  void set_game_name(std::string&& value);
  void set_game_name(const char* value);
  void set_game_name(const char* value, size_t size);
  std::string* mutable_game_name();
  std::string* release_game_name();
  void set_allocated_game_name(std::string* game_name);
  private:
  const std::string& _internal_game_name() const;
  void _internal_set_game_name(const std::string& value);
  std::string* _internal_mutable_game_name();
  public:

  // optional .CMsgSpectatorLobbyGameDetails game_details = 7;
  bool has_game_details() const;
  private:
  bool _internal_has_game_details() const;
  public:
  void clear_game_details();
  const ::CMsgSpectatorLobbyGameDetails& game_details() const;
  ::CMsgSpectatorLobbyGameDetails* release_game_details();
  ::CMsgSpectatorLobbyGameDetails* mutable_game_details();
  void set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details);
  private:
  const ::CMsgSpectatorLobbyGameDetails& _internal_game_details() const;
  ::CMsgSpectatorLobbyGameDetails* _internal_mutable_game_details();
  public:
  void unsafe_arena_set_allocated_game_details(
      ::CMsgSpectatorLobbyGameDetails* game_details);
  ::CMsgSpectatorLobbyGameDetails* unsafe_arena_release_game_details();

  // optional uint64 lobby_id = 1;
  bool has_lobby_id() const;
  private:
  bool _internal_has_lobby_id() const;
  public:
  void clear_lobby_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id() const;
  void set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lobby_id() const;
  void _internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool requires_pass_key = 3;
  bool has_requires_pass_key() const;
  private:
  bool _internal_has_requires_pass_key() const;
  public:
  void clear_requires_pass_key();
  bool requires_pass_key() const;
  void set_requires_pass_key(bool value);
  private:
  bool _internal_requires_pass_key() const;
  void _internal_set_requires_pass_key(bool value);
  public:

  // optional uint32 leader_account_id = 4;
  bool has_leader_account_id() const;
  private:
  bool _internal_has_leader_account_id() const;
  public:
  void clear_leader_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id() const;
  void set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_account_id() const;
  void _internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 member_count = 5;
  bool has_member_count() const;
  private:
  bool _internal_has_member_count() const;
  public:
  void clear_member_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count() const;
  void set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_member_count() const;
  void _internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyListResponse.SpectatorLobby)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_name_;
  ::CMsgSpectatorLobbyGameDetails* game_details_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lobby_id_;
  bool requires_pass_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 member_count_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgSpectatorLobbyListResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSpectatorLobbyListResponse) */ {
 public:
  inline CMsgSpectatorLobbyListResponse() : CMsgSpectatorLobbyListResponse(nullptr) {}
  virtual ~CMsgSpectatorLobbyListResponse();
  explicit constexpr CMsgSpectatorLobbyListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from);
  CMsgSpectatorLobbyListResponse(CMsgSpectatorLobbyListResponse&& from) noexcept
    : CMsgSpectatorLobbyListResponse() {
    *this = ::std::move(from);
  }

  inline CMsgSpectatorLobbyListResponse& operator=(const CMsgSpectatorLobbyListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSpectatorLobbyListResponse& operator=(CMsgSpectatorLobbyListResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSpectatorLobbyListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgSpectatorLobbyListResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectatorLobbyListResponse*>(
               &_CMsgSpectatorLobbyListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgSpectatorLobbyListResponse& a, CMsgSpectatorLobbyListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgSpectatorLobbyListResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSpectatorLobbyListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgSpectatorLobbyListResponse* New() const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyListResponse>(nullptr);
  }

  CMsgSpectatorLobbyListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSpectatorLobbyListResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSpectatorLobbyListResponse& from);
  void MergeFrom(const CMsgSpectatorLobbyListResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSpectatorLobbyListResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSpectatorLobbyListResponse";
  }
  protected:
  explicit CMsgSpectatorLobbyListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgSpectatorLobbyListResponse_SpectatorLobby SpectatorLobby;

  // accessors -------------------------------------------------------

  enum : int {
    kLobbiesFieldNumber = 1,
  };
  // repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  int lobbies_size() const;
  private:
  int _internal_lobbies_size() const;
  public:
  void clear_lobbies();
  ::CMsgSpectatorLobbyListResponse_SpectatorLobby* mutable_lobbies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >*
      mutable_lobbies();
  private:
  const ::CMsgSpectatorLobbyListResponse_SpectatorLobby& _internal_lobbies(int index) const;
  ::CMsgSpectatorLobbyListResponse_SpectatorLobby* _internal_add_lobbies();
  public:
  const ::CMsgSpectatorLobbyListResponse_SpectatorLobby& lobbies(int index) const;
  ::CMsgSpectatorLobbyListResponse_SpectatorLobby* add_lobbies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >&
      lobbies() const;

  // @@protoc_insertion_point(class_scope:CMsgSpectatorLobbyListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby > lobbies_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCRequestSteamDatagramTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCRequestSteamDatagramTicket) */ {
 public:
  inline CMsgClientToGCRequestSteamDatagramTicket() : CMsgClientToGCRequestSteamDatagramTicket(nullptr) {}
  virtual ~CMsgClientToGCRequestSteamDatagramTicket();
  explicit constexpr CMsgClientToGCRequestSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from);
  CMsgClientToGCRequestSteamDatagramTicket(CMsgClientToGCRequestSteamDatagramTicket&& from) noexcept
    : CMsgClientToGCRequestSteamDatagramTicket() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCRequestSteamDatagramTicket& operator=(const CMsgClientToGCRequestSteamDatagramTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCRequestSteamDatagramTicket& operator=(CMsgClientToGCRequestSteamDatagramTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCRequestSteamDatagramTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCRequestSteamDatagramTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCRequestSteamDatagramTicket*>(
               &_CMsgClientToGCRequestSteamDatagramTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgClientToGCRequestSteamDatagramTicket& a, CMsgClientToGCRequestSteamDatagramTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCRequestSteamDatagramTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCRequestSteamDatagramTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCRequestSteamDatagramTicket* New() const final {
    return CreateMaybeMessage<CMsgClientToGCRequestSteamDatagramTicket>(nullptr);
  }

  CMsgClientToGCRequestSteamDatagramTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCRequestSteamDatagramTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from);
  void MergeFrom(const CMsgClientToGCRequestSteamDatagramTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCRequestSteamDatagramTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCRequestSteamDatagramTicket";
  }
  protected:
  explicit CMsgClientToGCRequestSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerSteamIdFieldNumber = 1,
  };
  // optional fixed64 server_steam_id = 1;
  bool has_server_steam_id() const;
  private:
  bool _internal_has_server_steam_id() const;
  public:
  void clear_server_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 server_steam_id() const;
  void set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_server_steam_id() const;
  void _internal_set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRequestSteamDatagramTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 server_steam_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCRequestSteamDatagramTicketResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCRequestSteamDatagramTicketResponse) */ {
 public:
  inline CMsgClientToGCRequestSteamDatagramTicketResponse() : CMsgClientToGCRequestSteamDatagramTicketResponse(nullptr) {}
  virtual ~CMsgClientToGCRequestSteamDatagramTicketResponse();
  explicit constexpr CMsgClientToGCRequestSteamDatagramTicketResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from);
  CMsgClientToGCRequestSteamDatagramTicketResponse(CMsgClientToGCRequestSteamDatagramTicketResponse&& from) noexcept
    : CMsgClientToGCRequestSteamDatagramTicketResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCRequestSteamDatagramTicketResponse& operator=(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCRequestSteamDatagramTicketResponse& operator=(CMsgClientToGCRequestSteamDatagramTicketResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCRequestSteamDatagramTicketResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCRequestSteamDatagramTicketResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCRequestSteamDatagramTicketResponse*>(
               &_CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgClientToGCRequestSteamDatagramTicketResponse& a, CMsgClientToGCRequestSteamDatagramTicketResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCRequestSteamDatagramTicketResponse* New() const final {
    return CreateMaybeMessage<CMsgClientToGCRequestSteamDatagramTicketResponse>(nullptr);
  }

  CMsgClientToGCRequestSteamDatagramTicketResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCRequestSteamDatagramTicketResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from);
  void MergeFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCRequestSteamDatagramTicketResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCRequestSteamDatagramTicketResponse";
  }
  protected:
  explicit CMsgClientToGCRequestSteamDatagramTicketResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedTicketFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // optional bytes serialized_ticket = 1;
  bool has_serialized_ticket() const;
  private:
  bool _internal_has_serialized_ticket() const;
  public:
  void clear_serialized_ticket();
  const std::string& serialized_ticket() const;
  void set_serialized_ticket(const std::string& value);
  void set_serialized_ticket(std::string&& value);
  void set_serialized_ticket(const char* value);
  void set_serialized_ticket(const void* value, size_t size);
  std::string* mutable_serialized_ticket();
  std::string* release_serialized_ticket();
  void set_allocated_serialized_ticket(std::string* serialized_ticket);
  private:
  const std::string& _internal_serialized_ticket() const;
  void _internal_set_serialized_ticket(const std::string& value);
  std::string* _internal_mutable_serialized_ticket();
  public:

  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCRequestSteamDatagramTicketResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientSteamDatagramTicket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientSteamDatagramTicket) */ {
 public:
  inline CMsgGCToClientSteamDatagramTicket() : CMsgGCToClientSteamDatagramTicket(nullptr) {}
  virtual ~CMsgGCToClientSteamDatagramTicket();
  explicit constexpr CMsgGCToClientSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from);
  CMsgGCToClientSteamDatagramTicket(CMsgGCToClientSteamDatagramTicket&& from) noexcept
    : CMsgGCToClientSteamDatagramTicket() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientSteamDatagramTicket& operator=(const CMsgGCToClientSteamDatagramTicket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientSteamDatagramTicket& operator=(CMsgGCToClientSteamDatagramTicket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgGCToClientSteamDatagramTicket& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientSteamDatagramTicket* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientSteamDatagramTicket*>(
               &_CMsgGCToClientSteamDatagramTicket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgGCToClientSteamDatagramTicket& a, CMsgGCToClientSteamDatagramTicket& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientSteamDatagramTicket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientSteamDatagramTicket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientSteamDatagramTicket* New() const final {
    return CreateMaybeMessage<CMsgGCToClientSteamDatagramTicket>(nullptr);
  }

  CMsgGCToClientSteamDatagramTicket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientSteamDatagramTicket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToClientSteamDatagramTicket& from);
  void MergeFrom(const CMsgGCToClientSteamDatagramTicket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientSteamDatagramTicket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientSteamDatagramTicket";
  }
  protected:
  explicit CMsgGCToClientSteamDatagramTicket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLegacyExtraFieldsFieldNumber = 8,
    kLegacySignatureFieldNumber = 6,
    kSerializedTicketFieldNumber = 16,
    kLegacyAuthorizedSteamIdFieldNumber = 2,
    kLegacyTimeExpiryFieldNumber = 1,
    kLegacyAuthorizedPublicIpFieldNumber = 3,
    kLegacyGameserverSteamIdFieldNumber = 4,
    kLegacyGameserverNetIdFieldNumber = 5,
    kLegacyAppIdFieldNumber = 7,
  };
  // repeated bytes legacy_extra_fields = 8;
  int legacy_extra_fields_size() const;
  private:
  int _internal_legacy_extra_fields_size() const;
  public:
  void clear_legacy_extra_fields();
  const std::string& legacy_extra_fields(int index) const;
  std::string* mutable_legacy_extra_fields(int index);
  void set_legacy_extra_fields(int index, const std::string& value);
  void set_legacy_extra_fields(int index, std::string&& value);
  void set_legacy_extra_fields(int index, const char* value);
  void set_legacy_extra_fields(int index, const void* value, size_t size);
  std::string* add_legacy_extra_fields();
  void add_legacy_extra_fields(const std::string& value);
  void add_legacy_extra_fields(std::string&& value);
  void add_legacy_extra_fields(const char* value);
  void add_legacy_extra_fields(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& legacy_extra_fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_legacy_extra_fields();
  private:
  const std::string& _internal_legacy_extra_fields(int index) const;
  std::string* _internal_add_legacy_extra_fields();
  public:

  // optional bytes legacy_signature = 6;
  bool has_legacy_signature() const;
  private:
  bool _internal_has_legacy_signature() const;
  public:
  void clear_legacy_signature();
  const std::string& legacy_signature() const;
  void set_legacy_signature(const std::string& value);
  void set_legacy_signature(std::string&& value);
  void set_legacy_signature(const char* value);
  void set_legacy_signature(const void* value, size_t size);
  std::string* mutable_legacy_signature();
  std::string* release_legacy_signature();
  void set_allocated_legacy_signature(std::string* legacy_signature);
  private:
  const std::string& _internal_legacy_signature() const;
  void _internal_set_legacy_signature(const std::string& value);
  std::string* _internal_mutable_legacy_signature();
  public:

  // optional bytes serialized_ticket = 16;
  bool has_serialized_ticket() const;
  private:
  bool _internal_has_serialized_ticket() const;
  public:
  void clear_serialized_ticket();
  const std::string& serialized_ticket() const;
  void set_serialized_ticket(const std::string& value);
  void set_serialized_ticket(std::string&& value);
  void set_serialized_ticket(const char* value);
  void set_serialized_ticket(const void* value, size_t size);
  std::string* mutable_serialized_ticket();
  std::string* release_serialized_ticket();
  void set_allocated_serialized_ticket(std::string* serialized_ticket);
  private:
  const std::string& _internal_serialized_ticket() const;
  void _internal_set_serialized_ticket(const std::string& value);
  std::string* _internal_mutable_serialized_ticket();
  public:

  // optional fixed64 legacy_authorized_steam_id = 2;
  bool has_legacy_authorized_steam_id() const;
  private:
  bool _internal_has_legacy_authorized_steam_id() const;
  public:
  void clear_legacy_authorized_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_authorized_steam_id() const;
  void set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_authorized_steam_id() const;
  void _internal_set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed32 legacy_time_expiry = 1;
  bool has_legacy_time_expiry() const;
  private:
  bool _internal_has_legacy_time_expiry() const;
  public:
  void clear_legacy_time_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_time_expiry() const;
  void set_legacy_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_time_expiry() const;
  void _internal_set_legacy_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 legacy_authorized_public_ip = 3;
  bool has_legacy_authorized_public_ip() const;
  private:
  bool _internal_has_legacy_authorized_public_ip() const;
  public:
  void clear_legacy_authorized_public_ip();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_authorized_public_ip() const;
  void set_legacy_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_authorized_public_ip() const;
  void _internal_set_legacy_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed64 legacy_gameserver_steam_id = 4;
  bool has_legacy_gameserver_steam_id() const;
  private:
  bool _internal_has_legacy_gameserver_steam_id() const;
  public:
  void clear_legacy_gameserver_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_steam_id() const;
  void set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_gameserver_steam_id() const;
  void _internal_set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 legacy_gameserver_net_id = 5;
  bool has_legacy_gameserver_net_id() const;
  private:
  bool _internal_has_legacy_gameserver_net_id() const;
  public:
  void clear_legacy_gameserver_net_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_net_id() const;
  void set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_legacy_gameserver_net_id() const;
  void _internal_set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 legacy_app_id = 7;
  bool has_legacy_app_id() const;
  private:
  bool _internal_has_legacy_app_id() const;
  public:
  void clear_legacy_app_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_app_id() const;
  void set_legacy_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_legacy_app_id() const;
  void _internal_set_legacy_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientSteamDatagramTicket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> legacy_extra_fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr legacy_signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_ticket_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_authorized_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_time_expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_authorized_public_ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 legacy_gameserver_net_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 legacy_app_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientRequestLaneSelection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientRequestLaneSelection) */ {
 public:
  inline CMsgGCToClientRequestLaneSelection() : CMsgGCToClientRequestLaneSelection(nullptr) {}
  virtual ~CMsgGCToClientRequestLaneSelection();
  explicit constexpr CMsgGCToClientRequestLaneSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientRequestLaneSelection(const CMsgGCToClientRequestLaneSelection& from);
  CMsgGCToClientRequestLaneSelection(CMsgGCToClientRequestLaneSelection&& from) noexcept
    : CMsgGCToClientRequestLaneSelection() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientRequestLaneSelection& operator=(const CMsgGCToClientRequestLaneSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientRequestLaneSelection& operator=(CMsgGCToClientRequestLaneSelection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgGCToClientRequestLaneSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientRequestLaneSelection* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientRequestLaneSelection*>(
               &_CMsgGCToClientRequestLaneSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgGCToClientRequestLaneSelection& a, CMsgGCToClientRequestLaneSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientRequestLaneSelection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientRequestLaneSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientRequestLaneSelection* New() const final {
    return CreateMaybeMessage<CMsgGCToClientRequestLaneSelection>(nullptr);
  }

  CMsgGCToClientRequestLaneSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientRequestLaneSelection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToClientRequestLaneSelection& from);
  void MergeFrom(const CMsgGCToClientRequestLaneSelection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientRequestLaneSelection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientRequestLaneSelection";
  }
  protected:
  explicit CMsgGCToClientRequestLaneSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToClientRequestLaneSelection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientRequestLaneSelectionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientRequestLaneSelectionResponse) */ {
 public:
  inline CMsgGCToClientRequestLaneSelectionResponse() : CMsgGCToClientRequestLaneSelectionResponse(nullptr) {}
  virtual ~CMsgGCToClientRequestLaneSelectionResponse();
  explicit constexpr CMsgGCToClientRequestLaneSelectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientRequestLaneSelectionResponse(const CMsgGCToClientRequestLaneSelectionResponse& from);
  CMsgGCToClientRequestLaneSelectionResponse(CMsgGCToClientRequestLaneSelectionResponse&& from) noexcept
    : CMsgGCToClientRequestLaneSelectionResponse() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientRequestLaneSelectionResponse& operator=(const CMsgGCToClientRequestLaneSelectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientRequestLaneSelectionResponse& operator=(CMsgGCToClientRequestLaneSelectionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgGCToClientRequestLaneSelectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientRequestLaneSelectionResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientRequestLaneSelectionResponse*>(
               &_CMsgGCToClientRequestLaneSelectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgGCToClientRequestLaneSelectionResponse& a, CMsgGCToClientRequestLaneSelectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientRequestLaneSelectionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientRequestLaneSelectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientRequestLaneSelectionResponse* New() const final {
    return CreateMaybeMessage<CMsgGCToClientRequestLaneSelectionResponse>(nullptr);
  }

  CMsgGCToClientRequestLaneSelectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientRequestLaneSelectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToClientRequestLaneSelectionResponse& from);
  void MergeFrom(const CMsgGCToClientRequestLaneSelectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientRequestLaneSelectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientRequestLaneSelectionResponse";
  }
  protected:
  explicit CMsgGCToClientRequestLaneSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSelectionFlagsFieldNumber = 1,
    kHighPriorityDisabledFieldNumber = 2,
  };
  // optional uint32 lane_selection_flags = 1;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool high_priority_disabled = 2;
  bool has_high_priority_disabled() const;
  private:
  bool _internal_has_high_priority_disabled() const;
  public:
  void clear_high_priority_disabled();
  bool high_priority_disabled() const;
  void set_high_priority_disabled(bool value);
  private:
  bool _internal_high_priority_disabled() const;
  void _internal_set_high_priority_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgGCToClientRequestLaneSelectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags_;
  bool high_priority_disabled_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgGCToClientRequestMMInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgGCToClientRequestMMInfo) */ {
 public:
  inline CMsgGCToClientRequestMMInfo() : CMsgGCToClientRequestMMInfo(nullptr) {}
  virtual ~CMsgGCToClientRequestMMInfo();
  explicit constexpr CMsgGCToClientRequestMMInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgGCToClientRequestMMInfo(const CMsgGCToClientRequestMMInfo& from);
  CMsgGCToClientRequestMMInfo(CMsgGCToClientRequestMMInfo&& from) noexcept
    : CMsgGCToClientRequestMMInfo() {
    *this = ::std::move(from);
  }

  inline CMsgGCToClientRequestMMInfo& operator=(const CMsgGCToClientRequestMMInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgGCToClientRequestMMInfo& operator=(CMsgGCToClientRequestMMInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgGCToClientRequestMMInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgGCToClientRequestMMInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientRequestMMInfo*>(
               &_CMsgGCToClientRequestMMInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgGCToClientRequestMMInfo& a, CMsgGCToClientRequestMMInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgGCToClientRequestMMInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgGCToClientRequestMMInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgGCToClientRequestMMInfo* New() const final {
    return CreateMaybeMessage<CMsgGCToClientRequestMMInfo>(nullptr);
  }

  CMsgGCToClientRequestMMInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgGCToClientRequestMMInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgGCToClientRequestMMInfo& from);
  void MergeFrom(const CMsgGCToClientRequestMMInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgGCToClientRequestMMInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgGCToClientRequestMMInfo";
  }
  protected:
  explicit CMsgGCToClientRequestMMInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CMsgGCToClientRequestMMInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCMMInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCMMInfo) */ {
 public:
  inline CMsgClientToGCMMInfo() : CMsgClientToGCMMInfo(nullptr) {}
  virtual ~CMsgClientToGCMMInfo();
  explicit constexpr CMsgClientToGCMMInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCMMInfo(const CMsgClientToGCMMInfo& from);
  CMsgClientToGCMMInfo(CMsgClientToGCMMInfo&& from) noexcept
    : CMsgClientToGCMMInfo() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCMMInfo& operator=(const CMsgClientToGCMMInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCMMInfo& operator=(CMsgClientToGCMMInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCMMInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCMMInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMMInfo*>(
               &_CMsgClientToGCMMInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgClientToGCMMInfo& a, CMsgClientToGCMMInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCMMInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCMMInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCMMInfo* New() const final {
    return CreateMaybeMessage<CMsgClientToGCMMInfo>(nullptr);
  }

  CMsgClientToGCMMInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCMMInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCMMInfo& from);
  void MergeFrom(const CMsgClientToGCMMInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCMMInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCMMInfo";
  }
  protected:
  explicit CMsgClientToGCMMInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLaneSelectionFlagsFieldNumber = 1,
    kHighPriorityDisabledFieldNumber = 2,
  };
  // optional uint32 lane_selection_flags = 1;
  bool has_lane_selection_flags() const;
  private:
  bool _internal_has_lane_selection_flags() const;
  public:
  void clear_lane_selection_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags() const;
  void set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lane_selection_flags() const;
  void _internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool high_priority_disabled = 2;
  bool has_high_priority_disabled() const;
  private:
  bool _internal_has_high_priority_disabled() const;
  public:
  void clear_high_priority_disabled();
  bool high_priority_disabled() const;
  void set_high_priority_disabled(bool value);
  private:
  bool _internal_high_priority_disabled() const;
  void _internal_set_high_priority_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCMMInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lane_selection_flags_;
  bool high_priority_disabled_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgStartFindingMatch

// optional string key = 1;
inline bool CMsgStartFindingMatch::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_key() const {
  return _internal_has_key();
}
inline void CMsgStartFindingMatch::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStartFindingMatch::key() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.key)
  return _internal_key();
}
inline void CMsgStartFindingMatch::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.key)
}
inline std::string* CMsgStartFindingMatch::mutable_key() {
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.key)
  return _internal_mutable_key();
}
inline const std::string& CMsgStartFindingMatch::_internal_key() const {
  return key_.Get();
}
inline void CMsgStartFindingMatch::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgStartFindingMatch::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgStartFindingMatch.key)
}
inline void CMsgStartFindingMatch::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatch.key)
}
inline void CMsgStartFindingMatch::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatch.key)
}
inline std::string* CMsgStartFindingMatch::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgStartFindingMatch::release_key() {
  // @@protoc_insertion_point(field_release:CMsgStartFindingMatch.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgStartFindingMatch::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.key)
}

// optional uint32 matchgroups = 2 [default = 4294967295];
inline bool CMsgStartFindingMatch::_internal_has_matchgroups() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_matchgroups() const {
  return _internal_has_matchgroups();
}
inline void CMsgStartFindingMatch::clear_matchgroups() {
  matchgroups_ = 4294967295u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_matchgroups() const {
  return matchgroups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::matchgroups() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.matchgroups)
  return _internal_matchgroups();
}
inline void CMsgStartFindingMatch::_internal_set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  matchgroups_ = value;
}
inline void CMsgStartFindingMatch::set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchgroups(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.matchgroups)
}

// optional uint32 client_version = 3;
inline bool CMsgStartFindingMatch::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgStartFindingMatch::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.client_version)
  return _internal_client_version();
}
inline void CMsgStartFindingMatch::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
}
inline void CMsgStartFindingMatch::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.client_version)
}

// optional uint32 game_modes = 4 [default = 4294967295];
inline bool CMsgStartFindingMatch::_internal_has_game_modes() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_game_modes() const {
  return _internal_has_game_modes();
}
inline void CMsgStartFindingMatch::clear_game_modes() {
  game_modes_ = 4294967295u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_game_modes() const {
  return game_modes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::game_modes() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_modes)
  return _internal_game_modes();
}
inline void CMsgStartFindingMatch::_internal_set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  game_modes_ = value;
}
inline void CMsgStartFindingMatch::set_game_modes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_modes(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_modes)
}

// optional .DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
inline bool CMsgStartFindingMatch::_internal_has_bot_difficulty() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_bot_difficulty() const {
  return _internal_has_bot_difficulty();
}
inline void CMsgStartFindingMatch::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::DOTABotDifficulty CMsgStartFindingMatch::_internal_bot_difficulty() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline ::DOTABotDifficulty CMsgStartFindingMatch::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.bot_difficulty)
  return _internal_bot_difficulty();
}
inline void CMsgStartFindingMatch::_internal_set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00040000u;
  bot_difficulty_ = value;
}
inline void CMsgStartFindingMatch::set_bot_difficulty(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.bot_difficulty)
}

// optional .MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
inline bool CMsgStartFindingMatch::_internal_has_match_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_match_type() const {
  return _internal_has_match_type();
}
inline void CMsgStartFindingMatch::clear_match_type() {
  match_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::MatchType CMsgStartFindingMatch::_internal_match_type() const {
  return static_cast< ::MatchType >(match_type_);
}
inline ::MatchType CMsgStartFindingMatch::match_type() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.match_type)
  return _internal_match_type();
}
inline void CMsgStartFindingMatch::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  match_type_ = value;
}
inline void CMsgStartFindingMatch::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.match_type)
}

// optional uint32 matchlanguages = 7 [default = 4294967295];
inline bool CMsgStartFindingMatch::_internal_has_matchlanguages() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_matchlanguages() const {
  return _internal_has_matchlanguages();
}
inline void CMsgStartFindingMatch::clear_matchlanguages() {
  matchlanguages_ = 4294967295u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_matchlanguages() const {
  return matchlanguages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::matchlanguages() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.matchlanguages)
  return _internal_matchlanguages();
}
inline void CMsgStartFindingMatch::_internal_set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  matchlanguages_ = value;
}
inline void CMsgStartFindingMatch::set_matchlanguages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchlanguages(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.matchlanguages)
}

// optional uint32 team_id = 8;
inline bool CMsgStartFindingMatch::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgStartFindingMatch::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.team_id)
  return _internal_team_id();
}
inline void CMsgStartFindingMatch::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  team_id_ = value;
}
inline void CMsgStartFindingMatch::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.team_id)
}

// optional .MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
inline bool CMsgStartFindingMatch::_internal_has_game_language_enum() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_game_language_enum() const {
  return _internal_has_game_language_enum();
}
inline void CMsgStartFindingMatch::clear_game_language_enum() {
  game_language_enum_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::MatchLanguages CMsgStartFindingMatch::_internal_game_language_enum() const {
  return static_cast< ::MatchLanguages >(game_language_enum_);
}
inline ::MatchLanguages CMsgStartFindingMatch::game_language_enum() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_language_enum)
  return _internal_game_language_enum();
}
inline void CMsgStartFindingMatch::_internal_set_game_language_enum(::MatchLanguages value) {
  assert(::MatchLanguages_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  game_language_enum_ = value;
}
inline void CMsgStartFindingMatch::set_game_language_enum(::MatchLanguages value) {
  _internal_set_game_language_enum(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_language_enum)
}

// optional string game_language_name = 11;
inline bool CMsgStartFindingMatch::_internal_has_game_language_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_game_language_name() const {
  return _internal_has_game_language_name();
}
inline void CMsgStartFindingMatch::clear_game_language_name() {
  game_language_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgStartFindingMatch::game_language_name() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.game_language_name)
  return _internal_game_language_name();
}
inline void CMsgStartFindingMatch::set_game_language_name(const std::string& value) {
  _internal_set_game_language_name(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.game_language_name)
}
inline std::string* CMsgStartFindingMatch::mutable_game_language_name() {
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.game_language_name)
  return _internal_mutable_game_language_name();
}
inline const std::string& CMsgStartFindingMatch::_internal_game_language_name() const {
  return game_language_name_.Get();
}
inline void CMsgStartFindingMatch::_internal_set_game_language_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_language_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgStartFindingMatch::set_game_language_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  game_language_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgStartFindingMatch.game_language_name)
}
inline void CMsgStartFindingMatch::set_game_language_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  game_language_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatch.game_language_name)
}
inline void CMsgStartFindingMatch::set_game_language_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  game_language_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatch.game_language_name)
}
inline std::string* CMsgStartFindingMatch::_internal_mutable_game_language_name() {
  _has_bits_[0] |= 0x00000002u;
  return game_language_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgStartFindingMatch::release_game_language_name() {
  // @@protoc_insertion_point(field_release:CMsgStartFindingMatch.game_language_name)
  if (!_internal_has_game_language_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_language_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgStartFindingMatch::set_allocated_game_language_name(std::string* game_language_name) {
  if (game_language_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_language_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_language_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.game_language_name)
}

// optional .CMsgClientPingData ping_data = 12;
inline bool CMsgStartFindingMatch::_internal_has_ping_data() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ping_data_ != nullptr);
  return value;
}
inline bool CMsgStartFindingMatch::has_ping_data() const {
  return _internal_has_ping_data();
}
inline const ::CMsgClientPingData& CMsgStartFindingMatch::_internal_ping_data() const {
  const ::CMsgClientPingData* p = ping_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientPingData&>(
      ::_CMsgClientPingData_default_instance_);
}
inline const ::CMsgClientPingData& CMsgStartFindingMatch::ping_data() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.ping_data)
  return _internal_ping_data();
}
inline void CMsgStartFindingMatch::unsafe_arena_set_allocated_ping_data(
    ::CMsgClientPingData* ping_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  ping_data_ = ping_data;
  if (ping_data) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgStartFindingMatch.ping_data)
}
inline ::CMsgClientPingData* CMsgStartFindingMatch::release_ping_data() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgClientPingData* temp = ping_data_;
  ping_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgClientPingData* CMsgStartFindingMatch::unsafe_arena_release_ping_data() {
  // @@protoc_insertion_point(field_release:CMsgStartFindingMatch.ping_data)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgClientPingData* temp = ping_data_;
  ping_data_ = nullptr;
  return temp;
}
inline ::CMsgClientPingData* CMsgStartFindingMatch::_internal_mutable_ping_data() {
  _has_bits_[0] |= 0x00000004u;
  if (ping_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientPingData>(GetArena());
    ping_data_ = p;
  }
  return ping_data_;
}
inline ::CMsgClientPingData* CMsgStartFindingMatch::mutable_ping_data() {
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatch.ping_data)
  return _internal_mutable_ping_data();
}
inline void CMsgStartFindingMatch::set_allocated_ping_data(::CMsgClientPingData* ping_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  if (ping_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data)->GetArena();
    if (message_arena != submessage_arena) {
      ping_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ping_data_ = ping_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatch.ping_data)
}

// optional uint32 region_select_flags = 13;
inline bool CMsgStartFindingMatch::_internal_has_region_select_flags() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_region_select_flags() const {
  return _internal_has_region_select_flags();
}
inline void CMsgStartFindingMatch::clear_region_select_flags() {
  region_select_flags_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_region_select_flags() const {
  return region_select_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::region_select_flags() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.region_select_flags)
  return _internal_region_select_flags();
}
inline void CMsgStartFindingMatch::_internal_set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  region_select_flags_ = value;
}
inline void CMsgStartFindingMatch::set_region_select_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region_select_flags(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.region_select_flags)
}

// optional bool solo_queue = 14;
inline bool CMsgStartFindingMatch::_internal_has_solo_queue() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_solo_queue() const {
  return _internal_has_solo_queue();
}
inline void CMsgStartFindingMatch::clear_solo_queue() {
  solo_queue_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgStartFindingMatch::_internal_solo_queue() const {
  return solo_queue_;
}
inline bool CMsgStartFindingMatch::solo_queue() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.solo_queue)
  return _internal_solo_queue();
}
inline void CMsgStartFindingMatch::_internal_set_solo_queue(bool value) {
  _has_bits_[0] |= 0x00000400u;
  solo_queue_ = value;
}
inline void CMsgStartFindingMatch::set_solo_queue(bool value) {
  _internal_set_solo_queue(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.solo_queue)
}

// optional uint32 bot_script_index = 15;
inline bool CMsgStartFindingMatch::_internal_has_bot_script_index() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_bot_script_index() const {
  return _internal_has_bot_script_index();
}
inline void CMsgStartFindingMatch::clear_bot_script_index() {
  bot_script_index_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_bot_script_index() const {
  return bot_script_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::bot_script_index() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.bot_script_index)
  return _internal_bot_script_index();
}
inline void CMsgStartFindingMatch::_internal_set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  bot_script_index_ = value;
}
inline void CMsgStartFindingMatch::set_bot_script_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bot_script_index(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.bot_script_index)
}

// optional uint32 steam_clan_account_id = 16;
inline bool CMsgStartFindingMatch::_internal_has_steam_clan_account_id() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_steam_clan_account_id() const {
  return _internal_has_steam_clan_account_id();
}
inline void CMsgStartFindingMatch::clear_steam_clan_account_id() {
  steam_clan_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_steam_clan_account_id() const {
  return steam_clan_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::steam_clan_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.steam_clan_account_id)
  return _internal_steam_clan_account_id();
}
inline void CMsgStartFindingMatch::_internal_set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  steam_clan_account_id_ = value;
}
inline void CMsgStartFindingMatch::set_steam_clan_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_steam_clan_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.steam_clan_account_id)
}

// optional bool is_challenge_match = 17;
inline bool CMsgStartFindingMatch::_internal_has_is_challenge_match() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_is_challenge_match() const {
  return _internal_has_is_challenge_match();
}
inline void CMsgStartFindingMatch::clear_is_challenge_match() {
  is_challenge_match_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgStartFindingMatch::_internal_is_challenge_match() const {
  return is_challenge_match_;
}
inline bool CMsgStartFindingMatch::is_challenge_match() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.is_challenge_match)
  return _internal_is_challenge_match();
}
inline void CMsgStartFindingMatch::_internal_set_is_challenge_match(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_challenge_match_ = value;
}
inline void CMsgStartFindingMatch::set_is_challenge_match(bool value) {
  _internal_set_is_challenge_match(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.is_challenge_match)
}

// optional uint32 lane_selection_flags = 18;
inline bool CMsgStartFindingMatch::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CMsgStartFindingMatch::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CMsgStartFindingMatch::_internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  lane_selection_flags_ = value;
}
inline void CMsgStartFindingMatch::set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.lane_selection_flags)
}

// optional bool high_priority_disabled = 19;
inline bool CMsgStartFindingMatch::_internal_has_high_priority_disabled() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_high_priority_disabled() const {
  return _internal_has_high_priority_disabled();
}
inline void CMsgStartFindingMatch::clear_high_priority_disabled() {
  high_priority_disabled_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgStartFindingMatch::_internal_high_priority_disabled() const {
  return high_priority_disabled_;
}
inline bool CMsgStartFindingMatch::high_priority_disabled() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.high_priority_disabled)
  return _internal_high_priority_disabled();
}
inline void CMsgStartFindingMatch::_internal_set_high_priority_disabled(bool value) {
  _has_bits_[0] |= 0x00001000u;
  high_priority_disabled_ = value;
}
inline void CMsgStartFindingMatch::set_high_priority_disabled(bool value) {
  _internal_set_high_priority_disabled(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.high_priority_disabled)
}

// optional bool disable_experimental_gameplay = 20;
inline bool CMsgStartFindingMatch::_internal_has_disable_experimental_gameplay() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_disable_experimental_gameplay() const {
  return _internal_has_disable_experimental_gameplay();
}
inline void CMsgStartFindingMatch::clear_disable_experimental_gameplay() {
  disable_experimental_gameplay_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgStartFindingMatch::_internal_disable_experimental_gameplay() const {
  return disable_experimental_gameplay_;
}
inline bool CMsgStartFindingMatch::disable_experimental_gameplay() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.disable_experimental_gameplay)
  return _internal_disable_experimental_gameplay();
}
inline void CMsgStartFindingMatch::_internal_set_disable_experimental_gameplay(bool value) {
  _has_bits_[0] |= 0x00002000u;
  disable_experimental_gameplay_ = value;
}
inline void CMsgStartFindingMatch::set_disable_experimental_gameplay(bool value) {
  _internal_set_disable_experimental_gameplay(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.disable_experimental_gameplay)
}

// optional uint32 custom_game_difficulty_mask = 21;
inline bool CMsgStartFindingMatch::_internal_has_custom_game_difficulty_mask() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgStartFindingMatch::has_custom_game_difficulty_mask() const {
  return _internal_has_custom_game_difficulty_mask();
}
inline void CMsgStartFindingMatch::clear_custom_game_difficulty_mask() {
  custom_game_difficulty_mask_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::_internal_custom_game_difficulty_mask() const {
  return custom_game_difficulty_mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatch::custom_game_difficulty_mask() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatch.custom_game_difficulty_mask)
  return _internal_custom_game_difficulty_mask();
}
inline void CMsgStartFindingMatch::_internal_set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  custom_game_difficulty_mask_ = value;
}
inline void CMsgStartFindingMatch::set_custom_game_difficulty_mask(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_difficulty_mask(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatch.custom_game_difficulty_mask)
}

// -------------------------------------------------------------------

// CMsgStartFindingMatchResult

// optional uint32 legacy_generic_eresult = 1 [default = 2];
inline bool CMsgStartFindingMatchResult::_internal_has_legacy_generic_eresult() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgStartFindingMatchResult::has_legacy_generic_eresult() const {
  return _internal_has_legacy_generic_eresult();
}
inline void CMsgStartFindingMatchResult::clear_legacy_generic_eresult() {
  legacy_generic_eresult_ = 2u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatchResult::_internal_legacy_generic_eresult() const {
  return legacy_generic_eresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatchResult::legacy_generic_eresult() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.legacy_generic_eresult)
  return _internal_legacy_generic_eresult();
}
inline void CMsgStartFindingMatchResult::_internal_set_legacy_generic_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  legacy_generic_eresult_ = value;
}
inline void CMsgStartFindingMatchResult::set_legacy_generic_eresult(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_generic_eresult(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.legacy_generic_eresult)
}

// optional .EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
inline bool CMsgStartFindingMatchResult::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgStartFindingMatchResult::has_result() const {
  return _internal_has_result();
}
inline void CMsgStartFindingMatchResult::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EStartFindingMatchResult CMsgStartFindingMatchResult::_internal_result() const {
  return static_cast< ::EStartFindingMatchResult >(result_);
}
inline ::EStartFindingMatchResult CMsgStartFindingMatchResult::result() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.result)
  return _internal_result();
}
inline void CMsgStartFindingMatchResult::_internal_set_result(::EStartFindingMatchResult value) {
  assert(::EStartFindingMatchResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CMsgStartFindingMatchResult::set_result(::EStartFindingMatchResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.result)
}

// optional string error_token = 3;
inline bool CMsgStartFindingMatchResult::_internal_has_error_token() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStartFindingMatchResult::has_error_token() const {
  return _internal_has_error_token();
}
inline void CMsgStartFindingMatchResult::clear_error_token() {
  error_token_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgStartFindingMatchResult::error_token() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.error_token)
  return _internal_error_token();
}
inline void CMsgStartFindingMatchResult::set_error_token(const std::string& value) {
  _internal_set_error_token(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.error_token)
}
inline std::string* CMsgStartFindingMatchResult::mutable_error_token() {
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatchResult.error_token)
  return _internal_mutable_error_token();
}
inline const std::string& CMsgStartFindingMatchResult::_internal_error_token() const {
  return error_token_.Get();
}
inline void CMsgStartFindingMatchResult::_internal_set_error_token(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  error_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgStartFindingMatchResult::set_error_token(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  error_token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgStartFindingMatchResult.error_token)
}
inline void CMsgStartFindingMatchResult::set_error_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  error_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatchResult.error_token)
}
inline void CMsgStartFindingMatchResult::set_error_token(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  error_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatchResult.error_token)
}
inline std::string* CMsgStartFindingMatchResult::_internal_mutable_error_token() {
  _has_bits_[0] |= 0x00000001u;
  return error_token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgStartFindingMatchResult::release_error_token() {
  // @@protoc_insertion_point(field_release:CMsgStartFindingMatchResult.error_token)
  if (!_internal_has_error_token()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return error_token_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgStartFindingMatchResult::set_allocated_error_token(std::string* error_token) {
  if (error_token != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatchResult.error_token)
}

// optional string debug_message = 4;
inline bool CMsgStartFindingMatchResult::_internal_has_debug_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgStartFindingMatchResult::has_debug_message() const {
  return _internal_has_debug_message();
}
inline void CMsgStartFindingMatchResult::clear_debug_message() {
  debug_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgStartFindingMatchResult::debug_message() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.debug_message)
  return _internal_debug_message();
}
inline void CMsgStartFindingMatchResult::set_debug_message(const std::string& value) {
  _internal_set_debug_message(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.debug_message)
}
inline std::string* CMsgStartFindingMatchResult::mutable_debug_message() {
  // @@protoc_insertion_point(field_mutable:CMsgStartFindingMatchResult.debug_message)
  return _internal_mutable_debug_message();
}
inline const std::string& CMsgStartFindingMatchResult::_internal_debug_message() const {
  return debug_message_.Get();
}
inline void CMsgStartFindingMatchResult::_internal_set_debug_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgStartFindingMatchResult::set_debug_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  debug_message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgStartFindingMatchResult.debug_message)
}
inline void CMsgStartFindingMatchResult::set_debug_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgStartFindingMatchResult.debug_message)
}
inline void CMsgStartFindingMatchResult::set_debug_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  debug_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgStartFindingMatchResult.debug_message)
}
inline std::string* CMsgStartFindingMatchResult::_internal_mutable_debug_message() {
  _has_bits_[0] |= 0x00000002u;
  return debug_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgStartFindingMatchResult::release_debug_message() {
  // @@protoc_insertion_point(field_release:CMsgStartFindingMatchResult.debug_message)
  if (!_internal_has_debug_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return debug_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgStartFindingMatchResult::set_allocated_debug_message(std::string* debug_message) {
  if (debug_message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  debug_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug_message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgStartFindingMatchResult.debug_message)
}

// repeated fixed64 responsible_party_members = 5;
inline int CMsgStartFindingMatchResult::_internal_responsible_party_members_size() const {
  return responsible_party_members_.size();
}
inline int CMsgStartFindingMatchResult::responsible_party_members_size() const {
  return _internal_responsible_party_members_size();
}
inline void CMsgStartFindingMatchResult::clear_responsible_party_members() {
  responsible_party_members_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgStartFindingMatchResult::_internal_responsible_party_members(int index) const {
  return responsible_party_members_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgStartFindingMatchResult::responsible_party_members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.responsible_party_members)
  return _internal_responsible_party_members(index);
}
inline void CMsgStartFindingMatchResult::set_responsible_party_members(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  responsible_party_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.responsible_party_members)
}
inline void CMsgStartFindingMatchResult::_internal_add_responsible_party_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  responsible_party_members_.Add(value);
}
inline void CMsgStartFindingMatchResult::add_responsible_party_members(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_responsible_party_members(value);
  // @@protoc_insertion_point(field_add:CMsgStartFindingMatchResult.responsible_party_members)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgStartFindingMatchResult::_internal_responsible_party_members() const {
  return responsible_party_members_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgStartFindingMatchResult::responsible_party_members() const {
  // @@protoc_insertion_point(field_list:CMsgStartFindingMatchResult.responsible_party_members)
  return _internal_responsible_party_members();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgStartFindingMatchResult::_internal_mutable_responsible_party_members() {
  return &responsible_party_members_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgStartFindingMatchResult::mutable_responsible_party_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgStartFindingMatchResult.responsible_party_members)
  return _internal_mutable_responsible_party_members();
}

// optional uint32 result_metadata = 6;
inline bool CMsgStartFindingMatchResult::_internal_has_result_metadata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgStartFindingMatchResult::has_result_metadata() const {
  return _internal_has_result_metadata();
}
inline void CMsgStartFindingMatchResult::clear_result_metadata() {
  result_metadata_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatchResult::_internal_result_metadata() const {
  return result_metadata_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgStartFindingMatchResult::result_metadata() const {
  // @@protoc_insertion_point(field_get:CMsgStartFindingMatchResult.result_metadata)
  return _internal_result_metadata();
}
inline void CMsgStartFindingMatchResult::_internal_set_result_metadata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  result_metadata_ = value;
}
inline void CMsgStartFindingMatchResult::set_result_metadata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_result_metadata(value);
  // @@protoc_insertion_point(field_set:CMsgStartFindingMatchResult.result_metadata)
}

// -------------------------------------------------------------------

// CMsgStopFindingMatch

// optional bool accept_cooldown = 1;
inline bool CMsgStopFindingMatch::_internal_has_accept_cooldown() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgStopFindingMatch::has_accept_cooldown() const {
  return _internal_has_accept_cooldown();
}
inline void CMsgStopFindingMatch::clear_accept_cooldown() {
  accept_cooldown_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgStopFindingMatch::_internal_accept_cooldown() const {
  return accept_cooldown_;
}
inline bool CMsgStopFindingMatch::accept_cooldown() const {
  // @@protoc_insertion_point(field_get:CMsgStopFindingMatch.accept_cooldown)
  return _internal_accept_cooldown();
}
inline void CMsgStopFindingMatch::_internal_set_accept_cooldown(bool value) {
  _has_bits_[0] |= 0x00000001u;
  accept_cooldown_ = value;
}
inline void CMsgStopFindingMatch::set_accept_cooldown(bool value) {
  _internal_set_accept_cooldown(value);
  // @@protoc_insertion_point(field_set:CMsgStopFindingMatch.accept_cooldown)
}

// -------------------------------------------------------------------

// CMsgPartyBuilderOptions

// optional uint32 additional_slots = 1;
inline bool CMsgPartyBuilderOptions::_internal_has_additional_slots() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPartyBuilderOptions::has_additional_slots() const {
  return _internal_has_additional_slots();
}
inline void CMsgPartyBuilderOptions::clear_additional_slots() {
  additional_slots_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPartyBuilderOptions::_internal_additional_slots() const {
  return additional_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPartyBuilderOptions::additional_slots() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.additional_slots)
  return _internal_additional_slots();
}
inline void CMsgPartyBuilderOptions::_internal_set_additional_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  additional_slots_ = value;
}
inline void CMsgPartyBuilderOptions::set_additional_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_additional_slots(value);
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.additional_slots)
}

// optional .MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
inline bool CMsgPartyBuilderOptions::_internal_has_match_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPartyBuilderOptions::has_match_type() const {
  return _internal_has_match_type();
}
inline void CMsgPartyBuilderOptions::clear_match_type() {
  match_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::MatchType CMsgPartyBuilderOptions::_internal_match_type() const {
  return static_cast< ::MatchType >(match_type_);
}
inline ::MatchType CMsgPartyBuilderOptions::match_type() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.match_type)
  return _internal_match_type();
}
inline void CMsgPartyBuilderOptions::_internal_set_match_type(::MatchType value) {
  assert(::MatchType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  match_type_ = value;
}
inline void CMsgPartyBuilderOptions::set_match_type(::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.match_type)
}

// optional uint32 matchgroups = 3;
inline bool CMsgPartyBuilderOptions::_internal_has_matchgroups() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPartyBuilderOptions::has_matchgroups() const {
  return _internal_has_matchgroups();
}
inline void CMsgPartyBuilderOptions::clear_matchgroups() {
  matchgroups_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPartyBuilderOptions::_internal_matchgroups() const {
  return matchgroups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPartyBuilderOptions::matchgroups() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.matchgroups)
  return _internal_matchgroups();
}
inline void CMsgPartyBuilderOptions::_internal_set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  matchgroups_ = value;
}
inline void CMsgPartyBuilderOptions::set_matchgroups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matchgroups(value);
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.matchgroups)
}

// optional uint32 client_version = 4;
inline bool CMsgPartyBuilderOptions::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPartyBuilderOptions::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgPartyBuilderOptions::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPartyBuilderOptions::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPartyBuilderOptions::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.client_version)
  return _internal_client_version();
}
inline void CMsgPartyBuilderOptions::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
}
inline void CMsgPartyBuilderOptions::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.client_version)
}

// optional .MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
inline bool CMsgPartyBuilderOptions::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPartyBuilderOptions::has_language() const {
  return _internal_has_language();
}
inline void CMsgPartyBuilderOptions::clear_language() {
  language_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::MatchLanguages CMsgPartyBuilderOptions::_internal_language() const {
  return static_cast< ::MatchLanguages >(language_);
}
inline ::MatchLanguages CMsgPartyBuilderOptions::language() const {
  // @@protoc_insertion_point(field_get:CMsgPartyBuilderOptions.language)
  return _internal_language();
}
inline void CMsgPartyBuilderOptions::_internal_set_language(::MatchLanguages value) {
  assert(::MatchLanguages_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  language_ = value;
}
inline void CMsgPartyBuilderOptions::set_language(::MatchLanguages value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CMsgPartyBuilderOptions.language)
}

// -------------------------------------------------------------------

// CMsgReadyUp

// optional .DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
inline bool CMsgReadyUp::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgReadyUp::has_state() const {
  return _internal_has_state();
}
inline void CMsgReadyUp::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::DOTALobbyReadyState CMsgReadyUp::_internal_state() const {
  return static_cast< ::DOTALobbyReadyState >(state_);
}
inline ::DOTALobbyReadyState CMsgReadyUp::state() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.state)
  return _internal_state();
}
inline void CMsgReadyUp::_internal_set_state(::DOTALobbyReadyState value) {
  assert(::DOTALobbyReadyState_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void CMsgReadyUp::set_state(::DOTALobbyReadyState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:CMsgReadyUp.state)
}

// optional fixed64 ready_up_key = 2;
inline bool CMsgReadyUp::_internal_has_ready_up_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgReadyUp::has_ready_up_key() const {
  return _internal_has_ready_up_key();
}
inline void CMsgReadyUp::clear_ready_up_key() {
  ready_up_key_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgReadyUp::_internal_ready_up_key() const {
  return ready_up_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgReadyUp::ready_up_key() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.ready_up_key)
  return _internal_ready_up_key();
}
inline void CMsgReadyUp::_internal_set_ready_up_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ready_up_key_ = value;
}
inline void CMsgReadyUp::set_ready_up_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ready_up_key(value);
  // @@protoc_insertion_point(field_set:CMsgReadyUp.ready_up_key)
}

// optional .CDOTAClientHardwareSpecs hardware_specs = 3;
inline bool CMsgReadyUp::_internal_has_hardware_specs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || hardware_specs_ != nullptr);
  return value;
}
inline bool CMsgReadyUp::has_hardware_specs() const {
  return _internal_has_hardware_specs();
}
inline const ::CDOTAClientHardwareSpecs& CMsgReadyUp::_internal_hardware_specs() const {
  const ::CDOTAClientHardwareSpecs* p = hardware_specs_;
  return p != nullptr ? *p : reinterpret_cast<const ::CDOTAClientHardwareSpecs&>(
      ::_CDOTAClientHardwareSpecs_default_instance_);
}
inline const ::CDOTAClientHardwareSpecs& CMsgReadyUp::hardware_specs() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUp.hardware_specs)
  return _internal_hardware_specs();
}
inline void CMsgReadyUp::unsafe_arena_set_allocated_hardware_specs(
    ::CDOTAClientHardwareSpecs* hardware_specs) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hardware_specs_);
  }
  hardware_specs_ = hardware_specs;
  if (hardware_specs) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgReadyUp.hardware_specs)
}
inline ::CDOTAClientHardwareSpecs* CMsgReadyUp::release_hardware_specs() {
  _has_bits_[0] &= ~0x00000001u;
  ::CDOTAClientHardwareSpecs* temp = hardware_specs_;
  hardware_specs_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CDOTAClientHardwareSpecs* CMsgReadyUp::unsafe_arena_release_hardware_specs() {
  // @@protoc_insertion_point(field_release:CMsgReadyUp.hardware_specs)
  _has_bits_[0] &= ~0x00000001u;
  ::CDOTAClientHardwareSpecs* temp = hardware_specs_;
  hardware_specs_ = nullptr;
  return temp;
}
inline ::CDOTAClientHardwareSpecs* CMsgReadyUp::_internal_mutable_hardware_specs() {
  _has_bits_[0] |= 0x00000001u;
  if (hardware_specs_ == nullptr) {
    auto* p = CreateMaybeMessage<::CDOTAClientHardwareSpecs>(GetArena());
    hardware_specs_ = p;
  }
  return hardware_specs_;
}
inline ::CDOTAClientHardwareSpecs* CMsgReadyUp::mutable_hardware_specs() {
  // @@protoc_insertion_point(field_mutable:CMsgReadyUp.hardware_specs)
  return _internal_mutable_hardware_specs();
}
inline void CMsgReadyUp::set_allocated_hardware_specs(::CDOTAClientHardwareSpecs* hardware_specs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(hardware_specs_);
  }
  if (hardware_specs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hardware_specs)->GetArena();
    if (message_arena != submessage_arena) {
      hardware_specs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hardware_specs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hardware_specs_ = hardware_specs;
  // @@protoc_insertion_point(field_set_allocated:CMsgReadyUp.hardware_specs)
}

// -------------------------------------------------------------------

// CMsgReadyUpStatus

// optional fixed64 lobby_id = 1;
inline bool CMsgReadyUpStatus::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgReadyUpStatus::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgReadyUpStatus::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgReadyUpStatus::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgReadyUpStatus::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgReadyUpStatus::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_id_ = value;
}
inline void CMsgReadyUpStatus::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.lobby_id)
}

// repeated uint32 accepted_ids = 2;
inline int CMsgReadyUpStatus::_internal_accepted_ids_size() const {
  return accepted_ids_.size();
}
inline int CMsgReadyUpStatus::accepted_ids_size() const {
  return _internal_accepted_ids_size();
}
inline void CMsgReadyUpStatus::clear_accepted_ids() {
  accepted_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyUpStatus::_internal_accepted_ids(int index) const {
  return accepted_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyUpStatus::accepted_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.accepted_ids)
  return _internal_accepted_ids(index);
}
inline void CMsgReadyUpStatus::set_accepted_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  accepted_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.accepted_ids)
}
inline void CMsgReadyUpStatus::_internal_add_accepted_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  accepted_ids_.Add(value);
}
inline void CMsgReadyUpStatus::add_accepted_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_accepted_ids(value);
  // @@protoc_insertion_point(field_add:CMsgReadyUpStatus.accepted_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgReadyUpStatus::_internal_accepted_ids() const {
  return accepted_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgReadyUpStatus::accepted_ids() const {
  // @@protoc_insertion_point(field_list:CMsgReadyUpStatus.accepted_ids)
  return _internal_accepted_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgReadyUpStatus::_internal_mutable_accepted_ids() {
  return &accepted_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgReadyUpStatus::mutable_accepted_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyUpStatus.accepted_ids)
  return _internal_mutable_accepted_ids();
}

// repeated uint32 declined_ids = 3;
inline int CMsgReadyUpStatus::_internal_declined_ids_size() const {
  return declined_ids_.size();
}
inline int CMsgReadyUpStatus::declined_ids_size() const {
  return _internal_declined_ids_size();
}
inline void CMsgReadyUpStatus::clear_declined_ids() {
  declined_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyUpStatus::_internal_declined_ids(int index) const {
  return declined_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgReadyUpStatus::declined_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgReadyUpStatus.declined_ids)
  return _internal_declined_ids(index);
}
inline void CMsgReadyUpStatus::set_declined_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  declined_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgReadyUpStatus.declined_ids)
}
inline void CMsgReadyUpStatus::_internal_add_declined_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  declined_ids_.Add(value);
}
inline void CMsgReadyUpStatus::add_declined_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_declined_ids(value);
  // @@protoc_insertion_point(field_add:CMsgReadyUpStatus.declined_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgReadyUpStatus::_internal_declined_ids() const {
  return declined_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgReadyUpStatus::declined_ids() const {
  // @@protoc_insertion_point(field_list:CMsgReadyUpStatus.declined_ids)
  return _internal_declined_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgReadyUpStatus::_internal_mutable_declined_ids() {
  return &declined_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgReadyUpStatus::mutable_declined_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgReadyUpStatus.declined_ids)
  return _internal_mutable_declined_ids();
}

// -------------------------------------------------------------------

// CMsgAbandonCurrentGame

// -------------------------------------------------------------------

// CMsgLobbyScenarioSave

// optional int32 version = 1;
inline bool CMsgLobbyScenarioSave::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyScenarioSave::has_version() const {
  return _internal_has_version();
}
inline void CMsgLobbyScenarioSave::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgLobbyScenarioSave::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgLobbyScenarioSave::version() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyScenarioSave.version)
  return _internal_version();
}
inline void CMsgLobbyScenarioSave::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void CMsgLobbyScenarioSave::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyScenarioSave.version)
}

// optional bytes data = 2;
inline bool CMsgLobbyScenarioSave::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyScenarioSave::has_data() const {
  return _internal_has_data();
}
inline void CMsgLobbyScenarioSave::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgLobbyScenarioSave::data() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyScenarioSave.data)
  return _internal_data();
}
inline void CMsgLobbyScenarioSave::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyScenarioSave.data)
}
inline std::string* CMsgLobbyScenarioSave::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyScenarioSave.data)
  return _internal_mutable_data();
}
inline const std::string& CMsgLobbyScenarioSave::_internal_data() const {
  return data_.Get();
}
inline void CMsgLobbyScenarioSave::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgLobbyScenarioSave::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgLobbyScenarioSave.data)
}
inline void CMsgLobbyScenarioSave::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgLobbyScenarioSave.data)
}
inline void CMsgLobbyScenarioSave::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgLobbyScenarioSave.data)
}
inline std::string* CMsgLobbyScenarioSave::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgLobbyScenarioSave::release_data() {
  // @@protoc_insertion_point(field_release:CMsgLobbyScenarioSave.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgLobbyScenarioSave::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgLobbyScenarioSave.data)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetDetails

// optional uint64 lobby_id = 1;
inline bool CMsgPracticeLobbySetDetails::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgPracticeLobbySetDetails::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  lobby_id_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lobby_id)
}

// optional string game_name = 2;
inline bool CMsgPracticeLobbySetDetails::_internal_has_game_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_game_name() const {
  return _internal_has_game_name();
}
inline void CMsgPracticeLobbySetDetails::clear_game_name() {
  game_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbySetDetails::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_name)
  return _internal_game_name();
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const std::string& value) {
  _internal_set_game_name(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_name)
}
inline std::string* CMsgPracticeLobbySetDetails::mutable_game_name() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.game_name)
  return _internal_mutable_game_name();
}
inline const std::string& CMsgPracticeLobbySetDetails::_internal_game_name() const {
  return game_name_.Get();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_game_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_game_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.game_name)
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.game_name)
}
inline void CMsgPracticeLobbySetDetails::set_game_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.game_name)
}
inline std::string* CMsgPracticeLobbySetDetails::_internal_mutable_game_name() {
  _has_bits_[0] |= 0x00000001u;
  return game_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbySetDetails::release_game_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.game_name)
}

// repeated .CLobbyTeamDetails team_details = 3;
inline int CMsgPracticeLobbySetDetails::_internal_team_details_size() const {
  return team_details_.size();
}
inline int CMsgPracticeLobbySetDetails::team_details_size() const {
  return _internal_team_details_size();
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >*
CMsgPracticeLobbySetDetails::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbySetDetails.team_details)
  return &team_details_;
}
inline const ::CLobbyTeamDetails& CMsgPracticeLobbySetDetails::_internal_team_details(int index) const {
  return team_details_.Get(index);
}
inline const ::CLobbyTeamDetails& CMsgPracticeLobbySetDetails::team_details(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.team_details)
  return _internal_team_details(index);
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::_internal_add_team_details() {
  return team_details_.Add();
}
inline ::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::add_team_details() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbySetDetails.team_details)
  return _internal_add_team_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CLobbyTeamDetails >&
CMsgPracticeLobbySetDetails::team_details() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbySetDetails.team_details)
  return team_details_;
}

// optional uint32 server_region = 4;
inline bool CMsgPracticeLobbySetDetails::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgPracticeLobbySetDetails::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.server_region)
  return _internal_server_region();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  server_region_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.server_region)
}

// optional uint32 game_mode = 5;
inline bool CMsgPracticeLobbySetDetails::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgPracticeLobbySetDetails::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_game_mode() const {
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_mode)
  return _internal_game_mode();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  game_mode_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_mode)
}

// optional .DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
inline bool CMsgPracticeLobbySetDetails::_internal_has_cm_pick() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_cm_pick() const {
  return _internal_has_cm_pick();
}
inline void CMsgPracticeLobbySetDetails::clear_cm_pick() {
  cm_pick_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::DOTA_CM_PICK CMsgPracticeLobbySetDetails::_internal_cm_pick() const {
  return static_cast< ::DOTA_CM_PICK >(cm_pick_);
}
inline ::DOTA_CM_PICK CMsgPracticeLobbySetDetails::cm_pick() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.cm_pick)
  return _internal_cm_pick();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_cm_pick(::DOTA_CM_PICK value) {
  assert(::DOTA_CM_PICK_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  cm_pick_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_cm_pick(::DOTA_CM_PICK value) {
  _internal_set_cm_pick(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.cm_pick)
}

// optional .DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetDetails::_internal_has_bot_difficulty_radiant() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_bot_difficulty_radiant() const {
  return _internal_has_bot_difficulty_radiant();
}
inline void CMsgPracticeLobbySetDetails::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::_internal_bot_difficulty_radiant() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_radiant_);
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
  return _internal_bot_difficulty_radiant();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  bot_difficulty_radiant_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_bot_difficulty_radiant(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
}

// optional bool allow_cheats = 10;
inline bool CMsgPracticeLobbySetDetails::_internal_has_allow_cheats() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_allow_cheats() const {
  return _internal_has_allow_cheats();
}
inline void CMsgPracticeLobbySetDetails::clear_allow_cheats() {
  allow_cheats_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_allow_cheats() const {
  return allow_cheats_;
}
inline bool CMsgPracticeLobbySetDetails::allow_cheats() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allow_cheats)
  return _internal_allow_cheats();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_allow_cheats(bool value) {
  _has_bits_[0] |= 0x00000800u;
  allow_cheats_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_allow_cheats(bool value) {
  _internal_set_allow_cheats(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allow_cheats)
}

// optional bool fill_with_bots = 11;
inline bool CMsgPracticeLobbySetDetails::_internal_has_fill_with_bots() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_fill_with_bots() const {
  return _internal_has_fill_with_bots();
}
inline void CMsgPracticeLobbySetDetails::clear_fill_with_bots() {
  fill_with_bots_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_fill_with_bots() const {
  return fill_with_bots_;
}
inline bool CMsgPracticeLobbySetDetails::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.fill_with_bots)
  return _internal_fill_with_bots();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_fill_with_bots(bool value) {
  _has_bits_[0] |= 0x00001000u;
  fill_with_bots_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_fill_with_bots(bool value) {
  _internal_set_fill_with_bots(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.fill_with_bots)
}

// optional bool intro_mode = 12;
inline bool CMsgPracticeLobbySetDetails::_internal_has_intro_mode() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_intro_mode() const {
  return _internal_has_intro_mode();
}
inline void CMsgPracticeLobbySetDetails::clear_intro_mode() {
  intro_mode_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_intro_mode() const {
  return intro_mode_;
}
inline bool CMsgPracticeLobbySetDetails::intro_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.intro_mode)
  return _internal_intro_mode();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_intro_mode(bool value) {
  _has_bits_[0] |= 0x00002000u;
  intro_mode_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_intro_mode(bool value) {
  _internal_set_intro_mode(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.intro_mode)
}

// optional bool allow_spectating = 13;
inline bool CMsgPracticeLobbySetDetails::_internal_has_allow_spectating() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_allow_spectating() const {
  return _internal_has_allow_spectating();
}
inline void CMsgPracticeLobbySetDetails::clear_allow_spectating() {
  allow_spectating_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_allow_spectating() const {
  return allow_spectating_;
}
inline bool CMsgPracticeLobbySetDetails::allow_spectating() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allow_spectating)
  return _internal_allow_spectating();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_allow_spectating(bool value) {
  _has_bits_[0] |= 0x00004000u;
  allow_spectating_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_allow_spectating(bool value) {
  _internal_set_allow_spectating(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allow_spectating)
}

// optional .DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
inline bool CMsgPracticeLobbySetDetails::_internal_has_game_version() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_game_version() const {
  return _internal_has_game_version();
}
inline void CMsgPracticeLobbySetDetails::clear_game_version() {
  game_version_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::DOTAGameVersion CMsgPracticeLobbySetDetails::_internal_game_version() const {
  return static_cast< ::DOTAGameVersion >(game_version_);
}
inline ::DOTAGameVersion CMsgPracticeLobbySetDetails::game_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.game_version)
  return _internal_game_version();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_game_version(::DOTAGameVersion value) {
  assert(::DOTAGameVersion_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  game_version_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_game_version(::DOTAGameVersion value) {
  _internal_set_game_version(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.game_version)
}

// optional string pass_key = 15;
inline bool CMsgPracticeLobbySetDetails::_internal_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CMsgPracticeLobbySetDetails::clear_pass_key() {
  pass_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgPracticeLobbySetDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.pass_key)
  return _internal_pass_key();
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const std::string& value) {
  _internal_set_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.pass_key)
}
inline std::string* CMsgPracticeLobbySetDetails::mutable_pass_key() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.pass_key)
  return _internal_mutable_pass_key();
}
inline const std::string& CMsgPracticeLobbySetDetails::_internal_pass_key() const {
  return pass_key_.Get();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_pass_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.pass_key)
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.pass_key)
}
inline void CMsgPracticeLobbySetDetails::set_pass_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.pass_key)
}
inline std::string* CMsgPracticeLobbySetDetails::_internal_mutable_pass_key() {
  _has_bits_[0] |= 0x00000002u;
  return pass_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbySetDetails::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pass_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pass_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.pass_key)
}

// optional uint32 leagueid = 16;
inline bool CMsgPracticeLobbySetDetails::_internal_has_leagueid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_leagueid() const {
  return _internal_has_leagueid();
}
inline void CMsgPracticeLobbySetDetails::clear_leagueid() {
  leagueid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_leagueid() const {
  return leagueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::leagueid() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.leagueid)
  return _internal_leagueid();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  leagueid_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_leagueid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leagueid(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.leagueid)
}

// optional uint32 penalty_level_radiant = 17;
inline bool CMsgPracticeLobbySetDetails::_internal_has_penalty_level_radiant() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_penalty_level_radiant() const {
  return _internal_has_penalty_level_radiant();
}
inline void CMsgPracticeLobbySetDetails::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_penalty_level_radiant() const {
  return penalty_level_radiant_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.penalty_level_radiant)
  return _internal_penalty_level_radiant();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  penalty_level_radiant_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_penalty_level_radiant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_level_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 18;
inline bool CMsgPracticeLobbySetDetails::_internal_has_penalty_level_dire() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_penalty_level_dire() const {
  return _internal_has_penalty_level_dire();
}
inline void CMsgPracticeLobbySetDetails::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_penalty_level_dire() const {
  return penalty_level_dire_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.penalty_level_dire)
  return _internal_penalty_level_dire();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  penalty_level_dire_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_penalty_level_dire(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_penalty_level_dire(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.penalty_level_dire)
}

// optional uint32 load_game_id = 19;
inline bool CMsgPracticeLobbySetDetails::_internal_has_load_game_id() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_load_game_id() const {
  return _internal_has_load_game_id();
}
inline void CMsgPracticeLobbySetDetails::clear_load_game_id() {
  load_game_id_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_load_game_id() const {
  return load_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::load_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.load_game_id)
  return _internal_load_game_id();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  load_game_id_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_load_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_load_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.load_game_id)
}

// optional uint32 series_type = 20;
inline bool CMsgPracticeLobbySetDetails::_internal_has_series_type() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgPracticeLobbySetDetails::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_series_type() const {
  return series_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.series_type)
  return _internal_series_type();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  series_type_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.series_type)
}

// optional uint32 radiant_series_wins = 21;
inline bool CMsgPracticeLobbySetDetails::_internal_has_radiant_series_wins() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_radiant_series_wins() const {
  return _internal_has_radiant_series_wins();
}
inline void CMsgPracticeLobbySetDetails::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_radiant_series_wins() const {
  return radiant_series_wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.radiant_series_wins)
  return _internal_radiant_series_wins();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  radiant_series_wins_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_radiant_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_radiant_series_wins(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.radiant_series_wins)
}

// optional uint32 dire_series_wins = 22;
inline bool CMsgPracticeLobbySetDetails::_internal_has_dire_series_wins() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_dire_series_wins() const {
  return _internal_has_dire_series_wins();
}
inline void CMsgPracticeLobbySetDetails::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_dire_series_wins() const {
  return dire_series_wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.dire_series_wins)
  return _internal_dire_series_wins();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  dire_series_wins_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_dire_series_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dire_series_wins(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.dire_series_wins)
}

// optional bool allchat = 23 [default = false];
inline bool CMsgPracticeLobbySetDetails::_internal_has_allchat() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_allchat() const {
  return _internal_has_allchat();
}
inline void CMsgPracticeLobbySetDetails::clear_allchat() {
  allchat_ = false;
  _has_bits_[0] &= ~0x08000000u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_allchat() const {
  return allchat_;
}
inline bool CMsgPracticeLobbySetDetails::allchat() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.allchat)
  return _internal_allchat();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_allchat(bool value) {
  _has_bits_[0] |= 0x08000000u;
  allchat_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_allchat(bool value) {
  _internal_set_allchat(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.allchat)
}

// optional .LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
inline bool CMsgPracticeLobbySetDetails::_internal_has_dota_tv_delay() const {
  bool value = (_has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_dota_tv_delay() const {
  return _internal_has_dota_tv_delay();
}
inline void CMsgPracticeLobbySetDetails::clear_dota_tv_delay() {
  dota_tv_delay_ = 1;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::LobbyDotaTVDelay CMsgPracticeLobbySetDetails::_internal_dota_tv_delay() const {
  return static_cast< ::LobbyDotaTVDelay >(dota_tv_delay_);
}
inline ::LobbyDotaTVDelay CMsgPracticeLobbySetDetails::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.dota_tv_delay)
  return _internal_dota_tv_delay();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_dota_tv_delay(::LobbyDotaTVDelay value) {
  assert(::LobbyDotaTVDelay_IsValid(value));
  _has_bits_[1] |= 0x00000100u;
  dota_tv_delay_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_dota_tv_delay(::LobbyDotaTVDelay value) {
  _internal_set_dota_tv_delay(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.dota_tv_delay)
}

// optional bool lan = 25;
inline bool CMsgPracticeLobbySetDetails::_internal_has_lan() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_lan() const {
  return _internal_has_lan();
}
inline void CMsgPracticeLobbySetDetails::clear_lan() {
  lan_ = false;
  _has_bits_[0] &= ~0x10000000u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_lan() const {
  return lan_;
}
inline bool CMsgPracticeLobbySetDetails::lan() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lan)
  return _internal_lan();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_lan(bool value) {
  _has_bits_[0] |= 0x10000000u;
  lan_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_lan(bool value) {
  _internal_set_lan(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lan)
}

// optional string custom_game_mode = 26;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_game_mode() const {
  return _internal_has_custom_game_mode();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgPracticeLobbySetDetails::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_mode)
  return _internal_custom_game_mode();
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const std::string& value) {
  _internal_set_custom_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline std::string* CMsgPracticeLobbySetDetails::mutable_custom_game_mode() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.custom_game_mode)
  return _internal_mutable_custom_game_mode();
}
inline const std::string& CMsgPracticeLobbySetDetails::_internal_custom_game_mode() const {
  return custom_game_mode_.Get();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_game_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_game_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.custom_game_mode)
}
inline std::string* CMsgPracticeLobbySetDetails::_internal_mutable_custom_game_mode() {
  _has_bits_[0] |= 0x00000004u;
  return custom_game_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbySetDetails::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.custom_game_mode)
  if (!_internal_has_custom_game_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return custom_game_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_custom_game_mode(std::string* custom_game_mode) {
  if (custom_game_mode != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_game_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_game_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.custom_game_mode)
}

// optional string custom_map_name = 27;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_map_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_map_name() const {
  return _internal_has_custom_map_name();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_map_name() {
  custom_map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgPracticeLobbySetDetails::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_map_name)
  return _internal_custom_map_name();
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const std::string& value) {
  _internal_set_custom_map_name(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline std::string* CMsgPracticeLobbySetDetails::mutable_custom_map_name() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.custom_map_name)
  return _internal_mutable_custom_map_name();
}
inline const std::string& CMsgPracticeLobbySetDetails::_internal_custom_map_name() const {
  return custom_map_name_.Get();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  custom_map_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.custom_map_name)
}
inline std::string* CMsgPracticeLobbySetDetails::_internal_mutable_custom_map_name() {
  _has_bits_[0] |= 0x00000008u;
  return custom_map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbySetDetails::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.custom_map_name)
  if (!_internal_has_custom_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return custom_map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_custom_map_name(std::string* custom_map_name) {
  if (custom_map_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  custom_map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.custom_map_name)
}

// optional uint32 custom_difficulty = 28;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_difficulty() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_difficulty() const {
  return _internal_has_custom_difficulty();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_custom_difficulty() const {
  return custom_difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_difficulty)
  return _internal_custom_difficulty();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  custom_difficulty_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_difficulty)
}

// optional uint64 custom_game_id = 29;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x01000000u;
  custom_game_id_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_id)
}

// optional uint32 custom_min_players = 30;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_min_players() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_min_players() const {
  return _internal_has_custom_min_players();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_min_players() {
  custom_min_players_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_custom_min_players() const {
  return custom_min_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::custom_min_players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_min_players)
  return _internal_custom_min_players();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  custom_min_players_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_min_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_min_players(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_min_players)
}

// optional uint32 custom_max_players = 31;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_max_players() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_max_players() const {
  return _internal_has_custom_max_players();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_max_players() {
  custom_max_players_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_custom_max_players() const {
  return custom_max_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::custom_max_players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_max_players)
  return _internal_custom_max_players();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  custom_max_players_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_max_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_max_players(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_max_players)
}

// optional .DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
inline bool CMsgPracticeLobbySetDetails::_internal_has_visibility() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_visibility() const {
  return _internal_has_visibility();
}
inline void CMsgPracticeLobbySetDetails::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::DOTALobbyVisibility CMsgPracticeLobbySetDetails::_internal_visibility() const {
  return static_cast< ::DOTALobbyVisibility >(visibility_);
}
inline ::DOTALobbyVisibility CMsgPracticeLobbySetDetails::visibility() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.visibility)
  return _internal_visibility();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_visibility(::DOTALobbyVisibility value) {
  assert(::DOTALobbyVisibility_IsValid(value));
  _has_bits_[0] |= 0x40000000u;
  visibility_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_visibility(::DOTALobbyVisibility value) {
  _internal_set_visibility(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.visibility)
}

// optional fixed64 custom_game_crc = 34;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_game_crc() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_game_crc() const {
  return _internal_has_custom_game_crc();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_crc() {
  custom_game_crc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::_internal_custom_game_crc() const {
  return custom_game_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_crc)
  return _internal_custom_game_crc();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x80000000u;
  custom_game_crc_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_crc(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 37;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_game_timestamp() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_game_timestamp() const {
  return _internal_has_custom_game_timestamp();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_custom_game_timestamp() const {
  return custom_game_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_timestamp)
  return _internal_custom_game_timestamp();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  custom_game_timestamp_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_timestamp)
}

// optional uint64 previous_match_override = 38;
inline bool CMsgPracticeLobbySetDetails::_internal_has_previous_match_override() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_previous_match_override() const {
  return _internal_has_previous_match_override();
}
inline void CMsgPracticeLobbySetDetails::clear_previous_match_override() {
  previous_match_override_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::_internal_previous_match_override() const {
  return previous_match_override_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::previous_match_override() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.previous_match_override)
  return _internal_previous_match_override();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000001u;
  previous_match_override_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_previous_match_override(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_previous_match_override(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.previous_match_override)
}

// optional .LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
inline bool CMsgPracticeLobbySetDetails::_internal_has_pause_setting() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_pause_setting() const {
  return _internal_has_pause_setting();
}
inline void CMsgPracticeLobbySetDetails::clear_pause_setting() {
  pause_setting_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::LobbyDotaPauseSetting CMsgPracticeLobbySetDetails::_internal_pause_setting() const {
  return static_cast< ::LobbyDotaPauseSetting >(pause_setting_);
}
inline ::LobbyDotaPauseSetting CMsgPracticeLobbySetDetails::pause_setting() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.pause_setting)
  return _internal_pause_setting();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_pause_setting(::LobbyDotaPauseSetting value) {
  assert(::LobbyDotaPauseSetting_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  pause_setting_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_pause_setting(::LobbyDotaPauseSetting value) {
  _internal_set_pause_setting(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.pause_setting)
}

// optional .DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetDetails::_internal_has_bot_difficulty_dire() const {
  bool value = (_has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_bot_difficulty_dire() const {
  return _internal_has_bot_difficulty_dire();
}
inline void CMsgPracticeLobbySetDetails::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 0;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::_internal_bot_difficulty_dire() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_dire_);
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_difficulty_dire)
  return _internal_bot_difficulty_dire();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_bot_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[1] |= 0x00000020u;
  bot_difficulty_dire_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_bot_difficulty_dire(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty_dire(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 44;
inline bool CMsgPracticeLobbySetDetails::_internal_has_bot_radiant() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_bot_radiant() const {
  return _internal_has_bot_radiant();
}
inline void CMsgPracticeLobbySetDetails::clear_bot_radiant() {
  bot_radiant_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::_internal_bot_radiant() const {
  return bot_radiant_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::bot_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_radiant)
  return _internal_bot_radiant();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000008u;
  bot_radiant_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_bot_radiant(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bot_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_radiant)
}

// optional uint64 bot_dire = 45;
inline bool CMsgPracticeLobbySetDetails::_internal_has_bot_dire() const {
  bool value = (_has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_bot_dire() const {
  return _internal_has_bot_dire();
}
inline void CMsgPracticeLobbySetDetails::clear_bot_dire() {
  bot_dire_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::_internal_bot_dire() const {
  return bot_dire_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbySetDetails::bot_dire() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.bot_dire)
  return _internal_bot_dire();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[1] |= 0x00000080u;
  bot_dire_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_bot_dire(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bot_dire(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.bot_dire)
}

// optional .DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
inline bool CMsgPracticeLobbySetDetails::_internal_has_selection_priority_rules() const {
  bool value = (_has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_selection_priority_rules() const {
  return _internal_has_selection_priority_rules();
}
inline void CMsgPracticeLobbySetDetails::clear_selection_priority_rules() {
  selection_priority_rules_ = 0;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::DOTASelectionPriorityRules CMsgPracticeLobbySetDetails::_internal_selection_priority_rules() const {
  return static_cast< ::DOTASelectionPriorityRules >(selection_priority_rules_);
}
inline ::DOTASelectionPriorityRules CMsgPracticeLobbySetDetails::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.selection_priority_rules)
  return _internal_selection_priority_rules();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  assert(::DOTASelectionPriorityRules_IsValid(value));
  _has_bits_[1] |= 0x00000040u;
  selection_priority_rules_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_selection_priority_rules(::DOTASelectionPriorityRules value) {
  _internal_set_selection_priority_rules(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.selection_priority_rules)
}

// optional bool custom_game_penalties = 47;
inline bool CMsgPracticeLobbySetDetails::_internal_has_custom_game_penalties() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_custom_game_penalties() const {
  return _internal_has_custom_game_penalties();
}
inline void CMsgPracticeLobbySetDetails::clear_custom_game_penalties() {
  custom_game_penalties_ = false;
  _has_bits_[0] &= ~0x20000000u;
}
inline bool CMsgPracticeLobbySetDetails::_internal_custom_game_penalties() const {
  return custom_game_penalties_;
}
inline bool CMsgPracticeLobbySetDetails::custom_game_penalties() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.custom_game_penalties)
  return _internal_custom_game_penalties();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_custom_game_penalties(bool value) {
  _has_bits_[0] |= 0x20000000u;
  custom_game_penalties_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_custom_game_penalties(bool value) {
  _internal_set_custom_game_penalties(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.custom_game_penalties)
}

// optional string lan_host_ping_location = 48;
inline bool CMsgPracticeLobbySetDetails::_internal_has_lan_host_ping_location() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_lan_host_ping_location() const {
  return _internal_has_lan_host_ping_location();
}
inline void CMsgPracticeLobbySetDetails::clear_lan_host_ping_location() {
  lan_host_ping_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgPracticeLobbySetDetails::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.lan_host_ping_location)
  return _internal_lan_host_ping_location();
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(const std::string& value) {
  _internal_set_lan_host_ping_location(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
inline std::string* CMsgPracticeLobbySetDetails::mutable_lan_host_ping_location() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.lan_host_ping_location)
  return _internal_mutable_lan_host_ping_location();
}
inline const std::string& CMsgPracticeLobbySetDetails::_internal_lan_host_ping_location() const {
  return lan_host_ping_location_.Get();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_lan_host_ping_location(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  lan_host_ping_location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
inline void CMsgPracticeLobbySetDetails::set_lan_host_ping_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}
inline std::string* CMsgPracticeLobbySetDetails::_internal_mutable_lan_host_ping_location() {
  _has_bits_[0] |= 0x00000010u;
  return lan_host_ping_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbySetDetails::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.lan_host_ping_location)
  if (!_internal_has_lan_host_ping_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return lan_host_ping_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbySetDetails::set_allocated_lan_host_ping_location(std::string* lan_host_ping_location) {
  if (lan_host_ping_location != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lan_host_ping_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lan_host_ping_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.lan_host_ping_location)
}

// optional uint32 league_node_id = 49;
inline bool CMsgPracticeLobbySetDetails::_internal_has_league_node_id() const {
  bool value = (_has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_league_node_id() const {
  return _internal_has_league_node_id();
}
inline void CMsgPracticeLobbySetDetails::clear_league_node_id() {
  league_node_id_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_league_node_id() const {
  return league_node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::league_node_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.league_node_id)
  return _internal_league_node_id();
}
inline void CMsgPracticeLobbySetDetails::_internal_set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  league_node_id_ = value;
}
inline void CMsgPracticeLobbySetDetails::set_league_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_node_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.league_node_id)
}

// repeated uint32 requested_hero_ids = 50;
inline int CMsgPracticeLobbySetDetails::_internal_requested_hero_ids_size() const {
  return requested_hero_ids_.size();
}
inline int CMsgPracticeLobbySetDetails::requested_hero_ids_size() const {
  return _internal_requested_hero_ids_size();
}
inline void CMsgPracticeLobbySetDetails::clear_requested_hero_ids() {
  requested_hero_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::_internal_requested_hero_ids(int index) const {
  return requested_hero_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetDetails::requested_hero_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.requested_hero_ids)
  return _internal_requested_hero_ids(index);
}
inline void CMsgPracticeLobbySetDetails::set_requested_hero_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  requested_hero_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetDetails.requested_hero_ids)
}
inline void CMsgPracticeLobbySetDetails::_internal_add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  requested_hero_ids_.Add(value);
}
inline void CMsgPracticeLobbySetDetails::add_requested_hero_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_requested_hero_ids(value);
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbySetDetails.requested_hero_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgPracticeLobbySetDetails::_internal_requested_hero_ids() const {
  return requested_hero_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgPracticeLobbySetDetails::requested_hero_ids() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbySetDetails.requested_hero_ids)
  return _internal_requested_hero_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgPracticeLobbySetDetails::_internal_mutable_requested_hero_ids() {
  return &requested_hero_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgPracticeLobbySetDetails::mutable_requested_hero_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbySetDetails.requested_hero_ids)
  return _internal_mutable_requested_hero_ids();
}

// optional .CMsgLobbyScenarioSave scenario_save = 51;
inline bool CMsgPracticeLobbySetDetails::_internal_has_scenario_save() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || scenario_save_ != nullptr);
  return value;
}
inline bool CMsgPracticeLobbySetDetails::has_scenario_save() const {
  return _internal_has_scenario_save();
}
inline void CMsgPracticeLobbySetDetails::clear_scenario_save() {
  if (scenario_save_ != nullptr) scenario_save_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::CMsgLobbyScenarioSave& CMsgPracticeLobbySetDetails::_internal_scenario_save() const {
  const ::CMsgLobbyScenarioSave* p = scenario_save_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgLobbyScenarioSave&>(
      ::_CMsgLobbyScenarioSave_default_instance_);
}
inline const ::CMsgLobbyScenarioSave& CMsgPracticeLobbySetDetails::scenario_save() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetDetails.scenario_save)
  return _internal_scenario_save();
}
inline void CMsgPracticeLobbySetDetails::unsafe_arena_set_allocated_scenario_save(
    ::CMsgLobbyScenarioSave* scenario_save) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scenario_save_);
  }
  scenario_save_ = scenario_save;
  if (scenario_save) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPracticeLobbySetDetails.scenario_save)
}
inline ::CMsgLobbyScenarioSave* CMsgPracticeLobbySetDetails::release_scenario_save() {
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgLobbyScenarioSave* temp = scenario_save_;
  scenario_save_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgLobbyScenarioSave* CMsgPracticeLobbySetDetails::unsafe_arena_release_scenario_save() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbySetDetails.scenario_save)
  _has_bits_[0] &= ~0x00000020u;
  ::CMsgLobbyScenarioSave* temp = scenario_save_;
  scenario_save_ = nullptr;
  return temp;
}
inline ::CMsgLobbyScenarioSave* CMsgPracticeLobbySetDetails::_internal_mutable_scenario_save() {
  _has_bits_[0] |= 0x00000020u;
  if (scenario_save_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgLobbyScenarioSave>(GetArena());
    scenario_save_ = p;
  }
  return scenario_save_;
}
inline ::CMsgLobbyScenarioSave* CMsgPracticeLobbySetDetails::mutable_scenario_save() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbySetDetails.scenario_save)
  return _internal_mutable_scenario_save();
}
inline void CMsgPracticeLobbySetDetails::set_allocated_scenario_save(::CMsgLobbyScenarioSave* scenario_save) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scenario_save_;
  }
  if (scenario_save) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scenario_save);
    if (message_arena != submessage_arena) {
      scenario_save = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenario_save, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  scenario_save_ = scenario_save;
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbySetDetails.scenario_save)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCreate_SaveGame

// optional bytes data = 1;
inline bool CMsgPracticeLobbyCreate_SaveGame::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate_SaveGame::has_data() const {
  return _internal_has_data();
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyCreate_SaveGame::data() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.data)
  return _internal_data();
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline std::string* CMsgPracticeLobbyCreate_SaveGame::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.SaveGame.data)
  return _internal_mutable_data();
}
inline const std::string& CMsgPracticeLobbyCreate_SaveGame::_internal_data() const {
  return data_.Get();
}
inline void CMsgPracticeLobbyCreate_SaveGame::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.SaveGame.data)
}
inline std::string* CMsgPracticeLobbyCreate_SaveGame::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyCreate_SaveGame::release_data() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.SaveGame.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.SaveGame.data)
}

// optional int32 version = 2;
inline bool CMsgPracticeLobbyCreate_SaveGame::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate_SaveGame::has_version() const {
  return _internal_has_version();
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgPracticeLobbyCreate_SaveGame::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgPracticeLobbyCreate_SaveGame::version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.version)
  return _internal_version();
}
inline void CMsgPracticeLobbyCreate_SaveGame::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  version_ = value;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.version)
}

// optional fixed64 steam_id = 3;
inline bool CMsgPracticeLobbyCreate_SaveGame::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate_SaveGame::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyCreate_SaveGame::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyCreate_SaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.steam_id)
  return _internal_steam_id();
}
inline void CMsgPracticeLobbyCreate_SaveGame::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  steam_id_ = value;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.steam_id)
}

// optional fixed64 signature = 4;
inline bool CMsgPracticeLobbyCreate_SaveGame::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate_SaveGame::has_signature() const {
  return _internal_has_signature();
}
inline void CMsgPracticeLobbyCreate_SaveGame::clear_signature() {
  signature_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyCreate_SaveGame::_internal_signature() const {
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyCreate_SaveGame::signature() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.SaveGame.signature)
  return _internal_signature();
}
inline void CMsgPracticeLobbyCreate_SaveGame::_internal_set_signature(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  signature_ = value;
}
inline void CMsgPracticeLobbyCreate_SaveGame::set_signature(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.SaveGame.signature)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCreate

// optional string search_key = 1;
inline bool CMsgPracticeLobbyCreate::_internal_has_search_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate::has_search_key() const {
  return _internal_has_search_key();
}
inline void CMsgPracticeLobbyCreate::clear_search_key() {
  search_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.search_key)
  return _internal_search_key();
}
inline void CMsgPracticeLobbyCreate::set_search_key(const std::string& value) {
  _internal_set_search_key(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.search_key)
}
inline std::string* CMsgPracticeLobbyCreate::mutable_search_key() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.search_key)
  return _internal_mutable_search_key();
}
inline const std::string& CMsgPracticeLobbyCreate::_internal_search_key() const {
  return search_key_.Get();
}
inline void CMsgPracticeLobbyCreate::_internal_set_search_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyCreate::set_search_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyCreate.search_key)
}
inline void CMsgPracticeLobbyCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.search_key)
}
inline void CMsgPracticeLobbyCreate::set_search_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.search_key)
}
inline std::string* CMsgPracticeLobbyCreate::_internal_mutable_search_key() {
  _has_bits_[0] |= 0x00000001u;
  return search_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.search_key)
  if (!_internal_has_search_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return search_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyCreate::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.search_key)
}

// optional string pass_key = 5;
inline bool CMsgPracticeLobbyCreate::_internal_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CMsgPracticeLobbyCreate::clear_pass_key() {
  pass_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgPracticeLobbyCreate::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.pass_key)
  return _internal_pass_key();
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const std::string& value) {
  _internal_set_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.pass_key)
}
inline std::string* CMsgPracticeLobbyCreate::mutable_pass_key() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.pass_key)
  return _internal_mutable_pass_key();
}
inline const std::string& CMsgPracticeLobbyCreate::_internal_pass_key() const {
  return pass_key_.Get();
}
inline void CMsgPracticeLobbyCreate::_internal_set_pass_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyCreate::set_pass_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyCreate.pass_key)
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyCreate.pass_key)
}
inline void CMsgPracticeLobbyCreate::set_pass_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyCreate.pass_key)
}
inline std::string* CMsgPracticeLobbyCreate::_internal_mutable_pass_key() {
  _has_bits_[0] |= 0x00000002u;
  return pass_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyCreate::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pass_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyCreate::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pass_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.pass_key)
}

// optional uint32 client_version = 6;
inline bool CMsgPracticeLobbyCreate::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCreate::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgPracticeLobbyCreate::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyCreate::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.client_version)
  return _internal_client_version();
}
inline void CMsgPracticeLobbyCreate::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_version_ = value;
}
inline void CMsgPracticeLobbyCreate::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCreate.client_version)
}

// optional .CMsgPracticeLobbySetDetails lobby_details = 7;
inline bool CMsgPracticeLobbyCreate::_internal_has_lobby_details() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || lobby_details_ != nullptr);
  return value;
}
inline bool CMsgPracticeLobbyCreate::has_lobby_details() const {
  return _internal_has_lobby_details();
}
inline void CMsgPracticeLobbyCreate::clear_lobby_details() {
  if (lobby_details_ != nullptr) lobby_details_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgPracticeLobbySetDetails& CMsgPracticeLobbyCreate::_internal_lobby_details() const {
  const ::CMsgPracticeLobbySetDetails* p = lobby_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPracticeLobbySetDetails&>(
      ::_CMsgPracticeLobbySetDetails_default_instance_);
}
inline const ::CMsgPracticeLobbySetDetails& CMsgPracticeLobbyCreate::lobby_details() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.lobby_details)
  return _internal_lobby_details();
}
inline void CMsgPracticeLobbyCreate::unsafe_arena_set_allocated_lobby_details(
    ::CMsgPracticeLobbySetDetails* lobby_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lobby_details_);
  }
  lobby_details_ = lobby_details;
  if (lobby_details) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPracticeLobbyCreate.lobby_details)
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::release_lobby_details() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgPracticeLobbySetDetails* temp = lobby_details_;
  lobby_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::unsafe_arena_release_lobby_details() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.lobby_details)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgPracticeLobbySetDetails* temp = lobby_details_;
  lobby_details_ = nullptr;
  return temp;
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::_internal_mutable_lobby_details() {
  _has_bits_[0] |= 0x00000004u;
  if (lobby_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPracticeLobbySetDetails>(GetArena());
    lobby_details_ = p;
  }
  return lobby_details_;
}
inline ::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::mutable_lobby_details() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.lobby_details)
  return _internal_mutable_lobby_details();
}
inline void CMsgPracticeLobbyCreate::set_allocated_lobby_details(::CMsgPracticeLobbySetDetails* lobby_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lobby_details_;
  }
  if (lobby_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lobby_details);
    if (message_arena != submessage_arena) {
      lobby_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lobby_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  lobby_details_ = lobby_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.lobby_details)
}

// optional .CMsgPracticeLobbyCreate.SaveGame save_game = 8;
inline bool CMsgPracticeLobbyCreate::_internal_has_save_game() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || save_game_ != nullptr);
  return value;
}
inline bool CMsgPracticeLobbyCreate::has_save_game() const {
  return _internal_has_save_game();
}
inline void CMsgPracticeLobbyCreate::clear_save_game() {
  if (save_game_ != nullptr) save_game_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate::_internal_save_game() const {
  const ::CMsgPracticeLobbyCreate_SaveGame* p = save_game_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPracticeLobbyCreate_SaveGame&>(
      ::_CMsgPracticeLobbyCreate_SaveGame_default_instance_);
}
inline const ::CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate::save_game() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCreate.save_game)
  return _internal_save_game();
}
inline void CMsgPracticeLobbyCreate::unsafe_arena_set_allocated_save_game(
    ::CMsgPracticeLobbyCreate_SaveGame* save_game) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(save_game_);
  }
  save_game_ = save_game;
  if (save_game) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgPracticeLobbyCreate.save_game)
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::release_save_game() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgPracticeLobbyCreate_SaveGame* temp = save_game_;
  save_game_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::unsafe_arena_release_save_game() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyCreate.save_game)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgPracticeLobbyCreate_SaveGame* temp = save_game_;
  save_game_ = nullptr;
  return temp;
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::_internal_mutable_save_game() {
  _has_bits_[0] |= 0x00000008u;
  if (save_game_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPracticeLobbyCreate_SaveGame>(GetArena());
    save_game_ = p;
  }
  return save_game_;
}
inline ::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::mutable_save_game() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyCreate.save_game)
  return _internal_mutable_save_game();
}
inline void CMsgPracticeLobbyCreate::set_allocated_save_game(::CMsgPracticeLobbyCreate_SaveGame* save_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete save_game_;
  }
  if (save_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(save_game);
    if (message_arena != submessage_arena) {
      save_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, save_game, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  save_game_ = save_game;
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyCreate.save_game)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetTeamSlot

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgPracticeLobbySetTeamSlot::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetTeamSlot::has_team() const {
  return _internal_has_team();
}
inline void CMsgPracticeLobbySetTeamSlot::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetTeamSlot::_internal_team() const {
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetTeamSlot::team() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.team)
  return _internal_team();
}
inline void CMsgPracticeLobbySetTeamSlot::_internal_set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  team_ = value;
}
inline void CMsgPracticeLobbySetTeamSlot::set_team(::DOTA_GC_TEAM value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.team)
}

// optional uint32 slot = 2;
inline bool CMsgPracticeLobbySetTeamSlot::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetTeamSlot::has_slot() const {
  return _internal_has_slot();
}
inline void CMsgPracticeLobbySetTeamSlot::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetTeamSlot::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbySetTeamSlot::slot() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.slot)
  return _internal_slot();
}
inline void CMsgPracticeLobbySetTeamSlot::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  slot_ = value;
}
inline void CMsgPracticeLobbySetTeamSlot::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.slot)
}

// optional .DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgPracticeLobbySetTeamSlot::_internal_has_bot_difficulty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetTeamSlot::has_bot_difficulty() const {
  return _internal_has_bot_difficulty();
}
inline void CMsgPracticeLobbySetTeamSlot::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetTeamSlot::_internal_bot_difficulty() const {
  return static_cast< ::DOTABotDifficulty >(bot_difficulty_);
}
inline ::DOTABotDifficulty CMsgPracticeLobbySetTeamSlot::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetTeamSlot.bot_difficulty)
  return _internal_bot_difficulty();
}
inline void CMsgPracticeLobbySetTeamSlot::_internal_set_bot_difficulty(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  bot_difficulty_ = value;
}
inline void CMsgPracticeLobbySetTeamSlot::set_bot_difficulty(::DOTABotDifficulty value) {
  _internal_set_bot_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetTeamSlot.bot_difficulty)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbySetCoach

// optional .DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgPracticeLobbySetCoach::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbySetCoach::has_team() const {
  return _internal_has_team();
}
inline void CMsgPracticeLobbySetCoach::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetCoach::_internal_team() const {
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline ::DOTA_GC_TEAM CMsgPracticeLobbySetCoach::team() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbySetCoach.team)
  return _internal_team();
}
inline void CMsgPracticeLobbySetCoach::_internal_set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  team_ = value;
}
inline void CMsgPracticeLobbySetCoach::set_team(::DOTA_GC_TEAM value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbySetCoach.team)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoinBroadcastChannel

// optional uint32 channel = 1;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_channel() const {
  return _internal_has_channel();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_channel() {
  channel_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyJoinBroadcastChannel::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyJoinBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.channel)
  return _internal_channel();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  channel_ = value;
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.channel)
}

// optional string preferred_description = 2;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::_internal_has_preferred_description() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_description() const {
  return _internal_has_preferred_description();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_description() {
  preferred_description_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_description() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  return _internal_preferred_description();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const std::string& value) {
  _internal_set_preferred_description(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_description() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  return _internal_mutable_preferred_description();
}
inline const std::string& CMsgPracticeLobbyJoinBroadcastChannel::_internal_preferred_description() const {
  return preferred_description_.Get();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::_internal_set_preferred_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  preferred_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  preferred_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  preferred_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  preferred_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::_internal_mutable_preferred_description() {
  _has_bits_[0] |= 0x00000001u;
  return preferred_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_description() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  if (!_internal_has_preferred_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return preferred_description_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_description(std::string* preferred_description) {
  if (preferred_description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  preferred_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}

// optional string preferred_country_code = 3;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::_internal_has_preferred_country_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_country_code() const {
  return _internal_has_preferred_country_code();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_country_code() {
  preferred_country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_country_code() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  return _internal_preferred_country_code();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const std::string& value) {
  _internal_set_preferred_country_code(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_country_code() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  return _internal_mutable_preferred_country_code();
}
inline const std::string& CMsgPracticeLobbyJoinBroadcastChannel::_internal_preferred_country_code() const {
  return preferred_country_code_.Get();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::_internal_set_preferred_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  preferred_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  preferred_country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  preferred_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  preferred_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::_internal_mutable_preferred_country_code() {
  _has_bits_[0] |= 0x00000002u;
  return preferred_country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_country_code() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  if (!_internal_has_preferred_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return preferred_country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_country_code(std::string* preferred_country_code) {
  if (preferred_country_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  preferred_country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}

// optional string preferred_language_code = 4;
inline bool CMsgPracticeLobbyJoinBroadcastChannel::_internal_has_preferred_language_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_language_code() const {
  return _internal_has_preferred_language_code();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_language_code() {
  preferred_language_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_language_code() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  return _internal_preferred_language_code();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const std::string& value) {
  _internal_set_preferred_language_code(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_language_code() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  return _internal_mutable_preferred_language_code();
}
inline const std::string& CMsgPracticeLobbyJoinBroadcastChannel::_internal_preferred_language_code() const {
  return preferred_language_code_.Get();
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::_internal_set_preferred_language_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  preferred_language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  preferred_language_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  preferred_language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  preferred_language_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::_internal_mutable_preferred_language_code() {
  _has_bits_[0] |= 0x00000004u;
  return preferred_language_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_language_code() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  if (!_internal_has_preferred_language_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return preferred_language_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_language_code(std::string* preferred_language_code) {
  if (preferred_language_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preferred_language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preferred_language_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyCloseBroadcastChannel

// optional uint32 channel = 1;
inline bool CMsgPracticeLobbyCloseBroadcastChannel::_internal_has_channel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyCloseBroadcastChannel::has_channel() const {
  return _internal_has_channel();
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::clear_channel() {
  channel_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyCloseBroadcastChannel::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyCloseBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyCloseBroadcastChannel.channel)
  return _internal_channel();
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  channel_ = value;
}
inline void CMsgPracticeLobbyCloseBroadcastChannel::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyCloseBroadcastChannel.channel)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus

// -------------------------------------------------------------------

// CMsgPracticeLobbyKick

// optional uint32 account_id = 3;
inline bool CMsgPracticeLobbyKick::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyKick::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgPracticeLobbyKick::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyKick::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyKick::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyKick.account_id)
  return _internal_account_id();
}
inline void CMsgPracticeLobbyKick::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgPracticeLobbyKick::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyKick.account_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyKickFromTeam

// optional uint32 account_id = 1;
inline bool CMsgPracticeLobbyKickFromTeam::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyKickFromTeam::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgPracticeLobbyKickFromTeam::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyKickFromTeam::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyKickFromTeam::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyKickFromTeam.account_id)
  return _internal_account_id();
}
inline void CMsgPracticeLobbyKickFromTeam::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgPracticeLobbyKickFromTeam::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyKickFromTeam.account_id)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyLeave

// -------------------------------------------------------------------

// CMsgPracticeLobbyLaunch

// optional uint32 client_version = 5;
inline bool CMsgPracticeLobbyLaunch::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyLaunch::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgPracticeLobbyLaunch::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyLaunch::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyLaunch::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyLaunch.client_version)
  return _internal_client_version();
}
inline void CMsgPracticeLobbyLaunch::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  client_version_ = value;
}
inline void CMsgPracticeLobbyLaunch::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyLaunch.client_version)
}

// -------------------------------------------------------------------

// CMsgApplyTeamToPracticeLobby

// optional uint32 team_id = 1;
inline bool CMsgApplyTeamToPracticeLobby::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgApplyTeamToPracticeLobby::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgApplyTeamToPracticeLobby::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgApplyTeamToPracticeLobby::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgApplyTeamToPracticeLobby::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgApplyTeamToPracticeLobby.team_id)
  return _internal_team_id();
}
inline void CMsgApplyTeamToPracticeLobby::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_id_ = value;
}
inline void CMsgApplyTeamToPracticeLobby::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgApplyTeamToPracticeLobby.team_id)
}

// -------------------------------------------------------------------

// CMsgClearPracticeLobbyTeam

// -------------------------------------------------------------------

// CMsgPracticeLobbyList

// optional string pass_key = 2;
inline bool CMsgPracticeLobbyList::_internal_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyList::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CMsgPracticeLobbyList::clear_pass_key() {
  pass_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyList::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.pass_key)
  return _internal_pass_key();
}
inline void CMsgPracticeLobbyList::set_pass_key(const std::string& value) {
  _internal_set_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.pass_key)
}
inline std::string* CMsgPracticeLobbyList::mutable_pass_key() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyList.pass_key)
  return _internal_mutable_pass_key();
}
inline const std::string& CMsgPracticeLobbyList::_internal_pass_key() const {
  return pass_key_.Get();
}
inline void CMsgPracticeLobbyList::_internal_set_pass_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyList::set_pass_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyList.pass_key)
}
inline void CMsgPracticeLobbyList::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyList.pass_key)
}
inline void CMsgPracticeLobbyList::set_pass_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyList.pass_key)
}
inline std::string* CMsgPracticeLobbyList::_internal_mutable_pass_key() {
  _has_bits_[0] |= 0x00000001u;
  return pass_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyList::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyList.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pass_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyList::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pass_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyList.pass_key)
}

// optional uint32 region = 3;
inline bool CMsgPracticeLobbyList::_internal_has_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyList::has_region() const {
  return _internal_has_region();
}
inline void CMsgPracticeLobbyList::clear_region() {
  region_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyList::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyList::region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.region)
  return _internal_region();
}
inline void CMsgPracticeLobbyList::_internal_set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  region_ = value;
}
inline void CMsgPracticeLobbyList::set_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.region)
}

// optional .DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgPracticeLobbyList::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyList::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgPracticeLobbyList::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::DOTA_GameMode CMsgPracticeLobbyList::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline ::DOTA_GameMode CMsgPracticeLobbyList::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyList.game_mode)
  return _internal_game_mode();
}
inline void CMsgPracticeLobbyList::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  game_mode_ = value;
}
inline void CMsgPracticeLobbyList::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyList.game_mode)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponseEntry_CLobbyMember

// optional uint32 account_id = 1;
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
  return _internal_account_id();
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
}

// optional string player_name = 2;
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyListResponseEntry_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return _internal_player_name();
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_player_name() const {
  return player_name_.Get();
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
inline std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponseEntry

// optional uint64 id = 1 [(.key_field) = true];
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_id() const {
  return _internal_has_id();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyListResponseEntry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyListResponseEntry::id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.id)
  return _internal_id();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.id)
}

// repeated .CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
inline int CMsgPracticeLobbyListResponseEntry::_internal_members_size() const {
  return members_.size();
}
inline int CMsgPracticeLobbyListResponseEntry::members_size() const {
  return _internal_members_size();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_members() {
  members_.Clear();
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
CMsgPracticeLobbyListResponseEntry::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbyListResponseEntry.members)
  return &members_;
}
inline const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry::members(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.members)
  return _internal_members(index);
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::_internal_add_members() {
  return members_.Add();
}
inline ::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::add_members() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbyListResponseEntry.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
CMsgPracticeLobbyListResponseEntry::members() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbyListResponseEntry.members)
  return members_;
}

// optional bool requires_pass_key = 6;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_requires_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_requires_pass_key() const {
  return _internal_has_requires_pass_key();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_requires_pass_key() {
  requires_pass_key_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgPracticeLobbyListResponseEntry::_internal_requires_pass_key() const {
  return requires_pass_key_;
}
inline bool CMsgPracticeLobbyListResponseEntry::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.requires_pass_key)
  return _internal_requires_pass_key();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_requires_pass_key(bool value) {
  _has_bits_[0] |= 0x00000040u;
  requires_pass_key_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_requires_pass_key(bool value) {
  _internal_set_requires_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.requires_pass_key)
}

// optional uint32 leader_account_id = 7;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_leader_account_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_leader_account_id() const {
  return _internal_has_leader_account_id();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::_internal_leader_account_id() const {
  return leader_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.leader_account_id)
  return _internal_leader_account_id();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  leader_account_id_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.leader_account_id)
}

// optional string name = 10;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_name() const {
  return _internal_has_name();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.name)
  return _internal_name();
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.name)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::_internal_name() const {
  return name_.Get();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyListResponseEntry.name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.name)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyListResponseEntry::release_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyListResponseEntry.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.name)
}

// optional string custom_game_mode = 11;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_custom_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_custom_game_mode() const {
  return _internal_has_custom_game_mode();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  return _internal_custom_game_mode();
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const std::string& value) {
  _internal_set_custom_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::mutable_custom_game_mode() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  return _internal_mutable_custom_game_mode();
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::_internal_custom_game_mode() const {
  return custom_game_mode_.Get();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_custom_game_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  custom_game_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  custom_game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::_internal_mutable_custom_game_mode() {
  _has_bits_[0] |= 0x00000002u;
  return custom_game_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyListResponseEntry::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  if (!_internal_has_custom_game_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return custom_game_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_custom_game_mode(std::string* custom_game_mode) {
  if (custom_game_mode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  custom_game_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_game_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}

// optional .DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::DOTA_GameMode CMsgPracticeLobbyListResponseEntry::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline ::DOTA_GameMode CMsgPracticeLobbyListResponseEntry::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.game_mode)
  return _internal_game_mode();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  game_mode_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.game_mode)
}

// optional bool friend_present = 13;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_friend_present() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_friend_present() const {
  return _internal_has_friend_present();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_friend_present() {
  friend_present_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgPracticeLobbyListResponseEntry::_internal_friend_present() const {
  return friend_present_;
}
inline bool CMsgPracticeLobbyListResponseEntry::friend_present() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.friend_present)
  return _internal_friend_present();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_friend_present(bool value) {
  _has_bits_[0] |= 0x00000080u;
  friend_present_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_friend_present(bool value) {
  _internal_set_friend_present(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.friend_present)
}

// optional uint32 players = 14;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_players() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_players() const {
  return _internal_has_players();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_players() {
  players_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::_internal_players() const {
  return players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::players() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.players)
  return _internal_players();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  players_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.players)
}

// optional string custom_map_name = 15;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_custom_map_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_custom_map_name() const {
  return _internal_has_custom_map_name();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_custom_map_name() {
  custom_map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.custom_map_name)
  return _internal_custom_map_name();
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const std::string& value) {
  _internal_set_custom_map_name(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::mutable_custom_map_name() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.custom_map_name)
  return _internal_mutable_custom_map_name();
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::_internal_custom_map_name() const {
  return custom_map_name_.Get();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_custom_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::_internal_mutable_custom_map_name() {
  _has_bits_[0] |= 0x00000004u;
  return custom_map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyListResponseEntry::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyListResponseEntry.custom_map_name)
  if (!_internal_has_custom_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return custom_map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_custom_map_name(std::string* custom_map_name) {
  if (custom_map_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.custom_map_name)
}

// optional uint32 max_player_count = 16;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_max_player_count() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_max_player_count() const {
  return _internal_has_max_player_count();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_max_player_count() {
  max_player_count_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::_internal_max_player_count() const {
  return max_player_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::max_player_count() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.max_player_count)
  return _internal_max_player_count();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  max_player_count_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_player_count(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.max_player_count)
}

// optional uint32 server_region = 17;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.server_region)
  return _internal_server_region();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  server_region_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.server_region)
}

// optional uint32 league_id = 19;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyListResponseEntry::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.league_id)
  return _internal_league_id();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  league_id_ = value;
}
inline void CMsgPracticeLobbyListResponseEntry::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.league_id)
}

// optional string lan_host_ping_location = 20;
inline bool CMsgPracticeLobbyListResponseEntry::_internal_has_lan_host_ping_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyListResponseEntry::has_lan_host_ping_location() const {
  return _internal_has_lan_host_ping_location();
}
inline void CMsgPracticeLobbyListResponseEntry::clear_lan_host_ping_location() {
  lan_host_ping_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
  return _internal_lan_host_ping_location();
}
inline void CMsgPracticeLobbyListResponseEntry::set_lan_host_ping_location(const std::string& value) {
  _internal_set_lan_host_ping_location(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::mutable_lan_host_ping_location() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
  return _internal_mutable_lan_host_ping_location();
}
inline const std::string& CMsgPracticeLobbyListResponseEntry::_internal_lan_host_ping_location() const {
  return lan_host_ping_location_.Get();
}
inline void CMsgPracticeLobbyListResponseEntry::_internal_set_lan_host_ping_location(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_lan_host_ping_location(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
}
inline void CMsgPracticeLobbyListResponseEntry::set_lan_host_ping_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
}
inline void CMsgPracticeLobbyListResponseEntry::set_lan_host_ping_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
}
inline std::string* CMsgPracticeLobbyListResponseEntry::_internal_mutable_lan_host_ping_location() {
  _has_bits_[0] |= 0x00000008u;
  return lan_host_ping_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyListResponseEntry::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
  if (!_internal_has_lan_host_ping_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return lan_host_ping_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyListResponseEntry::set_allocated_lan_host_ping_location(std::string* lan_host_ping_location) {
  if (lan_host_ping_location != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lan_host_ping_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lan_host_ping_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyListResponseEntry.lan_host_ping_location)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 2;
inline int CMsgPracticeLobbyListResponse::_internal_lobbies_size() const {
  return lobbies_.size();
}
inline int CMsgPracticeLobbyListResponse::lobbies_size() const {
  return _internal_lobbies_size();
}
inline void CMsgPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponse::_internal_lobbies(int index) const {
  return lobbies_.Get(index);
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyListResponse.lobbies)
  return _internal_lobbies(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::_internal_add_lobbies() {
  return lobbies_.Add();
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgPracticeLobbyListResponse.lobbies)
  return _internal_add_lobbies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgLobbyList

// optional uint32 server_region = 1 [default = 0];
inline bool CMsgLobbyList::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgLobbyList::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgLobbyList::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLobbyList::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgLobbyList::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyList.server_region)
  return _internal_server_region();
}
inline void CMsgLobbyList::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  server_region_ = value;
}
inline void CMsgLobbyList::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyList.server_region)
}

// optional .DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgLobbyList::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgLobbyList::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgLobbyList::clear_game_mode() {
  game_mode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::DOTA_GameMode CMsgLobbyList::_internal_game_mode() const {
  return static_cast< ::DOTA_GameMode >(game_mode_);
}
inline ::DOTA_GameMode CMsgLobbyList::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgLobbyList.game_mode)
  return _internal_game_mode();
}
inline void CMsgLobbyList::_internal_set_game_mode(::DOTA_GameMode value) {
  assert(::DOTA_GameMode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  game_mode_ = value;
}
inline void CMsgLobbyList::set_game_mode(::DOTA_GameMode value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgLobbyList.game_mode)
}

// -------------------------------------------------------------------

// CMsgLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgLobbyListResponse::_internal_lobbies_size() const {
  return lobbies_.size();
}
inline int CMsgLobbyListResponse::lobbies_size() const {
  return _internal_lobbies_size();
}
inline void CMsgLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgLobbyListResponse::_internal_lobbies(int index) const {
  return lobbies_.Get(index);
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgLobbyListResponse.lobbies)
  return _internal_lobbies(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::_internal_add_lobbies() {
  return lobbies_.Add();
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgLobbyListResponse.lobbies)
  return _internal_add_lobbies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoin

// optional uint64 lobby_id = 1;
inline bool CMsgPracticeLobbyJoin::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoin::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgPracticeLobbyJoin::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyJoin::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyJoin::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgPracticeLobbyJoin::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  lobby_id_ = value;
}
inline void CMsgPracticeLobbyJoin::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.lobby_id)
}

// optional uint32 client_version = 2;
inline bool CMsgPracticeLobbyJoin::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoin::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgPracticeLobbyJoin::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyJoin::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyJoin::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.client_version)
  return _internal_client_version();
}
inline void CMsgPracticeLobbyJoin::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  client_version_ = value;
}
inline void CMsgPracticeLobbyJoin::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.client_version)
}

// optional string pass_key = 3;
inline bool CMsgPracticeLobbyJoin::_internal_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoin::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CMsgPracticeLobbyJoin::clear_pass_key() {
  pass_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPracticeLobbyJoin::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.pass_key)
  return _internal_pass_key();
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const std::string& value) {
  _internal_set_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.pass_key)
}
inline std::string* CMsgPracticeLobbyJoin::mutable_pass_key() {
  // @@protoc_insertion_point(field_mutable:CMsgPracticeLobbyJoin.pass_key)
  return _internal_mutable_pass_key();
}
inline const std::string& CMsgPracticeLobbyJoin::_internal_pass_key() const {
  return pass_key_.Get();
}
inline void CMsgPracticeLobbyJoin::_internal_set_pass_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPracticeLobbyJoin::set_pass_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPracticeLobbyJoin.pass_key)
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPracticeLobbyJoin.pass_key)
}
inline void CMsgPracticeLobbyJoin::set_pass_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPracticeLobbyJoin.pass_key)
}
inline std::string* CMsgPracticeLobbyJoin::_internal_mutable_pass_key() {
  _has_bits_[0] |= 0x00000001u;
  return pass_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPracticeLobbyJoin::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgPracticeLobbyJoin.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pass_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPracticeLobbyJoin::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pass_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPracticeLobbyJoin.pass_key)
}

// optional fixed64 custom_game_crc = 4;
inline bool CMsgPracticeLobbyJoin::_internal_has_custom_game_crc() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoin::has_custom_game_crc() const {
  return _internal_has_custom_game_crc();
}
inline void CMsgPracticeLobbyJoin::clear_custom_game_crc() {
  custom_game_crc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyJoin::_internal_custom_game_crc() const {
  return custom_game_crc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPracticeLobbyJoin::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.custom_game_crc)
  return _internal_custom_game_crc();
}
inline void CMsgPracticeLobbyJoin::_internal_set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  custom_game_crc_ = value;
}
inline void CMsgPracticeLobbyJoin::set_custom_game_crc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_crc(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 5;
inline bool CMsgPracticeLobbyJoin::_internal_has_custom_game_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoin::has_custom_game_timestamp() const {
  return _internal_has_custom_game_timestamp();
}
inline void CMsgPracticeLobbyJoin::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyJoin::_internal_custom_game_timestamp() const {
  return custom_game_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgPracticeLobbyJoin::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoin.custom_game_timestamp)
  return _internal_custom_game_timestamp();
}
inline void CMsgPracticeLobbyJoin::_internal_set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  custom_game_timestamp_ = value;
}
inline void CMsgPracticeLobbyJoin::set_custom_game_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_custom_game_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoin.custom_game_timestamp)
}

// -------------------------------------------------------------------

// CMsgPracticeLobbyJoinResponse

// optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
inline bool CMsgPracticeLobbyJoinResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPracticeLobbyJoinResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgPracticeLobbyJoinResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DOTAJoinLobbyResult CMsgPracticeLobbyJoinResponse::_internal_result() const {
  return static_cast< ::DOTAJoinLobbyResult >(result_);
}
inline ::DOTAJoinLobbyResult CMsgPracticeLobbyJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgPracticeLobbyJoinResponse.result)
  return _internal_result();
}
inline void CMsgPracticeLobbyJoinResponse::_internal_set_result(::DOTAJoinLobbyResult value) {
  assert(::DOTAJoinLobbyResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgPracticeLobbyJoinResponse::set_result(::DOTAJoinLobbyResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgPracticeLobbyJoinResponse.result)
}

// -------------------------------------------------------------------

// CMsgFriendPracticeLobbyListRequest

// repeated uint32 friends = 1;
inline int CMsgFriendPracticeLobbyListRequest::_internal_friends_size() const {
  return friends_.size();
}
inline int CMsgFriendPracticeLobbyListRequest::friends_size() const {
  return _internal_friends_size();
}
inline void CMsgFriendPracticeLobbyListRequest::clear_friends() {
  friends_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgFriendPracticeLobbyListRequest::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgFriendPracticeLobbyListRequest::friends(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFriendPracticeLobbyListRequest.friends)
  return _internal_friends(index);
}
inline void CMsgFriendPracticeLobbyListRequest::set_friends(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgFriendPracticeLobbyListRequest.friends)
}
inline void CMsgFriendPracticeLobbyListRequest::_internal_add_friends(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  friends_.Add(value);
}
inline void CMsgFriendPracticeLobbyListRequest::add_friends(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_friends(value);
  // @@protoc_insertion_point(field_add:CMsgFriendPracticeLobbyListRequest.friends)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgFriendPracticeLobbyListRequest::_internal_friends() const {
  return friends_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgFriendPracticeLobbyListRequest::friends() const {
  // @@protoc_insertion_point(field_list:CMsgFriendPracticeLobbyListRequest.friends)
  return _internal_friends();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgFriendPracticeLobbyListRequest::_internal_mutable_friends() {
  return &friends_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgFriendPracticeLobbyListRequest::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFriendPracticeLobbyListRequest.friends)
  return _internal_mutable_friends();
}

// -------------------------------------------------------------------

// CMsgFriendPracticeLobbyListResponse

// repeated .CMsgPracticeLobbyListResponseEntry lobbies = 1;
inline int CMsgFriendPracticeLobbyListResponse::_internal_lobbies_size() const {
  return lobbies_.size();
}
inline int CMsgFriendPracticeLobbyListResponse::lobbies_size() const {
  return _internal_lobbies_size();
}
inline void CMsgFriendPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >*
CMsgFriendPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgFriendPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgFriendPracticeLobbyListResponse::_internal_lobbies(int index) const {
  return lobbies_.Get(index);
}
inline const ::CMsgPracticeLobbyListResponseEntry& CMsgFriendPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgFriendPracticeLobbyListResponse.lobbies)
  return _internal_lobbies(index);
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::_internal_add_lobbies() {
  return lobbies_.Add();
}
inline ::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgFriendPracticeLobbyListResponse.lobbies)
  return _internal_add_lobbies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgPracticeLobbyListResponseEntry >&
CMsgFriendPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgJoinableCustomGameModesRequest

// optional uint32 server_region = 1;
inline bool CMsgJoinableCustomGameModesRequest::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJoinableCustomGameModesRequest::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgJoinableCustomGameModesRequest::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomGameModesRequest::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomGameModesRequest::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesRequest.server_region)
  return _internal_server_region();
}
inline void CMsgJoinableCustomGameModesRequest::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  server_region_ = value;
}
inline void CMsgJoinableCustomGameModesRequest::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesRequest.server_region)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomGameModesResponseEntry

// optional uint64 custom_game_id = 1;
inline bool CMsgJoinableCustomGameModesResponseEntry::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJoinableCustomGameModesResponseEntry::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomGameModesResponseEntry::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomGameModesResponseEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponseEntry.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgJoinableCustomGameModesResponseEntry::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  custom_game_id_ = value;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesResponseEntry.custom_game_id)
}

// optional uint32 lobby_count = 2;
inline bool CMsgJoinableCustomGameModesResponseEntry::_internal_has_lobby_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJoinableCustomGameModesResponseEntry::has_lobby_count() const {
  return _internal_has_lobby_count();
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_lobby_count() {
  lobby_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomGameModesResponseEntry::_internal_lobby_count() const {
  return lobby_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomGameModesResponseEntry::lobby_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponseEntry.lobby_count)
  return _internal_lobby_count();
}
inline void CMsgJoinableCustomGameModesResponseEntry::_internal_set_lobby_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lobby_count_ = value;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_lobby_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lobby_count(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesResponseEntry.lobby_count)
}

// optional uint32 player_count = 3;
inline bool CMsgJoinableCustomGameModesResponseEntry::_internal_has_player_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJoinableCustomGameModesResponseEntry::has_player_count() const {
  return _internal_has_player_count();
}
inline void CMsgJoinableCustomGameModesResponseEntry::clear_player_count() {
  player_count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomGameModesResponseEntry::_internal_player_count() const {
  return player_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomGameModesResponseEntry::player_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponseEntry.player_count)
  return _internal_player_count();
}
inline void CMsgJoinableCustomGameModesResponseEntry::_internal_set_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_count_ = value;
}
inline void CMsgJoinableCustomGameModesResponseEntry::set_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_count(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomGameModesResponseEntry.player_count)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomGameModesResponse

// repeated .CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
inline int CMsgJoinableCustomGameModesResponse::_internal_game_modes_size() const {
  return game_modes_.size();
}
inline int CMsgJoinableCustomGameModesResponse::game_modes_size() const {
  return _internal_game_modes_size();
}
inline void CMsgJoinableCustomGameModesResponse::clear_game_modes() {
  game_modes_.Clear();
}
inline ::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::mutable_game_modes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >*
CMsgJoinableCustomGameModesResponse::mutable_game_modes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJoinableCustomGameModesResponse.game_modes)
  return &game_modes_;
}
inline const ::CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponse::_internal_game_modes(int index) const {
  return game_modes_.Get(index);
}
inline const ::CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponse::game_modes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomGameModesResponse.game_modes)
  return _internal_game_modes(index);
}
inline ::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::_internal_add_game_modes() {
  return game_modes_.Add();
}
inline ::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::add_game_modes() {
  // @@protoc_insertion_point(field_add:CMsgJoinableCustomGameModesResponse.game_modes)
  return _internal_add_game_modes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomGameModesResponseEntry >&
CMsgJoinableCustomGameModesResponse::game_modes() const {
  // @@protoc_insertion_point(field_list:CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_;
}

// -------------------------------------------------------------------

// CMsgJoinableCustomLobbiesRequest

// optional uint32 server_region = 1;
inline bool CMsgJoinableCustomLobbiesRequest::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesRequest::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgJoinableCustomLobbiesRequest::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesRequest::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesRequest::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesRequest.server_region)
  return _internal_server_region();
}
inline void CMsgJoinableCustomLobbiesRequest::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  server_region_ = value;
}
inline void CMsgJoinableCustomLobbiesRequest::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesRequest.server_region)
}

// optional uint64 custom_game_id = 2;
inline bool CMsgJoinableCustomLobbiesRequest::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesRequest::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgJoinableCustomLobbiesRequest::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomLobbiesRequest::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomLobbiesRequest::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesRequest.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgJoinableCustomLobbiesRequest::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  custom_game_id_ = value;
}
inline void CMsgJoinableCustomLobbiesRequest::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesRequest.custom_game_id)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomLobbiesResponseEntry

// optional fixed64 lobby_id = 1;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomLobbiesResponseEntry::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomLobbiesResponseEntry::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  lobby_id_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.lobby_id)
}

// optional uint64 custom_game_id = 2;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomLobbiesResponseEntry::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgJoinableCustomLobbiesResponseEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  custom_game_id_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.custom_game_id)
}

// optional string lobby_name = 3;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_lobby_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_lobby_name() const {
  return _internal_has_lobby_name();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_lobby_name() {
  lobby_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::lobby_name() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  return _internal_lobby_name();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const std::string& value) {
  _internal_set_lobby_name(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_lobby_name() {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  return _internal_mutable_lobby_name();
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::_internal_lobby_name() const {
  return lobby_name_.Get();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_lobby_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::_internal_mutable_lobby_name() {
  _has_bits_[0] |= 0x00000001u;
  return lobby_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::release_lobby_name() {
  // @@protoc_insertion_point(field_release:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  if (!_internal_has_lobby_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lobby_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_lobby_name(std::string* lobby_name) {
  if (lobby_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lobby_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lobby_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}

// optional uint32 member_count = 4;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_member_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_member_count() const {
  return _internal_has_member_count();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_member_count() {
  member_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.member_count)
  return _internal_member_count();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  member_count_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.member_count)
}

// optional uint32 leader_account_id = 5;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_leader_account_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_leader_account_id() const {
  return _internal_has_leader_account_id();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::_internal_leader_account_id() const {
  return leader_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.leader_account_id)
  return _internal_leader_account_id();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  leader_account_id_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.leader_account_id)
}

// optional string leader_name = 6;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_leader_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_leader_name() const {
  return _internal_has_leader_name();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_leader_name() {
  leader_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::leader_name() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  return _internal_leader_name();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const std::string& value) {
  _internal_set_leader_name(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_leader_name() {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  return _internal_mutable_leader_name();
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::_internal_leader_name() const {
  return leader_name_.Get();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_leader_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  leader_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  leader_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  leader_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  leader_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::_internal_mutable_leader_name() {
  _has_bits_[0] |= 0x00000002u;
  return leader_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::release_leader_name() {
  // @@protoc_insertion_point(field_release:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  if (!_internal_has_leader_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return leader_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_leader_name(std::string* leader_name) {
  if (leader_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leader_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), leader_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}

// optional string custom_map_name = 7;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_custom_map_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_custom_map_name() const {
  return _internal_has_custom_map_name();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_custom_map_name() {
  custom_map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::custom_map_name() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  return _internal_custom_map_name();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const std::string& value) {
  _internal_set_custom_map_name(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_custom_map_name() {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  return _internal_mutable_custom_map_name();
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::_internal_custom_map_name() const {
  return custom_map_name_.Get();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_custom_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  custom_map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::_internal_mutable_custom_map_name() {
  _has_bits_[0] |= 0x00000004u;
  return custom_map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  if (!_internal_has_custom_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return custom_map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_custom_map_name(std::string* custom_map_name) {
  if (custom_map_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  custom_map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), custom_map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}

// optional uint32 max_player_count = 8;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_max_player_count() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_max_player_count() const {
  return _internal_has_max_player_count();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_max_player_count() {
  max_player_count_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::_internal_max_player_count() const {
  return max_player_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::max_player_count() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.max_player_count)
  return _internal_max_player_count();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  max_player_count_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_max_player_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_player_count(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.max_player_count)
}

// optional uint32 server_region = 9;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgJoinableCustomLobbiesResponseEntry::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.server_region)
  return _internal_server_region();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  server_region_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.server_region)
}

// optional bool has_pass_key = 11;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_has_pass_key() const {
  return _internal_has_has_pass_key();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_has_pass_key() {
  has_pass_key_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_pass_key() const {
  return has_pass_key_;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.has_pass_key)
  return _internal_has_pass_key();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_has_pass_key(bool value) {
  _has_bits_[0] |= 0x00000400u;
  has_pass_key_ = value;
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_has_pass_key(bool value) {
  _internal_set_has_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.has_pass_key)
}

// optional string lan_host_ping_location = 12;
inline bool CMsgJoinableCustomLobbiesResponseEntry::_internal_has_lan_host_ping_location() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgJoinableCustomLobbiesResponseEntry::has_lan_host_ping_location() const {
  return _internal_has_lan_host_ping_location();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::clear_lan_host_ping_location() {
  lan_host_ping_location_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::lan_host_ping_location() const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
  return _internal_lan_host_ping_location();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lan_host_ping_location(const std::string& value) {
  _internal_set_lan_host_ping_location(value);
  // @@protoc_insertion_point(field_set:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_lan_host_ping_location() {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
  return _internal_mutable_lan_host_ping_location();
}
inline const std::string& CMsgJoinableCustomLobbiesResponseEntry::_internal_lan_host_ping_location() const {
  return lan_host_ping_location_.Get();
}
inline void CMsgJoinableCustomLobbiesResponseEntry::_internal_set_lan_host_ping_location(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lan_host_ping_location(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lan_host_ping_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_lan_host_ping_location(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  lan_host_ping_location_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::_internal_mutable_lan_host_ping_location() {
  _has_bits_[0] |= 0x00000008u;
  return lan_host_ping_location_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgJoinableCustomLobbiesResponseEntry::release_lan_host_ping_location() {
  // @@protoc_insertion_point(field_release:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
  if (!_internal_has_lan_host_ping_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return lan_host_ping_location_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_lan_host_ping_location(std::string* lan_host_ping_location) {
  if (lan_host_ping_location != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lan_host_ping_location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lan_host_ping_location,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_location)
}

// -------------------------------------------------------------------

// CMsgJoinableCustomLobbiesResponse

// repeated .CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
inline int CMsgJoinableCustomLobbiesResponse::_internal_lobbies_size() const {
  return lobbies_.size();
}
inline int CMsgJoinableCustomLobbiesResponse::lobbies_size() const {
  return _internal_lobbies_size();
}
inline void CMsgJoinableCustomLobbiesResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline ::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >*
CMsgJoinableCustomLobbiesResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgJoinableCustomLobbiesResponse.lobbies)
  return &lobbies_;
}
inline const ::CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponse::_internal_lobbies(int index) const {
  return lobbies_.Get(index);
}
inline const ::CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgJoinableCustomLobbiesResponse.lobbies)
  return _internal_lobbies(index);
}
inline ::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::_internal_add_lobbies() {
  return lobbies_.Add();
}
inline ::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgJoinableCustomLobbiesResponse.lobbies)
  return _internal_add_lobbies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgJoinableCustomLobbiesResponseEntry >&
CMsgJoinableCustomLobbiesResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgQuickJoinCustomLobby_LegacyRegionPing

// optional uint32 server_region = 1;
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_has_server_region() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_server_region() const {
  return _internal_has_server_region();
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_server_region() {
  server_region_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_server_region() const {
  return server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::server_region() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.LegacyRegionPing.server_region)
  return _internal_server_region();
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  server_region_ = value;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.LegacyRegionPing.server_region)
}

// optional uint32 ping = 2;
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_has_ping() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_ping() const {
  return _internal_has_ping();
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_ping() {
  ping_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_ping() const {
  return ping_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::ping() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.LegacyRegionPing.ping)
  return _internal_ping();
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ping_ = value;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_ping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ping(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.LegacyRegionPing.ping)
}

// optional fixed32 region_code = 3;
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_has_region_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_region_code() const {
  return _internal_has_region_code();
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_region_code() {
  region_code_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_region_code() const {
  return region_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::region_code() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.LegacyRegionPing.region_code)
  return _internal_region_code();
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::_internal_set_region_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  region_code_ = value;
}
inline void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_region_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_region_code(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.LegacyRegionPing.region_code)
}

// -------------------------------------------------------------------

// CMsgQuickJoinCustomLobby

// optional uint32 legacy_server_region = 1;
inline bool CMsgQuickJoinCustomLobby::_internal_has_legacy_server_region() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby::has_legacy_server_region() const {
  return _internal_has_legacy_server_region();
}
inline void CMsgQuickJoinCustomLobby::clear_legacy_server_region() {
  legacy_server_region_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby::_internal_legacy_server_region() const {
  return legacy_server_region_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby::legacy_server_region() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.legacy_server_region)
  return _internal_legacy_server_region();
}
inline void CMsgQuickJoinCustomLobby::_internal_set_legacy_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  legacy_server_region_ = value;
}
inline void CMsgQuickJoinCustomLobby::set_legacy_server_region(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_server_region(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.legacy_server_region)
}

// optional uint64 custom_game_id = 2;
inline bool CMsgQuickJoinCustomLobby::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgQuickJoinCustomLobby::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgQuickJoinCustomLobby::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgQuickJoinCustomLobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgQuickJoinCustomLobby::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  custom_game_id_ = value;
}
inline void CMsgQuickJoinCustomLobby::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.custom_game_id)
}

// optional uint32 client_version = 3;
inline bool CMsgQuickJoinCustomLobby::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgQuickJoinCustomLobby::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgQuickJoinCustomLobby::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.client_version)
  return _internal_client_version();
}
inline void CMsgQuickJoinCustomLobby::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  client_version_ = value;
}
inline void CMsgQuickJoinCustomLobby::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.client_version)
}

// optional .CMsgPracticeLobbySetDetails create_lobby_details = 4;
inline bool CMsgQuickJoinCustomLobby::_internal_has_create_lobby_details() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || create_lobby_details_ != nullptr);
  return value;
}
inline bool CMsgQuickJoinCustomLobby::has_create_lobby_details() const {
  return _internal_has_create_lobby_details();
}
inline void CMsgQuickJoinCustomLobby::clear_create_lobby_details() {
  if (create_lobby_details_ != nullptr) create_lobby_details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgPracticeLobbySetDetails& CMsgQuickJoinCustomLobby::_internal_create_lobby_details() const {
  const ::CMsgPracticeLobbySetDetails* p = create_lobby_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgPracticeLobbySetDetails&>(
      ::_CMsgPracticeLobbySetDetails_default_instance_);
}
inline const ::CMsgPracticeLobbySetDetails& CMsgQuickJoinCustomLobby::create_lobby_details() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.create_lobby_details)
  return _internal_create_lobby_details();
}
inline void CMsgQuickJoinCustomLobby::unsafe_arena_set_allocated_create_lobby_details(
    ::CMsgPracticeLobbySetDetails* create_lobby_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_lobby_details_);
  }
  create_lobby_details_ = create_lobby_details;
  if (create_lobby_details) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuickJoinCustomLobby.create_lobby_details)
}
inline ::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::release_create_lobby_details() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgPracticeLobbySetDetails* temp = create_lobby_details_;
  create_lobby_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::unsafe_arena_release_create_lobby_details() {
  // @@protoc_insertion_point(field_release:CMsgQuickJoinCustomLobby.create_lobby_details)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgPracticeLobbySetDetails* temp = create_lobby_details_;
  create_lobby_details_ = nullptr;
  return temp;
}
inline ::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::_internal_mutable_create_lobby_details() {
  _has_bits_[0] |= 0x00000001u;
  if (create_lobby_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgPracticeLobbySetDetails>(GetArena());
    create_lobby_details_ = p;
  }
  return create_lobby_details_;
}
inline ::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::mutable_create_lobby_details() {
  // @@protoc_insertion_point(field_mutable:CMsgQuickJoinCustomLobby.create_lobby_details)
  return _internal_mutable_create_lobby_details();
}
inline void CMsgQuickJoinCustomLobby::set_allocated_create_lobby_details(::CMsgPracticeLobbySetDetails* create_lobby_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete create_lobby_details_;
  }
  if (create_lobby_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_lobby_details);
    if (message_arena != submessage_arena) {
      create_lobby_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_lobby_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  create_lobby_details_ = create_lobby_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuickJoinCustomLobby.create_lobby_details)
}

// optional bool allow_any_map = 5;
inline bool CMsgQuickJoinCustomLobby::_internal_has_allow_any_map() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobby::has_allow_any_map() const {
  return _internal_has_allow_any_map();
}
inline void CMsgQuickJoinCustomLobby::clear_allow_any_map() {
  allow_any_map_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgQuickJoinCustomLobby::_internal_allow_any_map() const {
  return allow_any_map_;
}
inline bool CMsgQuickJoinCustomLobby::allow_any_map() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.allow_any_map)
  return _internal_allow_any_map();
}
inline void CMsgQuickJoinCustomLobby::_internal_set_allow_any_map(bool value) {
  _has_bits_[0] |= 0x00000020u;
  allow_any_map_ = value;
}
inline void CMsgQuickJoinCustomLobby::set_allow_any_map(bool value) {
  _internal_set_allow_any_map(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobby.allow_any_map)
}

// repeated .CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
inline int CMsgQuickJoinCustomLobby::_internal_legacy_region_pings_size() const {
  return legacy_region_pings_.size();
}
inline int CMsgQuickJoinCustomLobby::legacy_region_pings_size() const {
  return _internal_legacy_region_pings_size();
}
inline void CMsgQuickJoinCustomLobby::clear_legacy_region_pings() {
  legacy_region_pings_.Clear();
}
inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::mutable_legacy_region_pings(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >*
CMsgQuickJoinCustomLobby::mutable_legacy_region_pings() {
  // @@protoc_insertion_point(field_mutable_list:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return &legacy_region_pings_;
}
inline const ::CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby::_internal_legacy_region_pings(int index) const {
  return legacy_region_pings_.Get(index);
}
inline const ::CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby::legacy_region_pings(int index) const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return _internal_legacy_region_pings(index);
}
inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::_internal_add_legacy_region_pings() {
  return legacy_region_pings_.Add();
}
inline ::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::add_legacy_region_pings() {
  // @@protoc_insertion_point(field_add:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return _internal_add_legacy_region_pings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgQuickJoinCustomLobby_LegacyRegionPing >&
CMsgQuickJoinCustomLobby::legacy_region_pings() const {
  // @@protoc_insertion_point(field_list:CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_;
}

// optional .CMsgClientPingData ping_data = 7;
inline bool CMsgQuickJoinCustomLobby::_internal_has_ping_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ping_data_ != nullptr);
  return value;
}
inline bool CMsgQuickJoinCustomLobby::has_ping_data() const {
  return _internal_has_ping_data();
}
inline const ::CMsgClientPingData& CMsgQuickJoinCustomLobby::_internal_ping_data() const {
  const ::CMsgClientPingData* p = ping_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgClientPingData&>(
      ::_CMsgClientPingData_default_instance_);
}
inline const ::CMsgClientPingData& CMsgQuickJoinCustomLobby::ping_data() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobby.ping_data)
  return _internal_ping_data();
}
inline void CMsgQuickJoinCustomLobby::unsafe_arena_set_allocated_ping_data(
    ::CMsgClientPingData* ping_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  ping_data_ = ping_data;
  if (ping_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgQuickJoinCustomLobby.ping_data)
}
inline ::CMsgClientPingData* CMsgQuickJoinCustomLobby::release_ping_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgClientPingData* temp = ping_data_;
  ping_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgClientPingData* CMsgQuickJoinCustomLobby::unsafe_arena_release_ping_data() {
  // @@protoc_insertion_point(field_release:CMsgQuickJoinCustomLobby.ping_data)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgClientPingData* temp = ping_data_;
  ping_data_ = nullptr;
  return temp;
}
inline ::CMsgClientPingData* CMsgQuickJoinCustomLobby::_internal_mutable_ping_data() {
  _has_bits_[0] |= 0x00000002u;
  if (ping_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgClientPingData>(GetArena());
    ping_data_ = p;
  }
  return ping_data_;
}
inline ::CMsgClientPingData* CMsgQuickJoinCustomLobby::mutable_ping_data() {
  // @@protoc_insertion_point(field_mutable:CMsgQuickJoinCustomLobby.ping_data)
  return _internal_mutable_ping_data();
}
inline void CMsgQuickJoinCustomLobby::set_allocated_ping_data(::CMsgClientPingData* ping_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data_);
  }
  if (ping_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_data)->GetArena();
    if (message_arena != submessage_arena) {
      ping_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ping_data_ = ping_data;
  // @@protoc_insertion_point(field_set_allocated:CMsgQuickJoinCustomLobby.ping_data)
}

// -------------------------------------------------------------------

// CMsgQuickJoinCustomLobbyResponse

// optional .DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
inline bool CMsgQuickJoinCustomLobbyResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQuickJoinCustomLobbyResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgQuickJoinCustomLobbyResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DOTAJoinLobbyResult CMsgQuickJoinCustomLobbyResponse::_internal_result() const {
  return static_cast< ::DOTAJoinLobbyResult >(result_);
}
inline ::DOTAJoinLobbyResult CMsgQuickJoinCustomLobbyResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgQuickJoinCustomLobbyResponse.result)
  return _internal_result();
}
inline void CMsgQuickJoinCustomLobbyResponse::_internal_set_result(::DOTAJoinLobbyResult value) {
  assert(::DOTAJoinLobbyResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgQuickJoinCustomLobbyResponse::set_result(::DOTAJoinLobbyResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgQuickJoinCustomLobbyResponse.result)
}

// -------------------------------------------------------------------

// CMsgBotGameCreate

// optional string search_key = 1;
inline bool CMsgBotGameCreate::_internal_has_search_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgBotGameCreate::has_search_key() const {
  return _internal_has_search_key();
}
inline void CMsgBotGameCreate::clear_search_key() {
  search_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgBotGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.search_key)
  return _internal_search_key();
}
inline void CMsgBotGameCreate::set_search_key(const std::string& value) {
  _internal_set_search_key(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.search_key)
}
inline std::string* CMsgBotGameCreate::mutable_search_key() {
  // @@protoc_insertion_point(field_mutable:CMsgBotGameCreate.search_key)
  return _internal_mutable_search_key();
}
inline const std::string& CMsgBotGameCreate::_internal_search_key() const {
  return search_key_.Get();
}
inline void CMsgBotGameCreate::_internal_set_search_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgBotGameCreate::set_search_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgBotGameCreate.search_key)
}
inline void CMsgBotGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgBotGameCreate.search_key)
}
inline void CMsgBotGameCreate::set_search_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgBotGameCreate.search_key)
}
inline std::string* CMsgBotGameCreate::_internal_mutable_search_key() {
  _has_bits_[0] |= 0x00000001u;
  return search_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgBotGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgBotGameCreate.search_key)
  if (!_internal_has_search_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return search_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgBotGameCreate::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgBotGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgBotGameCreate::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgBotGameCreate::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgBotGameCreate::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBotGameCreate::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBotGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.client_version)
  return _internal_client_version();
}
inline void CMsgBotGameCreate::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_version_ = value;
}
inline void CMsgBotGameCreate::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.client_version)
}

// optional .DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgBotGameCreate::_internal_has_difficulty_radiant() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgBotGameCreate::has_difficulty_radiant() const {
  return _internal_has_difficulty_radiant();
}
inline void CMsgBotGameCreate::clear_difficulty_radiant() {
  difficulty_radiant_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::DOTABotDifficulty CMsgBotGameCreate::_internal_difficulty_radiant() const {
  return static_cast< ::DOTABotDifficulty >(difficulty_radiant_);
}
inline ::DOTABotDifficulty CMsgBotGameCreate::difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.difficulty_radiant)
  return _internal_difficulty_radiant();
}
inline void CMsgBotGameCreate::_internal_set_difficulty_radiant(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  difficulty_radiant_ = value;
}
inline void CMsgBotGameCreate::set_difficulty_radiant(::DOTABotDifficulty value) {
  _internal_set_difficulty_radiant(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.difficulty_radiant)
}

// optional .DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CMsgBotGameCreate::_internal_has_team() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgBotGameCreate::has_team() const {
  return _internal_has_team();
}
inline void CMsgBotGameCreate::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::DOTA_GC_TEAM CMsgBotGameCreate::_internal_team() const {
  return static_cast< ::DOTA_GC_TEAM >(team_);
}
inline ::DOTA_GC_TEAM CMsgBotGameCreate::team() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.team)
  return _internal_team();
}
inline void CMsgBotGameCreate::_internal_set_team(::DOTA_GC_TEAM value) {
  assert(::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  team_ = value;
}
inline void CMsgBotGameCreate::set_team(::DOTA_GC_TEAM value) {
  _internal_set_team(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.team)
}

// optional uint32 game_mode = 5;
inline bool CMsgBotGameCreate::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgBotGameCreate::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgBotGameCreate::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBotGameCreate::_internal_game_mode() const {
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgBotGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.game_mode)
  return _internal_game_mode();
}
inline void CMsgBotGameCreate::_internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  game_mode_ = value;
}
inline void CMsgBotGameCreate::set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.game_mode)
}

// optional .DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
inline bool CMsgBotGameCreate::_internal_has_difficulty_dire() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgBotGameCreate::has_difficulty_dire() const {
  return _internal_has_difficulty_dire();
}
inline void CMsgBotGameCreate::clear_difficulty_dire() {
  difficulty_dire_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::DOTABotDifficulty CMsgBotGameCreate::_internal_difficulty_dire() const {
  return static_cast< ::DOTABotDifficulty >(difficulty_dire_);
}
inline ::DOTABotDifficulty CMsgBotGameCreate::difficulty_dire() const {
  // @@protoc_insertion_point(field_get:CMsgBotGameCreate.difficulty_dire)
  return _internal_difficulty_dire();
}
inline void CMsgBotGameCreate::_internal_set_difficulty_dire(::DOTABotDifficulty value) {
  assert(::DOTABotDifficulty_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  difficulty_dire_ = value;
}
inline void CMsgBotGameCreate::set_difficulty_dire(::DOTABotDifficulty value) {
  _internal_set_difficulty_dire(value);
  // @@protoc_insertion_point(field_set:CMsgBotGameCreate.difficulty_dire)
}

// -------------------------------------------------------------------

// CMsgCustomGameCreate

// optional string search_key = 1;
inline bool CMsgCustomGameCreate::_internal_has_search_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgCustomGameCreate::has_search_key() const {
  return _internal_has_search_key();
}
inline void CMsgCustomGameCreate::clear_search_key() {
  search_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgCustomGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.search_key)
  return _internal_search_key();
}
inline void CMsgCustomGameCreate::set_search_key(const std::string& value) {
  _internal_set_search_key(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.search_key)
}
inline std::string* CMsgCustomGameCreate::mutable_search_key() {
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameCreate.search_key)
  return _internal_mutable_search_key();
}
inline const std::string& CMsgCustomGameCreate::_internal_search_key() const {
  return search_key_.Get();
}
inline void CMsgCustomGameCreate::_internal_set_search_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgCustomGameCreate::set_search_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgCustomGameCreate.search_key)
}
inline void CMsgCustomGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgCustomGameCreate.search_key)
}
inline void CMsgCustomGameCreate::set_search_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgCustomGameCreate.search_key)
}
inline std::string* CMsgCustomGameCreate::_internal_mutable_search_key() {
  _has_bits_[0] |= 0x00000001u;
  return search_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgCustomGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgCustomGameCreate.search_key)
  if (!_internal_has_search_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return search_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgCustomGameCreate::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgCustomGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgCustomGameCreate::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgCustomGameCreate::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgCustomGameCreate::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCustomGameCreate::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCustomGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.client_version)
  return _internal_client_version();
}
inline void CMsgCustomGameCreate::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
}
inline void CMsgCustomGameCreate::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.client_version)
}

// optional uint32 difficulty = 3;
inline bool CMsgCustomGameCreate::_internal_has_difficulty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgCustomGameCreate::has_difficulty() const {
  return _internal_has_difficulty();
}
inline void CMsgCustomGameCreate::clear_difficulty() {
  difficulty_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCustomGameCreate::_internal_difficulty() const {
  return difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCustomGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.difficulty)
  return _internal_difficulty();
}
inline void CMsgCustomGameCreate::_internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  difficulty_ = value;
}
inline void CMsgCustomGameCreate::set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.difficulty)
}

// optional string game_mode = 4;
inline bool CMsgCustomGameCreate::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCustomGameCreate::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgCustomGameCreate::clear_game_mode() {
  game_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgCustomGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.game_mode)
  return _internal_game_mode();
}
inline void CMsgCustomGameCreate::set_game_mode(const std::string& value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.game_mode)
}
inline std::string* CMsgCustomGameCreate::mutable_game_mode() {
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameCreate.game_mode)
  return _internal_mutable_game_mode();
}
inline const std::string& CMsgCustomGameCreate::_internal_game_mode() const {
  return game_mode_.Get();
}
inline void CMsgCustomGameCreate::_internal_set_game_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgCustomGameCreate::set_game_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgCustomGameCreate.game_mode)
}
inline void CMsgCustomGameCreate::set_game_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgCustomGameCreate.game_mode)
}
inline void CMsgCustomGameCreate::set_game_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgCustomGameCreate.game_mode)
}
inline std::string* CMsgCustomGameCreate::_internal_mutable_game_mode() {
  _has_bits_[0] |= 0x00000002u;
  return game_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgCustomGameCreate::release_game_mode() {
  // @@protoc_insertion_point(field_release:CMsgCustomGameCreate.game_mode)
  if (!_internal_has_game_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgCustomGameCreate::set_allocated_game_mode(std::string* game_mode) {
  if (game_mode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgCustomGameCreate.game_mode)
}

// optional string map = 5;
inline bool CMsgCustomGameCreate::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgCustomGameCreate::has_map() const {
  return _internal_has_map();
}
inline void CMsgCustomGameCreate::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgCustomGameCreate::map() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.map)
  return _internal_map();
}
inline void CMsgCustomGameCreate::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.map)
}
inline std::string* CMsgCustomGameCreate::mutable_map() {
  // @@protoc_insertion_point(field_mutable:CMsgCustomGameCreate.map)
  return _internal_mutable_map();
}
inline const std::string& CMsgCustomGameCreate::_internal_map() const {
  return map_.Get();
}
inline void CMsgCustomGameCreate::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgCustomGameCreate::set_map(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgCustomGameCreate.map)
}
inline void CMsgCustomGameCreate::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgCustomGameCreate.map)
}
inline void CMsgCustomGameCreate::set_map(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgCustomGameCreate.map)
}
inline std::string* CMsgCustomGameCreate::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000004u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgCustomGameCreate::release_map() {
  // @@protoc_insertion_point(field_release:CMsgCustomGameCreate.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgCustomGameCreate::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgCustomGameCreate.map)
}

// optional uint64 custom_game_id = 7;
inline bool CMsgCustomGameCreate::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgCustomGameCreate::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgCustomGameCreate::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgCustomGameCreate::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgCustomGameCreate::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgCustomGameCreate.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgCustomGameCreate::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  custom_game_id_ = value;
}
inline void CMsgCustomGameCreate::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgCustomGameCreate.custom_game_id)
}

// -------------------------------------------------------------------

// CMsgEventGameCreate

// optional string search_key = 1;
inline bool CMsgEventGameCreate::_internal_has_search_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgEventGameCreate::has_search_key() const {
  return _internal_has_search_key();
}
inline void CMsgEventGameCreate::clear_search_key() {
  search_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgEventGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.search_key)
  return _internal_search_key();
}
inline void CMsgEventGameCreate::set_search_key(const std::string& value) {
  _internal_set_search_key(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.search_key)
}
inline std::string* CMsgEventGameCreate::mutable_search_key() {
  // @@protoc_insertion_point(field_mutable:CMsgEventGameCreate.search_key)
  return _internal_mutable_search_key();
}
inline const std::string& CMsgEventGameCreate::_internal_search_key() const {
  return search_key_.Get();
}
inline void CMsgEventGameCreate::_internal_set_search_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgEventGameCreate::set_search_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgEventGameCreate.search_key)
}
inline void CMsgEventGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgEventGameCreate.search_key)
}
inline void CMsgEventGameCreate::set_search_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgEventGameCreate.search_key)
}
inline std::string* CMsgEventGameCreate::_internal_mutable_search_key() {
  _has_bits_[0] |= 0x00000001u;
  return search_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgEventGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:CMsgEventGameCreate.search_key)
  if (!_internal_has_search_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return search_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgEventGameCreate::set_allocated_search_key(std::string* search_key) {
  if (search_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  search_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgEventGameCreate.search_key)
}

// optional uint32 client_version = 2;
inline bool CMsgEventGameCreate::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgEventGameCreate::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgEventGameCreate::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgEventGameCreate::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgEventGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.client_version)
  return _internal_client_version();
}
inline void CMsgEventGameCreate::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  client_version_ = value;
}
inline void CMsgEventGameCreate::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.client_version)
}

// optional uint32 difficulty = 3;
inline bool CMsgEventGameCreate::_internal_has_difficulty() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgEventGameCreate::has_difficulty() const {
  return _internal_has_difficulty();
}
inline void CMsgEventGameCreate::clear_difficulty() {
  difficulty_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgEventGameCreate::_internal_difficulty() const {
  return difficulty_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgEventGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.difficulty)
  return _internal_difficulty();
}
inline void CMsgEventGameCreate::_internal_set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  difficulty_ = value;
}
inline void CMsgEventGameCreate::set_difficulty(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_difficulty(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.difficulty)
}

// optional string game_mode = 4;
inline bool CMsgEventGameCreate::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgEventGameCreate::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CMsgEventGameCreate::clear_game_mode() {
  game_mode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgEventGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.game_mode)
  return _internal_game_mode();
}
inline void CMsgEventGameCreate::set_game_mode(const std::string& value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.game_mode)
}
inline std::string* CMsgEventGameCreate::mutable_game_mode() {
  // @@protoc_insertion_point(field_mutable:CMsgEventGameCreate.game_mode)
  return _internal_mutable_game_mode();
}
inline const std::string& CMsgEventGameCreate::_internal_game_mode() const {
  return game_mode_.Get();
}
inline void CMsgEventGameCreate::_internal_set_game_mode(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgEventGameCreate::set_game_mode(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgEventGameCreate.game_mode)
}
inline void CMsgEventGameCreate::set_game_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgEventGameCreate.game_mode)
}
inline void CMsgEventGameCreate::set_game_mode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  game_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgEventGameCreate.game_mode)
}
inline std::string* CMsgEventGameCreate::_internal_mutable_game_mode() {
  _has_bits_[0] |= 0x00000002u;
  return game_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgEventGameCreate::release_game_mode() {
  // @@protoc_insertion_point(field_release:CMsgEventGameCreate.game_mode)
  if (!_internal_has_game_mode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return game_mode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgEventGameCreate::set_allocated_game_mode(std::string* game_mode) {
  if (game_mode != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgEventGameCreate.game_mode)
}

// optional string map = 5;
inline bool CMsgEventGameCreate::_internal_has_map() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgEventGameCreate::has_map() const {
  return _internal_has_map();
}
inline void CMsgEventGameCreate::clear_map() {
  map_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgEventGameCreate::map() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.map)
  return _internal_map();
}
inline void CMsgEventGameCreate::set_map(const std::string& value) {
  _internal_set_map(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.map)
}
inline std::string* CMsgEventGameCreate::mutable_map() {
  // @@protoc_insertion_point(field_mutable:CMsgEventGameCreate.map)
  return _internal_mutable_map();
}
inline const std::string& CMsgEventGameCreate::_internal_map() const {
  return map_.Get();
}
inline void CMsgEventGameCreate::_internal_set_map(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgEventGameCreate::set_map(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  map_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgEventGameCreate.map)
}
inline void CMsgEventGameCreate::set_map(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgEventGameCreate.map)
}
inline void CMsgEventGameCreate::set_map(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  map_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgEventGameCreate.map)
}
inline std::string* CMsgEventGameCreate::_internal_mutable_map() {
  _has_bits_[0] |= 0x00000004u;
  return map_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgEventGameCreate::release_map() {
  // @@protoc_insertion_point(field_release:CMsgEventGameCreate.map)
  if (!_internal_has_map()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return map_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgEventGameCreate::set_allocated_map(std::string* map) {
  if (map != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  map_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgEventGameCreate.map)
}

// optional uint64 custom_game_id = 7;
inline bool CMsgEventGameCreate::_internal_has_custom_game_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgEventGameCreate::has_custom_game_id() const {
  return _internal_has_custom_game_id();
}
inline void CMsgEventGameCreate::clear_custom_game_id() {
  custom_game_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgEventGameCreate::_internal_custom_game_id() const {
  return custom_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgEventGameCreate::custom_game_id() const {
  // @@protoc_insertion_point(field_get:CMsgEventGameCreate.custom_game_id)
  return _internal_custom_game_id();
}
inline void CMsgEventGameCreate::_internal_set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  custom_game_id_ = value;
}
inline void CMsgEventGameCreate::set_custom_game_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_custom_game_id(value);
  // @@protoc_insertion_point(field_set:CMsgEventGameCreate.custom_game_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPartyMemberSetCoach

// optional bool wants_coach = 1;
inline bool CMsgDOTAPartyMemberSetCoach::_internal_has_wants_coach() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPartyMemberSetCoach::has_wants_coach() const {
  return _internal_has_wants_coach();
}
inline void CMsgDOTAPartyMemberSetCoach::clear_wants_coach() {
  wants_coach_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTAPartyMemberSetCoach::_internal_wants_coach() const {
  return wants_coach_;
}
inline bool CMsgDOTAPartyMemberSetCoach::wants_coach() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPartyMemberSetCoach.wants_coach)
  return _internal_wants_coach();
}
inline void CMsgDOTAPartyMemberSetCoach::_internal_set_wants_coach(bool value) {
  _has_bits_[0] |= 0x00000001u;
  wants_coach_ = value;
}
inline void CMsgDOTAPartyMemberSetCoach::set_wants_coach(bool value) {
  _internal_set_wants_coach(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPartyMemberSetCoach.wants_coach)
}

// -------------------------------------------------------------------

// CMsgDOTASetGroupLeader

// optional fixed64 new_leader_steamid = 1;
inline bool CMsgDOTASetGroupLeader::_internal_has_new_leader_steamid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASetGroupLeader::has_new_leader_steamid() const {
  return _internal_has_new_leader_steamid();
}
inline void CMsgDOTASetGroupLeader::clear_new_leader_steamid() {
  new_leader_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTASetGroupLeader::_internal_new_leader_steamid() const {
  return new_leader_steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTASetGroupLeader::new_leader_steamid() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetGroupLeader.new_leader_steamid)
  return _internal_new_leader_steamid();
}
inline void CMsgDOTASetGroupLeader::_internal_set_new_leader_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  new_leader_steamid_ = value;
}
inline void CMsgDOTASetGroupLeader::set_new_leader_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_new_leader_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASetGroupLeader.new_leader_steamid)
}

// -------------------------------------------------------------------

// CMsgDOTACancelGroupInvites

// repeated fixed64 invited_steamids = 1;
inline int CMsgDOTACancelGroupInvites::_internal_invited_steamids_size() const {
  return invited_steamids_.size();
}
inline int CMsgDOTACancelGroupInvites::invited_steamids_size() const {
  return _internal_invited_steamids_size();
}
inline void CMsgDOTACancelGroupInvites::clear_invited_steamids() {
  invited_steamids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTACancelGroupInvites::_internal_invited_steamids(int index) const {
  return invited_steamids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTACancelGroupInvites::invited_steamids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTACancelGroupInvites.invited_steamids)
  return _internal_invited_steamids(index);
}
inline void CMsgDOTACancelGroupInvites::set_invited_steamids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  invited_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTACancelGroupInvites.invited_steamids)
}
inline void CMsgDOTACancelGroupInvites::_internal_add_invited_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  invited_steamids_.Add(value);
}
inline void CMsgDOTACancelGroupInvites::add_invited_steamids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_invited_steamids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTACancelGroupInvites.invited_steamids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgDOTACancelGroupInvites::_internal_invited_steamids() const {
  return invited_steamids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgDOTACancelGroupInvites::invited_steamids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTACancelGroupInvites.invited_steamids)
  return _internal_invited_steamids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgDOTACancelGroupInvites::_internal_mutable_invited_steamids() {
  return &invited_steamids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgDOTACancelGroupInvites::mutable_invited_steamids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTACancelGroupInvites.invited_steamids)
  return _internal_mutable_invited_steamids();
}

// repeated fixed64 invited_groupids = 2;
inline int CMsgDOTACancelGroupInvites::_internal_invited_groupids_size() const {
  return invited_groupids_.size();
}
inline int CMsgDOTACancelGroupInvites::invited_groupids_size() const {
  return _internal_invited_groupids_size();
}
inline void CMsgDOTACancelGroupInvites::clear_invited_groupids() {
  invited_groupids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTACancelGroupInvites::_internal_invited_groupids(int index) const {
  return invited_groupids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTACancelGroupInvites::invited_groupids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTACancelGroupInvites.invited_groupids)
  return _internal_invited_groupids(index);
}
inline void CMsgDOTACancelGroupInvites::set_invited_groupids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  invited_groupids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTACancelGroupInvites.invited_groupids)
}
inline void CMsgDOTACancelGroupInvites::_internal_add_invited_groupids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  invited_groupids_.Add(value);
}
inline void CMsgDOTACancelGroupInvites::add_invited_groupids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_invited_groupids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTACancelGroupInvites.invited_groupids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgDOTACancelGroupInvites::_internal_invited_groupids() const {
  return invited_groupids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgDOTACancelGroupInvites::invited_groupids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTACancelGroupInvites.invited_groupids)
  return _internal_invited_groupids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgDOTACancelGroupInvites::_internal_mutable_invited_groupids() {
  return &invited_groupids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgDOTACancelGroupInvites::mutable_invited_groupids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTACancelGroupInvites.invited_groupids)
  return _internal_mutable_invited_groupids();
}

// -------------------------------------------------------------------

// CMsgDOTASetGroupOpenStatus

// optional bool open = 1;
inline bool CMsgDOTASetGroupOpenStatus::_internal_has_open() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTASetGroupOpenStatus::has_open() const {
  return _internal_has_open();
}
inline void CMsgDOTASetGroupOpenStatus::clear_open() {
  open_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool CMsgDOTASetGroupOpenStatus::_internal_open() const {
  return open_;
}
inline bool CMsgDOTASetGroupOpenStatus::open() const {
  // @@protoc_insertion_point(field_get:CMsgDOTASetGroupOpenStatus.open)
  return _internal_open();
}
inline void CMsgDOTASetGroupOpenStatus::_internal_set_open(bool value) {
  _has_bits_[0] |= 0x00000001u;
  open_ = value;
}
inline void CMsgDOTASetGroupOpenStatus::set_open(bool value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:CMsgDOTASetGroupOpenStatus.open)
}

// -------------------------------------------------------------------

// CMsgDOTAGroupMergeInvite

// optional fixed64 other_group_id = 1;
inline bool CMsgDOTAGroupMergeInvite::_internal_has_other_group_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAGroupMergeInvite::has_other_group_id() const {
  return _internal_has_other_group_id();
}
inline void CMsgDOTAGroupMergeInvite::clear_other_group_id() {
  other_group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAGroupMergeInvite::_internal_other_group_id() const {
  return other_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAGroupMergeInvite::other_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeInvite.other_group_id)
  return _internal_other_group_id();
}
inline void CMsgDOTAGroupMergeInvite::_internal_set_other_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  other_group_id_ = value;
}
inline void CMsgDOTAGroupMergeInvite::set_other_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_other_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeInvite.other_group_id)
}

// -------------------------------------------------------------------

// CMsgDOTAGroupMergeResponse

// optional fixed64 initiator_group_id = 1;
inline bool CMsgDOTAGroupMergeResponse::_internal_has_initiator_group_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAGroupMergeResponse::has_initiator_group_id() const {
  return _internal_has_initiator_group_id();
}
inline void CMsgDOTAGroupMergeResponse::clear_initiator_group_id() {
  initiator_group_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAGroupMergeResponse::_internal_initiator_group_id() const {
  return initiator_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAGroupMergeResponse::initiator_group_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeResponse.initiator_group_id)
  return _internal_initiator_group_id();
}
inline void CMsgDOTAGroupMergeResponse::_internal_set_initiator_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  initiator_group_id_ = value;
}
inline void CMsgDOTAGroupMergeResponse::set_initiator_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_initiator_group_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeResponse.initiator_group_id)
}

// optional bool accept = 2;
inline bool CMsgDOTAGroupMergeResponse::_internal_has_accept() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAGroupMergeResponse::has_accept() const {
  return _internal_has_accept();
}
inline void CMsgDOTAGroupMergeResponse::clear_accept() {
  accept_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDOTAGroupMergeResponse::_internal_accept() const {
  return accept_;
}
inline bool CMsgDOTAGroupMergeResponse::accept() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeResponse.accept)
  return _internal_accept();
}
inline void CMsgDOTAGroupMergeResponse::_internal_set_accept(bool value) {
  _has_bits_[0] |= 0x00000002u;
  accept_ = value;
}
inline void CMsgDOTAGroupMergeResponse::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeResponse.accept)
}

// -------------------------------------------------------------------

// CMsgDOTAGroupMergeReply

// optional .EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
inline bool CMsgDOTAGroupMergeReply::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAGroupMergeReply::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAGroupMergeReply::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::EDOTAGroupMergeResult CMsgDOTAGroupMergeReply::_internal_result() const {
  return static_cast< ::EDOTAGroupMergeResult >(result_);
}
inline ::EDOTAGroupMergeResult CMsgDOTAGroupMergeReply::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAGroupMergeReply.result)
  return _internal_result();
}
inline void CMsgDOTAGroupMergeReply::_internal_set_result(::EDOTAGroupMergeResult value) {
  assert(::EDOTAGroupMergeResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAGroupMergeReply::set_result(::EDOTAGroupMergeResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAGroupMergeReply.result)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyGameDetails_Team

// optional uint32 team_id = 1;
inline bool CMsgSpectatorLobbyGameDetails_Team::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails_Team::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails_Team::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.Team.team_id)
  return _internal_team_id();
}
inline void CMsgSpectatorLobbyGameDetails_Team::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_id_ = value;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.Team.team_id)
}

// optional string team_name = 2;
inline bool CMsgSpectatorLobbyGameDetails_Team::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails_Team::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSpectatorLobbyGameDetails_Team::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.Team.team_name)
  return _internal_team_name();
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline std::string* CMsgSpectatorLobbyGameDetails_Team::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.Team.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgSpectatorLobbyGameDetails_Team::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgSpectatorLobbyGameDetails_Team::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyGameDetails.Team.team_name)
}
inline std::string* CMsgSpectatorLobbyGameDetails_Team::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSpectatorLobbyGameDetails_Team::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyGameDetails.Team.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.Team.team_name)
}

// optional fixed64 team_logo = 3;
inline bool CMsgSpectatorLobbyGameDetails_Team::_internal_has_team_logo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails_Team::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CMsgSpectatorLobbyGameDetails_Team::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyGameDetails_Team::_internal_team_logo() const {
  return team_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyGameDetails_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.Team.team_logo)
  return _internal_team_logo();
}
inline void CMsgSpectatorLobbyGameDetails_Team::_internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  team_logo_ = value;
}
inline void CMsgSpectatorLobbyGameDetails_Team::set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.Team.team_logo)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyGameDetails

// optional uint32 language = 1;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_language() const {
  return _internal_has_language();
}
inline void CMsgSpectatorLobbyGameDetails::clear_language() {
  language_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::_internal_language() const {
  return language_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::language() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.language)
  return _internal_language();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_language(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  language_ = value;
}
inline void CMsgSpectatorLobbyGameDetails::set_language(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.language)
}

// optional uint64 match_id = 2;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgSpectatorLobbyGameDetails::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyGameDetails::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyGameDetails::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.match_id)
  return _internal_match_id();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  match_id_ = value;
}
inline void CMsgSpectatorLobbyGameDetails::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.match_id)
}

// optional fixed64 server_steam_id = 3;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_server_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgSpectatorLobbyGameDetails::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyGameDetails::_internal_server_steam_id() const {
  return server_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyGameDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  server_steam_id_ = value;
}
inline void CMsgSpectatorLobbyGameDetails::set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.server_steam_id)
}

// optional string stream_url = 4;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_stream_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_stream_url() const {
  return _internal_has_stream_url();
}
inline void CMsgSpectatorLobbyGameDetails::clear_stream_url() {
  stream_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSpectatorLobbyGameDetails::stream_url() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.stream_url)
  return _internal_stream_url();
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(const std::string& value) {
  _internal_set_stream_url(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline std::string* CMsgSpectatorLobbyGameDetails::mutable_stream_url() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.stream_url)
  return _internal_mutable_stream_url();
}
inline const std::string& CMsgSpectatorLobbyGameDetails::_internal_stream_url() const {
  return stream_url_.Get();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_stream_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  stream_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stream_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stream_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyGameDetails.stream_url)
}
inline std::string* CMsgSpectatorLobbyGameDetails::_internal_mutable_stream_url() {
  _has_bits_[0] |= 0x00000001u;
  return stream_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSpectatorLobbyGameDetails::release_stream_url() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyGameDetails.stream_url)
  if (!_internal_has_stream_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stream_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_stream_url(std::string* stream_url) {
  if (stream_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stream_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.stream_url)
}

// optional string stream_name = 5;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_stream_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_stream_name() const {
  return _internal_has_stream_name();
}
inline void CMsgSpectatorLobbyGameDetails::clear_stream_name() {
  stream_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSpectatorLobbyGameDetails::stream_name() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.stream_name)
  return _internal_stream_name();
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(const std::string& value) {
  _internal_set_stream_name(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline std::string* CMsgSpectatorLobbyGameDetails::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.stream_name)
  return _internal_mutable_stream_name();
}
inline const std::string& CMsgSpectatorLobbyGameDetails::_internal_stream_name() const {
  return stream_name_.Get();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_stream_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  stream_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline void CMsgSpectatorLobbyGameDetails::set_stream_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyGameDetails.stream_name)
}
inline std::string* CMsgSpectatorLobbyGameDetails::_internal_mutable_stream_name() {
  _has_bits_[0] |= 0x00000002u;
  return stream_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSpectatorLobbyGameDetails::release_stream_name() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyGameDetails.stream_name)
  if (!_internal_has_stream_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return stream_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_stream_name(std::string* stream_name) {
  if (stream_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stream_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.stream_name)
}

// optional uint32 league_id = 6;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgSpectatorLobbyGameDetails::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.league_id)
  return _internal_league_id();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  league_id_ = value;
}
inline void CMsgSpectatorLobbyGameDetails::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.league_id)
}

// optional uint32 series_type = 7;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_series_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgSpectatorLobbyGameDetails::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::_internal_series_type() const {
  return series_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.series_type)
  return _internal_series_type();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  series_type_ = value;
}
inline void CMsgSpectatorLobbyGameDetails::set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.series_type)
}

// optional uint32 series_game = 8;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_series_game() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_series_game() const {
  return _internal_has_series_game();
}
inline void CMsgSpectatorLobbyGameDetails::clear_series_game() {
  series_game_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::_internal_series_game() const {
  return series_game_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyGameDetails::series_game() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.series_game)
  return _internal_series_game();
}
inline void CMsgSpectatorLobbyGameDetails::_internal_set_series_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  series_game_ = value;
}
inline void CMsgSpectatorLobbyGameDetails::set_series_game(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_game(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyGameDetails.series_game)
}

// optional .CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_radiant_team() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || radiant_team_ != nullptr);
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_radiant_team() const {
  return _internal_has_radiant_team();
}
inline void CMsgSpectatorLobbyGameDetails::clear_radiant_team() {
  if (radiant_team_ != nullptr) radiant_team_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::_internal_radiant_team() const {
  const ::CMsgSpectatorLobbyGameDetails_Team* p = radiant_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSpectatorLobbyGameDetails_Team&>(
      ::_CMsgSpectatorLobbyGameDetails_Team_default_instance_);
}
inline const ::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::radiant_team() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.radiant_team)
  return _internal_radiant_team();
}
inline void CMsgSpectatorLobbyGameDetails::unsafe_arena_set_allocated_radiant_team(
    ::CMsgSpectatorLobbyGameDetails_Team* radiant_team) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radiant_team_);
  }
  radiant_team_ = radiant_team;
  if (radiant_team) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSpectatorLobbyGameDetails.radiant_team)
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::release_radiant_team() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSpectatorLobbyGameDetails_Team* temp = radiant_team_;
  radiant_team_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::unsafe_arena_release_radiant_team() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyGameDetails.radiant_team)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSpectatorLobbyGameDetails_Team* temp = radiant_team_;
  radiant_team_ = nullptr;
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::_internal_mutable_radiant_team() {
  _has_bits_[0] |= 0x00000004u;
  if (radiant_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSpectatorLobbyGameDetails_Team>(GetArena());
    radiant_team_ = p;
  }
  return radiant_team_;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::mutable_radiant_team() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.radiant_team)
  return _internal_mutable_radiant_team();
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_radiant_team(::CMsgSpectatorLobbyGameDetails_Team* radiant_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete radiant_team_;
  }
  if (radiant_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(radiant_team);
    if (message_arena != submessage_arena) {
      radiant_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radiant_team, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radiant_team_ = radiant_team;
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.radiant_team)
}

// optional .CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
inline bool CMsgSpectatorLobbyGameDetails::_internal_has_dire_team() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || dire_team_ != nullptr);
  return value;
}
inline bool CMsgSpectatorLobbyGameDetails::has_dire_team() const {
  return _internal_has_dire_team();
}
inline void CMsgSpectatorLobbyGameDetails::clear_dire_team() {
  if (dire_team_ != nullptr) dire_team_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::_internal_dire_team() const {
  const ::CMsgSpectatorLobbyGameDetails_Team* p = dire_team_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSpectatorLobbyGameDetails_Team&>(
      ::_CMsgSpectatorLobbyGameDetails_Team_default_instance_);
}
inline const ::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::dire_team() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyGameDetails.dire_team)
  return _internal_dire_team();
}
inline void CMsgSpectatorLobbyGameDetails::unsafe_arena_set_allocated_dire_team(
    ::CMsgSpectatorLobbyGameDetails_Team* dire_team) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dire_team_);
  }
  dire_team_ = dire_team;
  if (dire_team) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSpectatorLobbyGameDetails.dire_team)
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::release_dire_team() {
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgSpectatorLobbyGameDetails_Team* temp = dire_team_;
  dire_team_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::unsafe_arena_release_dire_team() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyGameDetails.dire_team)
  _has_bits_[0] &= ~0x00000008u;
  ::CMsgSpectatorLobbyGameDetails_Team* temp = dire_team_;
  dire_team_ = nullptr;
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::_internal_mutable_dire_team() {
  _has_bits_[0] |= 0x00000008u;
  if (dire_team_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSpectatorLobbyGameDetails_Team>(GetArena());
    dire_team_ = p;
  }
  return dire_team_;
}
inline ::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::mutable_dire_team() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyGameDetails.dire_team)
  return _internal_mutable_dire_team();
}
inline void CMsgSpectatorLobbyGameDetails::set_allocated_dire_team(::CMsgSpectatorLobbyGameDetails_Team* dire_team) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dire_team_;
  }
  if (dire_team) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dire_team);
    if (message_arena != submessage_arena) {
      dire_team = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dire_team, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dire_team_ = dire_team;
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyGameDetails.dire_team)
}

// -------------------------------------------------------------------

// CMsgSetSpectatorLobbyDetails

// optional uint64 lobby_id = 1;
inline bool CMsgSetSpectatorLobbyDetails::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSetSpectatorLobbyDetails::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgSetSpectatorLobbyDetails::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSetSpectatorLobbyDetails::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSetSpectatorLobbyDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgSetSpectatorLobbyDetails::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  lobby_id_ = value;
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgSetSpectatorLobbyDetails.lobby_id)
}

// optional string lobby_name = 2;
inline bool CMsgSetSpectatorLobbyDetails::_internal_has_lobby_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSetSpectatorLobbyDetails::has_lobby_name() const {
  return _internal_has_lobby_name();
}
inline void CMsgSetSpectatorLobbyDetails::clear_lobby_name() {
  lobby_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSetSpectatorLobbyDetails::lobby_name() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.lobby_name)
  return _internal_lobby_name();
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(const std::string& value) {
  _internal_set_lobby_name(value);
  // @@protoc_insertion_point(field_set:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline std::string* CMsgSetSpectatorLobbyDetails::mutable_lobby_name() {
  // @@protoc_insertion_point(field_mutable:CMsgSetSpectatorLobbyDetails.lobby_name)
  return _internal_mutable_lobby_name();
}
inline const std::string& CMsgSetSpectatorLobbyDetails::_internal_lobby_name() const {
  return lobby_name_.Get();
}
inline void CMsgSetSpectatorLobbyDetails::_internal_set_lobby_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline void CMsgSetSpectatorLobbyDetails::set_lobby_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lobby_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSetSpectatorLobbyDetails.lobby_name)
}
inline std::string* CMsgSetSpectatorLobbyDetails::_internal_mutable_lobby_name() {
  _has_bits_[0] |= 0x00000001u;
  return lobby_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSetSpectatorLobbyDetails::release_lobby_name() {
  // @@protoc_insertion_point(field_release:CMsgSetSpectatorLobbyDetails.lobby_name)
  if (!_internal_has_lobby_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lobby_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSetSpectatorLobbyDetails::set_allocated_lobby_name(std::string* lobby_name) {
  if (lobby_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lobby_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lobby_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSetSpectatorLobbyDetails.lobby_name)
}

// optional string pass_key = 3;
inline bool CMsgSetSpectatorLobbyDetails::_internal_has_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgSetSpectatorLobbyDetails::has_pass_key() const {
  return _internal_has_pass_key();
}
inline void CMsgSetSpectatorLobbyDetails::clear_pass_key() {
  pass_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSetSpectatorLobbyDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.pass_key)
  return _internal_pass_key();
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(const std::string& value) {
  _internal_set_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline std::string* CMsgSetSpectatorLobbyDetails::mutable_pass_key() {
  // @@protoc_insertion_point(field_mutable:CMsgSetSpectatorLobbyDetails.pass_key)
  return _internal_mutable_pass_key();
}
inline const std::string& CMsgSetSpectatorLobbyDetails::_internal_pass_key() const {
  return pass_key_.Get();
}
inline void CMsgSetSpectatorLobbyDetails::_internal_set_pass_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline void CMsgSetSpectatorLobbyDetails::set_pass_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  pass_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSetSpectatorLobbyDetails.pass_key)
}
inline std::string* CMsgSetSpectatorLobbyDetails::_internal_mutable_pass_key() {
  _has_bits_[0] |= 0x00000002u;
  return pass_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSetSpectatorLobbyDetails::release_pass_key() {
  // @@protoc_insertion_point(field_release:CMsgSetSpectatorLobbyDetails.pass_key)
  if (!_internal_has_pass_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return pass_key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSetSpectatorLobbyDetails::set_allocated_pass_key(std::string* pass_key) {
  if (pass_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pass_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pass_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSetSpectatorLobbyDetails.pass_key)
}

// optional .CMsgSpectatorLobbyGameDetails game_details = 4;
inline bool CMsgSetSpectatorLobbyDetails::_internal_has_game_details() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || game_details_ != nullptr);
  return value;
}
inline bool CMsgSetSpectatorLobbyDetails::has_game_details() const {
  return _internal_has_game_details();
}
inline void CMsgSetSpectatorLobbyDetails::clear_game_details() {
  if (game_details_ != nullptr) game_details_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSpectatorLobbyGameDetails& CMsgSetSpectatorLobbyDetails::_internal_game_details() const {
  const ::CMsgSpectatorLobbyGameDetails* p = game_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSpectatorLobbyGameDetails&>(
      ::_CMsgSpectatorLobbyGameDetails_default_instance_);
}
inline const ::CMsgSpectatorLobbyGameDetails& CMsgSetSpectatorLobbyDetails::game_details() const {
  // @@protoc_insertion_point(field_get:CMsgSetSpectatorLobbyDetails.game_details)
  return _internal_game_details();
}
inline void CMsgSetSpectatorLobbyDetails::unsafe_arena_set_allocated_game_details(
    ::CMsgSpectatorLobbyGameDetails* game_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_details_);
  }
  game_details_ = game_details;
  if (game_details) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSetSpectatorLobbyDetails.game_details)
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::release_game_details() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::unsafe_arena_release_game_details() {
  // @@protoc_insertion_point(field_release:CMsgSetSpectatorLobbyDetails.game_details)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = nullptr;
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::_internal_mutable_game_details() {
  _has_bits_[0] |= 0x00000004u;
  if (game_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSpectatorLobbyGameDetails>(GetArena());
    game_details_ = p;
  }
  return game_details_;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::mutable_game_details() {
  // @@protoc_insertion_point(field_mutable:CMsgSetSpectatorLobbyDetails.game_details)
  return _internal_mutable_game_details();
}
inline void CMsgSetSpectatorLobbyDetails::set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete game_details_;
  }
  if (game_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_details);
    if (message_arena != submessage_arena) {
      game_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  game_details_ = game_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgSetSpectatorLobbyDetails.game_details)
}

// -------------------------------------------------------------------

// CMsgCreateSpectatorLobby

// optional uint32 client_version = 1;
inline bool CMsgCreateSpectatorLobby::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgCreateSpectatorLobby::has_client_version() const {
  return _internal_has_client_version();
}
inline void CMsgCreateSpectatorLobby::clear_client_version() {
  client_version_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCreateSpectatorLobby::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgCreateSpectatorLobby::client_version() const {
  // @@protoc_insertion_point(field_get:CMsgCreateSpectatorLobby.client_version)
  return _internal_client_version();
}
inline void CMsgCreateSpectatorLobby::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_version_ = value;
}
inline void CMsgCreateSpectatorLobby::set_client_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:CMsgCreateSpectatorLobby.client_version)
}

// optional .CMsgSetSpectatorLobbyDetails details = 2;
inline bool CMsgCreateSpectatorLobby::_internal_has_details() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || details_ != nullptr);
  return value;
}
inline bool CMsgCreateSpectatorLobby::has_details() const {
  return _internal_has_details();
}
inline void CMsgCreateSpectatorLobby::clear_details() {
  if (details_ != nullptr) details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSetSpectatorLobbyDetails& CMsgCreateSpectatorLobby::_internal_details() const {
  const ::CMsgSetSpectatorLobbyDetails* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSetSpectatorLobbyDetails&>(
      ::_CMsgSetSpectatorLobbyDetails_default_instance_);
}
inline const ::CMsgSetSpectatorLobbyDetails& CMsgCreateSpectatorLobby::details() const {
  // @@protoc_insertion_point(field_get:CMsgCreateSpectatorLobby.details)
  return _internal_details();
}
inline void CMsgCreateSpectatorLobby::unsafe_arena_set_allocated_details(
    ::CMsgSetSpectatorLobbyDetails* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgCreateSpectatorLobby.details)
}
inline ::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::release_details() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSetSpectatorLobbyDetails* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:CMsgCreateSpectatorLobby.details)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSetSpectatorLobbyDetails* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::_internal_mutable_details() {
  _has_bits_[0] |= 0x00000001u;
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSetSpectatorLobbyDetails>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::mutable_details() {
  // @@protoc_insertion_point(field_mutable:CMsgCreateSpectatorLobby.details)
  return _internal_mutable_details();
}
inline void CMsgCreateSpectatorLobby::set_allocated_details(::CMsgSetSpectatorLobbyDetails* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:CMsgCreateSpectatorLobby.details)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyList

// -------------------------------------------------------------------

// CMsgSpectatorLobbyListResponse_SpectatorLobby

// optional uint64 lobby_id = 1;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_has_lobby_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_lobby_id() const {
  return _internal_has_lobby_id();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_lobby_id() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_lobby_id() const {
  return lobby_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSpectatorLobbyListResponse_SpectatorLobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.lobby_id)
  return _internal_lobby_id();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  lobby_id_ = value;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_lobby_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lobby_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.lobby_id)
}

// optional string game_name = 2;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_has_game_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_game_name() const {
  return _internal_has_game_name();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_game_name() {
  game_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSpectatorLobbyListResponse_SpectatorLobby::game_name() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  return _internal_game_name();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const std::string& value) {
  _internal_set_game_name(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::mutable_game_name() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  return _internal_mutable_game_name();
}
inline const std::string& CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_game_name() const {
  return game_name_.Get();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_set_game_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  game_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
inline std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_mutable_game_name() {
  _has_bits_[0] |= 0x00000001u;
  return game_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::release_game_name() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  if (!_internal_has_game_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return game_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_allocated_game_name(std::string* game_name) {
  if (game_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  game_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}

// optional bool requires_pass_key = 3;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_has_requires_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_requires_pass_key() const {
  return _internal_has_requires_pass_key();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_requires_pass_key() {
  requires_pass_key_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_requires_pass_key() const {
  return requires_pass_key_;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.requires_pass_key)
  return _internal_requires_pass_key();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_set_requires_pass_key(bool value) {
  _has_bits_[0] |= 0x00000008u;
  requires_pass_key_ = value;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_requires_pass_key(bool value) {
  _internal_set_requires_pass_key(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.requires_pass_key)
}

// optional uint32 leader_account_id = 4;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_has_leader_account_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_leader_account_id() const {
  return _internal_has_leader_account_id();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_leader_account_id() {
  leader_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_leader_account_id() const {
  return leader_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.leader_account_id)
  return _internal_leader_account_id();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  leader_account_id_ = value;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.leader_account_id)
}

// optional uint32 member_count = 5;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_has_member_count() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_member_count() const {
  return _internal_has_member_count();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_member_count() {
  member_count_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_member_count() const {
  return member_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::member_count() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.member_count)
  return _internal_member_count();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  member_count_ = value;
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_member_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_member_count(value);
  // @@protoc_insertion_point(field_set:CMsgSpectatorLobbyListResponse.SpectatorLobby.member_count)
}

// optional .CMsgSpectatorLobbyGameDetails game_details = 7;
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_has_game_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || game_details_ != nullptr);
  return value;
}
inline bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_game_details() const {
  return _internal_has_game_details();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_game_details() {
  if (game_details_ != nullptr) game_details_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_game_details() const {
  const ::CMsgSpectatorLobbyGameDetails* p = game_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSpectatorLobbyGameDetails&>(
      ::_CMsgSpectatorLobbyGameDetails_default_instance_);
}
inline const ::CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyListResponse_SpectatorLobby::game_details() const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  return _internal_game_details();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::unsafe_arena_set_allocated_game_details(
    ::CMsgSpectatorLobbyGameDetails* game_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(game_details_);
  }
  game_details_ = game_details;
  if (game_details) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::release_game_details() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::unsafe_arena_release_game_details() {
  // @@protoc_insertion_point(field_release:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = nullptr;
  return temp;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::_internal_mutable_game_details() {
  _has_bits_[0] |= 0x00000002u;
  if (game_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSpectatorLobbyGameDetails>(GetArena());
    game_details_ = p;
  }
  return game_details_;
}
inline ::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::mutable_game_details() {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  return _internal_mutable_game_details();
}
inline void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_allocated_game_details(::CMsgSpectatorLobbyGameDetails* game_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete game_details_;
  }
  if (game_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_details);
    if (message_arena != submessage_arena) {
      game_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  game_details_ = game_details;
  // @@protoc_insertion_point(field_set_allocated:CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
}

// -------------------------------------------------------------------

// CMsgSpectatorLobbyListResponse

// repeated .CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
inline int CMsgSpectatorLobbyListResponse::_internal_lobbies_size() const {
  return lobbies_.size();
}
inline int CMsgSpectatorLobbyListResponse::lobbies_size() const {
  return _internal_lobbies_size();
}
inline void CMsgSpectatorLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >*
CMsgSpectatorLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:CMsgSpectatorLobbyListResponse.lobbies)
  return &lobbies_;
}
inline const ::CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse::_internal_lobbies(int index) const {
  return lobbies_.Get(index);
}
inline const ::CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSpectatorLobbyListResponse.lobbies)
  return _internal_lobbies(index);
}
inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::_internal_add_lobbies() {
  return lobbies_.Add();
}
inline ::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:CMsgSpectatorLobbyListResponse.lobbies)
  return _internal_add_lobbies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgSpectatorLobbyListResponse_SpectatorLobby >&
CMsgSpectatorLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_;
}

// -------------------------------------------------------------------

// CMsgClientToGCRequestSteamDatagramTicket

// optional fixed64 server_steam_id = 1;
inline bool CMsgClientToGCRequestSteamDatagramTicket::_internal_has_server_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCRequestSteamDatagramTicket::has_server_steam_id() const {
  return _internal_has_server_steam_id();
}
inline void CMsgClientToGCRequestSteamDatagramTicket::clear_server_steam_id() {
  server_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientToGCRequestSteamDatagramTicket::_internal_server_steam_id() const {
  return server_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientToGCRequestSteamDatagramTicket::server_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSteamDatagramTicket.server_steam_id)
  return _internal_server_steam_id();
}
inline void CMsgClientToGCRequestSteamDatagramTicket::_internal_set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  server_steam_id_ = value;
}
inline void CMsgClientToGCRequestSteamDatagramTicket::set_server_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_server_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSteamDatagramTicket.server_steam_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCRequestSteamDatagramTicketResponse

// optional bytes serialized_ticket = 1;
inline bool CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_has_serialized_ticket() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCRequestSteamDatagramTicketResponse::has_serialized_ticket() const {
  return _internal_has_serialized_ticket();
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_serialized_ticket() {
  serialized_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  return _internal_serialized_ticket();
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const std::string& value) {
  _internal_set_serialized_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::mutable_serialized_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  return _internal_mutable_serialized_ticket();
}
inline const std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_serialized_ticket() const {
  return serialized_ticket_.Get();
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_set_serialized_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
inline std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_mutable_serialized_ticket() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::release_serialized_ticket() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  if (!_internal_has_serialized_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return serialized_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_allocated_serialized_ticket(std::string* serialized_ticket) {
  if (serialized_ticket != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}

// optional string message = 2;
inline bool CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCRequestSteamDatagramTicketResponse::has_message() const {
  return _internal_has_message();
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  return _internal_message();
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_message() const {
  return message_.Get();
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
inline std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgClientToGCRequestSteamDatagramTicketResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}

// -------------------------------------------------------------------

// CMsgGCToClientSteamDatagramTicket

// optional fixed32 legacy_time_expiry = 1;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_time_expiry() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_time_expiry() const {
  return _internal_has_legacy_time_expiry();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_time_expiry() {
  legacy_time_expiry_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientSteamDatagramTicket::_internal_legacy_time_expiry() const {
  return legacy_time_expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientSteamDatagramTicket::legacy_time_expiry() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_time_expiry)
  return _internal_legacy_time_expiry();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  legacy_time_expiry_ = value;
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_time_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_time_expiry(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_time_expiry)
}

// optional fixed64 legacy_authorized_steam_id = 2;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_authorized_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_authorized_steam_id() const {
  return _internal_has_legacy_authorized_steam_id();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_authorized_steam_id() {
  legacy_authorized_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToClientSteamDatagramTicket::_internal_legacy_authorized_steam_id() const {
  return legacy_authorized_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToClientSteamDatagramTicket::legacy_authorized_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_authorized_steam_id)
  return _internal_legacy_authorized_steam_id();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  legacy_authorized_steam_id_ = value;
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_authorized_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_authorized_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_authorized_steam_id)
}

// optional fixed32 legacy_authorized_public_ip = 3;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_authorized_public_ip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_authorized_public_ip() const {
  return _internal_has_legacy_authorized_public_ip();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_authorized_public_ip() {
  legacy_authorized_public_ip_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientSteamDatagramTicket::_internal_legacy_authorized_public_ip() const {
  return legacy_authorized_public_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientSteamDatagramTicket::legacy_authorized_public_ip() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_authorized_public_ip)
  return _internal_legacy_authorized_public_ip();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  legacy_authorized_public_ip_ = value;
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_authorized_public_ip(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_authorized_public_ip(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_authorized_public_ip)
}

// optional fixed64 legacy_gameserver_steam_id = 4;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_gameserver_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_gameserver_steam_id() const {
  return _internal_has_legacy_gameserver_steam_id();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_gameserver_steam_id() {
  legacy_gameserver_steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToClientSteamDatagramTicket::_internal_legacy_gameserver_steam_id() const {
  return legacy_gameserver_steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToClientSteamDatagramTicket::legacy_gameserver_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_gameserver_steam_id)
  return _internal_legacy_gameserver_steam_id();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  legacy_gameserver_steam_id_ = value;
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_gameserver_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_gameserver_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_gameserver_steam_id)
}

// optional fixed64 legacy_gameserver_net_id = 5;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_gameserver_net_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_gameserver_net_id() const {
  return _internal_has_legacy_gameserver_net_id();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_gameserver_net_id() {
  legacy_gameserver_net_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToClientSteamDatagramTicket::_internal_legacy_gameserver_net_id() const {
  return legacy_gameserver_net_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgGCToClientSteamDatagramTicket::legacy_gameserver_net_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_gameserver_net_id)
  return _internal_legacy_gameserver_net_id();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  legacy_gameserver_net_id_ = value;
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_gameserver_net_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_legacy_gameserver_net_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_gameserver_net_id)
}

// optional bytes legacy_signature = 6;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_signature() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_signature() const {
  return _internal_has_legacy_signature();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_signature() {
  legacy_signature_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgGCToClientSteamDatagramTicket::legacy_signature() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_signature)
  return _internal_legacy_signature();
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(const std::string& value) {
  _internal_set_legacy_signature(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
inline std::string* CMsgGCToClientSteamDatagramTicket::mutable_legacy_signature() {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientSteamDatagramTicket.legacy_signature)
  return _internal_mutable_legacy_signature();
}
inline const std::string& CMsgGCToClientSteamDatagramTicket::_internal_legacy_signature() const {
  return legacy_signature_.Get();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  legacy_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  legacy_signature_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  legacy_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  legacy_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
inline std::string* CMsgGCToClientSteamDatagramTicket::_internal_mutable_legacy_signature() {
  _has_bits_[0] |= 0x00000001u;
  return legacy_signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgGCToClientSteamDatagramTicket::release_legacy_signature() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientSteamDatagramTicket.legacy_signature)
  if (!_internal_has_legacy_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return legacy_signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgGCToClientSteamDatagramTicket::set_allocated_legacy_signature(std::string* legacy_signature) {
  if (legacy_signature != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  legacy_signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), legacy_signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientSteamDatagramTicket.legacy_signature)
}

// optional uint32 legacy_app_id = 7;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_legacy_app_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_legacy_app_id() const {
  return _internal_has_legacy_app_id();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_app_id() {
  legacy_app_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientSteamDatagramTicket::_internal_legacy_app_id() const {
  return legacy_app_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientSteamDatagramTicket::legacy_app_id() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_app_id)
  return _internal_legacy_app_id();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_legacy_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  legacy_app_id_ = value;
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_app_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_legacy_app_id(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_app_id)
}

// repeated bytes legacy_extra_fields = 8;
inline int CMsgGCToClientSteamDatagramTicket::_internal_legacy_extra_fields_size() const {
  return legacy_extra_fields_.size();
}
inline int CMsgGCToClientSteamDatagramTicket::legacy_extra_fields_size() const {
  return _internal_legacy_extra_fields_size();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_legacy_extra_fields() {
  legacy_extra_fields_.Clear();
}
inline std::string* CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields() {
  // @@protoc_insertion_point(field_add_mutable:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return _internal_add_legacy_extra_fields();
}
inline const std::string& CMsgGCToClientSteamDatagramTicket::_internal_legacy_extra_fields(int index) const {
  return legacy_extra_fields_.Get(index);
}
inline const std::string& CMsgGCToClientSteamDatagramTicket::legacy_extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return _internal_legacy_extra_fields(index);
}
inline std::string* CMsgGCToClientSteamDatagramTicket::mutable_legacy_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return legacy_extra_fields_.Mutable(index);
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  legacy_extra_fields_.Mutable(index)->assign(value);
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  legacy_extra_fields_.Mutable(index)->assign(std::move(value));
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  legacy_extra_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
inline void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, const void* value, size_t size) {
  legacy_extra_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
inline std::string* CMsgGCToClientSteamDatagramTicket::_internal_add_legacy_extra_fields() {
  return legacy_extra_fields_.Add();
}
inline void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(const std::string& value) {
  legacy_extra_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
inline void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(std::string&& value) {
  legacy_extra_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
inline void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  legacy_extra_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
inline void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(const void* value, size_t size) {
  legacy_extra_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CMsgGCToClientSteamDatagramTicket::legacy_extra_fields() const {
  // @@protoc_insertion_point(field_list:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return legacy_extra_fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CMsgGCToClientSteamDatagramTicket::mutable_legacy_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return &legacy_extra_fields_;
}

// optional bytes serialized_ticket = 16;
inline bool CMsgGCToClientSteamDatagramTicket::_internal_has_serialized_ticket() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientSteamDatagramTicket::has_serialized_ticket() const {
  return _internal_has_serialized_ticket();
}
inline void CMsgGCToClientSteamDatagramTicket::clear_serialized_ticket() {
  serialized_ticket_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgGCToClientSteamDatagramTicket::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
  return _internal_serialized_ticket();
}
inline void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(const std::string& value) {
  _internal_set_serialized_ticket(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
inline std::string* CMsgGCToClientSteamDatagramTicket::mutable_serialized_ticket() {
  // @@protoc_insertion_point(field_mutable:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
  return _internal_mutable_serialized_ticket();
}
inline const std::string& CMsgGCToClientSteamDatagramTicket::_internal_serialized_ticket() const {
  return serialized_ticket_.Get();
}
inline void CMsgGCToClientSteamDatagramTicket::_internal_set_serialized_ticket(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
inline void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
inline void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
inline std::string* CMsgGCToClientSteamDatagramTicket::_internal_mutable_serialized_ticket() {
  _has_bits_[0] |= 0x00000002u;
  return serialized_ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgGCToClientSteamDatagramTicket::release_serialized_ticket() {
  // @@protoc_insertion_point(field_release:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
  if (!_internal_has_serialized_ticket()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_ticket_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgGCToClientSteamDatagramTicket::set_allocated_serialized_ticket(std::string* serialized_ticket) {
  if (serialized_ticket != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}

// -------------------------------------------------------------------

// CMsgGCToClientRequestLaneSelection

// -------------------------------------------------------------------

// CMsgGCToClientRequestLaneSelectionResponse

// optional uint32 lane_selection_flags = 1;
inline bool CMsgGCToClientRequestLaneSelectionResponse::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgGCToClientRequestLaneSelectionResponse::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CMsgGCToClientRequestLaneSelectionResponse::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientRequestLaneSelectionResponse::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgGCToClientRequestLaneSelectionResponse::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientRequestLaneSelectionResponse.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CMsgGCToClientRequestLaneSelectionResponse::_internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lane_selection_flags_ = value;
}
inline void CMsgGCToClientRequestLaneSelectionResponse::set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientRequestLaneSelectionResponse.lane_selection_flags)
}

// optional bool high_priority_disabled = 2;
inline bool CMsgGCToClientRequestLaneSelectionResponse::_internal_has_high_priority_disabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgGCToClientRequestLaneSelectionResponse::has_high_priority_disabled() const {
  return _internal_has_high_priority_disabled();
}
inline void CMsgGCToClientRequestLaneSelectionResponse::clear_high_priority_disabled() {
  high_priority_disabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgGCToClientRequestLaneSelectionResponse::_internal_high_priority_disabled() const {
  return high_priority_disabled_;
}
inline bool CMsgGCToClientRequestLaneSelectionResponse::high_priority_disabled() const {
  // @@protoc_insertion_point(field_get:CMsgGCToClientRequestLaneSelectionResponse.high_priority_disabled)
  return _internal_high_priority_disabled();
}
inline void CMsgGCToClientRequestLaneSelectionResponse::_internal_set_high_priority_disabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  high_priority_disabled_ = value;
}
inline void CMsgGCToClientRequestLaneSelectionResponse::set_high_priority_disabled(bool value) {
  _internal_set_high_priority_disabled(value);
  // @@protoc_insertion_point(field_set:CMsgGCToClientRequestLaneSelectionResponse.high_priority_disabled)
}

// -------------------------------------------------------------------

// CMsgGCToClientRequestMMInfo

// -------------------------------------------------------------------

// CMsgClientToGCMMInfo

// optional uint32 lane_selection_flags = 1;
inline bool CMsgClientToGCMMInfo::_internal_has_lane_selection_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCMMInfo::has_lane_selection_flags() const {
  return _internal_has_lane_selection_flags();
}
inline void CMsgClientToGCMMInfo::clear_lane_selection_flags() {
  lane_selection_flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCMMInfo::_internal_lane_selection_flags() const {
  return lane_selection_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCMMInfo::lane_selection_flags() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMMInfo.lane_selection_flags)
  return _internal_lane_selection_flags();
}
inline void CMsgClientToGCMMInfo::_internal_set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lane_selection_flags_ = value;
}
inline void CMsgClientToGCMMInfo::set_lane_selection_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lane_selection_flags(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCMMInfo.lane_selection_flags)
}

// optional bool high_priority_disabled = 2;
inline bool CMsgClientToGCMMInfo::_internal_has_high_priority_disabled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCMMInfo::has_high_priority_disabled() const {
  return _internal_has_high_priority_disabled();
}
inline void CMsgClientToGCMMInfo::clear_high_priority_disabled() {
  high_priority_disabled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgClientToGCMMInfo::_internal_high_priority_disabled() const {
  return high_priority_disabled_;
}
inline bool CMsgClientToGCMMInfo::high_priority_disabled() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCMMInfo.high_priority_disabled)
  return _internal_high_priority_disabled();
}
inline void CMsgClientToGCMMInfo::_internal_set_high_priority_disabled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  high_priority_disabled_ = value;
}
inline void CMsgClientToGCMMInfo::set_high_priority_disabled(bool value) {
  _internal_set_high_priority_disabled(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCMMInfo.high_priority_disabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EStartFindingMatchResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EStartFindingMatchResult>() {
  return ::EStartFindingMatchResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto
