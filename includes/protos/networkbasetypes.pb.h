// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkbasetypes.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_networkbasetypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_networkbasetypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "network_connection.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_networkbasetypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networkbasetypes_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_networkbasetypes_2eproto_metadata_getter(int index);
class CEntityMsg;
struct CEntityMsgDefaultTypeInternal;
extern CEntityMsgDefaultTypeInternal _CEntityMsg_default_instance_;
class CMsgPlayerInfo;
struct CMsgPlayerInfoDefaultTypeInternal;
extern CMsgPlayerInfoDefaultTypeInternal _CMsgPlayerInfo_default_instance_;
class CMsgQAngle;
struct CMsgQAngleDefaultTypeInternal;
extern CMsgQAngleDefaultTypeInternal _CMsgQAngle_default_instance_;
class CMsgRGBA;
struct CMsgRGBADefaultTypeInternal;
extern CMsgRGBADefaultTypeInternal _CMsgRGBA_default_instance_;
class CMsgVector;
struct CMsgVectorDefaultTypeInternal;
extern CMsgVectorDefaultTypeInternal _CMsgVector_default_instance_;
class CMsgVector2D;
struct CMsgVector2DDefaultTypeInternal;
extern CMsgVector2DDefaultTypeInternal _CMsgVector2D_default_instance_;
class CMsg_CVars;
struct CMsg_CVarsDefaultTypeInternal;
extern CMsg_CVarsDefaultTypeInternal _CMsg_CVars_default_instance_;
class CMsg_CVars_CVar;
struct CMsg_CVars_CVarDefaultTypeInternal;
extern CMsg_CVars_CVarDefaultTypeInternal _CMsg_CVars_CVar_default_instance_;
class CNETMsg_Disconnect;
struct CNETMsg_DisconnectDefaultTypeInternal;
extern CNETMsg_DisconnectDefaultTypeInternal _CNETMsg_Disconnect_default_instance_;
class CNETMsg_NOP;
struct CNETMsg_NOPDefaultTypeInternal;
extern CNETMsg_NOPDefaultTypeInternal _CNETMsg_NOP_default_instance_;
class CNETMsg_SetConVar;
struct CNETMsg_SetConVarDefaultTypeInternal;
extern CNETMsg_SetConVarDefaultTypeInternal _CNETMsg_SetConVar_default_instance_;
class CNETMsg_SignonState;
struct CNETMsg_SignonStateDefaultTypeInternal;
extern CNETMsg_SignonStateDefaultTypeInternal _CNETMsg_SignonState_default_instance_;
class CNETMsg_SpawnGroup_Load;
struct CNETMsg_SpawnGroup_LoadDefaultTypeInternal;
extern CNETMsg_SpawnGroup_LoadDefaultTypeInternal _CNETMsg_SpawnGroup_Load_default_instance_;
class CNETMsg_SpawnGroup_LoadCompleted;
struct CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal;
extern CNETMsg_SpawnGroup_LoadCompletedDefaultTypeInternal _CNETMsg_SpawnGroup_LoadCompleted_default_instance_;
class CNETMsg_SpawnGroup_ManifestUpdate;
struct CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal;
extern CNETMsg_SpawnGroup_ManifestUpdateDefaultTypeInternal _CNETMsg_SpawnGroup_ManifestUpdate_default_instance_;
class CNETMsg_SpawnGroup_SetCreationTick;
struct CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal;
extern CNETMsg_SpawnGroup_SetCreationTickDefaultTypeInternal _CNETMsg_SpawnGroup_SetCreationTick_default_instance_;
class CNETMsg_SpawnGroup_Unload;
struct CNETMsg_SpawnGroup_UnloadDefaultTypeInternal;
extern CNETMsg_SpawnGroup_UnloadDefaultTypeInternal _CNETMsg_SpawnGroup_Unload_default_instance_;
class CNETMsg_SplitScreenUser;
struct CNETMsg_SplitScreenUserDefaultTypeInternal;
extern CNETMsg_SplitScreenUserDefaultTypeInternal _CNETMsg_SplitScreenUser_default_instance_;
class CNETMsg_StringCmd;
struct CNETMsg_StringCmdDefaultTypeInternal;
extern CNETMsg_StringCmdDefaultTypeInternal _CNETMsg_StringCmd_default_instance_;
class CNETMsg_Tick;
struct CNETMsg_TickDefaultTypeInternal;
extern CNETMsg_TickDefaultTypeInternal _CNETMsg_Tick_default_instance_;
class CSVCMsgList_GameEvents;
struct CSVCMsgList_GameEventsDefaultTypeInternal;
extern CSVCMsgList_GameEventsDefaultTypeInternal _CSVCMsgList_GameEvents_default_instance_;
class CSVCMsgList_GameEvents_event_t;
struct CSVCMsgList_GameEvents_event_tDefaultTypeInternal;
extern CSVCMsgList_GameEvents_event_tDefaultTypeInternal _CSVCMsgList_GameEvents_event_t_default_instance_;
class CSVCMsgList_UserMessages;
struct CSVCMsgList_UserMessagesDefaultTypeInternal;
extern CSVCMsgList_UserMessagesDefaultTypeInternal _CSVCMsgList_UserMessages_default_instance_;
class CSVCMsgList_UserMessages_usermsg_t;
struct CSVCMsgList_UserMessages_usermsg_tDefaultTypeInternal;
extern CSVCMsgList_UserMessages_usermsg_tDefaultTypeInternal _CSVCMsgList_UserMessages_usermsg_t_default_instance_;
class CSVCMsg_GameEvent;
struct CSVCMsg_GameEventDefaultTypeInternal;
extern CSVCMsg_GameEventDefaultTypeInternal _CSVCMsg_GameEvent_default_instance_;
class CSVCMsg_GameEvent_key_t;
struct CSVCMsg_GameEvent_key_tDefaultTypeInternal;
extern CSVCMsg_GameEvent_key_tDefaultTypeInternal _CSVCMsg_GameEvent_key_t_default_instance_;
class CSVCMsg_GameSessionConfiguration;
struct CSVCMsg_GameSessionConfigurationDefaultTypeInternal;
extern CSVCMsg_GameSessionConfigurationDefaultTypeInternal _CSVCMsg_GameSessionConfiguration_default_instance_;
class CSVCMsg_UserMessage;
struct CSVCMsg_UserMessageDefaultTypeInternal;
extern CSVCMsg_UserMessageDefaultTypeInternal _CSVCMsg_UserMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CEntityMsg* Arena::CreateMaybeMessage<::CEntityMsg>(Arena*);
template<> ::CMsgPlayerInfo* Arena::CreateMaybeMessage<::CMsgPlayerInfo>(Arena*);
template<> ::CMsgQAngle* Arena::CreateMaybeMessage<::CMsgQAngle>(Arena*);
template<> ::CMsgRGBA* Arena::CreateMaybeMessage<::CMsgRGBA>(Arena*);
template<> ::CMsgVector* Arena::CreateMaybeMessage<::CMsgVector>(Arena*);
template<> ::CMsgVector2D* Arena::CreateMaybeMessage<::CMsgVector2D>(Arena*);
template<> ::CMsg_CVars* Arena::CreateMaybeMessage<::CMsg_CVars>(Arena*);
template<> ::CMsg_CVars_CVar* Arena::CreateMaybeMessage<::CMsg_CVars_CVar>(Arena*);
template<> ::CNETMsg_Disconnect* Arena::CreateMaybeMessage<::CNETMsg_Disconnect>(Arena*);
template<> ::CNETMsg_NOP* Arena::CreateMaybeMessage<::CNETMsg_NOP>(Arena*);
template<> ::CNETMsg_SetConVar* Arena::CreateMaybeMessage<::CNETMsg_SetConVar>(Arena*);
template<> ::CNETMsg_SignonState* Arena::CreateMaybeMessage<::CNETMsg_SignonState>(Arena*);
template<> ::CNETMsg_SpawnGroup_Load* Arena::CreateMaybeMessage<::CNETMsg_SpawnGroup_Load>(Arena*);
template<> ::CNETMsg_SpawnGroup_LoadCompleted* Arena::CreateMaybeMessage<::CNETMsg_SpawnGroup_LoadCompleted>(Arena*);
template<> ::CNETMsg_SpawnGroup_ManifestUpdate* Arena::CreateMaybeMessage<::CNETMsg_SpawnGroup_ManifestUpdate>(Arena*);
template<> ::CNETMsg_SpawnGroup_SetCreationTick* Arena::CreateMaybeMessage<::CNETMsg_SpawnGroup_SetCreationTick>(Arena*);
template<> ::CNETMsg_SpawnGroup_Unload* Arena::CreateMaybeMessage<::CNETMsg_SpawnGroup_Unload>(Arena*);
template<> ::CNETMsg_SplitScreenUser* Arena::CreateMaybeMessage<::CNETMsg_SplitScreenUser>(Arena*);
template<> ::CNETMsg_StringCmd* Arena::CreateMaybeMessage<::CNETMsg_StringCmd>(Arena*);
template<> ::CNETMsg_Tick* Arena::CreateMaybeMessage<::CNETMsg_Tick>(Arena*);
template<> ::CSVCMsgList_GameEvents* Arena::CreateMaybeMessage<::CSVCMsgList_GameEvents>(Arena*);
template<> ::CSVCMsgList_GameEvents_event_t* Arena::CreateMaybeMessage<::CSVCMsgList_GameEvents_event_t>(Arena*);
template<> ::CSVCMsgList_UserMessages* Arena::CreateMaybeMessage<::CSVCMsgList_UserMessages>(Arena*);
template<> ::CSVCMsgList_UserMessages_usermsg_t* Arena::CreateMaybeMessage<::CSVCMsgList_UserMessages_usermsg_t>(Arena*);
template<> ::CSVCMsg_GameEvent* Arena::CreateMaybeMessage<::CSVCMsg_GameEvent>(Arena*);
template<> ::CSVCMsg_GameEvent_key_t* Arena::CreateMaybeMessage<::CSVCMsg_GameEvent_key_t>(Arena*);
template<> ::CSVCMsg_GameSessionConfiguration* Arena::CreateMaybeMessage<::CSVCMsg_GameSessionConfiguration>(Arena*);
template<> ::CSVCMsg_UserMessage* Arena::CreateMaybeMessage<::CSVCMsg_UserMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum SignonState_t : int {
  SIGNONSTATE_NONE = 0,
  SIGNONSTATE_CHALLENGE = 1,
  SIGNONSTATE_CONNECTED = 2,
  SIGNONSTATE_NEW = 3,
  SIGNONSTATE_PRESPAWN = 4,
  SIGNONSTATE_SPAWN = 5,
  SIGNONSTATE_FULL = 6,
  SIGNONSTATE_CHANGELEVEL = 7
};
bool SignonState_t_IsValid(int value);
constexpr SignonState_t SignonState_t_MIN = SIGNONSTATE_NONE;
constexpr SignonState_t SignonState_t_MAX = SIGNONSTATE_CHANGELEVEL;
constexpr int SignonState_t_ARRAYSIZE = SignonState_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SignonState_t_descriptor();
template<typename T>
inline const std::string& SignonState_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SignonState_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SignonState_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SignonState_t_descriptor(), enum_t_value);
}
inline bool SignonState_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SignonState_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SignonState_t>(
    SignonState_t_descriptor(), name, value);
}
enum NET_Messages : int {
  net_NOP = 0,
  net_Disconnect = 1,
  net_SplitScreenUser = 3,
  net_Tick = 4,
  net_StringCmd = 5,
  net_SetConVar = 6,
  net_SignonState = 7,
  net_SpawnGroup_Load = 8,
  net_SpawnGroup_ManifestUpdate = 9,
  net_SpawnGroup_SetCreationTick = 11,
  net_SpawnGroup_Unload = 12,
  net_SpawnGroup_LoadCompleted = 13
};
bool NET_Messages_IsValid(int value);
constexpr NET_Messages NET_Messages_MIN = net_NOP;
constexpr NET_Messages NET_Messages_MAX = net_SpawnGroup_LoadCompleted;
constexpr int NET_Messages_ARRAYSIZE = NET_Messages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NET_Messages_descriptor();
template<typename T>
inline const std::string& NET_Messages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NET_Messages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NET_Messages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NET_Messages_descriptor(), enum_t_value);
}
inline bool NET_Messages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NET_Messages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NET_Messages>(
    NET_Messages_descriptor(), name, value);
}
enum SpawnGroupFlags_t : int {
  SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE = 1,
  SPAWN_GROUP_DONT_SPAWN_ENTITIES = 2,
  SPAWN_GROUP_SYNCHRONOUS_SPAWN = 4,
  SPAWN_GROUP_IS_INITIAL_SPAWN_GROUP = 8,
  SPAWN_GROUP_CREATE_CLIENT_ONLY_ENTITIES = 16,
  SPAWN_GROUP_BLOCK_UNTIL_LOADED = 64,
  SPAWN_GROUP_LOAD_STREAMING_DATA = 128,
  SPAWN_GROUP_CREATE_NEW_SCENE_WORLD = 256
};
bool SpawnGroupFlags_t_IsValid(int value);
constexpr SpawnGroupFlags_t SpawnGroupFlags_t_MIN = SPAWN_GROUP_LOAD_ENTITIES_FROM_SAVE;
constexpr SpawnGroupFlags_t SpawnGroupFlags_t_MAX = SPAWN_GROUP_CREATE_NEW_SCENE_WORLD;
constexpr int SpawnGroupFlags_t_ARRAYSIZE = SpawnGroupFlags_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpawnGroupFlags_t_descriptor();
template<typename T>
inline const std::string& SpawnGroupFlags_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SpawnGroupFlags_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SpawnGroupFlags_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SpawnGroupFlags_t_descriptor(), enum_t_value);
}
inline bool SpawnGroupFlags_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpawnGroupFlags_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SpawnGroupFlags_t>(
    SpawnGroupFlags_t_descriptor(), name, value);
}
// ===================================================================

class CMsgVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVector) */ {
 public:
  inline CMsgVector() : CMsgVector(nullptr) {}
  virtual ~CMsgVector();
  explicit constexpr CMsgVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVector(const CMsgVector& from);
  CMsgVector(CMsgVector&& from) noexcept
    : CMsgVector() {
    *this = ::std::move(from);
  }

  inline CMsgVector& operator=(const CMsgVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVector& operator=(CMsgVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVector* internal_default_instance() {
    return reinterpret_cast<const CMsgVector*>(
               &_CMsgVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgVector& a, CMsgVector& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVector* New() const final {
    return CreateMaybeMessage<CMsgVector>(nullptr);
  }

  CMsgVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVector& from);
  void MergeFrom(const CMsgVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVector";
  }
  protected:
  explicit CMsgVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CMsgVector2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgVector2D) */ {
 public:
  inline CMsgVector2D() : CMsgVector2D(nullptr) {}
  virtual ~CMsgVector2D();
  explicit constexpr CMsgVector2D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgVector2D(const CMsgVector2D& from);
  CMsgVector2D(CMsgVector2D&& from) noexcept
    : CMsgVector2D() {
    *this = ::std::move(from);
  }

  inline CMsgVector2D& operator=(const CMsgVector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgVector2D& operator=(CMsgVector2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgVector2D& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgVector2D* internal_default_instance() {
    return reinterpret_cast<const CMsgVector2D*>(
               &_CMsgVector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgVector2D& a, CMsgVector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgVector2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgVector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgVector2D* New() const final {
    return CreateMaybeMessage<CMsgVector2D>(nullptr);
  }

  CMsgVector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgVector2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgVector2D& from);
  void MergeFrom(const CMsgVector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgVector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgVector2D";
  }
  protected:
  explicit CMsgVector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgVector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CMsgQAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgQAngle) */ {
 public:
  inline CMsgQAngle() : CMsgQAngle(nullptr) {}
  virtual ~CMsgQAngle();
  explicit constexpr CMsgQAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgQAngle(const CMsgQAngle& from);
  CMsgQAngle(CMsgQAngle&& from) noexcept
    : CMsgQAngle() {
    *this = ::std::move(from);
  }

  inline CMsgQAngle& operator=(const CMsgQAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgQAngle& operator=(CMsgQAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgQAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgQAngle* internal_default_instance() {
    return reinterpret_cast<const CMsgQAngle*>(
               &_CMsgQAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgQAngle& a, CMsgQAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgQAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgQAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgQAngle* New() const final {
    return CreateMaybeMessage<CMsgQAngle>(nullptr);
  }

  CMsgQAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgQAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgQAngle& from);
  void MergeFrom(const CMsgQAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgQAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgQAngle";
  }
  protected:
  explicit CMsgQAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgQAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CMsgRGBA PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgRGBA) */ {
 public:
  inline CMsgRGBA() : CMsgRGBA(nullptr) {}
  virtual ~CMsgRGBA();
  explicit constexpr CMsgRGBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgRGBA(const CMsgRGBA& from);
  CMsgRGBA(CMsgRGBA&& from) noexcept
    : CMsgRGBA() {
    *this = ::std::move(from);
  }

  inline CMsgRGBA& operator=(const CMsgRGBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgRGBA& operator=(CMsgRGBA&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgRGBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgRGBA* internal_default_instance() {
    return reinterpret_cast<const CMsgRGBA*>(
               &_CMsgRGBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgRGBA& a, CMsgRGBA& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgRGBA* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgRGBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgRGBA* New() const final {
    return CreateMaybeMessage<CMsgRGBA>(nullptr);
  }

  CMsgRGBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgRGBA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgRGBA& from);
  void MergeFrom(const CMsgRGBA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgRGBA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgRGBA";
  }
  protected:
  explicit CMsgRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // optional int32 r = 1;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::PROTOBUF_NAMESPACE_ID::int32 r() const;
  void set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_r() const;
  void _internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 g = 2;
  bool has_g() const;
  private:
  bool _internal_has_g() const;
  public:
  void clear_g();
  ::PROTOBUF_NAMESPACE_ID::int32 g() const;
  void set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_g() const;
  void _internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 b = 3;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  ::PROTOBUF_NAMESPACE_ID::int32 b() const;
  void set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_b() const;
  void _internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 a = 4;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgRGBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 r_;
  ::PROTOBUF_NAMESPACE_ID::int32 g_;
  ::PROTOBUF_NAMESPACE_ID::int32 b_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CMsgPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgPlayerInfo) */ {
 public:
  inline CMsgPlayerInfo() : CMsgPlayerInfo(nullptr) {}
  virtual ~CMsgPlayerInfo();
  explicit constexpr CMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgPlayerInfo(const CMsgPlayerInfo& from);
  CMsgPlayerInfo(CMsgPlayerInfo&& from) noexcept
    : CMsgPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgPlayerInfo& operator=(const CMsgPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgPlayerInfo& operator=(CMsgPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgPlayerInfo*>(
               &_CMsgPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgPlayerInfo& a, CMsgPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgPlayerInfo* New() const final {
    return CreateMaybeMessage<CMsgPlayerInfo>(nullptr);
  }

  CMsgPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgPlayerInfo& from);
  void MergeFrom(const CMsgPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgPlayerInfo";
  }
  protected:
  explicit CMsgPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kXuidFieldNumber = 2,
    kSteamidFieldNumber = 4,
    kUseridFieldNumber = 3,
    kFakeplayerFieldNumber = 5,
    kIshltvFieldNumber = 6,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional fixed64 xuid = 2;
  bool has_xuid() const;
  private:
  bool _internal_has_xuid() const;
  public:
  void clear_xuid();
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid() const;
  void set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_xuid() const;
  void _internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 steamid = 4;
  bool has_steamid() const;
  private:
  bool _internal_has_steamid() const;
  public:
  void clear_steamid();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid() const;
  void set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid() const;
  void _internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 userid = 3;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool fakeplayer = 5;
  bool has_fakeplayer() const;
  private:
  bool _internal_has_fakeplayer() const;
  public:
  void clear_fakeplayer();
  bool fakeplayer() const;
  void set_fakeplayer(bool value);
  private:
  bool _internal_fakeplayer() const;
  void _internal_set_fakeplayer(bool value);
  public:

  // optional bool ishltv = 6;
  bool has_ishltv() const;
  private:
  bool _internal_has_ishltv() const;
  public:
  void clear_ishltv();
  bool ishltv() const;
  void set_ishltv(bool value);
  private:
  bool _internal_ishltv() const;
  void _internal_set_ishltv(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 xuid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  bool fakeplayer_;
  bool ishltv_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CEntityMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CEntityMsg) */ {
 public:
  inline CEntityMsg() : CEntityMsg(nullptr) {}
  virtual ~CEntityMsg();
  explicit constexpr CEntityMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CEntityMsg(const CEntityMsg& from);
  CEntityMsg(CEntityMsg&& from) noexcept
    : CEntityMsg() {
    *this = ::std::move(from);
  }

  inline CEntityMsg& operator=(const CEntityMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CEntityMsg& operator=(CEntityMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CEntityMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CEntityMsg* internal_default_instance() {
    return reinterpret_cast<const CEntityMsg*>(
               &_CEntityMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CEntityMsg& a, CEntityMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CEntityMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CEntityMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CEntityMsg* New() const final {
    return CreateMaybeMessage<CEntityMsg>(nullptr);
  }

  CEntityMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CEntityMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CEntityMsg& from);
  void MergeFrom(const CEntityMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CEntityMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CEntityMsg";
  }
  protected:
  explicit CEntityMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetEntityFieldNumber = 1,
  };
  // optional uint32 target_entity = 1;
  bool has_target_entity() const;
  private:
  bool _internal_has_target_entity() const;
  public:
  void clear_target_entity();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_entity() const;
  void set_target_entity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_entity() const;
  void _internal_set_target_entity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CEntityMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_entity_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CVars_CVar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsg_CVars.CVar) */ {
 public:
  inline CMsg_CVars_CVar() : CMsg_CVars_CVar(nullptr) {}
  virtual ~CMsg_CVars_CVar();
  explicit constexpr CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsg_CVars_CVar(const CMsg_CVars_CVar& from);
  CMsg_CVars_CVar(CMsg_CVars_CVar&& from) noexcept
    : CMsg_CVars_CVar() {
    *this = ::std::move(from);
  }

  inline CMsg_CVars_CVar& operator=(const CMsg_CVars_CVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CVars_CVar& operator=(CMsg_CVars_CVar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsg_CVars_CVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CVars_CVar* internal_default_instance() {
    return reinterpret_cast<const CMsg_CVars_CVar*>(
               &_CMsg_CVars_CVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsg_CVars_CVar& a, CMsg_CVars_CVar& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsg_CVars_CVar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CVars_CVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsg_CVars_CVar* New() const final {
    return CreateMaybeMessage<CMsg_CVars_CVar>(nullptr);
  }

  CMsg_CVars_CVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsg_CVars_CVar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsg_CVars_CVar& from);
  void MergeFrom(const CMsg_CVars_CVar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsg_CVars_CVar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsg_CVars.CVar";
  }
  protected:
  explicit CMsg_CVars_CVar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:CMsg_CVars.CVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CMsg_CVars PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsg_CVars) */ {
 public:
  inline CMsg_CVars() : CMsg_CVars(nullptr) {}
  virtual ~CMsg_CVars();
  explicit constexpr CMsg_CVars(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsg_CVars(const CMsg_CVars& from);
  CMsg_CVars(CMsg_CVars&& from) noexcept
    : CMsg_CVars() {
    *this = ::std::move(from);
  }

  inline CMsg_CVars& operator=(const CMsg_CVars& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsg_CVars& operator=(CMsg_CVars&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsg_CVars& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsg_CVars* internal_default_instance() {
    return reinterpret_cast<const CMsg_CVars*>(
               &_CMsg_CVars_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsg_CVars& a, CMsg_CVars& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsg_CVars* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsg_CVars* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsg_CVars* New() const final {
    return CreateMaybeMessage<CMsg_CVars>(nullptr);
  }

  CMsg_CVars* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsg_CVars>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsg_CVars& from);
  void MergeFrom(const CMsg_CVars& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsg_CVars* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsg_CVars";
  }
  protected:
  explicit CMsg_CVars(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsg_CVars_CVar CVar;

  // accessors -------------------------------------------------------

  enum : int {
    kCvarsFieldNumber = 1,
  };
  // repeated .CMsg_CVars.CVar cvars = 1;
  int cvars_size() const;
  private:
  int _internal_cvars_size() const;
  public:
  void clear_cvars();
  ::CMsg_CVars_CVar* mutable_cvars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >*
      mutable_cvars();
  private:
  const ::CMsg_CVars_CVar& _internal_cvars(int index) const;
  ::CMsg_CVars_CVar* _internal_add_cvars();
  public:
  const ::CMsg_CVars_CVar& cvars(int index) const;
  ::CMsg_CVars_CVar* add_cvars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >&
      cvars() const;

  // @@protoc_insertion_point(class_scope:CMsg_CVars)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar > cvars_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_NOP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_NOP) */ {
 public:
  inline CNETMsg_NOP() : CNETMsg_NOP(nullptr) {}
  virtual ~CNETMsg_NOP();
  explicit constexpr CNETMsg_NOP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_NOP(const CNETMsg_NOP& from);
  CNETMsg_NOP(CNETMsg_NOP&& from) noexcept
    : CNETMsg_NOP() {
    *this = ::std::move(from);
  }

  inline CNETMsg_NOP& operator=(const CNETMsg_NOP& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_NOP& operator=(CNETMsg_NOP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_NOP& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_NOP* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_NOP*>(
               &_CNETMsg_NOP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CNETMsg_NOP& a, CNETMsg_NOP& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_NOP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_NOP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_NOP* New() const final {
    return CreateMaybeMessage<CNETMsg_NOP>(nullptr);
  }

  CNETMsg_NOP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_NOP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_NOP& from);
  void MergeFrom(const CNETMsg_NOP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_NOP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_NOP";
  }
  protected:
  explicit CNETMsg_NOP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CNETMsg_NOP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SplitScreenUser PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SplitScreenUser) */ {
 public:
  inline CNETMsg_SplitScreenUser() : CNETMsg_SplitScreenUser(nullptr) {}
  virtual ~CNETMsg_SplitScreenUser();
  explicit constexpr CNETMsg_SplitScreenUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SplitScreenUser(const CNETMsg_SplitScreenUser& from);
  CNETMsg_SplitScreenUser(CNETMsg_SplitScreenUser&& from) noexcept
    : CNETMsg_SplitScreenUser() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SplitScreenUser& operator=(const CNETMsg_SplitScreenUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SplitScreenUser& operator=(CNETMsg_SplitScreenUser&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SplitScreenUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SplitScreenUser* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SplitScreenUser*>(
               &_CNETMsg_SplitScreenUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CNETMsg_SplitScreenUser& a, CNETMsg_SplitScreenUser& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SplitScreenUser* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SplitScreenUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SplitScreenUser* New() const final {
    return CreateMaybeMessage<CNETMsg_SplitScreenUser>(nullptr);
  }

  CNETMsg_SplitScreenUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SplitScreenUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SplitScreenUser& from);
  void MergeFrom(const CNETMsg_SplitScreenUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SplitScreenUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SplitScreenUser";
  }
  protected:
  explicit CNETMsg_SplitScreenUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
  };
  // optional int32 slot = 1;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::int32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SplitScreenUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 slot_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_Disconnect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_Disconnect) */ {
 public:
  inline CNETMsg_Disconnect() : CNETMsg_Disconnect(nullptr) {}
  virtual ~CNETMsg_Disconnect();
  explicit constexpr CNETMsg_Disconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_Disconnect(const CNETMsg_Disconnect& from);
  CNETMsg_Disconnect(CNETMsg_Disconnect&& from) noexcept
    : CNETMsg_Disconnect() {
    *this = ::std::move(from);
  }

  inline CNETMsg_Disconnect& operator=(const CNETMsg_Disconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_Disconnect& operator=(CNETMsg_Disconnect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_Disconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_Disconnect* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_Disconnect*>(
               &_CNETMsg_Disconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CNETMsg_Disconnect& a, CNETMsg_Disconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_Disconnect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_Disconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_Disconnect* New() const final {
    return CreateMaybeMessage<CNETMsg_Disconnect>(nullptr);
  }

  CNETMsg_Disconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_Disconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_Disconnect& from);
  void MergeFrom(const CNETMsg_Disconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_Disconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_Disconnect";
  }
  protected:
  explicit CNETMsg_Disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
  };
  // optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  ::ENetworkDisconnectionReason reason() const;
  void set_reason(::ENetworkDisconnectionReason value);
  private:
  ::ENetworkDisconnectionReason _internal_reason() const;
  void _internal_set_reason(::ENetworkDisconnectionReason value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_Disconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int reason_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_Tick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_Tick) */ {
 public:
  inline CNETMsg_Tick() : CNETMsg_Tick(nullptr) {}
  virtual ~CNETMsg_Tick();
  explicit constexpr CNETMsg_Tick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_Tick(const CNETMsg_Tick& from);
  CNETMsg_Tick(CNETMsg_Tick&& from) noexcept
    : CNETMsg_Tick() {
    *this = ::std::move(from);
  }

  inline CNETMsg_Tick& operator=(const CNETMsg_Tick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_Tick& operator=(CNETMsg_Tick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_Tick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_Tick* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_Tick*>(
               &_CNETMsg_Tick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CNETMsg_Tick& a, CNETMsg_Tick& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_Tick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_Tick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_Tick* New() const final {
    return CreateMaybeMessage<CNETMsg_Tick>(nullptr);
  }

  CNETMsg_Tick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_Tick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_Tick& from);
  void MergeFrom(const CNETMsg_Tick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_Tick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_Tick";
  }
  protected:
  explicit CNETMsg_Tick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTickFieldNumber = 1,
    kHostFrametimeFieldNumber = 2,
    kHostFrametimeStdDeviationFieldNumber = 3,
    kHostComputationtimeFieldNumber = 4,
    kHostComputationtimeStdDeviationFieldNumber = 5,
    kHostFramestarttimeStdDeviationFieldNumber = 6,
    kHostLossFieldNumber = 7,
    kHostUnfilteredFrametimeFieldNumber = 8,
  };
  // optional uint32 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::uint32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_frametime = 2;
  bool has_host_frametime() const;
  private:
  bool _internal_has_host_frametime() const;
  public:
  void clear_host_frametime();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_frametime() const;
  void set_host_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_frametime() const;
  void _internal_set_host_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_frametime_std_deviation = 3;
  bool has_host_frametime_std_deviation() const;
  private:
  bool _internal_has_host_frametime_std_deviation() const;
  public:
  void clear_host_frametime_std_deviation();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_frametime_std_deviation() const;
  void set_host_frametime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_frametime_std_deviation() const;
  void _internal_set_host_frametime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_computationtime = 4;
  bool has_host_computationtime() const;
  private:
  bool _internal_has_host_computationtime() const;
  public:
  void clear_host_computationtime();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime() const;
  void set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_computationtime() const;
  void _internal_set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_computationtime_std_deviation = 5;
  bool has_host_computationtime_std_deviation() const;
  private:
  bool _internal_has_host_computationtime_std_deviation() const;
  public:
  void clear_host_computationtime_std_deviation();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime_std_deviation() const;
  void set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_computationtime_std_deviation() const;
  void _internal_set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_framestarttime_std_deviation = 6;
  bool has_host_framestarttime_std_deviation() const;
  private:
  bool _internal_has_host_framestarttime_std_deviation() const;
  public:
  void clear_host_framestarttime_std_deviation();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_framestarttime_std_deviation() const;
  void set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_framestarttime_std_deviation() const;
  void _internal_set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_loss = 7;
  bool has_host_loss() const;
  private:
  bool _internal_has_host_loss() const;
  public:
  void clear_host_loss();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_loss() const;
  void set_host_loss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_loss() const;
  void _internal_set_host_loss(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 host_unfiltered_frametime = 8;
  bool has_host_unfiltered_frametime() const;
  private:
  bool _internal_has_host_unfiltered_frametime() const;
  public:
  void clear_host_unfiltered_frametime();
  ::PROTOBUF_NAMESPACE_ID::uint32 host_unfiltered_frametime() const;
  void set_host_unfiltered_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host_unfiltered_frametime() const;
  void _internal_set_host_unfiltered_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_Tick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_frametime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_frametime_std_deviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_computationtime_std_deviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_framestarttime_std_deviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_loss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_unfiltered_frametime_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_StringCmd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_StringCmd) */ {
 public:
  inline CNETMsg_StringCmd() : CNETMsg_StringCmd(nullptr) {}
  virtual ~CNETMsg_StringCmd();
  explicit constexpr CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_StringCmd(const CNETMsg_StringCmd& from);
  CNETMsg_StringCmd(CNETMsg_StringCmd&& from) noexcept
    : CNETMsg_StringCmd() {
    *this = ::std::move(from);
  }

  inline CNETMsg_StringCmd& operator=(const CNETMsg_StringCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_StringCmd& operator=(CNETMsg_StringCmd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_StringCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_StringCmd* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_StringCmd*>(
               &_CNETMsg_StringCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CNETMsg_StringCmd& a, CNETMsg_StringCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_StringCmd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_StringCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_StringCmd* New() const final {
    return CreateMaybeMessage<CNETMsg_StringCmd>(nullptr);
  }

  CNETMsg_StringCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_StringCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_StringCmd& from);
  void MergeFrom(const CNETMsg_StringCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_StringCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_StringCmd";
  }
  protected:
  explicit CNETMsg_StringCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // optional string command = 1;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_StringCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SetConVar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SetConVar) */ {
 public:
  inline CNETMsg_SetConVar() : CNETMsg_SetConVar(nullptr) {}
  virtual ~CNETMsg_SetConVar();
  explicit constexpr CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SetConVar(const CNETMsg_SetConVar& from);
  CNETMsg_SetConVar(CNETMsg_SetConVar&& from) noexcept
    : CNETMsg_SetConVar() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SetConVar& operator=(const CNETMsg_SetConVar& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SetConVar& operator=(CNETMsg_SetConVar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SetConVar& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SetConVar* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SetConVar*>(
               &_CNETMsg_SetConVar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CNETMsg_SetConVar& a, CNETMsg_SetConVar& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SetConVar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SetConVar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SetConVar* New() const final {
    return CreateMaybeMessage<CNETMsg_SetConVar>(nullptr);
  }

  CNETMsg_SetConVar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SetConVar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SetConVar& from);
  void MergeFrom(const CNETMsg_SetConVar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SetConVar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SetConVar";
  }
  protected:
  explicit CNETMsg_SetConVar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvarsFieldNumber = 1,
  };
  // optional .CMsg_CVars convars = 1;
  bool has_convars() const;
  private:
  bool _internal_has_convars() const;
  public:
  void clear_convars();
  const ::CMsg_CVars& convars() const;
  ::CMsg_CVars* release_convars();
  ::CMsg_CVars* mutable_convars();
  void set_allocated_convars(::CMsg_CVars* convars);
  private:
  const ::CMsg_CVars& _internal_convars() const;
  ::CMsg_CVars* _internal_mutable_convars();
  public:
  void unsafe_arena_set_allocated_convars(
      ::CMsg_CVars* convars);
  ::CMsg_CVars* unsafe_arena_release_convars();

  // @@protoc_insertion_point(class_scope:CNETMsg_SetConVar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsg_CVars* convars_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SignonState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SignonState) */ {
 public:
  inline CNETMsg_SignonState() : CNETMsg_SignonState(nullptr) {}
  virtual ~CNETMsg_SignonState();
  explicit constexpr CNETMsg_SignonState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SignonState(const CNETMsg_SignonState& from);
  CNETMsg_SignonState(CNETMsg_SignonState&& from) noexcept
    : CNETMsg_SignonState() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SignonState& operator=(const CNETMsg_SignonState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SignonState& operator=(CNETMsg_SignonState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SignonState& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SignonState* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SignonState*>(
               &_CNETMsg_SignonState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CNETMsg_SignonState& a, CNETMsg_SignonState& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SignonState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SignonState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SignonState* New() const final {
    return CreateMaybeMessage<CNETMsg_SignonState>(nullptr);
  }

  CNETMsg_SignonState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SignonState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SignonState& from);
  void MergeFrom(const CNETMsg_SignonState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SignonState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SignonState";
  }
  protected:
  explicit CNETMsg_SignonState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersNetworkidsFieldNumber = 4,
    kMapNameFieldNumber = 5,
    kAddonsFieldNumber = 6,
    kSignonStateFieldNumber = 1,
    kSpawnCountFieldNumber = 2,
    kNumServerPlayersFieldNumber = 3,
  };
  // repeated string players_networkids = 4;
  int players_networkids_size() const;
  private:
  int _internal_players_networkids_size() const;
  public:
  void clear_players_networkids();
  const std::string& players_networkids(int index) const;
  std::string* mutable_players_networkids(int index);
  void set_players_networkids(int index, const std::string& value);
  void set_players_networkids(int index, std::string&& value);
  void set_players_networkids(int index, const char* value);
  void set_players_networkids(int index, const char* value, size_t size);
  std::string* add_players_networkids();
  void add_players_networkids(const std::string& value);
  void add_players_networkids(std::string&& value);
  void add_players_networkids(const char* value);
  void add_players_networkids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& players_networkids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_players_networkids();
  private:
  const std::string& _internal_players_networkids(int index) const;
  std::string* _internal_add_players_networkids();
  public:

  // optional string map_name = 5;
  bool has_map_name() const;
  private:
  bool _internal_has_map_name() const;
  public:
  void clear_map_name();
  const std::string& map_name() const;
  void set_map_name(const std::string& value);
  void set_map_name(std::string&& value);
  void set_map_name(const char* value);
  void set_map_name(const char* value, size_t size);
  std::string* mutable_map_name();
  std::string* release_map_name();
  void set_allocated_map_name(std::string* map_name);
  private:
  const std::string& _internal_map_name() const;
  void _internal_set_map_name(const std::string& value);
  std::string* _internal_mutable_map_name();
  public:

  // optional string addons = 6;
  bool has_addons() const;
  private:
  bool _internal_has_addons() const;
  public:
  void clear_addons();
  const std::string& addons() const;
  void set_addons(const std::string& value);
  void set_addons(std::string&& value);
  void set_addons(const char* value);
  void set_addons(const char* value, size_t size);
  std::string* mutable_addons();
  std::string* release_addons();
  void set_allocated_addons(std::string* addons);
  private:
  const std::string& _internal_addons() const;
  void _internal_set_addons(const std::string& value);
  std::string* _internal_mutable_addons();
  public:

  // optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
  bool has_signon_state() const;
  private:
  bool _internal_has_signon_state() const;
  public:
  void clear_signon_state();
  ::SignonState_t signon_state() const;
  void set_signon_state(::SignonState_t value);
  private:
  ::SignonState_t _internal_signon_state() const;
  void _internal_set_signon_state(::SignonState_t value);
  public:

  // optional uint32 spawn_count = 2;
  bool has_spawn_count() const;
  private:
  bool _internal_has_spawn_count() const;
  public:
  void clear_spawn_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawn_count() const;
  void set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawn_count() const;
  void _internal_set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_server_players = 3;
  bool has_num_server_players() const;
  private:
  bool _internal_has_num_server_players() const;
  public:
  void clear_num_server_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_server_players() const;
  void set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_server_players() const;
  void _internal_set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SignonState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> players_networkids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addons_;
  int signon_state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawn_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_server_players_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEvent_key_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEvent.key_t) */ {
 public:
  inline CSVCMsg_GameEvent_key_t() : CSVCMsg_GameEvent_key_t(nullptr) {}
  virtual ~CSVCMsg_GameEvent_key_t();
  explicit constexpr CSVCMsg_GameEvent_key_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEvent_key_t(const CSVCMsg_GameEvent_key_t& from);
  CSVCMsg_GameEvent_key_t(CSVCMsg_GameEvent_key_t&& from) noexcept
    : CSVCMsg_GameEvent_key_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEvent_key_t& operator=(const CSVCMsg_GameEvent_key_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEvent_key_t& operator=(CSVCMsg_GameEvent_key_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GameEvent_key_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEvent_key_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEvent_key_t*>(
               &_CSVCMsg_GameEvent_key_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CSVCMsg_GameEvent_key_t& a, CSVCMsg_GameEvent_key_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEvent_key_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEvent_key_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEvent_key_t* New() const final {
    return CreateMaybeMessage<CSVCMsg_GameEvent_key_t>(nullptr);
  }

  CSVCMsg_GameEvent_key_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEvent_key_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GameEvent_key_t& from);
  void MergeFrom(const CSVCMsg_GameEvent_key_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEvent_key_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEvent.key_t";
  }
  protected:
  explicit CSVCMsg_GameEvent_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValStringFieldNumber = 2,
    kTypeFieldNumber = 1,
    kValFloatFieldNumber = 3,
    kValLongFieldNumber = 4,
    kValShortFieldNumber = 5,
    kValByteFieldNumber = 6,
    kValBoolFieldNumber = 7,
    kValUint64FieldNumber = 8,
  };
  // optional string val_string = 2;
  bool has_val_string() const;
  private:
  bool _internal_has_val_string() const;
  public:
  void clear_val_string();
  const std::string& val_string() const;
  void set_val_string(const std::string& value);
  void set_val_string(std::string&& value);
  void set_val_string(const char* value);
  void set_val_string(const char* value, size_t size);
  std::string* mutable_val_string();
  std::string* release_val_string();
  void set_allocated_val_string(std::string* val_string);
  private:
  const std::string& _internal_val_string() const;
  void _internal_set_val_string(const std::string& value);
  std::string* _internal_mutable_val_string();
  public:

  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float val_float = 3;
  bool has_val_float() const;
  private:
  bool _internal_has_val_float() const;
  public:
  void clear_val_float();
  float val_float() const;
  void set_val_float(float value);
  private:
  float _internal_val_float() const;
  void _internal_set_val_float(float value);
  public:

  // optional int32 val_long = 4;
  bool has_val_long() const;
  private:
  bool _internal_has_val_long() const;
  public:
  void clear_val_long();
  ::PROTOBUF_NAMESPACE_ID::int32 val_long() const;
  void set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_long() const;
  void _internal_set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 val_short = 5;
  bool has_val_short() const;
  private:
  bool _internal_has_val_short() const;
  public:
  void clear_val_short();
  ::PROTOBUF_NAMESPACE_ID::int32 val_short() const;
  void set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_short() const;
  void _internal_set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 val_byte = 6;
  bool has_val_byte() const;
  private:
  bool _internal_has_val_byte() const;
  public:
  void clear_val_byte();
  ::PROTOBUF_NAMESPACE_ID::int32 val_byte() const;
  void set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_byte() const;
  void _internal_set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool val_bool = 7;
  bool has_val_bool() const;
  private:
  bool _internal_has_val_bool() const;
  public:
  void clear_val_bool();
  bool val_bool() const;
  void set_val_bool(bool value);
  private:
  bool _internal_val_bool() const;
  void _internal_set_val_bool(bool value);
  public:

  // optional uint64 val_uint64 = 8;
  bool has_val_uint64() const;
  private:
  bool _internal_has_val_uint64() const;
  public:
  void clear_val_uint64();
  ::PROTOBUF_NAMESPACE_ID::uint64 val_uint64() const;
  void set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_val_uint64() const;
  void _internal_set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEvent.key_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_string_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  float val_float_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_long_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_short_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_byte_;
  bool val_bool_;
  ::PROTOBUF_NAMESPACE_ID::uint64 val_uint64_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameEvent) */ {
 public:
  inline CSVCMsg_GameEvent() : CSVCMsg_GameEvent(nullptr) {}
  virtual ~CSVCMsg_GameEvent();
  explicit constexpr CSVCMsg_GameEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameEvent(const CSVCMsg_GameEvent& from);
  CSVCMsg_GameEvent(CSVCMsg_GameEvent&& from) noexcept
    : CSVCMsg_GameEvent() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameEvent& operator=(const CSVCMsg_GameEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameEvent& operator=(CSVCMsg_GameEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GameEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameEvent* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameEvent*>(
               &_CSVCMsg_GameEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CSVCMsg_GameEvent& a, CSVCMsg_GameEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameEvent* New() const final {
    return CreateMaybeMessage<CSVCMsg_GameEvent>(nullptr);
  }

  CSVCMsg_GameEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GameEvent& from);
  void MergeFrom(const CSVCMsg_GameEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameEvent";
  }
  protected:
  explicit CSVCMsg_GameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsg_GameEvent_key_t key_t;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 3,
    kEventNameFieldNumber = 1,
    kEventidFieldNumber = 2,
  };
  // repeated .CSVCMsg_GameEvent.key_t keys = 3;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::CSVCMsg_GameEvent_key_t* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >*
      mutable_keys();
  private:
  const ::CSVCMsg_GameEvent_key_t& _internal_keys(int index) const;
  ::CSVCMsg_GameEvent_key_t* _internal_add_keys();
  public:
  const ::CSVCMsg_GameEvent_key_t& keys(int index) const;
  ::CSVCMsg_GameEvent_key_t* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >&
      keys() const;

  // optional string event_name = 1;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional int32 eventid = 2;
  bool has_eventid() const;
  private:
  bool _internal_has_eventid() const;
  public:
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsgList_GameEvents_event_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsgList_GameEvents.event_t) */ {
 public:
  inline CSVCMsgList_GameEvents_event_t() : CSVCMsgList_GameEvents_event_t(nullptr) {}
  virtual ~CSVCMsgList_GameEvents_event_t();
  explicit constexpr CSVCMsgList_GameEvents_event_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsgList_GameEvents_event_t(const CSVCMsgList_GameEvents_event_t& from);
  CSVCMsgList_GameEvents_event_t(CSVCMsgList_GameEvents_event_t&& from) noexcept
    : CSVCMsgList_GameEvents_event_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsgList_GameEvents_event_t& operator=(const CSVCMsgList_GameEvents_event_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsgList_GameEvents_event_t& operator=(CSVCMsgList_GameEvents_event_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsgList_GameEvents_event_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsgList_GameEvents_event_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsgList_GameEvents_event_t*>(
               &_CSVCMsgList_GameEvents_event_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CSVCMsgList_GameEvents_event_t& a, CSVCMsgList_GameEvents_event_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsgList_GameEvents_event_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsgList_GameEvents_event_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsgList_GameEvents_event_t* New() const final {
    return CreateMaybeMessage<CSVCMsgList_GameEvents_event_t>(nullptr);
  }

  CSVCMsgList_GameEvents_event_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsgList_GameEvents_event_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsgList_GameEvents_event_t& from);
  void MergeFrom(const CSVCMsgList_GameEvents_event_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsgList_GameEvents_event_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsgList_GameEvents.event_t";
  }
  protected:
  explicit CSVCMsgList_GameEvents_event_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kTickFieldNumber = 1,
  };
  // optional .CSVCMsg_GameEvent event = 2;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::CSVCMsg_GameEvent& event() const;
  ::CSVCMsg_GameEvent* release_event();
  ::CSVCMsg_GameEvent* mutable_event();
  void set_allocated_event(::CSVCMsg_GameEvent* event);
  private:
  const ::CSVCMsg_GameEvent& _internal_event() const;
  ::CSVCMsg_GameEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::CSVCMsg_GameEvent* event);
  ::CSVCMsg_GameEvent* unsafe_arena_release_event();

  // optional int32 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsgList_GameEvents.event_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSVCMsg_GameEvent* event_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsgList_GameEvents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsgList_GameEvents) */ {
 public:
  inline CSVCMsgList_GameEvents() : CSVCMsgList_GameEvents(nullptr) {}
  virtual ~CSVCMsgList_GameEvents();
  explicit constexpr CSVCMsgList_GameEvents(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsgList_GameEvents(const CSVCMsgList_GameEvents& from);
  CSVCMsgList_GameEvents(CSVCMsgList_GameEvents&& from) noexcept
    : CSVCMsgList_GameEvents() {
    *this = ::std::move(from);
  }

  inline CSVCMsgList_GameEvents& operator=(const CSVCMsgList_GameEvents& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsgList_GameEvents& operator=(CSVCMsgList_GameEvents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsgList_GameEvents& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsgList_GameEvents* internal_default_instance() {
    return reinterpret_cast<const CSVCMsgList_GameEvents*>(
               &_CSVCMsgList_GameEvents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CSVCMsgList_GameEvents& a, CSVCMsgList_GameEvents& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsgList_GameEvents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsgList_GameEvents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsgList_GameEvents* New() const final {
    return CreateMaybeMessage<CSVCMsgList_GameEvents>(nullptr);
  }

  CSVCMsgList_GameEvents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsgList_GameEvents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsgList_GameEvents& from);
  void MergeFrom(const CSVCMsgList_GameEvents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsgList_GameEvents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsgList_GameEvents";
  }
  protected:
  explicit CSVCMsgList_GameEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsgList_GameEvents_event_t event_t;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .CSVCMsgList_GameEvents.event_t events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::CSVCMsgList_GameEvents_event_t* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_GameEvents_event_t >*
      mutable_events();
  private:
  const ::CSVCMsgList_GameEvents_event_t& _internal_events(int index) const;
  ::CSVCMsgList_GameEvents_event_t* _internal_add_events();
  public:
  const ::CSVCMsgList_GameEvents_event_t& events(int index) const;
  ::CSVCMsgList_GameEvents_event_t* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_GameEvents_event_t >&
      events() const;

  // @@protoc_insertion_point(class_scope:CSVCMsgList_GameEvents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_GameEvents_event_t > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_UserMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_UserMessage) */ {
 public:
  inline CSVCMsg_UserMessage() : CSVCMsg_UserMessage(nullptr) {}
  virtual ~CSVCMsg_UserMessage();
  explicit constexpr CSVCMsg_UserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_UserMessage(const CSVCMsg_UserMessage& from);
  CSVCMsg_UserMessage(CSVCMsg_UserMessage&& from) noexcept
    : CSVCMsg_UserMessage() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_UserMessage& operator=(const CSVCMsg_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_UserMessage& operator=(CSVCMsg_UserMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_UserMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_UserMessage* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_UserMessage*>(
               &_CSVCMsg_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CSVCMsg_UserMessage& a, CSVCMsg_UserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_UserMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_UserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_UserMessage* New() const final {
    return CreateMaybeMessage<CSVCMsg_UserMessage>(nullptr);
  }

  CSVCMsg_UserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_UserMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_UserMessage& from);
  void MergeFrom(const CSVCMsg_UserMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_UserMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_UserMessage";
  }
  protected:
  explicit CSVCMsg_UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgDataFieldNumber = 2,
    kMsgTypeFieldNumber = 1,
  };
  // optional bytes msg_data = 2;
  bool has_msg_data() const;
  private:
  bool _internal_has_msg_data() const;
  public:
  void clear_msg_data();
  const std::string& msg_data() const;
  void set_msg_data(const std::string& value);
  void set_msg_data(std::string&& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  std::string* mutable_msg_data();
  std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // optional int32 msg_type = 1;
  bool has_msg_type() const;
  private:
  bool _internal_has_msg_type() const;
  public:
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_UserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsgList_UserMessages_usermsg_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsgList_UserMessages.usermsg_t) */ {
 public:
  inline CSVCMsgList_UserMessages_usermsg_t() : CSVCMsgList_UserMessages_usermsg_t(nullptr) {}
  virtual ~CSVCMsgList_UserMessages_usermsg_t();
  explicit constexpr CSVCMsgList_UserMessages_usermsg_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsgList_UserMessages_usermsg_t(const CSVCMsgList_UserMessages_usermsg_t& from);
  CSVCMsgList_UserMessages_usermsg_t(CSVCMsgList_UserMessages_usermsg_t&& from) noexcept
    : CSVCMsgList_UserMessages_usermsg_t() {
    *this = ::std::move(from);
  }

  inline CSVCMsgList_UserMessages_usermsg_t& operator=(const CSVCMsgList_UserMessages_usermsg_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsgList_UserMessages_usermsg_t& operator=(CSVCMsgList_UserMessages_usermsg_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsgList_UserMessages_usermsg_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsgList_UserMessages_usermsg_t* internal_default_instance() {
    return reinterpret_cast<const CSVCMsgList_UserMessages_usermsg_t*>(
               &_CSVCMsgList_UserMessages_usermsg_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CSVCMsgList_UserMessages_usermsg_t& a, CSVCMsgList_UserMessages_usermsg_t& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsgList_UserMessages_usermsg_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsgList_UserMessages_usermsg_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsgList_UserMessages_usermsg_t* New() const final {
    return CreateMaybeMessage<CSVCMsgList_UserMessages_usermsg_t>(nullptr);
  }

  CSVCMsgList_UserMessages_usermsg_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsgList_UserMessages_usermsg_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsgList_UserMessages_usermsg_t& from);
  void MergeFrom(const CSVCMsgList_UserMessages_usermsg_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsgList_UserMessages_usermsg_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsgList_UserMessages.usermsg_t";
  }
  protected:
  explicit CSVCMsgList_UserMessages_usermsg_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kTickFieldNumber = 1,
  };
  // optional .CSVCMsg_UserMessage msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::CSVCMsg_UserMessage& msg() const;
  ::CSVCMsg_UserMessage* release_msg();
  ::CSVCMsg_UserMessage* mutable_msg();
  void set_allocated_msg(::CSVCMsg_UserMessage* msg);
  private:
  const ::CSVCMsg_UserMessage& _internal_msg() const;
  ::CSVCMsg_UserMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::CSVCMsg_UserMessage* msg);
  ::CSVCMsg_UserMessage* unsafe_arena_release_msg();

  // optional int32 tick = 1;
  bool has_tick() const;
  private:
  bool _internal_has_tick() const;
  public:
  void clear_tick();
  ::PROTOBUF_NAMESPACE_ID::int32 tick() const;
  void set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tick() const;
  void _internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsgList_UserMessages.usermsg_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CSVCMsg_UserMessage* msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 tick_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsgList_UserMessages PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsgList_UserMessages) */ {
 public:
  inline CSVCMsgList_UserMessages() : CSVCMsgList_UserMessages(nullptr) {}
  virtual ~CSVCMsgList_UserMessages();
  explicit constexpr CSVCMsgList_UserMessages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsgList_UserMessages(const CSVCMsgList_UserMessages& from);
  CSVCMsgList_UserMessages(CSVCMsgList_UserMessages&& from) noexcept
    : CSVCMsgList_UserMessages() {
    *this = ::std::move(from);
  }

  inline CSVCMsgList_UserMessages& operator=(const CSVCMsgList_UserMessages& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsgList_UserMessages& operator=(CSVCMsgList_UserMessages&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsgList_UserMessages& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsgList_UserMessages* internal_default_instance() {
    return reinterpret_cast<const CSVCMsgList_UserMessages*>(
               &_CSVCMsgList_UserMessages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CSVCMsgList_UserMessages& a, CSVCMsgList_UserMessages& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsgList_UserMessages* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsgList_UserMessages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsgList_UserMessages* New() const final {
    return CreateMaybeMessage<CSVCMsgList_UserMessages>(nullptr);
  }

  CSVCMsgList_UserMessages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsgList_UserMessages>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsgList_UserMessages& from);
  void MergeFrom(const CSVCMsgList_UserMessages& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsgList_UserMessages* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsgList_UserMessages";
  }
  protected:
  explicit CSVCMsgList_UserMessages(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CSVCMsgList_UserMessages_usermsg_t usermsg_t;

  // accessors -------------------------------------------------------

  enum : int {
    kUsermsgsFieldNumber = 1,
  };
  // repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
  int usermsgs_size() const;
  private:
  int _internal_usermsgs_size() const;
  public:
  void clear_usermsgs();
  ::CSVCMsgList_UserMessages_usermsg_t* mutable_usermsgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_UserMessages_usermsg_t >*
      mutable_usermsgs();
  private:
  const ::CSVCMsgList_UserMessages_usermsg_t& _internal_usermsgs(int index) const;
  ::CSVCMsgList_UserMessages_usermsg_t* _internal_add_usermsgs();
  public:
  const ::CSVCMsgList_UserMessages_usermsg_t& usermsgs(int index) const;
  ::CSVCMsgList_UserMessages_usermsg_t* add_usermsgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_UserMessages_usermsg_t >&
      usermsgs() const;

  // @@protoc_insertion_point(class_scope:CSVCMsgList_UserMessages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_UserMessages_usermsg_t > usermsgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SpawnGroup_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SpawnGroup_Load) */ {
 public:
  inline CNETMsg_SpawnGroup_Load() : CNETMsg_SpawnGroup_Load(nullptr) {}
  virtual ~CNETMsg_SpawnGroup_Load();
  explicit constexpr CNETMsg_SpawnGroup_Load(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SpawnGroup_Load(const CNETMsg_SpawnGroup_Load& from);
  CNETMsg_SpawnGroup_Load(CNETMsg_SpawnGroup_Load&& from) noexcept
    : CNETMsg_SpawnGroup_Load() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SpawnGroup_Load& operator=(const CNETMsg_SpawnGroup_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SpawnGroup_Load& operator=(CNETMsg_SpawnGroup_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SpawnGroup_Load& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SpawnGroup_Load* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SpawnGroup_Load*>(
               &_CNETMsg_SpawnGroup_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CNETMsg_SpawnGroup_Load& a, CNETMsg_SpawnGroup_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SpawnGroup_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SpawnGroup_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SpawnGroup_Load* New() const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_Load>(nullptr);
  }

  CNETMsg_SpawnGroup_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SpawnGroup_Load& from);
  void MergeFrom(const CNETMsg_SpawnGroup_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SpawnGroup_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SpawnGroup_Load";
  }
  protected:
  explicit CNETMsg_SpawnGroup_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldnameFieldNumber = 1,
    kEntitylumpnameFieldNumber = 2,
    kEntityfilternameFieldNumber = 3,
    kSpawngroupmanifestFieldNumber = 8,
    kLocalnamefixupFieldNumber = 12,
    kParentnamefixupFieldNumber = 13,
    kSavegamefilenameFieldNumber = 17,
    kWorldOffsetPosFieldNumber = 6,
    kWorldOffsetAngleFieldNumber = 7,
    kSpawngrouphandleFieldNumber = 4,
    kSpawngroupownerhandleFieldNumber = 5,
    kFlagsFieldNumber = 9,
    kTickcountFieldNumber = 10,
    kManifestloadpriorityFieldNumber = 14,
    kWorldgroupidFieldNumber = 15,
    kManifestincompleteFieldNumber = 11,
    kLeveltransitionFieldNumber = 19,
    kCreationsequenceFieldNumber = 16,
    kSpawngroupparenthandleFieldNumber = 18,
  };
  // optional string worldname = 1;
  bool has_worldname() const;
  private:
  bool _internal_has_worldname() const;
  public:
  void clear_worldname();
  const std::string& worldname() const;
  void set_worldname(const std::string& value);
  void set_worldname(std::string&& value);
  void set_worldname(const char* value);
  void set_worldname(const char* value, size_t size);
  std::string* mutable_worldname();
  std::string* release_worldname();
  void set_allocated_worldname(std::string* worldname);
  private:
  const std::string& _internal_worldname() const;
  void _internal_set_worldname(const std::string& value);
  std::string* _internal_mutable_worldname();
  public:

  // optional string entitylumpname = 2;
  bool has_entitylumpname() const;
  private:
  bool _internal_has_entitylumpname() const;
  public:
  void clear_entitylumpname();
  const std::string& entitylumpname() const;
  void set_entitylumpname(const std::string& value);
  void set_entitylumpname(std::string&& value);
  void set_entitylumpname(const char* value);
  void set_entitylumpname(const char* value, size_t size);
  std::string* mutable_entitylumpname();
  std::string* release_entitylumpname();
  void set_allocated_entitylumpname(std::string* entitylumpname);
  private:
  const std::string& _internal_entitylumpname() const;
  void _internal_set_entitylumpname(const std::string& value);
  std::string* _internal_mutable_entitylumpname();
  public:

  // optional string entityfiltername = 3;
  bool has_entityfiltername() const;
  private:
  bool _internal_has_entityfiltername() const;
  public:
  void clear_entityfiltername();
  const std::string& entityfiltername() const;
  void set_entityfiltername(const std::string& value);
  void set_entityfiltername(std::string&& value);
  void set_entityfiltername(const char* value);
  void set_entityfiltername(const char* value, size_t size);
  std::string* mutable_entityfiltername();
  std::string* release_entityfiltername();
  void set_allocated_entityfiltername(std::string* entityfiltername);
  private:
  const std::string& _internal_entityfiltername() const;
  void _internal_set_entityfiltername(const std::string& value);
  std::string* _internal_mutable_entityfiltername();
  public:

  // optional bytes spawngroupmanifest = 8;
  bool has_spawngroupmanifest() const;
  private:
  bool _internal_has_spawngroupmanifest() const;
  public:
  void clear_spawngroupmanifest();
  const std::string& spawngroupmanifest() const;
  void set_spawngroupmanifest(const std::string& value);
  void set_spawngroupmanifest(std::string&& value);
  void set_spawngroupmanifest(const char* value);
  void set_spawngroupmanifest(const void* value, size_t size);
  std::string* mutable_spawngroupmanifest();
  std::string* release_spawngroupmanifest();
  void set_allocated_spawngroupmanifest(std::string* spawngroupmanifest);
  private:
  const std::string& _internal_spawngroupmanifest() const;
  void _internal_set_spawngroupmanifest(const std::string& value);
  std::string* _internal_mutable_spawngroupmanifest();
  public:

  // optional string localnamefixup = 12;
  bool has_localnamefixup() const;
  private:
  bool _internal_has_localnamefixup() const;
  public:
  void clear_localnamefixup();
  const std::string& localnamefixup() const;
  void set_localnamefixup(const std::string& value);
  void set_localnamefixup(std::string&& value);
  void set_localnamefixup(const char* value);
  void set_localnamefixup(const char* value, size_t size);
  std::string* mutable_localnamefixup();
  std::string* release_localnamefixup();
  void set_allocated_localnamefixup(std::string* localnamefixup);
  private:
  const std::string& _internal_localnamefixup() const;
  void _internal_set_localnamefixup(const std::string& value);
  std::string* _internal_mutable_localnamefixup();
  public:

  // optional string parentnamefixup = 13;
  bool has_parentnamefixup() const;
  private:
  bool _internal_has_parentnamefixup() const;
  public:
  void clear_parentnamefixup();
  const std::string& parentnamefixup() const;
  void set_parentnamefixup(const std::string& value);
  void set_parentnamefixup(std::string&& value);
  void set_parentnamefixup(const char* value);
  void set_parentnamefixup(const char* value, size_t size);
  std::string* mutable_parentnamefixup();
  std::string* release_parentnamefixup();
  void set_allocated_parentnamefixup(std::string* parentnamefixup);
  private:
  const std::string& _internal_parentnamefixup() const;
  void _internal_set_parentnamefixup(const std::string& value);
  std::string* _internal_mutable_parentnamefixup();
  public:

  // optional string savegamefilename = 17;
  bool has_savegamefilename() const;
  private:
  bool _internal_has_savegamefilename() const;
  public:
  void clear_savegamefilename();
  const std::string& savegamefilename() const;
  void set_savegamefilename(const std::string& value);
  void set_savegamefilename(std::string&& value);
  void set_savegamefilename(const char* value);
  void set_savegamefilename(const char* value, size_t size);
  std::string* mutable_savegamefilename();
  std::string* release_savegamefilename();
  void set_allocated_savegamefilename(std::string* savegamefilename);
  private:
  const std::string& _internal_savegamefilename() const;
  void _internal_set_savegamefilename(const std::string& value);
  std::string* _internal_mutable_savegamefilename();
  public:

  // optional .CMsgVector world_offset_pos = 6;
  bool has_world_offset_pos() const;
  private:
  bool _internal_has_world_offset_pos() const;
  public:
  void clear_world_offset_pos();
  const ::CMsgVector& world_offset_pos() const;
  ::CMsgVector* release_world_offset_pos();
  ::CMsgVector* mutable_world_offset_pos();
  void set_allocated_world_offset_pos(::CMsgVector* world_offset_pos);
  private:
  const ::CMsgVector& _internal_world_offset_pos() const;
  ::CMsgVector* _internal_mutable_world_offset_pos();
  public:
  void unsafe_arena_set_allocated_world_offset_pos(
      ::CMsgVector* world_offset_pos);
  ::CMsgVector* unsafe_arena_release_world_offset_pos();

  // optional .CMsgQAngle world_offset_angle = 7;
  bool has_world_offset_angle() const;
  private:
  bool _internal_has_world_offset_angle() const;
  public:
  void clear_world_offset_angle();
  const ::CMsgQAngle& world_offset_angle() const;
  ::CMsgQAngle* release_world_offset_angle();
  ::CMsgQAngle* mutable_world_offset_angle();
  void set_allocated_world_offset_angle(::CMsgQAngle* world_offset_angle);
  private:
  const ::CMsgQAngle& _internal_world_offset_angle() const;
  ::CMsgQAngle* _internal_mutable_world_offset_angle();
  public:
  void unsafe_arena_set_allocated_world_offset_angle(
      ::CMsgQAngle* world_offset_angle);
  ::CMsgQAngle* unsafe_arena_release_world_offset_angle();

  // optional uint32 spawngrouphandle = 4;
  bool has_spawngrouphandle() const;
  private:
  bool _internal_has_spawngrouphandle() const;
  public:
  void clear_spawngrouphandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle() const;
  void set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngrouphandle() const;
  void _internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spawngroupownerhandle = 5;
  bool has_spawngroupownerhandle() const;
  private:
  bool _internal_has_spawngroupownerhandle() const;
  public:
  void clear_spawngroupownerhandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngroupownerhandle() const;
  void set_spawngroupownerhandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngroupownerhandle() const;
  void _internal_set_spawngroupownerhandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 9;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 tickcount = 10;
  bool has_tickcount() const;
  private:
  bool _internal_has_tickcount() const;
  public:
  void clear_tickcount();
  ::PROTOBUF_NAMESPACE_ID::int32 tickcount() const;
  void set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tickcount() const;
  void _internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 manifestloadpriority = 14;
  bool has_manifestloadpriority() const;
  private:
  bool _internal_has_manifestloadpriority() const;
  public:
  void clear_manifestloadpriority();
  ::PROTOBUF_NAMESPACE_ID::int32 manifestloadpriority() const;
  void set_manifestloadpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_manifestloadpriority() const;
  void _internal_set_manifestloadpriority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 worldgroupid = 15;
  bool has_worldgroupid() const;
  private:
  bool _internal_has_worldgroupid() const;
  public:
  void clear_worldgroupid();
  ::PROTOBUF_NAMESPACE_ID::uint32 worldgroupid() const;
  void set_worldgroupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_worldgroupid() const;
  void _internal_set_worldgroupid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool manifestincomplete = 11;
  bool has_manifestincomplete() const;
  private:
  bool _internal_has_manifestincomplete() const;
  public:
  void clear_manifestincomplete();
  bool manifestincomplete() const;
  void set_manifestincomplete(bool value);
  private:
  bool _internal_manifestincomplete() const;
  void _internal_set_manifestincomplete(bool value);
  public:

  // optional bool leveltransition = 19;
  bool has_leveltransition() const;
  private:
  bool _internal_has_leveltransition() const;
  public:
  void clear_leveltransition();
  bool leveltransition() const;
  void set_leveltransition(bool value);
  private:
  bool _internal_leveltransition() const;
  void _internal_set_leveltransition(bool value);
  public:

  // optional uint32 creationsequence = 16;
  bool has_creationsequence() const;
  private:
  bool _internal_has_creationsequence() const;
  public:
  void clear_creationsequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 creationsequence() const;
  void set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_creationsequence() const;
  void _internal_set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 spawngroupparenthandle = 18;
  bool has_spawngroupparenthandle() const;
  private:
  bool _internal_has_spawngroupparenthandle() const;
  public:
  void clear_spawngroupparenthandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngroupparenthandle() const;
  void set_spawngroupparenthandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngroupparenthandle() const;
  void _internal_set_spawngroupparenthandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SpawnGroup_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr worldname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entitylumpname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entityfiltername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spawngroupmanifest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localnamefixup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentnamefixup_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr savegamefilename_;
  ::CMsgVector* world_offset_pos_;
  ::CMsgQAngle* world_offset_angle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngroupownerhandle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 tickcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 manifestloadpriority_;
  ::PROTOBUF_NAMESPACE_ID::uint32 worldgroupid_;
  bool manifestincomplete_;
  bool leveltransition_;
  ::PROTOBUF_NAMESPACE_ID::uint32 creationsequence_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngroupparenthandle_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SpawnGroup_ManifestUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SpawnGroup_ManifestUpdate) */ {
 public:
  inline CNETMsg_SpawnGroup_ManifestUpdate() : CNETMsg_SpawnGroup_ManifestUpdate(nullptr) {}
  virtual ~CNETMsg_SpawnGroup_ManifestUpdate();
  explicit constexpr CNETMsg_SpawnGroup_ManifestUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SpawnGroup_ManifestUpdate(const CNETMsg_SpawnGroup_ManifestUpdate& from);
  CNETMsg_SpawnGroup_ManifestUpdate(CNETMsg_SpawnGroup_ManifestUpdate&& from) noexcept
    : CNETMsg_SpawnGroup_ManifestUpdate() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SpawnGroup_ManifestUpdate& operator=(const CNETMsg_SpawnGroup_ManifestUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SpawnGroup_ManifestUpdate& operator=(CNETMsg_SpawnGroup_ManifestUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SpawnGroup_ManifestUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SpawnGroup_ManifestUpdate* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SpawnGroup_ManifestUpdate*>(
               &_CNETMsg_SpawnGroup_ManifestUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CNETMsg_SpawnGroup_ManifestUpdate& a, CNETMsg_SpawnGroup_ManifestUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SpawnGroup_ManifestUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SpawnGroup_ManifestUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SpawnGroup_ManifestUpdate* New() const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_ManifestUpdate>(nullptr);
  }

  CNETMsg_SpawnGroup_ManifestUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_ManifestUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from);
  void MergeFrom(const CNETMsg_SpawnGroup_ManifestUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SpawnGroup_ManifestUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SpawnGroup_ManifestUpdate";
  }
  protected:
  explicit CNETMsg_SpawnGroup_ManifestUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawngroupmanifestFieldNumber = 2,
    kSpawngrouphandleFieldNumber = 1,
    kManifestincompleteFieldNumber = 3,
  };
  // optional bytes spawngroupmanifest = 2;
  bool has_spawngroupmanifest() const;
  private:
  bool _internal_has_spawngroupmanifest() const;
  public:
  void clear_spawngroupmanifest();
  const std::string& spawngroupmanifest() const;
  void set_spawngroupmanifest(const std::string& value);
  void set_spawngroupmanifest(std::string&& value);
  void set_spawngroupmanifest(const char* value);
  void set_spawngroupmanifest(const void* value, size_t size);
  std::string* mutable_spawngroupmanifest();
  std::string* release_spawngroupmanifest();
  void set_allocated_spawngroupmanifest(std::string* spawngroupmanifest);
  private:
  const std::string& _internal_spawngroupmanifest() const;
  void _internal_set_spawngroupmanifest(const std::string& value);
  std::string* _internal_mutable_spawngroupmanifest();
  public:

  // optional uint32 spawngrouphandle = 1;
  bool has_spawngrouphandle() const;
  private:
  bool _internal_has_spawngrouphandle() const;
  public:
  void clear_spawngrouphandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle() const;
  void set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngrouphandle() const;
  void _internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool manifestincomplete = 3;
  bool has_manifestincomplete() const;
  private:
  bool _internal_has_manifestincomplete() const;
  public:
  void clear_manifestincomplete();
  bool manifestincomplete() const;
  void set_manifestincomplete(bool value);
  private:
  bool _internal_manifestincomplete() const;
  void _internal_set_manifestincomplete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SpawnGroup_ManifestUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spawngroupmanifest_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle_;
  bool manifestincomplete_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SpawnGroup_SetCreationTick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SpawnGroup_SetCreationTick) */ {
 public:
  inline CNETMsg_SpawnGroup_SetCreationTick() : CNETMsg_SpawnGroup_SetCreationTick(nullptr) {}
  virtual ~CNETMsg_SpawnGroup_SetCreationTick();
  explicit constexpr CNETMsg_SpawnGroup_SetCreationTick(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SpawnGroup_SetCreationTick(const CNETMsg_SpawnGroup_SetCreationTick& from);
  CNETMsg_SpawnGroup_SetCreationTick(CNETMsg_SpawnGroup_SetCreationTick&& from) noexcept
    : CNETMsg_SpawnGroup_SetCreationTick() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SpawnGroup_SetCreationTick& operator=(const CNETMsg_SpawnGroup_SetCreationTick& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SpawnGroup_SetCreationTick& operator=(CNETMsg_SpawnGroup_SetCreationTick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SpawnGroup_SetCreationTick& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SpawnGroup_SetCreationTick* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SpawnGroup_SetCreationTick*>(
               &_CNETMsg_SpawnGroup_SetCreationTick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CNETMsg_SpawnGroup_SetCreationTick& a, CNETMsg_SpawnGroup_SetCreationTick& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SpawnGroup_SetCreationTick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SpawnGroup_SetCreationTick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SpawnGroup_SetCreationTick* New() const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_SetCreationTick>(nullptr);
  }

  CNETMsg_SpawnGroup_SetCreationTick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_SetCreationTick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SpawnGroup_SetCreationTick& from);
  void MergeFrom(const CNETMsg_SpawnGroup_SetCreationTick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SpawnGroup_SetCreationTick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SpawnGroup_SetCreationTick";
  }
  protected:
  explicit CNETMsg_SpawnGroup_SetCreationTick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawngrouphandleFieldNumber = 1,
    kTickcountFieldNumber = 2,
    kCreationsequenceFieldNumber = 3,
  };
  // optional uint32 spawngrouphandle = 1;
  bool has_spawngrouphandle() const;
  private:
  bool _internal_has_spawngrouphandle() const;
  public:
  void clear_spawngrouphandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle() const;
  void set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngrouphandle() const;
  void _internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 tickcount = 2;
  bool has_tickcount() const;
  private:
  bool _internal_has_tickcount() const;
  public:
  void clear_tickcount();
  ::PROTOBUF_NAMESPACE_ID::int32 tickcount() const;
  void set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tickcount() const;
  void _internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 creationsequence = 3;
  bool has_creationsequence() const;
  private:
  bool _internal_has_creationsequence() const;
  public:
  void clear_creationsequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 creationsequence() const;
  void set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_creationsequence() const;
  void _internal_set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SpawnGroup_SetCreationTick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle_;
  ::PROTOBUF_NAMESPACE_ID::int32 tickcount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 creationsequence_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SpawnGroup_Unload PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SpawnGroup_Unload) */ {
 public:
  inline CNETMsg_SpawnGroup_Unload() : CNETMsg_SpawnGroup_Unload(nullptr) {}
  virtual ~CNETMsg_SpawnGroup_Unload();
  explicit constexpr CNETMsg_SpawnGroup_Unload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SpawnGroup_Unload(const CNETMsg_SpawnGroup_Unload& from);
  CNETMsg_SpawnGroup_Unload(CNETMsg_SpawnGroup_Unload&& from) noexcept
    : CNETMsg_SpawnGroup_Unload() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SpawnGroup_Unload& operator=(const CNETMsg_SpawnGroup_Unload& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SpawnGroup_Unload& operator=(CNETMsg_SpawnGroup_Unload&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SpawnGroup_Unload& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SpawnGroup_Unload* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SpawnGroup_Unload*>(
               &_CNETMsg_SpawnGroup_Unload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CNETMsg_SpawnGroup_Unload& a, CNETMsg_SpawnGroup_Unload& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SpawnGroup_Unload* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SpawnGroup_Unload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SpawnGroup_Unload* New() const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_Unload>(nullptr);
  }

  CNETMsg_SpawnGroup_Unload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_Unload>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SpawnGroup_Unload& from);
  void MergeFrom(const CNETMsg_SpawnGroup_Unload& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SpawnGroup_Unload* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SpawnGroup_Unload";
  }
  protected:
  explicit CNETMsg_SpawnGroup_Unload(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawngrouphandleFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kTickcountFieldNumber = 3,
  };
  // optional uint32 spawngrouphandle = 1;
  bool has_spawngrouphandle() const;
  private:
  bool _internal_has_spawngrouphandle() const;
  public:
  void clear_spawngrouphandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle() const;
  void set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngrouphandle() const;
  void _internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 tickcount = 3;
  bool has_tickcount() const;
  private:
  bool _internal_has_tickcount() const;
  public:
  void clear_tickcount();
  ::PROTOBUF_NAMESPACE_ID::int32 tickcount() const;
  void set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tickcount() const;
  void _internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SpawnGroup_Unload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 tickcount_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CNETMsg_SpawnGroup_LoadCompleted PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CNETMsg_SpawnGroup_LoadCompleted) */ {
 public:
  inline CNETMsg_SpawnGroup_LoadCompleted() : CNETMsg_SpawnGroup_LoadCompleted(nullptr) {}
  virtual ~CNETMsg_SpawnGroup_LoadCompleted();
  explicit constexpr CNETMsg_SpawnGroup_LoadCompleted(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CNETMsg_SpawnGroup_LoadCompleted(const CNETMsg_SpawnGroup_LoadCompleted& from);
  CNETMsg_SpawnGroup_LoadCompleted(CNETMsg_SpawnGroup_LoadCompleted&& from) noexcept
    : CNETMsg_SpawnGroup_LoadCompleted() {
    *this = ::std::move(from);
  }

  inline CNETMsg_SpawnGroup_LoadCompleted& operator=(const CNETMsg_SpawnGroup_LoadCompleted& from) {
    CopyFrom(from);
    return *this;
  }
  inline CNETMsg_SpawnGroup_LoadCompleted& operator=(CNETMsg_SpawnGroup_LoadCompleted&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CNETMsg_SpawnGroup_LoadCompleted& default_instance() {
    return *internal_default_instance();
  }
  static inline const CNETMsg_SpawnGroup_LoadCompleted* internal_default_instance() {
    return reinterpret_cast<const CNETMsg_SpawnGroup_LoadCompleted*>(
               &_CNETMsg_SpawnGroup_LoadCompleted_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CNETMsg_SpawnGroup_LoadCompleted& a, CNETMsg_SpawnGroup_LoadCompleted& b) {
    a.Swap(&b);
  }
  inline void Swap(CNETMsg_SpawnGroup_LoadCompleted* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CNETMsg_SpawnGroup_LoadCompleted* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CNETMsg_SpawnGroup_LoadCompleted* New() const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_LoadCompleted>(nullptr);
  }

  CNETMsg_SpawnGroup_LoadCompleted* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CNETMsg_SpawnGroup_LoadCompleted>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CNETMsg_SpawnGroup_LoadCompleted& from);
  void MergeFrom(const CNETMsg_SpawnGroup_LoadCompleted& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CNETMsg_SpawnGroup_LoadCompleted* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CNETMsg_SpawnGroup_LoadCompleted";
  }
  protected:
  explicit CNETMsg_SpawnGroup_LoadCompleted(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpawngrouphandleFieldNumber = 1,
  };
  // optional uint32 spawngrouphandle = 1;
  bool has_spawngrouphandle() const;
  private:
  bool _internal_has_spawngrouphandle() const;
  public:
  void clear_spawngrouphandle();
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle() const;
  void set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_spawngrouphandle() const;
  void _internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CNETMsg_SpawnGroup_LoadCompleted)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 spawngrouphandle_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// -------------------------------------------------------------------

class CSVCMsg_GameSessionConfiguration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CSVCMsg_GameSessionConfiguration) */ {
 public:
  inline CSVCMsg_GameSessionConfiguration() : CSVCMsg_GameSessionConfiguration(nullptr) {}
  virtual ~CSVCMsg_GameSessionConfiguration();
  explicit constexpr CSVCMsg_GameSessionConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CSVCMsg_GameSessionConfiguration(const CSVCMsg_GameSessionConfiguration& from);
  CSVCMsg_GameSessionConfiguration(CSVCMsg_GameSessionConfiguration&& from) noexcept
    : CSVCMsg_GameSessionConfiguration() {
    *this = ::std::move(from);
  }

  inline CSVCMsg_GameSessionConfiguration& operator=(const CSVCMsg_GameSessionConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSVCMsg_GameSessionConfiguration& operator=(CSVCMsg_GameSessionConfiguration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CSVCMsg_GameSessionConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const CSVCMsg_GameSessionConfiguration* internal_default_instance() {
    return reinterpret_cast<const CSVCMsg_GameSessionConfiguration*>(
               &_CSVCMsg_GameSessionConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CSVCMsg_GameSessionConfiguration& a, CSVCMsg_GameSessionConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(CSVCMsg_GameSessionConfiguration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSVCMsg_GameSessionConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CSVCMsg_GameSessionConfiguration* New() const final {
    return CreateMaybeMessage<CSVCMsg_GameSessionConfiguration>(nullptr);
  }

  CSVCMsg_GameSessionConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CSVCMsg_GameSessionConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CSVCMsg_GameSessionConfiguration& from);
  void MergeFrom(const CSVCMsg_GameSessionConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CSVCMsg_GameSessionConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CSVCMsg_GameSessionConfiguration";
  }
  protected:
  explicit CSVCMsg_GameSessionConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_networkbasetypes_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 9,
    kSavegamenameFieldNumber = 10,
    kS1MapnameFieldNumber = 11,
    kGamemodeFieldNumber = 12,
    kServerIpAddressFieldNumber = 13,
    kDataFieldNumber = 14,
    kPreviouslevelFieldNumber = 17,
    kLandmarknameFieldNumber = 18,
    kIsMultiplayerFieldNumber = 1,
    kIsLoadsavegameFieldNumber = 2,
    kIsBackgroundMapFieldNumber = 3,
    kIsHeadlessFieldNumber = 4,
    kMinClientLimitFieldNumber = 5,
    kMaxClientLimitFieldNumber = 6,
    kMaxClientsFieldNumber = 7,
    kTickIntervalFieldNumber = 8,
    kIsLocalonlyFieldNumber = 15,
    kNoSteamServerFieldNumber = 19,
    kIsTransitionFieldNumber = 16,
  };
  // optional string hostname = 9;
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // optional string savegamename = 10;
  bool has_savegamename() const;
  private:
  bool _internal_has_savegamename() const;
  public:
  void clear_savegamename();
  const std::string& savegamename() const;
  void set_savegamename(const std::string& value);
  void set_savegamename(std::string&& value);
  void set_savegamename(const char* value);
  void set_savegamename(const char* value, size_t size);
  std::string* mutable_savegamename();
  std::string* release_savegamename();
  void set_allocated_savegamename(std::string* savegamename);
  private:
  const std::string& _internal_savegamename() const;
  void _internal_set_savegamename(const std::string& value);
  std::string* _internal_mutable_savegamename();
  public:

  // optional string s1_mapname = 11;
  bool has_s1_mapname() const;
  private:
  bool _internal_has_s1_mapname() const;
  public:
  void clear_s1_mapname();
  const std::string& s1_mapname() const;
  void set_s1_mapname(const std::string& value);
  void set_s1_mapname(std::string&& value);
  void set_s1_mapname(const char* value);
  void set_s1_mapname(const char* value, size_t size);
  std::string* mutable_s1_mapname();
  std::string* release_s1_mapname();
  void set_allocated_s1_mapname(std::string* s1_mapname);
  private:
  const std::string& _internal_s1_mapname() const;
  void _internal_set_s1_mapname(const std::string& value);
  std::string* _internal_mutable_s1_mapname();
  public:

  // optional string gamemode = 12;
  bool has_gamemode() const;
  private:
  bool _internal_has_gamemode() const;
  public:
  void clear_gamemode();
  const std::string& gamemode() const;
  void set_gamemode(const std::string& value);
  void set_gamemode(std::string&& value);
  void set_gamemode(const char* value);
  void set_gamemode(const char* value, size_t size);
  std::string* mutable_gamemode();
  std::string* release_gamemode();
  void set_allocated_gamemode(std::string* gamemode);
  private:
  const std::string& _internal_gamemode() const;
  void _internal_set_gamemode(const std::string& value);
  std::string* _internal_mutable_gamemode();
  public:

  // optional string server_ip_address = 13;
  bool has_server_ip_address() const;
  private:
  bool _internal_has_server_ip_address() const;
  public:
  void clear_server_ip_address();
  const std::string& server_ip_address() const;
  void set_server_ip_address(const std::string& value);
  void set_server_ip_address(std::string&& value);
  void set_server_ip_address(const char* value);
  void set_server_ip_address(const char* value, size_t size);
  std::string* mutable_server_ip_address();
  std::string* release_server_ip_address();
  void set_allocated_server_ip_address(std::string* server_ip_address);
  private:
  const std::string& _internal_server_ip_address() const;
  void _internal_set_server_ip_address(const std::string& value);
  std::string* _internal_mutable_server_ip_address();
  public:

  // optional bytes data = 14;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional string previouslevel = 17;
  bool has_previouslevel() const;
  private:
  bool _internal_has_previouslevel() const;
  public:
  void clear_previouslevel();
  const std::string& previouslevel() const;
  void set_previouslevel(const std::string& value);
  void set_previouslevel(std::string&& value);
  void set_previouslevel(const char* value);
  void set_previouslevel(const char* value, size_t size);
  std::string* mutable_previouslevel();
  std::string* release_previouslevel();
  void set_allocated_previouslevel(std::string* previouslevel);
  private:
  const std::string& _internal_previouslevel() const;
  void _internal_set_previouslevel(const std::string& value);
  std::string* _internal_mutable_previouslevel();
  public:

  // optional string landmarkname = 18;
  bool has_landmarkname() const;
  private:
  bool _internal_has_landmarkname() const;
  public:
  void clear_landmarkname();
  const std::string& landmarkname() const;
  void set_landmarkname(const std::string& value);
  void set_landmarkname(std::string&& value);
  void set_landmarkname(const char* value);
  void set_landmarkname(const char* value, size_t size);
  std::string* mutable_landmarkname();
  std::string* release_landmarkname();
  void set_allocated_landmarkname(std::string* landmarkname);
  private:
  const std::string& _internal_landmarkname() const;
  void _internal_set_landmarkname(const std::string& value);
  std::string* _internal_mutable_landmarkname();
  public:

  // optional bool is_multiplayer = 1;
  bool has_is_multiplayer() const;
  private:
  bool _internal_has_is_multiplayer() const;
  public:
  void clear_is_multiplayer();
  bool is_multiplayer() const;
  void set_is_multiplayer(bool value);
  private:
  bool _internal_is_multiplayer() const;
  void _internal_set_is_multiplayer(bool value);
  public:

  // optional bool is_loadsavegame = 2;
  bool has_is_loadsavegame() const;
  private:
  bool _internal_has_is_loadsavegame() const;
  public:
  void clear_is_loadsavegame();
  bool is_loadsavegame() const;
  void set_is_loadsavegame(bool value);
  private:
  bool _internal_is_loadsavegame() const;
  void _internal_set_is_loadsavegame(bool value);
  public:

  // optional bool is_background_map = 3;
  bool has_is_background_map() const;
  private:
  bool _internal_has_is_background_map() const;
  public:
  void clear_is_background_map();
  bool is_background_map() const;
  void set_is_background_map(bool value);
  private:
  bool _internal_is_background_map() const;
  void _internal_set_is_background_map(bool value);
  public:

  // optional bool is_headless = 4;
  bool has_is_headless() const;
  private:
  bool _internal_has_is_headless() const;
  public:
  void clear_is_headless();
  bool is_headless() const;
  void set_is_headless(bool value);
  private:
  bool _internal_is_headless() const;
  void _internal_set_is_headless(bool value);
  public:

  // optional uint32 min_client_limit = 5;
  bool has_min_client_limit() const;
  private:
  bool _internal_has_min_client_limit() const;
  public:
  void clear_min_client_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_client_limit() const;
  void set_min_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_client_limit() const;
  void _internal_set_min_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_client_limit = 6;
  bool has_max_client_limit() const;
  private:
  bool _internal_has_max_client_limit() const;
  public:
  void clear_max_client_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_client_limit() const;
  void set_max_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_client_limit() const;
  void _internal_set_max_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_clients = 7;
  bool has_max_clients() const;
  private:
  bool _internal_has_max_clients() const;
  public:
  void clear_max_clients();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_clients() const;
  void set_max_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_clients() const;
  void _internal_set_max_clients(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional fixed32 tick_interval = 8;
  bool has_tick_interval() const;
  private:
  bool _internal_has_tick_interval() const;
  public:
  void clear_tick_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_interval() const;
  void set_tick_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tick_interval() const;
  void _internal_set_tick_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_localonly = 15;
  bool has_is_localonly() const;
  private:
  bool _internal_has_is_localonly() const;
  public:
  void clear_is_localonly();
  bool is_localonly() const;
  void set_is_localonly(bool value);
  private:
  bool _internal_is_localonly() const;
  void _internal_set_is_localonly(bool value);
  public:

  // optional bool no_steam_server = 19;
  bool has_no_steam_server() const;
  private:
  bool _internal_has_no_steam_server() const;
  public:
  void clear_no_steam_server();
  bool no_steam_server() const;
  void set_no_steam_server(bool value);
  private:
  bool _internal_no_steam_server() const;
  void _internal_set_no_steam_server(bool value);
  public:

  // optional bool is_transition = 16;
  bool has_is_transition() const;
  private:
  bool _internal_has_is_transition() const;
  public:
  void clear_is_transition();
  bool is_transition() const;
  void set_is_transition(bool value);
  private:
  bool _internal_is_transition() const;
  void _internal_set_is_transition(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CSVCMsg_GameSessionConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr savegamename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_mapname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamemode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr previouslevel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr landmarkname_;
  bool is_multiplayer_;
  bool is_loadsavegame_;
  bool is_background_map_;
  bool is_headless_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_client_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_client_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_clients_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tick_interval_;
  bool is_localonly_;
  bool no_steam_server_;
  bool is_transition_;
  friend struct ::TableStruct_networkbasetypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgVector

// optional float x = 1;
inline bool CMsgVector::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVector::has_x() const {
  return _internal_has_x();
}
inline void CMsgVector::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgVector::_internal_x() const {
  return x_;
}
inline float CMsgVector::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector.x)
  return _internal_x();
}
inline void CMsgVector::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgVector.x)
}

// optional float y = 2;
inline bool CMsgVector::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVector::has_y() const {
  return _internal_has_y();
}
inline void CMsgVector::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgVector::_internal_y() const {
  return y_;
}
inline float CMsgVector::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector.y)
  return _internal_y();
}
inline void CMsgVector::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgVector.y)
}

// optional float z = 3;
inline bool CMsgVector::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgVector::has_z() const {
  return _internal_has_z();
}
inline void CMsgVector::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgVector::_internal_z() const {
  return z_;
}
inline float CMsgVector::z() const {
  // @@protoc_insertion_point(field_get:CMsgVector.z)
  return _internal_z();
}
inline void CMsgVector::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void CMsgVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgVector.z)
}

// -------------------------------------------------------------------

// CMsgVector2D

// optional float x = 1;
inline bool CMsgVector2D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgVector2D::has_x() const {
  return _internal_has_x();
}
inline void CMsgVector2D::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgVector2D::_internal_x() const {
  return x_;
}
inline float CMsgVector2D::x() const {
  // @@protoc_insertion_point(field_get:CMsgVector2D.x)
  return _internal_x();
}
inline void CMsgVector2D::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgVector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgVector2D.x)
}

// optional float y = 2;
inline bool CMsgVector2D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgVector2D::has_y() const {
  return _internal_has_y();
}
inline void CMsgVector2D::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgVector2D::_internal_y() const {
  return y_;
}
inline float CMsgVector2D::y() const {
  // @@protoc_insertion_point(field_get:CMsgVector2D.y)
  return _internal_y();
}
inline void CMsgVector2D::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgVector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgVector2D.y)
}

// -------------------------------------------------------------------

// CMsgQAngle

// optional float x = 1;
inline bool CMsgQAngle::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgQAngle::has_x() const {
  return _internal_has_x();
}
inline void CMsgQAngle::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgQAngle::_internal_x() const {
  return x_;
}
inline float CMsgQAngle::x() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.x)
  return _internal_x();
}
inline void CMsgQAngle::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void CMsgQAngle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.x)
}

// optional float y = 2;
inline bool CMsgQAngle::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgQAngle::has_y() const {
  return _internal_has_y();
}
inline void CMsgQAngle::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgQAngle::_internal_y() const {
  return y_;
}
inline float CMsgQAngle::y() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.y)
  return _internal_y();
}
inline void CMsgQAngle::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void CMsgQAngle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.y)
}

// optional float z = 3;
inline bool CMsgQAngle::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgQAngle::has_z() const {
  return _internal_has_z();
}
inline void CMsgQAngle::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgQAngle::_internal_z() const {
  return z_;
}
inline float CMsgQAngle::z() const {
  // @@protoc_insertion_point(field_get:CMsgQAngle.z)
  return _internal_z();
}
inline void CMsgQAngle::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void CMsgQAngle::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:CMsgQAngle.z)
}

// -------------------------------------------------------------------

// CMsgRGBA

// optional int32 r = 1;
inline bool CMsgRGBA::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgRGBA::has_r() const {
  return _internal_has_r();
}
inline void CMsgRGBA::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_r() const {
  return r_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::r() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.r)
  return _internal_r();
}
inline void CMsgRGBA::_internal_set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  r_ = value;
}
inline void CMsgRGBA::set_r(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.r)
}

// optional int32 g = 2;
inline bool CMsgRGBA::_internal_has_g() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgRGBA::has_g() const {
  return _internal_has_g();
}
inline void CMsgRGBA::clear_g() {
  g_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_g() const {
  return g_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::g() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.g)
  return _internal_g();
}
inline void CMsgRGBA::_internal_set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  g_ = value;
}
inline void CMsgRGBA::set_g(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.g)
}

// optional int32 b = 3;
inline bool CMsgRGBA::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgRGBA::has_b() const {
  return _internal_has_b();
}
inline void CMsgRGBA::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_b() const {
  return b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::b() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.b)
  return _internal_b();
}
inline void CMsgRGBA::_internal_set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  b_ = value;
}
inline void CMsgRGBA::set_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.b)
}

// optional int32 a = 4;
inline bool CMsgRGBA::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgRGBA::has_a() const {
  return _internal_has_a();
}
inline void CMsgRGBA::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgRGBA::a() const {
  // @@protoc_insertion_point(field_get:CMsgRGBA.a)
  return _internal_a();
}
inline void CMsgRGBA::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  a_ = value;
}
inline void CMsgRGBA::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:CMsgRGBA.a)
}

// -------------------------------------------------------------------

// CMsgPlayerInfo

// optional string name = 1;
inline bool CMsgPlayerInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgPlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgPlayerInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerInfo.name)
  return _internal_name();
}
inline void CMsgPlayerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerInfo.name)
}
inline std::string* CMsgPlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgPlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgPlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void CMsgPlayerInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgPlayerInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgPlayerInfo.name)
}
inline void CMsgPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgPlayerInfo.name)
}
inline void CMsgPlayerInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgPlayerInfo.name)
}
inline std::string* CMsgPlayerInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgPlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgPlayerInfo.name)
}

// optional fixed64 xuid = 2;
inline bool CMsgPlayerInfo::_internal_has_xuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgPlayerInfo::has_xuid() const {
  return _internal_has_xuid();
}
inline void CMsgPlayerInfo::clear_xuid() {
  xuid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerInfo::_internal_xuid() const {
  return xuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerInfo::xuid() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerInfo.xuid)
  return _internal_xuid();
}
inline void CMsgPlayerInfo::_internal_set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  xuid_ = value;
}
inline void CMsgPlayerInfo::set_xuid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_xuid(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerInfo.xuid)
}

// optional int32 userid = 3;
inline bool CMsgPlayerInfo::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgPlayerInfo::has_userid() const {
  return _internal_has_userid();
}
inline void CMsgPlayerInfo::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgPlayerInfo::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgPlayerInfo::userid() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerInfo.userid)
  return _internal_userid();
}
inline void CMsgPlayerInfo::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  userid_ = value;
}
inline void CMsgPlayerInfo::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerInfo.userid)
}

// optional fixed64 steamid = 4;
inline bool CMsgPlayerInfo::_internal_has_steamid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgPlayerInfo::has_steamid() const {
  return _internal_has_steamid();
}
inline void CMsgPlayerInfo::clear_steamid() {
  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerInfo::_internal_steamid() const {
  return steamid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgPlayerInfo::steamid() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerInfo.steamid)
  return _internal_steamid();
}
inline void CMsgPlayerInfo::_internal_set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  steamid_ = value;
}
inline void CMsgPlayerInfo::set_steamid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerInfo.steamid)
}

// optional bool fakeplayer = 5;
inline bool CMsgPlayerInfo::_internal_has_fakeplayer() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgPlayerInfo::has_fakeplayer() const {
  return _internal_has_fakeplayer();
}
inline void CMsgPlayerInfo::clear_fakeplayer() {
  fakeplayer_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgPlayerInfo::_internal_fakeplayer() const {
  return fakeplayer_;
}
inline bool CMsgPlayerInfo::fakeplayer() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerInfo.fakeplayer)
  return _internal_fakeplayer();
}
inline void CMsgPlayerInfo::_internal_set_fakeplayer(bool value) {
  _has_bits_[0] |= 0x00000010u;
  fakeplayer_ = value;
}
inline void CMsgPlayerInfo::set_fakeplayer(bool value) {
  _internal_set_fakeplayer(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerInfo.fakeplayer)
}

// optional bool ishltv = 6;
inline bool CMsgPlayerInfo::_internal_has_ishltv() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgPlayerInfo::has_ishltv() const {
  return _internal_has_ishltv();
}
inline void CMsgPlayerInfo::clear_ishltv() {
  ishltv_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgPlayerInfo::_internal_ishltv() const {
  return ishltv_;
}
inline bool CMsgPlayerInfo::ishltv() const {
  // @@protoc_insertion_point(field_get:CMsgPlayerInfo.ishltv)
  return _internal_ishltv();
}
inline void CMsgPlayerInfo::_internal_set_ishltv(bool value) {
  _has_bits_[0] |= 0x00000020u;
  ishltv_ = value;
}
inline void CMsgPlayerInfo::set_ishltv(bool value) {
  _internal_set_ishltv(value);
  // @@protoc_insertion_point(field_set:CMsgPlayerInfo.ishltv)
}

// -------------------------------------------------------------------

// CEntityMsg

// optional uint32 target_entity = 1;
inline bool CEntityMsg::_internal_has_target_entity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CEntityMsg::has_target_entity() const {
  return _internal_has_target_entity();
}
inline void CEntityMsg::clear_target_entity() {
  target_entity_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEntityMsg::_internal_target_entity() const {
  return target_entity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CEntityMsg::target_entity() const {
  // @@protoc_insertion_point(field_get:CEntityMsg.target_entity)
  return _internal_target_entity();
}
inline void CEntityMsg::_internal_set_target_entity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  target_entity_ = value;
}
inline void CEntityMsg::set_target_entity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_entity(value);
  // @@protoc_insertion_point(field_set:CEntityMsg.target_entity)
}

// -------------------------------------------------------------------

// CMsg_CVars_CVar

// optional string name = 1;
inline bool CMsg_CVars_CVar::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_name() const {
  return _internal_has_name();
}
inline void CMsg_CVars_CVar::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsg_CVars_CVar::name() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.name)
  return _internal_name();
}
inline void CMsg_CVars_CVar::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.name)
}
inline std::string* CMsg_CVars_CVar::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.name)
  return _internal_mutable_name();
}
inline const std::string& CMsg_CVars_CVar::_internal_name() const {
  return name_.Get();
}
inline void CMsg_CVars_CVar::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsg_CVars_CVar::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsg_CVars.CVar.name)
}
inline void CMsg_CVars_CVar::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsg_CVars.CVar.name)
}
inline void CMsg_CVars_CVar::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsg_CVars.CVar.name)
}
inline std::string* CMsg_CVars_CVar::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsg_CVars_CVar::release_name() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsg_CVars_CVar::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.name)
}

// optional string value = 2;
inline bool CMsg_CVars_CVar::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsg_CVars_CVar::has_value() const {
  return _internal_has_value();
}
inline void CMsg_CVars_CVar::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsg_CVars_CVar::value() const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.CVar.value)
  return _internal_value();
}
inline void CMsg_CVars_CVar::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:CMsg_CVars.CVar.value)
}
inline std::string* CMsg_CVars_CVar::mutable_value() {
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.CVar.value)
  return _internal_mutable_value();
}
inline const std::string& CMsg_CVars_CVar::_internal_value() const {
  return value_.Get();
}
inline void CMsg_CVars_CVar::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsg_CVars_CVar::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsg_CVars.CVar.value)
}
inline void CMsg_CVars_CVar::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsg_CVars.CVar.value)
}
inline void CMsg_CVars_CVar::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsg_CVars.CVar.value)
}
inline std::string* CMsg_CVars_CVar::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsg_CVars_CVar::release_value() {
  // @@protoc_insertion_point(field_release:CMsg_CVars.CVar.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsg_CVars_CVar::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsg_CVars.CVar.value)
}

// -------------------------------------------------------------------

// CMsg_CVars

// repeated .CMsg_CVars.CVar cvars = 1;
inline int CMsg_CVars::_internal_cvars_size() const {
  return cvars_.size();
}
inline int CMsg_CVars::cvars_size() const {
  return _internal_cvars_size();
}
inline void CMsg_CVars::clear_cvars() {
  cvars_.Clear();
}
inline ::CMsg_CVars_CVar* CMsg_CVars::mutable_cvars(int index) {
  // @@protoc_insertion_point(field_mutable:CMsg_CVars.cvars)
  return cvars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >*
CMsg_CVars::mutable_cvars() {
  // @@protoc_insertion_point(field_mutable_list:CMsg_CVars.cvars)
  return &cvars_;
}
inline const ::CMsg_CVars_CVar& CMsg_CVars::_internal_cvars(int index) const {
  return cvars_.Get(index);
}
inline const ::CMsg_CVars_CVar& CMsg_CVars::cvars(int index) const {
  // @@protoc_insertion_point(field_get:CMsg_CVars.cvars)
  return _internal_cvars(index);
}
inline ::CMsg_CVars_CVar* CMsg_CVars::_internal_add_cvars() {
  return cvars_.Add();
}
inline ::CMsg_CVars_CVar* CMsg_CVars::add_cvars() {
  // @@protoc_insertion_point(field_add:CMsg_CVars.cvars)
  return _internal_add_cvars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsg_CVars_CVar >&
CMsg_CVars::cvars() const {
  // @@protoc_insertion_point(field_list:CMsg_CVars.cvars)
  return cvars_;
}

// -------------------------------------------------------------------

// CNETMsg_NOP

// -------------------------------------------------------------------

// CNETMsg_SplitScreenUser

// optional int32 slot = 1;
inline bool CNETMsg_SplitScreenUser::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SplitScreenUser::has_slot() const {
  return _internal_has_slot();
}
inline void CNETMsg_SplitScreenUser::clear_slot() {
  slot_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SplitScreenUser::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SplitScreenUser::slot() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SplitScreenUser.slot)
  return _internal_slot();
}
inline void CNETMsg_SplitScreenUser::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  slot_ = value;
}
inline void CNETMsg_SplitScreenUser::set_slot(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SplitScreenUser.slot)
}

// -------------------------------------------------------------------

// CNETMsg_Disconnect

// optional .ENetworkDisconnectionReason reason = 2 [default = NETWORK_DISCONNECT_INVALID];
inline bool CNETMsg_Disconnect::_internal_has_reason() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_Disconnect::has_reason() const {
  return _internal_has_reason();
}
inline void CNETMsg_Disconnect::clear_reason() {
  reason_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ENetworkDisconnectionReason CNETMsg_Disconnect::_internal_reason() const {
  return static_cast< ::ENetworkDisconnectionReason >(reason_);
}
inline ::ENetworkDisconnectionReason CNETMsg_Disconnect::reason() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Disconnect.reason)
  return _internal_reason();
}
inline void CNETMsg_Disconnect::_internal_set_reason(::ENetworkDisconnectionReason value) {
  assert(::ENetworkDisconnectionReason_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  reason_ = value;
}
inline void CNETMsg_Disconnect::set_reason(::ENetworkDisconnectionReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Disconnect.reason)
}

// -------------------------------------------------------------------

// CNETMsg_Tick

// optional uint32 tick = 1;
inline bool CNETMsg_Tick::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_tick() const {
  return _internal_has_tick();
}
inline void CNETMsg_Tick::clear_tick() {
  tick_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::tick() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.tick)
  return _internal_tick();
}
inline void CNETMsg_Tick::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tick_ = value;
}
inline void CNETMsg_Tick::set_tick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.tick)
}

// optional uint32 host_frametime = 2;
inline bool CNETMsg_Tick::_internal_has_host_frametime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_frametime() const {
  return _internal_has_host_frametime();
}
inline void CNETMsg_Tick::clear_host_frametime() {
  host_frametime_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_frametime() const {
  return host_frametime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_frametime() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_frametime)
  return _internal_host_frametime();
}
inline void CNETMsg_Tick::_internal_set_host_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  host_frametime_ = value;
}
inline void CNETMsg_Tick::set_host_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_frametime(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_frametime)
}

// optional uint32 host_frametime_std_deviation = 3;
inline bool CNETMsg_Tick::_internal_has_host_frametime_std_deviation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_frametime_std_deviation() const {
  return _internal_has_host_frametime_std_deviation();
}
inline void CNETMsg_Tick::clear_host_frametime_std_deviation() {
  host_frametime_std_deviation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_frametime_std_deviation() const {
  return host_frametime_std_deviation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_frametime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_frametime_std_deviation)
  return _internal_host_frametime_std_deviation();
}
inline void CNETMsg_Tick::_internal_set_host_frametime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  host_frametime_std_deviation_ = value;
}
inline void CNETMsg_Tick::set_host_frametime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_frametime_std_deviation(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_frametime_std_deviation)
}

// optional uint32 host_computationtime = 4;
inline bool CNETMsg_Tick::_internal_has_host_computationtime() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_computationtime() const {
  return _internal_has_host_computationtime();
}
inline void CNETMsg_Tick::clear_host_computationtime() {
  host_computationtime_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_computationtime() const {
  return host_computationtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_computationtime() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_computationtime)
  return _internal_host_computationtime();
}
inline void CNETMsg_Tick::_internal_set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  host_computationtime_ = value;
}
inline void CNETMsg_Tick::set_host_computationtime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_computationtime(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_computationtime)
}

// optional uint32 host_computationtime_std_deviation = 5;
inline bool CNETMsg_Tick::_internal_has_host_computationtime_std_deviation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_computationtime_std_deviation() const {
  return _internal_has_host_computationtime_std_deviation();
}
inline void CNETMsg_Tick::clear_host_computationtime_std_deviation() {
  host_computationtime_std_deviation_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_computationtime_std_deviation() const {
  return host_computationtime_std_deviation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_computationtime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_computationtime_std_deviation)
  return _internal_host_computationtime_std_deviation();
}
inline void CNETMsg_Tick::_internal_set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  host_computationtime_std_deviation_ = value;
}
inline void CNETMsg_Tick::set_host_computationtime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_computationtime_std_deviation(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_computationtime_std_deviation)
}

// optional uint32 host_framestarttime_std_deviation = 6;
inline bool CNETMsg_Tick::_internal_has_host_framestarttime_std_deviation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_framestarttime_std_deviation() const {
  return _internal_has_host_framestarttime_std_deviation();
}
inline void CNETMsg_Tick::clear_host_framestarttime_std_deviation() {
  host_framestarttime_std_deviation_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_framestarttime_std_deviation() const {
  return host_framestarttime_std_deviation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_framestarttime_std_deviation() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_framestarttime_std_deviation)
  return _internal_host_framestarttime_std_deviation();
}
inline void CNETMsg_Tick::_internal_set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  host_framestarttime_std_deviation_ = value;
}
inline void CNETMsg_Tick::set_host_framestarttime_std_deviation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_framestarttime_std_deviation(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_framestarttime_std_deviation)
}

// optional uint32 host_loss = 7;
inline bool CNETMsg_Tick::_internal_has_host_loss() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_loss() const {
  return _internal_has_host_loss();
}
inline void CNETMsg_Tick::clear_host_loss() {
  host_loss_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_loss() const {
  return host_loss_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_loss() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_loss)
  return _internal_host_loss();
}
inline void CNETMsg_Tick::_internal_set_host_loss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  host_loss_ = value;
}
inline void CNETMsg_Tick::set_host_loss(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_loss(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_loss)
}

// optional uint32 host_unfiltered_frametime = 8;
inline bool CNETMsg_Tick::_internal_has_host_unfiltered_frametime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CNETMsg_Tick::has_host_unfiltered_frametime() const {
  return _internal_has_host_unfiltered_frametime();
}
inline void CNETMsg_Tick::clear_host_unfiltered_frametime() {
  host_unfiltered_frametime_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::_internal_host_unfiltered_frametime() const {
  return host_unfiltered_frametime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_Tick::host_unfiltered_frametime() const {
  // @@protoc_insertion_point(field_get:CNETMsg_Tick.host_unfiltered_frametime)
  return _internal_host_unfiltered_frametime();
}
inline void CNETMsg_Tick::_internal_set_host_unfiltered_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  host_unfiltered_frametime_ = value;
}
inline void CNETMsg_Tick::set_host_unfiltered_frametime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host_unfiltered_frametime(value);
  // @@protoc_insertion_point(field_set:CNETMsg_Tick.host_unfiltered_frametime)
}

// -------------------------------------------------------------------

// CNETMsg_StringCmd

// optional string command = 1;
inline bool CNETMsg_StringCmd::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_StringCmd::has_command() const {
  return _internal_has_command();
}
inline void CNETMsg_StringCmd::clear_command() {
  command_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_StringCmd::command() const {
  // @@protoc_insertion_point(field_get:CNETMsg_StringCmd.command)
  return _internal_command();
}
inline void CNETMsg_StringCmd::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:CNETMsg_StringCmd.command)
}
inline std::string* CNETMsg_StringCmd::mutable_command() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_StringCmd.command)
  return _internal_mutable_command();
}
inline const std::string& CNETMsg_StringCmd::_internal_command() const {
  return command_.Get();
}
inline void CNETMsg_StringCmd::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_StringCmd::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_StringCmd.command)
}
inline void CNETMsg_StringCmd::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_StringCmd.command)
}
inline void CNETMsg_StringCmd::set_command(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_StringCmd.command)
}
inline std::string* CNETMsg_StringCmd::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_StringCmd::release_command() {
  // @@protoc_insertion_point(field_release:CNETMsg_StringCmd.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_StringCmd::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_StringCmd.command)
}

// -------------------------------------------------------------------

// CNETMsg_SetConVar

// optional .CMsg_CVars convars = 1;
inline bool CNETMsg_SetConVar::_internal_has_convars() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || convars_ != nullptr);
  return value;
}
inline bool CNETMsg_SetConVar::has_convars() const {
  return _internal_has_convars();
}
inline void CNETMsg_SetConVar::clear_convars() {
  if (convars_ != nullptr) convars_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsg_CVars& CNETMsg_SetConVar::_internal_convars() const {
  const ::CMsg_CVars* p = convars_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsg_CVars&>(
      ::_CMsg_CVars_default_instance_);
}
inline const ::CMsg_CVars& CNETMsg_SetConVar::convars() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SetConVar.convars)
  return _internal_convars();
}
inline void CNETMsg_SetConVar::unsafe_arena_set_allocated_convars(
    ::CMsg_CVars* convars) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(convars_);
  }
  convars_ = convars;
  if (convars) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNETMsg_SetConVar.convars)
}
inline ::CMsg_CVars* CNETMsg_SetConVar::release_convars() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::unsafe_arena_release_convars() {
  // @@protoc_insertion_point(field_release:CNETMsg_SetConVar.convars)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsg_CVars* temp = convars_;
  convars_ = nullptr;
  return temp;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::_internal_mutable_convars() {
  _has_bits_[0] |= 0x00000001u;
  if (convars_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsg_CVars>(GetArena());
    convars_ = p;
  }
  return convars_;
}
inline ::CMsg_CVars* CNETMsg_SetConVar::mutable_convars() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SetConVar.convars)
  return _internal_mutable_convars();
}
inline void CNETMsg_SetConVar::set_allocated_convars(::CMsg_CVars* convars) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete convars_;
  }
  if (convars) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(convars);
    if (message_arena != submessage_arena) {
      convars = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, convars, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  convars_ = convars;
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SetConVar.convars)
}

// -------------------------------------------------------------------

// CNETMsg_SignonState

// optional .SignonState_t signon_state = 1 [default = SIGNONSTATE_NONE];
inline bool CNETMsg_SignonState::_internal_has_signon_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_signon_state() const {
  return _internal_has_signon_state();
}
inline void CNETMsg_SignonState::clear_signon_state() {
  signon_state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::SignonState_t CNETMsg_SignonState::_internal_signon_state() const {
  return static_cast< ::SignonState_t >(signon_state_);
}
inline ::SignonState_t CNETMsg_SignonState::signon_state() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.signon_state)
  return _internal_signon_state();
}
inline void CNETMsg_SignonState::_internal_set_signon_state(::SignonState_t value) {
  assert(::SignonState_t_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  signon_state_ = value;
}
inline void CNETMsg_SignonState::set_signon_state(::SignonState_t value) {
  _internal_set_signon_state(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.signon_state)
}

// optional uint32 spawn_count = 2;
inline bool CNETMsg_SignonState::_internal_has_spawn_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_spawn_count() const {
  return _internal_has_spawn_count();
}
inline void CNETMsg_SignonState::clear_spawn_count() {
  spawn_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::_internal_spawn_count() const {
  return spawn_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::spawn_count() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.spawn_count)
  return _internal_spawn_count();
}
inline void CNETMsg_SignonState::_internal_set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  spawn_count_ = value;
}
inline void CNETMsg_SignonState::set_spawn_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawn_count(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.spawn_count)
}

// optional uint32 num_server_players = 3;
inline bool CNETMsg_SignonState::_internal_has_num_server_players() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_num_server_players() const {
  return _internal_has_num_server_players();
}
inline void CNETMsg_SignonState::clear_num_server_players() {
  num_server_players_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::_internal_num_server_players() const {
  return num_server_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SignonState::num_server_players() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.num_server_players)
  return _internal_num_server_players();
}
inline void CNETMsg_SignonState::_internal_set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  num_server_players_ = value;
}
inline void CNETMsg_SignonState::set_num_server_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_server_players(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.num_server_players)
}

// repeated string players_networkids = 4;
inline int CNETMsg_SignonState::_internal_players_networkids_size() const {
  return players_networkids_.size();
}
inline int CNETMsg_SignonState::players_networkids_size() const {
  return _internal_players_networkids_size();
}
inline void CNETMsg_SignonState::clear_players_networkids() {
  players_networkids_.Clear();
}
inline std::string* CNETMsg_SignonState::add_players_networkids() {
  // @@protoc_insertion_point(field_add_mutable:CNETMsg_SignonState.players_networkids)
  return _internal_add_players_networkids();
}
inline const std::string& CNETMsg_SignonState::_internal_players_networkids(int index) const {
  return players_networkids_.Get(index);
}
inline const std::string& CNETMsg_SignonState::players_networkids(int index) const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.players_networkids)
  return _internal_players_networkids(index);
}
inline std::string* CNETMsg_SignonState::mutable_players_networkids(int index) {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.players_networkids)
  return players_networkids_.Mutable(index);
}
inline void CNETMsg_SignonState::set_players_networkids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.players_networkids)
  players_networkids_.Mutable(index)->assign(value);
}
inline void CNETMsg_SignonState::set_players_networkids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.players_networkids)
  players_networkids_.Mutable(index)->assign(std::move(value));
}
inline void CNETMsg_SignonState::set_players_networkids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  players_networkids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::set_players_networkids(int index, const char* value, size_t size) {
  players_networkids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SignonState.players_networkids)
}
inline std::string* CNETMsg_SignonState::_internal_add_players_networkids() {
  return players_networkids_.Add();
}
inline void CNETMsg_SignonState::add_players_networkids(const std::string& value) {
  players_networkids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::add_players_networkids(std::string&& value) {
  players_networkids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::add_players_networkids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  players_networkids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:CNETMsg_SignonState.players_networkids)
}
inline void CNETMsg_SignonState::add_players_networkids(const char* value, size_t size) {
  players_networkids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:CNETMsg_SignonState.players_networkids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CNETMsg_SignonState::players_networkids() const {
  // @@protoc_insertion_point(field_list:CNETMsg_SignonState.players_networkids)
  return players_networkids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CNETMsg_SignonState::mutable_players_networkids() {
  // @@protoc_insertion_point(field_mutable_list:CNETMsg_SignonState.players_networkids)
  return &players_networkids_;
}

// optional string map_name = 5;
inline bool CNETMsg_SignonState::_internal_has_map_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_map_name() const {
  return _internal_has_map_name();
}
inline void CNETMsg_SignonState::clear_map_name() {
  map_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_SignonState::map_name() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.map_name)
  return _internal_map_name();
}
inline void CNETMsg_SignonState::set_map_name(const std::string& value) {
  _internal_set_map_name(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.map_name)
}
inline std::string* CNETMsg_SignonState::mutable_map_name() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.map_name)
  return _internal_mutable_map_name();
}
inline const std::string& CNETMsg_SignonState::_internal_map_name() const {
  return map_name_.Get();
}
inline void CNETMsg_SignonState::_internal_set_map_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SignonState::set_map_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SignonState.map_name)
}
inline void CNETMsg_SignonState::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SignonState.map_name)
}
inline void CNETMsg_SignonState::set_map_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  map_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SignonState.map_name)
}
inline std::string* CNETMsg_SignonState::_internal_mutable_map_name() {
  _has_bits_[0] |= 0x00000001u;
  return map_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SignonState::release_map_name() {
  // @@protoc_insertion_point(field_release:CNETMsg_SignonState.map_name)
  if (!_internal_has_map_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SignonState::set_allocated_map_name(std::string* map_name) {
  if (map_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SignonState.map_name)
}

// optional string addons = 6;
inline bool CNETMsg_SignonState::_internal_has_addons() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_SignonState::has_addons() const {
  return _internal_has_addons();
}
inline void CNETMsg_SignonState::clear_addons() {
  addons_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CNETMsg_SignonState::addons() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SignonState.addons)
  return _internal_addons();
}
inline void CNETMsg_SignonState::set_addons(const std::string& value) {
  _internal_set_addons(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SignonState.addons)
}
inline std::string* CNETMsg_SignonState::mutable_addons() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SignonState.addons)
  return _internal_mutable_addons();
}
inline const std::string& CNETMsg_SignonState::_internal_addons() const {
  return addons_.Get();
}
inline void CNETMsg_SignonState::_internal_set_addons(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  addons_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SignonState::set_addons(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  addons_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SignonState.addons)
}
inline void CNETMsg_SignonState::set_addons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  addons_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SignonState.addons)
}
inline void CNETMsg_SignonState::set_addons(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  addons_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SignonState.addons)
}
inline std::string* CNETMsg_SignonState::_internal_mutable_addons() {
  _has_bits_[0] |= 0x00000002u;
  return addons_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SignonState::release_addons() {
  // @@protoc_insertion_point(field_release:CNETMsg_SignonState.addons)
  if (!_internal_has_addons()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return addons_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SignonState::set_allocated_addons(std::string* addons) {
  if (addons != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  addons_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addons,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SignonState.addons)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEvent_key_t

// optional int32 type = 1;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_type() const {
  return _internal_has_type();
}
inline void CSVCMsg_GameEvent_key_t::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.type)
  return _internal_type();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.type)
}

// optional string val_string = 2;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_string() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_string() const {
  return _internal_has_val_string();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_string() {
  val_string_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEvent_key_t::val_string() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_string)
  return _internal_val_string();
}
inline void CSVCMsg_GameEvent_key_t::set_val_string(const std::string& value) {
  _internal_set_val_string(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_string)
}
inline std::string* CSVCMsg_GameEvent_key_t::mutable_val_string() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.key_t.val_string)
  return _internal_mutable_val_string();
}
inline const std::string& CSVCMsg_GameEvent_key_t::_internal_val_string() const {
  return val_string_.Get();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_string(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameEvent_key_t::set_val_string(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  val_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEvent.key_t.val_string)
}
inline void CSVCMsg_GameEvent_key_t::set_val_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEvent.key_t.val_string)
}
inline void CSVCMsg_GameEvent_key_t::set_val_string(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEvent.key_t.val_string)
}
inline std::string* CSVCMsg_GameEvent_key_t::_internal_mutable_val_string() {
  _has_bits_[0] |= 0x00000001u;
  return val_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameEvent_key_t::release_val_string() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.key_t.val_string)
  if (!_internal_has_val_string()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameEvent_key_t::set_allocated_val_string(std::string* val_string) {
  if (val_string != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val_string,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.key_t.val_string)
}

// optional float val_float = 3;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_float() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_float() const {
  return _internal_has_val_float();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_float() {
  val_float_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CSVCMsg_GameEvent_key_t::_internal_val_float() const {
  return val_float_;
}
inline float CSVCMsg_GameEvent_key_t::val_float() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_float)
  return _internal_val_float();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_float(float value) {
  _has_bits_[0] |= 0x00000004u;
  val_float_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_float(float value) {
  _internal_set_val_float(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_float)
}

// optional int32 val_long = 4;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_long() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_long() const {
  return _internal_has_val_long();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_long() {
  val_long_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_val_long() const {
  return val_long_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::val_long() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_long)
  return _internal_val_long();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  val_long_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_long(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_long(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_long)
}

// optional int32 val_short = 5;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_short() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_short() const {
  return _internal_has_val_short();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_short() {
  val_short_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_val_short() const {
  return val_short_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::val_short() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_short)
  return _internal_val_short();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  val_short_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_short(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_short(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_short)
}

// optional int32 val_byte = 6;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_byte() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_byte() const {
  return _internal_has_val_byte();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_byte() {
  val_byte_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::_internal_val_byte() const {
  return val_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent_key_t::val_byte() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_byte)
  return _internal_val_byte();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  val_byte_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_byte(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_byte(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_byte)
}

// optional bool val_bool = 7;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_bool() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_bool() const {
  return _internal_has_val_bool();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_bool() {
  val_bool_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CSVCMsg_GameEvent_key_t::_internal_val_bool() const {
  return val_bool_;
}
inline bool CSVCMsg_GameEvent_key_t::val_bool() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_bool)
  return _internal_val_bool();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_bool(bool value) {
  _has_bits_[0] |= 0x00000040u;
  val_bool_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_bool(bool value) {
  _internal_set_val_bool(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_bool)
}

// optional uint64 val_uint64 = 8;
inline bool CSVCMsg_GameEvent_key_t::_internal_has_val_uint64() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent_key_t::has_val_uint64() const {
  return _internal_has_val_uint64();
}
inline void CSVCMsg_GameEvent_key_t::clear_val_uint64() {
  val_uint64_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_GameEvent_key_t::_internal_val_uint64() const {
  return val_uint64_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CSVCMsg_GameEvent_key_t::val_uint64() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.key_t.val_uint64)
  return _internal_val_uint64();
}
inline void CSVCMsg_GameEvent_key_t::_internal_set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  val_uint64_ = value;
}
inline void CSVCMsg_GameEvent_key_t::set_val_uint64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_val_uint64(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.key_t.val_uint64)
}

// -------------------------------------------------------------------

// CSVCMsg_GameEvent

// optional string event_name = 1;
inline bool CSVCMsg_GameEvent::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent::has_event_name() const {
  return _internal_has_event_name();
}
inline void CSVCMsg_GameEvent::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.event_name)
  return _internal_event_name();
}
inline void CSVCMsg_GameEvent::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.event_name)
}
inline std::string* CSVCMsg_GameEvent::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& CSVCMsg_GameEvent::_internal_event_name() const {
  return event_name_.Get();
}
inline void CSVCMsg_GameEvent::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameEvent::set_event_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameEvent.event_name)
}
inline void CSVCMsg_GameEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameEvent.event_name)
}
inline void CSVCMsg_GameEvent::set_event_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameEvent.event_name)
}
inline std::string* CSVCMsg_GameEvent::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000001u;
  return event_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameEvent.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return event_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameEvent.event_name)
}

// optional int32 eventid = 2;
inline bool CSVCMsg_GameEvent::_internal_has_eventid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameEvent::has_eventid() const {
  return _internal_has_eventid();
}
inline void CSVCMsg_GameEvent::clear_eventid() {
  eventid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_GameEvent::eventid() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.eventid)
  return _internal_eventid();
}
inline void CSVCMsg_GameEvent::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  eventid_ = value;
}
inline void CSVCMsg_GameEvent::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameEvent.eventid)
}

// repeated .CSVCMsg_GameEvent.key_t keys = 3;
inline int CSVCMsg_GameEvent::_internal_keys_size() const {
  return keys_.size();
}
inline int CSVCMsg_GameEvent::keys_size() const {
  return _internal_keys_size();
}
inline void CSVCMsg_GameEvent::clear_keys() {
  keys_.Clear();
}
inline ::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameEvent.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >*
CSVCMsg_GameEvent::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsg_GameEvent.keys)
  return &keys_;
}
inline const ::CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::CSVCMsg_GameEvent_key_t& CSVCMsg_GameEvent::keys(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameEvent.keys)
  return _internal_keys(index);
}
inline ::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::_internal_add_keys() {
  return keys_.Add();
}
inline ::CSVCMsg_GameEvent_key_t* CSVCMsg_GameEvent::add_keys() {
  // @@protoc_insertion_point(field_add:CSVCMsg_GameEvent.keys)
  return _internal_add_keys();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsg_GameEvent_key_t >&
CSVCMsg_GameEvent::keys() const {
  // @@protoc_insertion_point(field_list:CSVCMsg_GameEvent.keys)
  return keys_;
}

// -------------------------------------------------------------------

// CSVCMsgList_GameEvents_event_t

// optional int32 tick = 1;
inline bool CSVCMsgList_GameEvents_event_t::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsgList_GameEvents_event_t::has_tick() const {
  return _internal_has_tick();
}
inline void CSVCMsgList_GameEvents_event_t::clear_tick() {
  tick_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsgList_GameEvents_event_t::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsgList_GameEvents_event_t::tick() const {
  // @@protoc_insertion_point(field_get:CSVCMsgList_GameEvents.event_t.tick)
  return _internal_tick();
}
inline void CSVCMsgList_GameEvents_event_t::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tick_ = value;
}
inline void CSVCMsgList_GameEvents_event_t::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CSVCMsgList_GameEvents.event_t.tick)
}

// optional .CSVCMsg_GameEvent event = 2;
inline bool CSVCMsgList_GameEvents_event_t::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || event_ != nullptr);
  return value;
}
inline bool CSVCMsgList_GameEvents_event_t::has_event() const {
  return _internal_has_event();
}
inline void CSVCMsgList_GameEvents_event_t::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSVCMsg_GameEvent& CSVCMsgList_GameEvents_event_t::_internal_event() const {
  const ::CSVCMsg_GameEvent* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSVCMsg_GameEvent&>(
      ::_CSVCMsg_GameEvent_default_instance_);
}
inline const ::CSVCMsg_GameEvent& CSVCMsgList_GameEvents_event_t::event() const {
  // @@protoc_insertion_point(field_get:CSVCMsgList_GameEvents.event_t.event)
  return _internal_event();
}
inline void CSVCMsgList_GameEvents_event_t::unsafe_arena_set_allocated_event(
    ::CSVCMsg_GameEvent* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsgList_GameEvents.event_t.event)
}
inline ::CSVCMsg_GameEvent* CSVCMsgList_GameEvents_event_t::release_event() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSVCMsg_GameEvent* temp = event_;
  event_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSVCMsg_GameEvent* CSVCMsgList_GameEvents_event_t::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:CSVCMsgList_GameEvents.event_t.event)
  _has_bits_[0] &= ~0x00000001u;
  ::CSVCMsg_GameEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::CSVCMsg_GameEvent* CSVCMsgList_GameEvents_event_t::_internal_mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSVCMsg_GameEvent>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::CSVCMsg_GameEvent* CSVCMsgList_GameEvents_event_t::mutable_event() {
  // @@protoc_insertion_point(field_mutable:CSVCMsgList_GameEvents.event_t.event)
  return _internal_mutable_event();
}
inline void CSVCMsgList_GameEvents_event_t::set_allocated_event(::CSVCMsg_GameEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsgList_GameEvents.event_t.event)
}

// -------------------------------------------------------------------

// CSVCMsgList_GameEvents

// repeated .CSVCMsgList_GameEvents.event_t events = 1;
inline int CSVCMsgList_GameEvents::_internal_events_size() const {
  return events_.size();
}
inline int CSVCMsgList_GameEvents::events_size() const {
  return _internal_events_size();
}
inline void CSVCMsgList_GameEvents::clear_events() {
  events_.Clear();
}
inline ::CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsgList_GameEvents.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_GameEvents_event_t >*
CSVCMsgList_GameEvents::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsgList_GameEvents.events)
  return &events_;
}
inline const ::CSVCMsgList_GameEvents_event_t& CSVCMsgList_GameEvents::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::CSVCMsgList_GameEvents_event_t& CSVCMsgList_GameEvents::events(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsgList_GameEvents.events)
  return _internal_events(index);
}
inline ::CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents::_internal_add_events() {
  return events_.Add();
}
inline ::CSVCMsgList_GameEvents_event_t* CSVCMsgList_GameEvents::add_events() {
  // @@protoc_insertion_point(field_add:CSVCMsgList_GameEvents.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_GameEvents_event_t >&
CSVCMsgList_GameEvents::events() const {
  // @@protoc_insertion_point(field_list:CSVCMsgList_GameEvents.events)
  return events_;
}

// -------------------------------------------------------------------

// CSVCMsg_UserMessage

// optional int32 msg_type = 1;
inline bool CSVCMsg_UserMessage::_internal_has_msg_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_UserMessage::has_msg_type() const {
  return _internal_has_msg_type();
}
inline void CSVCMsg_UserMessage::clear_msg_type() {
  msg_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UserMessage::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsg_UserMessage::msg_type() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.msg_type)
  return _internal_msg_type();
}
inline void CSVCMsg_UserMessage::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  msg_type_ = value;
}
inline void CSVCMsg_UserMessage::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.msg_type)
}

// optional bytes msg_data = 2;
inline bool CSVCMsg_UserMessage::_internal_has_msg_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_UserMessage::has_msg_data() const {
  return _internal_has_msg_data();
}
inline void CSVCMsg_UserMessage::clear_msg_data() {
  msg_data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_UserMessage::msg_data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_UserMessage.msg_data)
  return _internal_msg_data();
}
inline void CSVCMsg_UserMessage::set_msg_data(const std::string& value) {
  _internal_set_msg_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_UserMessage.msg_data)
}
inline std::string* CSVCMsg_UserMessage::mutable_msg_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_UserMessage.msg_data)
  return _internal_mutable_msg_data();
}
inline const std::string& CSVCMsg_UserMessage::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void CSVCMsg_UserMessage::_internal_set_msg_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_UserMessage::set_msg_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_UserMessage.msg_data)
}
inline void CSVCMsg_UserMessage::set_msg_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_UserMessage.msg_data)
}
inline void CSVCMsg_UserMessage::set_msg_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_UserMessage.msg_data)
}
inline std::string* CSVCMsg_UserMessage::_internal_mutable_msg_data() {
  _has_bits_[0] |= 0x00000001u;
  return msg_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_UserMessage::release_msg_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_UserMessage.msg_data)
  if (!_internal_has_msg_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_UserMessage::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_UserMessage.msg_data)
}

// -------------------------------------------------------------------

// CSVCMsgList_UserMessages_usermsg_t

// optional int32 tick = 1;
inline bool CSVCMsgList_UserMessages_usermsg_t::_internal_has_tick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsgList_UserMessages_usermsg_t::has_tick() const {
  return _internal_has_tick();
}
inline void CSVCMsgList_UserMessages_usermsg_t::clear_tick() {
  tick_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsgList_UserMessages_usermsg_t::_internal_tick() const {
  return tick_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CSVCMsgList_UserMessages_usermsg_t::tick() const {
  // @@protoc_insertion_point(field_get:CSVCMsgList_UserMessages.usermsg_t.tick)
  return _internal_tick();
}
inline void CSVCMsgList_UserMessages_usermsg_t::_internal_set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tick_ = value;
}
inline void CSVCMsgList_UserMessages_usermsg_t::set_tick(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tick(value);
  // @@protoc_insertion_point(field_set:CSVCMsgList_UserMessages.usermsg_t.tick)
}

// optional .CSVCMsg_UserMessage msg = 2;
inline bool CSVCMsgList_UserMessages_usermsg_t::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msg_ != nullptr);
  return value;
}
inline bool CSVCMsgList_UserMessages_usermsg_t::has_msg() const {
  return _internal_has_msg();
}
inline void CSVCMsgList_UserMessages_usermsg_t::clear_msg() {
  if (msg_ != nullptr) msg_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CSVCMsg_UserMessage& CSVCMsgList_UserMessages_usermsg_t::_internal_msg() const {
  const ::CSVCMsg_UserMessage* p = msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSVCMsg_UserMessage&>(
      ::_CSVCMsg_UserMessage_default_instance_);
}
inline const ::CSVCMsg_UserMessage& CSVCMsgList_UserMessages_usermsg_t::msg() const {
  // @@protoc_insertion_point(field_get:CSVCMsgList_UserMessages.usermsg_t.msg)
  return _internal_msg();
}
inline void CSVCMsgList_UserMessages_usermsg_t::unsafe_arena_set_allocated_msg(
    ::CSVCMsg_UserMessage* msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSVCMsgList_UserMessages.usermsg_t.msg)
}
inline ::CSVCMsg_UserMessage* CSVCMsgList_UserMessages_usermsg_t::release_msg() {
  _has_bits_[0] &= ~0x00000001u;
  ::CSVCMsg_UserMessage* temp = msg_;
  msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CSVCMsg_UserMessage* CSVCMsgList_UserMessages_usermsg_t::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:CSVCMsgList_UserMessages.usermsg_t.msg)
  _has_bits_[0] &= ~0x00000001u;
  ::CSVCMsg_UserMessage* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::CSVCMsg_UserMessage* CSVCMsgList_UserMessages_usermsg_t::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::CSVCMsg_UserMessage>(GetArena());
    msg_ = p;
  }
  return msg_;
}
inline ::CSVCMsg_UserMessage* CSVCMsgList_UserMessages_usermsg_t::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:CSVCMsgList_UserMessages.usermsg_t.msg)
  return _internal_mutable_msg();
}
inline void CSVCMsgList_UserMessages_usermsg_t::set_allocated_msg(::CSVCMsg_UserMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:CSVCMsgList_UserMessages.usermsg_t.msg)
}

// -------------------------------------------------------------------

// CSVCMsgList_UserMessages

// repeated .CSVCMsgList_UserMessages.usermsg_t usermsgs = 1;
inline int CSVCMsgList_UserMessages::_internal_usermsgs_size() const {
  return usermsgs_.size();
}
inline int CSVCMsgList_UserMessages::usermsgs_size() const {
  return _internal_usermsgs_size();
}
inline void CSVCMsgList_UserMessages::clear_usermsgs() {
  usermsgs_.Clear();
}
inline ::CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages::mutable_usermsgs(int index) {
  // @@protoc_insertion_point(field_mutable:CSVCMsgList_UserMessages.usermsgs)
  return usermsgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_UserMessages_usermsg_t >*
CSVCMsgList_UserMessages::mutable_usermsgs() {
  // @@protoc_insertion_point(field_mutable_list:CSVCMsgList_UserMessages.usermsgs)
  return &usermsgs_;
}
inline const ::CSVCMsgList_UserMessages_usermsg_t& CSVCMsgList_UserMessages::_internal_usermsgs(int index) const {
  return usermsgs_.Get(index);
}
inline const ::CSVCMsgList_UserMessages_usermsg_t& CSVCMsgList_UserMessages::usermsgs(int index) const {
  // @@protoc_insertion_point(field_get:CSVCMsgList_UserMessages.usermsgs)
  return _internal_usermsgs(index);
}
inline ::CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages::_internal_add_usermsgs() {
  return usermsgs_.Add();
}
inline ::CSVCMsgList_UserMessages_usermsg_t* CSVCMsgList_UserMessages::add_usermsgs() {
  // @@protoc_insertion_point(field_add:CSVCMsgList_UserMessages.usermsgs)
  return _internal_add_usermsgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CSVCMsgList_UserMessages_usermsg_t >&
CSVCMsgList_UserMessages::usermsgs() const {
  // @@protoc_insertion_point(field_list:CSVCMsgList_UserMessages.usermsgs)
  return usermsgs_;
}

// -------------------------------------------------------------------

// CNETMsg_SpawnGroup_Load

// optional string worldname = 1;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_worldname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_worldname() const {
  return _internal_has_worldname();
}
inline void CNETMsg_SpawnGroup_Load::clear_worldname() {
  worldname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::worldname() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.worldname)
  return _internal_worldname();
}
inline void CNETMsg_SpawnGroup_Load::set_worldname(const std::string& value) {
  _internal_set_worldname(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.worldname)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_worldname() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.worldname)
  return _internal_mutable_worldname();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_worldname() const {
  return worldname_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_worldname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  worldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_worldname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  worldname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.worldname)
}
inline void CNETMsg_SpawnGroup_Load::set_worldname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  worldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.worldname)
}
inline void CNETMsg_SpawnGroup_Load::set_worldname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  worldname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.worldname)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_worldname() {
  _has_bits_[0] |= 0x00000001u;
  return worldname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_worldname() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.worldname)
  if (!_internal_has_worldname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return worldname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_worldname(std::string* worldname) {
  if (worldname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  worldname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), worldname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.worldname)
}

// optional string entitylumpname = 2;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_entitylumpname() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_entitylumpname() const {
  return _internal_has_entitylumpname();
}
inline void CNETMsg_SpawnGroup_Load::clear_entitylumpname() {
  entitylumpname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::entitylumpname() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.entitylumpname)
  return _internal_entitylumpname();
}
inline void CNETMsg_SpawnGroup_Load::set_entitylumpname(const std::string& value) {
  _internal_set_entitylumpname(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.entitylumpname)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_entitylumpname() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.entitylumpname)
  return _internal_mutable_entitylumpname();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_entitylumpname() const {
  return entitylumpname_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_entitylumpname(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  entitylumpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_entitylumpname(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  entitylumpname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.entitylumpname)
}
inline void CNETMsg_SpawnGroup_Load::set_entitylumpname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  entitylumpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.entitylumpname)
}
inline void CNETMsg_SpawnGroup_Load::set_entitylumpname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  entitylumpname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.entitylumpname)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_entitylumpname() {
  _has_bits_[0] |= 0x00000002u;
  return entitylumpname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_entitylumpname() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.entitylumpname)
  if (!_internal_has_entitylumpname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return entitylumpname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_entitylumpname(std::string* entitylumpname) {
  if (entitylumpname != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  entitylumpname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entitylumpname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.entitylumpname)
}

// optional string entityfiltername = 3;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_entityfiltername() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_entityfiltername() const {
  return _internal_has_entityfiltername();
}
inline void CNETMsg_SpawnGroup_Load::clear_entityfiltername() {
  entityfiltername_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::entityfiltername() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.entityfiltername)
  return _internal_entityfiltername();
}
inline void CNETMsg_SpawnGroup_Load::set_entityfiltername(const std::string& value) {
  _internal_set_entityfiltername(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.entityfiltername)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_entityfiltername() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.entityfiltername)
  return _internal_mutable_entityfiltername();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_entityfiltername() const {
  return entityfiltername_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_entityfiltername(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  entityfiltername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_entityfiltername(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  entityfiltername_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.entityfiltername)
}
inline void CNETMsg_SpawnGroup_Load::set_entityfiltername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  entityfiltername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.entityfiltername)
}
inline void CNETMsg_SpawnGroup_Load::set_entityfiltername(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  entityfiltername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.entityfiltername)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_entityfiltername() {
  _has_bits_[0] |= 0x00000004u;
  return entityfiltername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_entityfiltername() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.entityfiltername)
  if (!_internal_has_entityfiltername()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return entityfiltername_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_entityfiltername(std::string* entityfiltername) {
  if (entityfiltername != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  entityfiltername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entityfiltername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.entityfiltername)
}

// optional uint32 spawngrouphandle = 4;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_spawngrouphandle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_spawngrouphandle() const {
  return _internal_has_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_Load::clear_spawngrouphandle() {
  spawngrouphandle_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::_internal_spawngrouphandle() const {
  return spawngrouphandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::spawngrouphandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.spawngrouphandle)
  return _internal_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  spawngrouphandle_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngrouphandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.spawngrouphandle)
}

// optional uint32 spawngroupownerhandle = 5;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_spawngroupownerhandle() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_spawngroupownerhandle() const {
  return _internal_has_spawngroupownerhandle();
}
inline void CNETMsg_SpawnGroup_Load::clear_spawngroupownerhandle() {
  spawngroupownerhandle_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::_internal_spawngroupownerhandle() const {
  return spawngroupownerhandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::spawngroupownerhandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.spawngroupownerhandle)
  return _internal_spawngroupownerhandle();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_spawngroupownerhandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  spawngroupownerhandle_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_spawngroupownerhandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngroupownerhandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.spawngroupownerhandle)
}

// optional .CMsgVector world_offset_pos = 6;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_world_offset_pos() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || world_offset_pos_ != nullptr);
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_world_offset_pos() const {
  return _internal_has_world_offset_pos();
}
inline void CNETMsg_SpawnGroup_Load::clear_world_offset_pos() {
  if (world_offset_pos_ != nullptr) world_offset_pos_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::CMsgVector& CNETMsg_SpawnGroup_Load::_internal_world_offset_pos() const {
  const ::CMsgVector* p = world_offset_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(
      ::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CNETMsg_SpawnGroup_Load::world_offset_pos() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.world_offset_pos)
  return _internal_world_offset_pos();
}
inline void CNETMsg_SpawnGroup_Load::unsafe_arena_set_allocated_world_offset_pos(
    ::CMsgVector* world_offset_pos) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_offset_pos_);
  }
  world_offset_pos_ = world_offset_pos;
  if (world_offset_pos) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNETMsg_SpawnGroup_Load.world_offset_pos)
}
inline ::CMsgVector* CNETMsg_SpawnGroup_Load::release_world_offset_pos() {
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgVector* temp = world_offset_pos_;
  world_offset_pos_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgVector* CNETMsg_SpawnGroup_Load::unsafe_arena_release_world_offset_pos() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.world_offset_pos)
  _has_bits_[0] &= ~0x00000080u;
  ::CMsgVector* temp = world_offset_pos_;
  world_offset_pos_ = nullptr;
  return temp;
}
inline ::CMsgVector* CNETMsg_SpawnGroup_Load::_internal_mutable_world_offset_pos() {
  _has_bits_[0] |= 0x00000080u;
  if (world_offset_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgVector>(GetArena());
    world_offset_pos_ = p;
  }
  return world_offset_pos_;
}
inline ::CMsgVector* CNETMsg_SpawnGroup_Load::mutable_world_offset_pos() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.world_offset_pos)
  return _internal_mutable_world_offset_pos();
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_world_offset_pos(::CMsgVector* world_offset_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete world_offset_pos_;
  }
  if (world_offset_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(world_offset_pos);
    if (message_arena != submessage_arena) {
      world_offset_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_offset_pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  world_offset_pos_ = world_offset_pos;
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.world_offset_pos)
}

// optional .CMsgQAngle world_offset_angle = 7;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_world_offset_angle() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || world_offset_angle_ != nullptr);
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_world_offset_angle() const {
  return _internal_has_world_offset_angle();
}
inline void CNETMsg_SpawnGroup_Load::clear_world_offset_angle() {
  if (world_offset_angle_ != nullptr) world_offset_angle_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::CMsgQAngle& CNETMsg_SpawnGroup_Load::_internal_world_offset_angle() const {
  const ::CMsgQAngle* p = world_offset_angle_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(
      ::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CNETMsg_SpawnGroup_Load::world_offset_angle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.world_offset_angle)
  return _internal_world_offset_angle();
}
inline void CNETMsg_SpawnGroup_Load::unsafe_arena_set_allocated_world_offset_angle(
    ::CMsgQAngle* world_offset_angle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_offset_angle_);
  }
  world_offset_angle_ = world_offset_angle;
  if (world_offset_angle) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CNETMsg_SpawnGroup_Load.world_offset_angle)
}
inline ::CMsgQAngle* CNETMsg_SpawnGroup_Load::release_world_offset_angle() {
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgQAngle* temp = world_offset_angle_;
  world_offset_angle_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgQAngle* CNETMsg_SpawnGroup_Load::unsafe_arena_release_world_offset_angle() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.world_offset_angle)
  _has_bits_[0] &= ~0x00000100u;
  ::CMsgQAngle* temp = world_offset_angle_;
  world_offset_angle_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* CNETMsg_SpawnGroup_Load::_internal_mutable_world_offset_angle() {
  _has_bits_[0] |= 0x00000100u;
  if (world_offset_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgQAngle>(GetArena());
    world_offset_angle_ = p;
  }
  return world_offset_angle_;
}
inline ::CMsgQAngle* CNETMsg_SpawnGroup_Load::mutable_world_offset_angle() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.world_offset_angle)
  return _internal_mutable_world_offset_angle();
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_world_offset_angle(::CMsgQAngle* world_offset_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete world_offset_angle_;
  }
  if (world_offset_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(world_offset_angle);
    if (message_arena != submessage_arena) {
      world_offset_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_offset_angle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  world_offset_angle_ = world_offset_angle;
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.world_offset_angle)
}

// optional bytes spawngroupmanifest = 8;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_spawngroupmanifest() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_spawngroupmanifest() const {
  return _internal_has_spawngroupmanifest();
}
inline void CNETMsg_SpawnGroup_Load::clear_spawngroupmanifest() {
  spawngroupmanifest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::spawngroupmanifest() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
  return _internal_spawngroupmanifest();
}
inline void CNETMsg_SpawnGroup_Load::set_spawngroupmanifest(const std::string& value) {
  _internal_set_spawngroupmanifest(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_spawngroupmanifest() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
  return _internal_mutable_spawngroupmanifest();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_spawngroupmanifest() const {
  return spawngroupmanifest_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_spawngroupmanifest(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_spawngroupmanifest(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  spawngroupmanifest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
}
inline void CNETMsg_SpawnGroup_Load::set_spawngroupmanifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
}
inline void CNETMsg_SpawnGroup_Load::set_spawngroupmanifest(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_spawngroupmanifest() {
  _has_bits_[0] |= 0x00000008u;
  return spawngroupmanifest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_spawngroupmanifest() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
  if (!_internal_has_spawngroupmanifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return spawngroupmanifest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_spawngroupmanifest(std::string* spawngroupmanifest) {
  if (spawngroupmanifest != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  spawngroupmanifest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spawngroupmanifest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.spawngroupmanifest)
}

// optional uint32 flags = 9;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_flags() const {
  return _internal_has_flags();
}
inline void CNETMsg_SpawnGroup_Load::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::flags() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.flags)
  return _internal_flags();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  flags_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.flags)
}

// optional int32 tickcount = 10;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_tickcount() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_tickcount() const {
  return _internal_has_tickcount();
}
inline void CNETMsg_SpawnGroup_Load::clear_tickcount() {
  tickcount_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_Load::_internal_tickcount() const {
  return tickcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_Load::tickcount() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.tickcount)
  return _internal_tickcount();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  tickcount_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tickcount(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.tickcount)
}

// optional bool manifestincomplete = 11;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_manifestincomplete() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_manifestincomplete() const {
  return _internal_has_manifestincomplete();
}
inline void CNETMsg_SpawnGroup_Load::clear_manifestincomplete() {
  manifestincomplete_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CNETMsg_SpawnGroup_Load::_internal_manifestincomplete() const {
  return manifestincomplete_;
}
inline bool CNETMsg_SpawnGroup_Load::manifestincomplete() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.manifestincomplete)
  return _internal_manifestincomplete();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_manifestincomplete(bool value) {
  _has_bits_[0] |= 0x00008000u;
  manifestincomplete_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_manifestincomplete(bool value) {
  _internal_set_manifestincomplete(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.manifestincomplete)
}

// optional string localnamefixup = 12;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_localnamefixup() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_localnamefixup() const {
  return _internal_has_localnamefixup();
}
inline void CNETMsg_SpawnGroup_Load::clear_localnamefixup() {
  localnamefixup_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::localnamefixup() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.localnamefixup)
  return _internal_localnamefixup();
}
inline void CNETMsg_SpawnGroup_Load::set_localnamefixup(const std::string& value) {
  _internal_set_localnamefixup(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.localnamefixup)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_localnamefixup() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.localnamefixup)
  return _internal_mutable_localnamefixup();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_localnamefixup() const {
  return localnamefixup_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_localnamefixup(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  localnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_localnamefixup(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  localnamefixup_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.localnamefixup)
}
inline void CNETMsg_SpawnGroup_Load::set_localnamefixup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  localnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.localnamefixup)
}
inline void CNETMsg_SpawnGroup_Load::set_localnamefixup(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  localnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.localnamefixup)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_localnamefixup() {
  _has_bits_[0] |= 0x00000010u;
  return localnamefixup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_localnamefixup() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.localnamefixup)
  if (!_internal_has_localnamefixup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return localnamefixup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_localnamefixup(std::string* localnamefixup) {
  if (localnamefixup != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  localnamefixup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localnamefixup,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.localnamefixup)
}

// optional string parentnamefixup = 13;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_parentnamefixup() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_parentnamefixup() const {
  return _internal_has_parentnamefixup();
}
inline void CNETMsg_SpawnGroup_Load::clear_parentnamefixup() {
  parentnamefixup_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::parentnamefixup() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.parentnamefixup)
  return _internal_parentnamefixup();
}
inline void CNETMsg_SpawnGroup_Load::set_parentnamefixup(const std::string& value) {
  _internal_set_parentnamefixup(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.parentnamefixup)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_parentnamefixup() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.parentnamefixup)
  return _internal_mutable_parentnamefixup();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_parentnamefixup() const {
  return parentnamefixup_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_parentnamefixup(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  parentnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_parentnamefixup(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  parentnamefixup_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.parentnamefixup)
}
inline void CNETMsg_SpawnGroup_Load::set_parentnamefixup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  parentnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.parentnamefixup)
}
inline void CNETMsg_SpawnGroup_Load::set_parentnamefixup(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  parentnamefixup_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.parentnamefixup)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_parentnamefixup() {
  _has_bits_[0] |= 0x00000020u;
  return parentnamefixup_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_parentnamefixup() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.parentnamefixup)
  if (!_internal_has_parentnamefixup()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return parentnamefixup_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_parentnamefixup(std::string* parentnamefixup) {
  if (parentnamefixup != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  parentnamefixup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentnamefixup,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.parentnamefixup)
}

// optional int32 manifestloadpriority = 14;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_manifestloadpriority() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_manifestloadpriority() const {
  return _internal_has_manifestloadpriority();
}
inline void CNETMsg_SpawnGroup_Load::clear_manifestloadpriority() {
  manifestloadpriority_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_Load::_internal_manifestloadpriority() const {
  return manifestloadpriority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_Load::manifestloadpriority() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.manifestloadpriority)
  return _internal_manifestloadpriority();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_manifestloadpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  manifestloadpriority_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_manifestloadpriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_manifestloadpriority(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.manifestloadpriority)
}

// optional uint32 worldgroupid = 15;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_worldgroupid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_worldgroupid() const {
  return _internal_has_worldgroupid();
}
inline void CNETMsg_SpawnGroup_Load::clear_worldgroupid() {
  worldgroupid_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::_internal_worldgroupid() const {
  return worldgroupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::worldgroupid() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.worldgroupid)
  return _internal_worldgroupid();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_worldgroupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  worldgroupid_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_worldgroupid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_worldgroupid(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.worldgroupid)
}

// optional uint32 creationsequence = 16;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_creationsequence() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_creationsequence() const {
  return _internal_has_creationsequence();
}
inline void CNETMsg_SpawnGroup_Load::clear_creationsequence() {
  creationsequence_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::_internal_creationsequence() const {
  return creationsequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::creationsequence() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.creationsequence)
  return _internal_creationsequence();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  creationsequence_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_creationsequence(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.creationsequence)
}

// optional string savegamefilename = 17;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_savegamefilename() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_savegamefilename() const {
  return _internal_has_savegamefilename();
}
inline void CNETMsg_SpawnGroup_Load::clear_savegamefilename() {
  savegamefilename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CNETMsg_SpawnGroup_Load::savegamefilename() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.savegamefilename)
  return _internal_savegamefilename();
}
inline void CNETMsg_SpawnGroup_Load::set_savegamefilename(const std::string& value) {
  _internal_set_savegamefilename(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.savegamefilename)
}
inline std::string* CNETMsg_SpawnGroup_Load::mutable_savegamefilename() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_Load.savegamefilename)
  return _internal_mutable_savegamefilename();
}
inline const std::string& CNETMsg_SpawnGroup_Load::_internal_savegamefilename() const {
  return savegamefilename_.Get();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_savegamefilename(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  savegamefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_savegamefilename(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  savegamefilename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_Load.savegamefilename)
}
inline void CNETMsg_SpawnGroup_Load::set_savegamefilename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  savegamefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_Load.savegamefilename)
}
inline void CNETMsg_SpawnGroup_Load::set_savegamefilename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  savegamefilename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_Load.savegamefilename)
}
inline std::string* CNETMsg_SpawnGroup_Load::_internal_mutable_savegamefilename() {
  _has_bits_[0] |= 0x00000040u;
  return savegamefilename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_Load::release_savegamefilename() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_Load.savegamefilename)
  if (!_internal_has_savegamefilename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return savegamefilename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_Load::set_allocated_savegamefilename(std::string* savegamefilename) {
  if (savegamefilename != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  savegamefilename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), savegamefilename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_Load.savegamefilename)
}

// optional uint32 spawngroupparenthandle = 18;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_spawngroupparenthandle() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_spawngroupparenthandle() const {
  return _internal_has_spawngroupparenthandle();
}
inline void CNETMsg_SpawnGroup_Load::clear_spawngroupparenthandle() {
  spawngroupparenthandle_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::_internal_spawngroupparenthandle() const {
  return spawngroupparenthandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Load::spawngroupparenthandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.spawngroupparenthandle)
  return _internal_spawngroupparenthandle();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_spawngroupparenthandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  spawngroupparenthandle_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_spawngroupparenthandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngroupparenthandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.spawngroupparenthandle)
}

// optional bool leveltransition = 19;
inline bool CNETMsg_SpawnGroup_Load::_internal_has_leveltransition() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Load::has_leveltransition() const {
  return _internal_has_leveltransition();
}
inline void CNETMsg_SpawnGroup_Load::clear_leveltransition() {
  leveltransition_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CNETMsg_SpawnGroup_Load::_internal_leveltransition() const {
  return leveltransition_;
}
inline bool CNETMsg_SpawnGroup_Load::leveltransition() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Load.leveltransition)
  return _internal_leveltransition();
}
inline void CNETMsg_SpawnGroup_Load::_internal_set_leveltransition(bool value) {
  _has_bits_[0] |= 0x00010000u;
  leveltransition_ = value;
}
inline void CNETMsg_SpawnGroup_Load::set_leveltransition(bool value) {
  _internal_set_leveltransition(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Load.leveltransition)
}

// -------------------------------------------------------------------

// CNETMsg_SpawnGroup_ManifestUpdate

// optional uint32 spawngrouphandle = 1;
inline bool CNETMsg_SpawnGroup_ManifestUpdate::_internal_has_spawngrouphandle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_ManifestUpdate::has_spawngrouphandle() const {
  return _internal_has_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::clear_spawngrouphandle() {
  spawngrouphandle_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_ManifestUpdate::_internal_spawngrouphandle() const {
  return spawngrouphandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_ManifestUpdate::spawngrouphandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_ManifestUpdate.spawngrouphandle)
  return _internal_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::_internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  spawngrouphandle_ = value;
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngrouphandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_ManifestUpdate.spawngrouphandle)
}

// optional bytes spawngroupmanifest = 2;
inline bool CNETMsg_SpawnGroup_ManifestUpdate::_internal_has_spawngroupmanifest() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_ManifestUpdate::has_spawngroupmanifest() const {
  return _internal_has_spawngroupmanifest();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::clear_spawngroupmanifest() {
  spawngroupmanifest_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CNETMsg_SpawnGroup_ManifestUpdate::spawngroupmanifest() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
  return _internal_spawngroupmanifest();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_spawngroupmanifest(const std::string& value) {
  _internal_set_spawngroupmanifest(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
}
inline std::string* CNETMsg_SpawnGroup_ManifestUpdate::mutable_spawngroupmanifest() {
  // @@protoc_insertion_point(field_mutable:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
  return _internal_mutable_spawngroupmanifest();
}
inline const std::string& CNETMsg_SpawnGroup_ManifestUpdate::_internal_spawngroupmanifest() const {
  return spawngroupmanifest_.Get();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::_internal_set_spawngroupmanifest(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_spawngroupmanifest(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  spawngroupmanifest_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_spawngroupmanifest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_spawngroupmanifest(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  spawngroupmanifest_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
}
inline std::string* CNETMsg_SpawnGroup_ManifestUpdate::_internal_mutable_spawngroupmanifest() {
  _has_bits_[0] |= 0x00000001u;
  return spawngroupmanifest_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CNETMsg_SpawnGroup_ManifestUpdate::release_spawngroupmanifest() {
  // @@protoc_insertion_point(field_release:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
  if (!_internal_has_spawngroupmanifest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return spawngroupmanifest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_allocated_spawngroupmanifest(std::string* spawngroupmanifest) {
  if (spawngroupmanifest != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  spawngroupmanifest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spawngroupmanifest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CNETMsg_SpawnGroup_ManifestUpdate.spawngroupmanifest)
}

// optional bool manifestincomplete = 3;
inline bool CNETMsg_SpawnGroup_ManifestUpdate::_internal_has_manifestincomplete() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_ManifestUpdate::has_manifestincomplete() const {
  return _internal_has_manifestincomplete();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::clear_manifestincomplete() {
  manifestincomplete_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CNETMsg_SpawnGroup_ManifestUpdate::_internal_manifestincomplete() const {
  return manifestincomplete_;
}
inline bool CNETMsg_SpawnGroup_ManifestUpdate::manifestincomplete() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_ManifestUpdate.manifestincomplete)
  return _internal_manifestincomplete();
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::_internal_set_manifestincomplete(bool value) {
  _has_bits_[0] |= 0x00000004u;
  manifestincomplete_ = value;
}
inline void CNETMsg_SpawnGroup_ManifestUpdate::set_manifestincomplete(bool value) {
  _internal_set_manifestincomplete(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_ManifestUpdate.manifestincomplete)
}

// -------------------------------------------------------------------

// CNETMsg_SpawnGroup_SetCreationTick

// optional uint32 spawngrouphandle = 1;
inline bool CNETMsg_SpawnGroup_SetCreationTick::_internal_has_spawngrouphandle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_SetCreationTick::has_spawngrouphandle() const {
  return _internal_has_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_SetCreationTick::clear_spawngrouphandle() {
  spawngrouphandle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_SetCreationTick::_internal_spawngrouphandle() const {
  return spawngrouphandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_SetCreationTick::spawngrouphandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_SetCreationTick.spawngrouphandle)
  return _internal_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_SetCreationTick::_internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  spawngrouphandle_ = value;
}
inline void CNETMsg_SpawnGroup_SetCreationTick::set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngrouphandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_SetCreationTick.spawngrouphandle)
}

// optional int32 tickcount = 2;
inline bool CNETMsg_SpawnGroup_SetCreationTick::_internal_has_tickcount() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_SetCreationTick::has_tickcount() const {
  return _internal_has_tickcount();
}
inline void CNETMsg_SpawnGroup_SetCreationTick::clear_tickcount() {
  tickcount_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_SetCreationTick::_internal_tickcount() const {
  return tickcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_SetCreationTick::tickcount() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_SetCreationTick.tickcount)
  return _internal_tickcount();
}
inline void CNETMsg_SpawnGroup_SetCreationTick::_internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tickcount_ = value;
}
inline void CNETMsg_SpawnGroup_SetCreationTick::set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tickcount(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_SetCreationTick.tickcount)
}

// optional uint32 creationsequence = 3;
inline bool CNETMsg_SpawnGroup_SetCreationTick::_internal_has_creationsequence() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_SetCreationTick::has_creationsequence() const {
  return _internal_has_creationsequence();
}
inline void CNETMsg_SpawnGroup_SetCreationTick::clear_creationsequence() {
  creationsequence_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_SetCreationTick::_internal_creationsequence() const {
  return creationsequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_SetCreationTick::creationsequence() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_SetCreationTick.creationsequence)
  return _internal_creationsequence();
}
inline void CNETMsg_SpawnGroup_SetCreationTick::_internal_set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  creationsequence_ = value;
}
inline void CNETMsg_SpawnGroup_SetCreationTick::set_creationsequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_creationsequence(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_SetCreationTick.creationsequence)
}

// -------------------------------------------------------------------

// CNETMsg_SpawnGroup_Unload

// optional uint32 spawngrouphandle = 1;
inline bool CNETMsg_SpawnGroup_Unload::_internal_has_spawngrouphandle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Unload::has_spawngrouphandle() const {
  return _internal_has_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_Unload::clear_spawngrouphandle() {
  spawngrouphandle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Unload::_internal_spawngrouphandle() const {
  return spawngrouphandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Unload::spawngrouphandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Unload.spawngrouphandle)
  return _internal_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_Unload::_internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  spawngrouphandle_ = value;
}
inline void CNETMsg_SpawnGroup_Unload::set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngrouphandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Unload.spawngrouphandle)
}

// optional uint32 flags = 2;
inline bool CNETMsg_SpawnGroup_Unload::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Unload::has_flags() const {
  return _internal_has_flags();
}
inline void CNETMsg_SpawnGroup_Unload::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Unload::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_Unload::flags() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Unload.flags)
  return _internal_flags();
}
inline void CNETMsg_SpawnGroup_Unload::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
}
inline void CNETMsg_SpawnGroup_Unload::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Unload.flags)
}

// optional int32 tickcount = 3;
inline bool CNETMsg_SpawnGroup_Unload::_internal_has_tickcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_Unload::has_tickcount() const {
  return _internal_has_tickcount();
}
inline void CNETMsg_SpawnGroup_Unload::clear_tickcount() {
  tickcount_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_Unload::_internal_tickcount() const {
  return tickcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CNETMsg_SpawnGroup_Unload::tickcount() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_Unload.tickcount)
  return _internal_tickcount();
}
inline void CNETMsg_SpawnGroup_Unload::_internal_set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  tickcount_ = value;
}
inline void CNETMsg_SpawnGroup_Unload::set_tickcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tickcount(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_Unload.tickcount)
}

// -------------------------------------------------------------------

// CNETMsg_SpawnGroup_LoadCompleted

// optional uint32 spawngrouphandle = 1;
inline bool CNETMsg_SpawnGroup_LoadCompleted::_internal_has_spawngrouphandle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CNETMsg_SpawnGroup_LoadCompleted::has_spawngrouphandle() const {
  return _internal_has_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_LoadCompleted::clear_spawngrouphandle() {
  spawngrouphandle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_LoadCompleted::_internal_spawngrouphandle() const {
  return spawngrouphandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CNETMsg_SpawnGroup_LoadCompleted::spawngrouphandle() const {
  // @@protoc_insertion_point(field_get:CNETMsg_SpawnGroup_LoadCompleted.spawngrouphandle)
  return _internal_spawngrouphandle();
}
inline void CNETMsg_SpawnGroup_LoadCompleted::_internal_set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  spawngrouphandle_ = value;
}
inline void CNETMsg_SpawnGroup_LoadCompleted::set_spawngrouphandle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_spawngrouphandle(value);
  // @@protoc_insertion_point(field_set:CNETMsg_SpawnGroup_LoadCompleted.spawngrouphandle)
}

// -------------------------------------------------------------------

// CSVCMsg_GameSessionConfiguration

// optional bool is_multiplayer = 1;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_is_multiplayer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_is_multiplayer() const {
  return _internal_has_is_multiplayer();
}
inline void CSVCMsg_GameSessionConfiguration::clear_is_multiplayer() {
  is_multiplayer_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_is_multiplayer() const {
  return is_multiplayer_;
}
inline bool CSVCMsg_GameSessionConfiguration::is_multiplayer() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.is_multiplayer)
  return _internal_is_multiplayer();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_is_multiplayer(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_multiplayer_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_is_multiplayer(bool value) {
  _internal_set_is_multiplayer(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.is_multiplayer)
}

// optional bool is_loadsavegame = 2;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_is_loadsavegame() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_is_loadsavegame() const {
  return _internal_has_is_loadsavegame();
}
inline void CSVCMsg_GameSessionConfiguration::clear_is_loadsavegame() {
  is_loadsavegame_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_is_loadsavegame() const {
  return is_loadsavegame_;
}
inline bool CSVCMsg_GameSessionConfiguration::is_loadsavegame() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.is_loadsavegame)
  return _internal_is_loadsavegame();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_is_loadsavegame(bool value) {
  _has_bits_[0] |= 0x00000200u;
  is_loadsavegame_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_is_loadsavegame(bool value) {
  _internal_set_is_loadsavegame(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.is_loadsavegame)
}

// optional bool is_background_map = 3;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_is_background_map() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_is_background_map() const {
  return _internal_has_is_background_map();
}
inline void CSVCMsg_GameSessionConfiguration::clear_is_background_map() {
  is_background_map_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_is_background_map() const {
  return is_background_map_;
}
inline bool CSVCMsg_GameSessionConfiguration::is_background_map() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.is_background_map)
  return _internal_is_background_map();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_is_background_map(bool value) {
  _has_bits_[0] |= 0x00000400u;
  is_background_map_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_is_background_map(bool value) {
  _internal_set_is_background_map(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.is_background_map)
}

// optional bool is_headless = 4;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_is_headless() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_is_headless() const {
  return _internal_has_is_headless();
}
inline void CSVCMsg_GameSessionConfiguration::clear_is_headless() {
  is_headless_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_is_headless() const {
  return is_headless_;
}
inline bool CSVCMsg_GameSessionConfiguration::is_headless() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.is_headless)
  return _internal_is_headless();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_is_headless(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_headless_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_is_headless(bool value) {
  _internal_set_is_headless(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.is_headless)
}

// optional uint32 min_client_limit = 5;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_min_client_limit() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_min_client_limit() const {
  return _internal_has_min_client_limit();
}
inline void CSVCMsg_GameSessionConfiguration::clear_min_client_limit() {
  min_client_limit_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::_internal_min_client_limit() const {
  return min_client_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::min_client_limit() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.min_client_limit)
  return _internal_min_client_limit();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_min_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  min_client_limit_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_min_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_client_limit(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.min_client_limit)
}

// optional uint32 max_client_limit = 6;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_max_client_limit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_max_client_limit() const {
  return _internal_has_max_client_limit();
}
inline void CSVCMsg_GameSessionConfiguration::clear_max_client_limit() {
  max_client_limit_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::_internal_max_client_limit() const {
  return max_client_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::max_client_limit() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.max_client_limit)
  return _internal_max_client_limit();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_max_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  max_client_limit_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_max_client_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_client_limit(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.max_client_limit)
}

// optional uint32 max_clients = 7;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_max_clients() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_max_clients() const {
  return _internal_has_max_clients();
}
inline void CSVCMsg_GameSessionConfiguration::clear_max_clients() {
  max_clients_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::_internal_max_clients() const {
  return max_clients_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::max_clients() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.max_clients)
  return _internal_max_clients();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_max_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  max_clients_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_max_clients(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_clients(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.max_clients)
}

// optional fixed32 tick_interval = 8;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_tick_interval() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_tick_interval() const {
  return _internal_has_tick_interval();
}
inline void CSVCMsg_GameSessionConfiguration::clear_tick_interval() {
  tick_interval_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::_internal_tick_interval() const {
  return tick_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CSVCMsg_GameSessionConfiguration::tick_interval() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.tick_interval)
  return _internal_tick_interval();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_tick_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  tick_interval_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_tick_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tick_interval(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.tick_interval)
}

// optional string hostname = 9;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_hostname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_hostname() const {
  return _internal_has_hostname();
}
inline void CSVCMsg_GameSessionConfiguration::clear_hostname() {
  hostname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::hostname() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.hostname)
  return _internal_hostname();
}
inline void CSVCMsg_GameSessionConfiguration::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.hostname)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_hostname() const {
  return hostname_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_hostname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_hostname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.hostname)
}
inline void CSVCMsg_GameSessionConfiguration::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.hostname)
}
inline void CSVCMsg_GameSessionConfiguration::set_hostname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.hostname)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_hostname() {
  _has_bits_[0] |= 0x00000001u;
  return hostname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_hostname() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.hostname)
  if (!_internal_has_hostname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return hostname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.hostname)
}

// optional string savegamename = 10;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_savegamename() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_savegamename() const {
  return _internal_has_savegamename();
}
inline void CSVCMsg_GameSessionConfiguration::clear_savegamename() {
  savegamename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::savegamename() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.savegamename)
  return _internal_savegamename();
}
inline void CSVCMsg_GameSessionConfiguration::set_savegamename(const std::string& value) {
  _internal_set_savegamename(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.savegamename)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_savegamename() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.savegamename)
  return _internal_mutable_savegamename();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_savegamename() const {
  return savegamename_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_savegamename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  savegamename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_savegamename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  savegamename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.savegamename)
}
inline void CSVCMsg_GameSessionConfiguration::set_savegamename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  savegamename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.savegamename)
}
inline void CSVCMsg_GameSessionConfiguration::set_savegamename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  savegamename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.savegamename)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_savegamename() {
  _has_bits_[0] |= 0x00000002u;
  return savegamename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_savegamename() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.savegamename)
  if (!_internal_has_savegamename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return savegamename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_savegamename(std::string* savegamename) {
  if (savegamename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  savegamename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), savegamename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.savegamename)
}

// optional string s1_mapname = 11;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_s1_mapname() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_s1_mapname() const {
  return _internal_has_s1_mapname();
}
inline void CSVCMsg_GameSessionConfiguration::clear_s1_mapname() {
  s1_mapname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::s1_mapname() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.s1_mapname)
  return _internal_s1_mapname();
}
inline void CSVCMsg_GameSessionConfiguration::set_s1_mapname(const std::string& value) {
  _internal_set_s1_mapname(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.s1_mapname)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_s1_mapname() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.s1_mapname)
  return _internal_mutable_s1_mapname();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_s1_mapname() const {
  return s1_mapname_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_s1_mapname(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  s1_mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_s1_mapname(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  s1_mapname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.s1_mapname)
}
inline void CSVCMsg_GameSessionConfiguration::set_s1_mapname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  s1_mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.s1_mapname)
}
inline void CSVCMsg_GameSessionConfiguration::set_s1_mapname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  s1_mapname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.s1_mapname)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_s1_mapname() {
  _has_bits_[0] |= 0x00000004u;
  return s1_mapname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_s1_mapname() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.s1_mapname)
  if (!_internal_has_s1_mapname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return s1_mapname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_s1_mapname(std::string* s1_mapname) {
  if (s1_mapname != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  s1_mapname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s1_mapname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.s1_mapname)
}

// optional string gamemode = 12;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_gamemode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_gamemode() const {
  return _internal_has_gamemode();
}
inline void CSVCMsg_GameSessionConfiguration::clear_gamemode() {
  gamemode_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::gamemode() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.gamemode)
  return _internal_gamemode();
}
inline void CSVCMsg_GameSessionConfiguration::set_gamemode(const std::string& value) {
  _internal_set_gamemode(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.gamemode)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_gamemode() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.gamemode)
  return _internal_mutable_gamemode();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_gamemode() const {
  return gamemode_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_gamemode(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  gamemode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_gamemode(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  gamemode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.gamemode)
}
inline void CSVCMsg_GameSessionConfiguration::set_gamemode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  gamemode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.gamemode)
}
inline void CSVCMsg_GameSessionConfiguration::set_gamemode(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  gamemode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.gamemode)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_gamemode() {
  _has_bits_[0] |= 0x00000008u;
  return gamemode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_gamemode() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.gamemode)
  if (!_internal_has_gamemode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return gamemode_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_gamemode(std::string* gamemode) {
  if (gamemode != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  gamemode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamemode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.gamemode)
}

// optional string server_ip_address = 13;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_server_ip_address() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_server_ip_address() const {
  return _internal_has_server_ip_address();
}
inline void CSVCMsg_GameSessionConfiguration::clear_server_ip_address() {
  server_ip_address_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::server_ip_address() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.server_ip_address)
  return _internal_server_ip_address();
}
inline void CSVCMsg_GameSessionConfiguration::set_server_ip_address(const std::string& value) {
  _internal_set_server_ip_address(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.server_ip_address)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_server_ip_address() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.server_ip_address)
  return _internal_mutable_server_ip_address();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_server_ip_address() const {
  return server_ip_address_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_server_ip_address(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  server_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_server_ip_address(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  server_ip_address_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.server_ip_address)
}
inline void CSVCMsg_GameSessionConfiguration::set_server_ip_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  server_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.server_ip_address)
}
inline void CSVCMsg_GameSessionConfiguration::set_server_ip_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  server_ip_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.server_ip_address)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_server_ip_address() {
  _has_bits_[0] |= 0x00000010u;
  return server_ip_address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_server_ip_address() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.server_ip_address)
  if (!_internal_has_server_ip_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return server_ip_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_server_ip_address(std::string* server_ip_address) {
  if (server_ip_address != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  server_ip_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.server_ip_address)
}

// optional bytes data = 14;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_data() const {
  return _internal_has_data();
}
inline void CSVCMsg_GameSessionConfiguration::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::data() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.data)
  return _internal_data();
}
inline void CSVCMsg_GameSessionConfiguration::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.data)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_data() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.data)
  return _internal_mutable_data();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_data() const {
  return data_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.data)
}
inline void CSVCMsg_GameSessionConfiguration::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.data)
}
inline void CSVCMsg_GameSessionConfiguration::set_data(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.data)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000020u;
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_data() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return data_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.data)
}

// optional bool is_localonly = 15;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_is_localonly() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_is_localonly() const {
  return _internal_has_is_localonly();
}
inline void CSVCMsg_GameSessionConfiguration::clear_is_localonly() {
  is_localonly_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_is_localonly() const {
  return is_localonly_;
}
inline bool CSVCMsg_GameSessionConfiguration::is_localonly() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.is_localonly)
  return _internal_is_localonly();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_is_localonly(bool value) {
  _has_bits_[0] |= 0x00010000u;
  is_localonly_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_is_localonly(bool value) {
  _internal_set_is_localonly(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.is_localonly)
}

// optional bool no_steam_server = 19;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_no_steam_server() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_no_steam_server() const {
  return _internal_has_no_steam_server();
}
inline void CSVCMsg_GameSessionConfiguration::clear_no_steam_server() {
  no_steam_server_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_no_steam_server() const {
  return no_steam_server_;
}
inline bool CSVCMsg_GameSessionConfiguration::no_steam_server() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.no_steam_server)
  return _internal_no_steam_server();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_no_steam_server(bool value) {
  _has_bits_[0] |= 0x00020000u;
  no_steam_server_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_no_steam_server(bool value) {
  _internal_set_no_steam_server(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.no_steam_server)
}

// optional bool is_transition = 16;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_is_transition() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_is_transition() const {
  return _internal_has_is_transition();
}
inline void CSVCMsg_GameSessionConfiguration::clear_is_transition() {
  is_transition_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool CSVCMsg_GameSessionConfiguration::_internal_is_transition() const {
  return is_transition_;
}
inline bool CSVCMsg_GameSessionConfiguration::is_transition() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.is_transition)
  return _internal_is_transition();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_is_transition(bool value) {
  _has_bits_[0] |= 0x00040000u;
  is_transition_ = value;
}
inline void CSVCMsg_GameSessionConfiguration::set_is_transition(bool value) {
  _internal_set_is_transition(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.is_transition)
}

// optional string previouslevel = 17;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_previouslevel() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_previouslevel() const {
  return _internal_has_previouslevel();
}
inline void CSVCMsg_GameSessionConfiguration::clear_previouslevel() {
  previouslevel_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::previouslevel() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.previouslevel)
  return _internal_previouslevel();
}
inline void CSVCMsg_GameSessionConfiguration::set_previouslevel(const std::string& value) {
  _internal_set_previouslevel(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.previouslevel)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_previouslevel() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.previouslevel)
  return _internal_mutable_previouslevel();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_previouslevel() const {
  return previouslevel_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_previouslevel(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  previouslevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_previouslevel(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  previouslevel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.previouslevel)
}
inline void CSVCMsg_GameSessionConfiguration::set_previouslevel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  previouslevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.previouslevel)
}
inline void CSVCMsg_GameSessionConfiguration::set_previouslevel(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  previouslevel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.previouslevel)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_previouslevel() {
  _has_bits_[0] |= 0x00000040u;
  return previouslevel_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_previouslevel() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.previouslevel)
  if (!_internal_has_previouslevel()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return previouslevel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_previouslevel(std::string* previouslevel) {
  if (previouslevel != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  previouslevel_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), previouslevel,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.previouslevel)
}

// optional string landmarkname = 18;
inline bool CSVCMsg_GameSessionConfiguration::_internal_has_landmarkname() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CSVCMsg_GameSessionConfiguration::has_landmarkname() const {
  return _internal_has_landmarkname();
}
inline void CSVCMsg_GameSessionConfiguration::clear_landmarkname() {
  landmarkname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CSVCMsg_GameSessionConfiguration::landmarkname() const {
  // @@protoc_insertion_point(field_get:CSVCMsg_GameSessionConfiguration.landmarkname)
  return _internal_landmarkname();
}
inline void CSVCMsg_GameSessionConfiguration::set_landmarkname(const std::string& value) {
  _internal_set_landmarkname(value);
  // @@protoc_insertion_point(field_set:CSVCMsg_GameSessionConfiguration.landmarkname)
}
inline std::string* CSVCMsg_GameSessionConfiguration::mutable_landmarkname() {
  // @@protoc_insertion_point(field_mutable:CSVCMsg_GameSessionConfiguration.landmarkname)
  return _internal_mutable_landmarkname();
}
inline const std::string& CSVCMsg_GameSessionConfiguration::_internal_landmarkname() const {
  return landmarkname_.Get();
}
inline void CSVCMsg_GameSessionConfiguration::_internal_set_landmarkname(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  landmarkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_landmarkname(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  landmarkname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CSVCMsg_GameSessionConfiguration.landmarkname)
}
inline void CSVCMsg_GameSessionConfiguration::set_landmarkname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  landmarkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CSVCMsg_GameSessionConfiguration.landmarkname)
}
inline void CSVCMsg_GameSessionConfiguration::set_landmarkname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  landmarkname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CSVCMsg_GameSessionConfiguration.landmarkname)
}
inline std::string* CSVCMsg_GameSessionConfiguration::_internal_mutable_landmarkname() {
  _has_bits_[0] |= 0x00000080u;
  return landmarkname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CSVCMsg_GameSessionConfiguration::release_landmarkname() {
  // @@protoc_insertion_point(field_release:CSVCMsg_GameSessionConfiguration.landmarkname)
  if (!_internal_has_landmarkname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return landmarkname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CSVCMsg_GameSessionConfiguration::set_allocated_landmarkname(std::string* landmarkname) {
  if (landmarkname != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  landmarkname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), landmarkname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CSVCMsg_GameSessionConfiguration.landmarkname)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::SignonState_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SignonState_t>() {
  return ::SignonState_t_descriptor();
}
template <> struct is_proto_enum< ::NET_Messages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NET_Messages>() {
  return ::NET_Messages_descriptor();
}
template <> struct is_proto_enum< ::SpawnGroupFlags_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SpawnGroupFlags_t>() {
  return ::SpawnGroupFlags_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_networkbasetypes_2eproto
