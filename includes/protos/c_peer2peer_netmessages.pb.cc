// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#include "c_peer2peer_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CP2P_TextMessage::CP2P_TextMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CP2P_TextMessageDefaultTypeInternal {
  constexpr CP2P_TextMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CP2P_TextMessageDefaultTypeInternal() {}
  union {
    CP2P_TextMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CP2P_TextMessageDefaultTypeInternal _CP2P_TextMessage_default_instance_;
constexpr CSteam_Voice_Encoding::CSteam_Voice_Encoding(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voice_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CSteam_Voice_EncodingDefaultTypeInternal {
  constexpr CSteam_Voice_EncodingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSteam_Voice_EncodingDefaultTypeInternal() {}
  union {
    CSteam_Voice_Encoding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSteam_Voice_EncodingDefaultTypeInternal _CSteam_Voice_Encoding_default_instance_;
constexpr CP2P_Voice::CP2P_Voice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audio_(nullptr)
  , broadcast_group_(0u){}
struct CP2P_VoiceDefaultTypeInternal {
  constexpr CP2P_VoiceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CP2P_VoiceDefaultTypeInternal() {}
  union {
    CP2P_Voice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CP2P_VoiceDefaultTypeInternal _CP2P_Voice_default_instance_;
constexpr CP2P_Ping::CP2P_Ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : send_time_(PROTOBUF_ULONGLONG(0))
  , is_reply_(false){}
struct CP2P_PingDefaultTypeInternal {
  constexpr CP2P_PingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CP2P_PingDefaultTypeInternal() {}
  union {
    CP2P_Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CP2P_PingDefaultTypeInternal _CP2P_Ping_default_instance_;
constexpr CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pos_(nullptr)
  , ang_(nullptr){}
struct CP2P_VRAvatarPosition_COrientationDefaultTypeInternal {
  constexpr CP2P_VRAvatarPosition_COrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CP2P_VRAvatarPosition_COrientationDefaultTypeInternal() {}
  union {
    CP2P_VRAvatarPosition_COrientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CP2P_VRAvatarPosition_COrientationDefaultTypeInternal _CP2P_VRAvatarPosition_COrientation_default_instance_;
constexpr CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : body_parts_()
  , hat_id_(0)
  , scene_id_(0)
  , world_scale_(0){}
struct CP2P_VRAvatarPositionDefaultTypeInternal {
  constexpr CP2P_VRAvatarPositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CP2P_VRAvatarPositionDefaultTypeInternal() {}
  union {
    CP2P_VRAvatarPosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CP2P_VRAvatarPositionDefaultTypeInternal _CP2P_VRAvatarPosition_default_instance_;
constexpr CP2P_WatchSynchronization::CP2P_WatchSynchronization(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : demo_tick_(0)
  , paused_(false)
  , tv_listen_voice_indices_(PROTOBUF_ULONGLONG(0))
  , dota_spectator_mode_(0)
  , dota_spectator_watching_broadcaster_(0)
  , dota_spectator_hero_index_(0)
  , dota_spectator_autospeed_(0)
  , dota_replay_speed_(0){}
struct CP2P_WatchSynchronizationDefaultTypeInternal {
  constexpr CP2P_WatchSynchronizationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CP2P_WatchSynchronizationDefaultTypeInternal() {}
  union {
    CP2P_WatchSynchronization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CP2P_WatchSynchronizationDefaultTypeInternal _CP2P_WatchSynchronization_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_c_5fpeer2peer_5fnetmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_c_5fpeer2peer_5fnetmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CP2P_TextMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CP2P_TextMessage, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::CSteam_Voice_Encoding, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSteam_Voice_Encoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSteam_Voice_Encoding, voice_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, audio_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Voice, broadcast_group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, send_time_),
  PROTOBUF_FIELD_OFFSET(::CP2P_Ping, is_reply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, pos_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition_COrientation, ang_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, body_parts_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, hat_id_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, scene_id_),
  PROTOBUF_FIELD_OFFSET(::CP2P_VRAvatarPosition, world_scale_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, demo_tick_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, paused_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, tv_listen_voice_indices_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, dota_spectator_mode_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, dota_spectator_watching_broadcaster_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, dota_spectator_hero_index_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, dota_spectator_autospeed_),
  PROTOBUF_FIELD_OFFSET(::CP2P_WatchSynchronization, dota_replay_speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::CP2P_TextMessage)},
  { 7, 13, sizeof(::CSteam_Voice_Encoding)},
  { 14, 21, sizeof(::CP2P_Voice)},
  { 23, 30, sizeof(::CP2P_Ping)},
  { 32, 39, sizeof(::CP2P_VRAvatarPosition_COrientation)},
  { 41, 50, sizeof(::CP2P_VRAvatarPosition)},
  { 54, 67, sizeof(::CP2P_WatchSynchronization)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CP2P_TextMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSteam_Voice_Encoding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CP2P_Voice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CP2P_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CP2P_VRAvatarPosition_COrientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CP2P_VRAvatarPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CP2P_WatchSynchronization_default_instance_),
};

const char descriptor_table_protodef_c_5fpeer2peer_5fnetmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035c_peer2peer_netmessages.proto\032\021netmess"
  "ages.proto\032\026networkbasetypes.proto\" \n\020CP"
  "2P_TextMessage\022\014\n\004text\030\001 \001(\014\"+\n\025CSteam_V"
  "oice_Encoding\022\022\n\nvoice_data\030\001 \001(\014\"h\n\nCP2"
  "P_Voice\022\036\n\005audio\030\001 \001(\0132\017.CMsgVoiceAudio\022"
  "\027\n\017broadcast_group\030\002 \001(\r\"!\n\rHandler_Flag"
  "s\022\020\n\014Played_Audio\020\001\"0\n\tCP2P_Ping\022\021\n\tsend"
  "_time\030\001 \002(\004\022\020\n\010is_reply\030\002 \002(\010\"\313\001\n\025CP2P_V"
  "RAvatarPosition\0227\n\nbody_parts\030\001 \003(\0132#.CP"
  "2P_VRAvatarPosition.COrientation\022\016\n\006hat_"
  "id\030\002 \001(\005\022\020\n\010scene_id\030\003 \001(\005\022\023\n\013world_scal"
  "e\030\004 \001(\005\032B\n\014COrientation\022\030\n\003pos\030\001 \001(\0132\013.C"
  "MsgVector\022\030\n\003ang\030\002 \001(\0132\013.CMsgQAngle\"\211\002\n\031"
  "CP2P_WatchSynchronization\022\021\n\tdemo_tick\030\001"
  " \001(\005\022\016\n\006paused\030\002 \001(\010\022\037\n\027tv_listen_voice_"
  "indices\030\003 \001(\004\022\033\n\023dota_spectator_mode\030\004 \001"
  "(\005\022+\n#dota_spectator_watching_broadcaste"
  "r\030\005 \001(\005\022!\n\031dota_spectator_hero_index\030\006 \001"
  "(\005\022 \n\030dota_spectator_autospeed\030\007 \001(\005\022\031\n\021"
  "dota_replay_speed\030\010 \001(\005*}\n\014P2P_Messages\022"
  "\024\n\017p2p_TextMessage\020\200\002\022\016\n\tp2p_Voice\020\201\002\022\r\n"
  "\010p2p_Ping\020\202\002\022\031\n\024p2p_VRAvatarPosition\020\203\002\022"
  "\035\n\030p2p_WatchSynchronization\020\204\002B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_deps[2] = {
  &::descriptor_table_netmessages_2eproto,
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto = {
  false, false, 915, descriptor_table_protodef_c_5fpeer2peer_5fnetmessages_2eproto, "c_peer2peer_netmessages.proto", 
  &descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_once, descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_c_5fpeer2peer_5fnetmessages_2eproto::offsets,
  file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto, file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto, file_level_service_descriptors_c_5fpeer2peer_5fnetmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_c_5fpeer2peer_5fnetmessages_2eproto(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[0];
}
bool CP2P_Voice_Handler_Flags_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CP2P_Voice_Handler_Flags CP2P_Voice::Played_Audio;
constexpr CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MIN;
constexpr CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MAX;
constexpr int CP2P_Voice::Handler_Flags_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* P2P_Messages_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[1];
}
bool P2P_Messages_IsValid(int value) {
  switch (value) {
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CP2P_TextMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_TextMessage>()._has_bits_);
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CP2P_TextMessage::CP2P_TextMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CP2P_TextMessage)
}
CP2P_TextMessage::CP2P_TextMessage(const CP2P_TextMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CP2P_TextMessage)
}

void CP2P_TextMessage::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CP2P_TextMessage::~CP2P_TextMessage() {
  // @@protoc_insertion_point(destructor:CP2P_TextMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CP2P_TextMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CP2P_TextMessage::ArenaDtor(void* object) {
  CP2P_TextMessage* _this = reinterpret_cast< CP2P_TextMessage* >(object);
  (void)_this;
}
void CP2P_TextMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CP2P_TextMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CP2P_TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_TextMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_TextMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CP2P_TextMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_TextMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_TextMessage)
  return target;
}

size_t CP2P_TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_TextMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_text());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_TextMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_TextMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CP2P_TextMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CP2P_TextMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CP2P_TextMessage)
    MergeFrom(*source);
  }
}

void CP2P_TextMessage::MergeFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_text()) {
    _internal_set_text(from._internal_text());
  }
}

void CP2P_TextMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_TextMessage::CopyFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_TextMessage::IsInitialized() const {
  return true;
}

void CP2P_TextMessage::InternalSwap(CP2P_TextMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_TextMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSteam_Voice_Encoding::_Internal {
 public:
  using HasBits = decltype(std::declval<CSteam_Voice_Encoding>()._has_bits_);
  static void set_has_voice_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CSteam_Voice_Encoding::CSteam_Voice_Encoding(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSteam_Voice_Encoding)
}
CSteam_Voice_Encoding::CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voice_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_voice_data()) {
    voice_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voice_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CSteam_Voice_Encoding)
}

void CSteam_Voice_Encoding::SharedCtor() {
voice_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CSteam_Voice_Encoding::~CSteam_Voice_Encoding() {
  // @@protoc_insertion_point(destructor:CSteam_Voice_Encoding)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSteam_Voice_Encoding::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  voice_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSteam_Voice_Encoding::ArenaDtor(void* object) {
  CSteam_Voice_Encoding* _this = reinterpret_cast< CSteam_Voice_Encoding* >(object);
  (void)_this;
}
void CSteam_Voice_Encoding::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSteam_Voice_Encoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSteam_Voice_Encoding::Clear() {
// @@protoc_insertion_point(message_clear_start:CSteam_Voice_Encoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    voice_data_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSteam_Voice_Encoding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes voice_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_voice_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSteam_Voice_Encoding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSteam_Voice_Encoding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes voice_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_voice_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSteam_Voice_Encoding)
  return target;
}

size_t CSteam_Voice_Encoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSteam_Voice_Encoding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes voice_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_voice_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteam_Voice_Encoding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteam_Voice_Encoding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSteam_Voice_Encoding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSteam_Voice_Encoding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSteam_Voice_Encoding)
    MergeFrom(*source);
  }
}

void CSteam_Voice_Encoding::MergeFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_voice_data()) {
    _internal_set_voice_data(from._internal_voice_data());
  }
}

void CSteam_Voice_Encoding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteam_Voice_Encoding::CopyFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteam_Voice_Encoding::IsInitialized() const {
  return true;
}

void CSteam_Voice_Encoding::InternalSwap(CSteam_Voice_Encoding* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  voice_data_.Swap(&other->voice_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CSteam_Voice_Encoding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CP2P_Voice::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_Voice>()._has_bits_);
  static const ::CMsgVoiceAudio& audio(const CP2P_Voice* msg);
  static void set_has_audio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_broadcast_group(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVoiceAudio&
CP2P_Voice::_Internal::audio(const CP2P_Voice* msg) {
  return *msg->audio_;
}
void CP2P_Voice::clear_audio() {
  if (audio_ != nullptr) audio_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CP2P_Voice::CP2P_Voice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CP2P_Voice)
}
CP2P_Voice::CP2P_Voice(const CP2P_Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_audio()) {
    audio_ = new ::CMsgVoiceAudio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  broadcast_group_ = from.broadcast_group_;
  // @@protoc_insertion_point(copy_constructor:CP2P_Voice)
}

void CP2P_Voice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audio_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&broadcast_group_) -
    reinterpret_cast<char*>(&audio_)) + sizeof(broadcast_group_));
}

CP2P_Voice::~CP2P_Voice() {
  // @@protoc_insertion_point(destructor:CP2P_Voice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CP2P_Voice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete audio_;
}

void CP2P_Voice::ArenaDtor(void* object) {
  CP2P_Voice* _this = reinterpret_cast< CP2P_Voice* >(object);
  (void)_this;
}
void CP2P_Voice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CP2P_Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CP2P_Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(audio_ != nullptr);
    audio_->Clear();
  }
  broadcast_group_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_Voice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVoiceAudio audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 broadcast_group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_broadcast_group(&has_bits);
          broadcast_group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CP2P_Voice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVoiceAudio audio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  // optional uint32 broadcast_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_broadcast_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_Voice)
  return target;
}

size_t CP2P_Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_Voice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVoiceAudio audio = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *audio_);
    }

    // optional uint32 broadcast_group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_broadcast_group());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_Voice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_Voice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CP2P_Voice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CP2P_Voice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CP2P_Voice)
    MergeFrom(*source);
  }
}

void CP2P_Voice::MergeFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_audio()->::CMsgVoiceAudio::MergeFrom(from._internal_audio());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_group_ = from.broadcast_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_Voice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Voice::CopyFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Voice::IsInitialized() const {
  return true;
}

void CP2P_Voice::InternalSwap(CP2P_Voice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_Voice, broadcast_group_)
      + sizeof(CP2P_Voice::broadcast_group_)
      - PROTOBUF_FIELD_OFFSET(CP2P_Voice, audio_)>(
          reinterpret_cast<char*>(&audio_),
          reinterpret_cast<char*>(&other->audio_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_Voice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CP2P_Ping::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_Ping>()._has_bits_);
  static void set_has_send_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_reply(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CP2P_Ping::CP2P_Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CP2P_Ping)
}
CP2P_Ping::CP2P_Ping(const CP2P_Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&send_time_, &from.send_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reply_) -
    reinterpret_cast<char*>(&send_time_)) + sizeof(is_reply_));
  // @@protoc_insertion_point(copy_constructor:CP2P_Ping)
}

void CP2P_Ping::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&send_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_reply_) -
    reinterpret_cast<char*>(&send_time_)) + sizeof(is_reply_));
}

CP2P_Ping::~CP2P_Ping() {
  // @@protoc_insertion_point(destructor:CP2P_Ping)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CP2P_Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CP2P_Ping::ArenaDtor(void* object) {
  CP2P_Ping* _this = reinterpret_cast< CP2P_Ping* >(object);
  (void)_this;
}
void CP2P_Ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CP2P_Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CP2P_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&send_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_reply_) -
        reinterpret_cast<char*>(&send_time_)) + sizeof(is_reply_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 send_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_send_time(&has_bits);
          send_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_reply = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_is_reply(&has_bits);
          is_reply_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CP2P_Ping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_Ping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 send_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_send_time(), target);
  }

  // required bool is_reply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_Ping)
  return target;
}

size_t CP2P_Ping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CP2P_Ping)
  size_t total_size = 0;

  if (_internal_has_send_time()) {
    // required uint64 send_time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send_time());
  }

  if (_internal_has_is_reply()) {
    // required bool is_reply = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CP2P_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_Ping)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 send_time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_send_time());

    // required bool is_reply = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_Ping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_Ping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CP2P_Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CP2P_Ping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CP2P_Ping)
    MergeFrom(*source);
  }
}

void CP2P_Ping::MergeFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      send_time_ = from.send_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_reply_ = from.is_reply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_Ping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Ping::CopyFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Ping::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CP2P_Ping::InternalSwap(CP2P_Ping* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_Ping, is_reply_)
      + sizeof(CP2P_Ping::is_reply_)
      - PROTOBUF_FIELD_OFFSET(CP2P_Ping, send_time_)>(
          reinterpret_cast<char*>(&send_time_),
          reinterpret_cast<char*>(&other->send_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_Ping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CP2P_VRAvatarPosition_COrientation::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_VRAvatarPosition_COrientation>()._has_bits_);
  static const ::CMsgVector& pos(const CP2P_VRAvatarPosition_COrientation* msg);
  static void set_has_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgQAngle& ang(const CP2P_VRAvatarPosition_COrientation* msg);
  static void set_has_ang(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgVector&
CP2P_VRAvatarPosition_COrientation::_Internal::pos(const CP2P_VRAvatarPosition_COrientation* msg) {
  return *msg->pos_;
}
const ::CMsgQAngle&
CP2P_VRAvatarPosition_COrientation::_Internal::ang(const CP2P_VRAvatarPosition_COrientation* msg) {
  return *msg->ang_;
}
void CP2P_VRAvatarPosition_COrientation::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_VRAvatarPosition_COrientation::clear_ang() {
  if (ang_ != nullptr) ang_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CP2P_VRAvatarPosition.COrientation)
}
CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(const CP2P_VRAvatarPosition_COrientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::CMsgVector(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_ang()) {
    ang_ = new ::CMsgQAngle(*from.ang_);
  } else {
    ang_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CP2P_VRAvatarPosition.COrientation)
}

void CP2P_VRAvatarPosition_COrientation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ang_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(ang_));
}

CP2P_VRAvatarPosition_COrientation::~CP2P_VRAvatarPosition_COrientation() {
  // @@protoc_insertion_point(destructor:CP2P_VRAvatarPosition.COrientation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CP2P_VRAvatarPosition_COrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete ang_;
}

void CP2P_VRAvatarPosition_COrientation::ArenaDtor(void* object) {
  CP2P_VRAvatarPosition_COrientation* _this = reinterpret_cast< CP2P_VRAvatarPosition_COrientation* >(object);
  (void)_this;
}
void CP2P_VRAvatarPosition_COrientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CP2P_VRAvatarPosition_COrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CP2P_VRAvatarPosition_COrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_VRAvatarPosition.COrientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ang_ != nullptr);
      ang_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_VRAvatarPosition_COrientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgQAngle ang = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ang(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CP2P_VRAvatarPosition_COrientation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_VRAvatarPosition.COrientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pos(this), target, stream);
  }

  // optional .CMsgQAngle ang = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ang(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_VRAvatarPosition.COrientation)
  return target;
}

size_t CP2P_VRAvatarPosition_COrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_VRAvatarPosition.COrientation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgVector pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .CMsgQAngle ang = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ang_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_VRAvatarPosition_COrientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_VRAvatarPosition_COrientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CP2P_VRAvatarPosition_COrientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CP2P_VRAvatarPosition.COrientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CP2P_VRAvatarPosition.COrientation)
    MergeFrom(*source);
  }
}

void CP2P_VRAvatarPosition_COrientation::MergeFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_pos()->::CMsgVector::MergeFrom(from._internal_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ang()->::CMsgQAngle::MergeFrom(from._internal_ang());
    }
  }
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition_COrientation::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition_COrientation::InternalSwap(CP2P_VRAvatarPosition_COrientation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, ang_)
      + sizeof(CP2P_VRAvatarPosition_COrientation::ang_)
      - PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_VRAvatarPosition_COrientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CP2P_VRAvatarPosition::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_VRAvatarPosition>()._has_bits_);
  static void set_has_hat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scene_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_world_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  body_parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CP2P_VRAvatarPosition)
}
CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(const CP2P_VRAvatarPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      body_parts_(from.body_parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hat_id_, &from.hat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_scale_) -
    reinterpret_cast<char*>(&hat_id_)) + sizeof(world_scale_));
  // @@protoc_insertion_point(copy_constructor:CP2P_VRAvatarPosition)
}

void CP2P_VRAvatarPosition::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_scale_) -
    reinterpret_cast<char*>(&hat_id_)) + sizeof(world_scale_));
}

CP2P_VRAvatarPosition::~CP2P_VRAvatarPosition() {
  // @@protoc_insertion_point(destructor:CP2P_VRAvatarPosition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CP2P_VRAvatarPosition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CP2P_VRAvatarPosition::ArenaDtor(void* object) {
  CP2P_VRAvatarPosition* _this = reinterpret_cast< CP2P_VRAvatarPosition* >(object);
  (void)_this;
}
void CP2P_VRAvatarPosition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CP2P_VRAvatarPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CP2P_VRAvatarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_VRAvatarPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_parts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&world_scale_) -
        reinterpret_cast<char*>(&hat_id_)) + sizeof(world_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_VRAvatarPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_body_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 hat_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hat_id(&has_bits);
          hat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 scene_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_scene_id(&has_bits);
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 world_scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_world_scale(&has_bits);
          world_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CP2P_VRAvatarPosition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_VRAvatarPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_body_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_body_parts(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 hat_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_hat_id(), target);
  }

  // optional int32 scene_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_scene_id(), target);
  }

  // optional int32 world_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_VRAvatarPosition)
  return target;
}

size_t CP2P_VRAvatarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_VRAvatarPosition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CP2P_VRAvatarPosition.COrientation body_parts = 1;
  total_size += 1UL * this->_internal_body_parts_size();
  for (const auto& msg : this->body_parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 hat_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hat_id());
    }

    // optional int32 scene_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_scene_id());
    }

    // optional int32 world_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_world_scale());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_VRAvatarPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_VRAvatarPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CP2P_VRAvatarPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CP2P_VRAvatarPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CP2P_VRAvatarPosition)
    MergeFrom(*source);
  }
}

void CP2P_VRAvatarPosition::MergeFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_parts_.MergeFrom(from.body_parts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hat_id_ = from.hat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      scene_id_ = from.scene_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      world_scale_ = from.world_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_VRAvatarPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_VRAvatarPosition::CopyFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition::InternalSwap(CP2P_VRAvatarPosition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_parts_.InternalSwap(&other->body_parts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition, world_scale_)
      + sizeof(CP2P_VRAvatarPosition::world_scale_)
      - PROTOBUF_FIELD_OFFSET(CP2P_VRAvatarPosition, hat_id_)>(
          reinterpret_cast<char*>(&hat_id_),
          reinterpret_cast<char*>(&other->hat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_VRAvatarPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CP2P_WatchSynchronization::_Internal {
 public:
  using HasBits = decltype(std::declval<CP2P_WatchSynchronization>()._has_bits_);
  static void set_has_demo_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paused(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tv_listen_voice_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dota_spectator_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dota_spectator_watching_broadcaster(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_dota_spectator_hero_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_dota_spectator_autospeed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_dota_replay_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CP2P_WatchSynchronization::CP2P_WatchSynchronization(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CP2P_WatchSynchronization)
}
CP2P_WatchSynchronization::CP2P_WatchSynchronization(const CP2P_WatchSynchronization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&demo_tick_, &from.demo_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&dota_replay_speed_) -
    reinterpret_cast<char*>(&demo_tick_)) + sizeof(dota_replay_speed_));
  // @@protoc_insertion_point(copy_constructor:CP2P_WatchSynchronization)
}

void CP2P_WatchSynchronization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&demo_tick_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dota_replay_speed_) -
    reinterpret_cast<char*>(&demo_tick_)) + sizeof(dota_replay_speed_));
}

CP2P_WatchSynchronization::~CP2P_WatchSynchronization() {
  // @@protoc_insertion_point(destructor:CP2P_WatchSynchronization)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CP2P_WatchSynchronization::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CP2P_WatchSynchronization::ArenaDtor(void* object) {
  CP2P_WatchSynchronization* _this = reinterpret_cast< CP2P_WatchSynchronization* >(object);
  (void)_this;
}
void CP2P_WatchSynchronization::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CP2P_WatchSynchronization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CP2P_WatchSynchronization::Clear() {
// @@protoc_insertion_point(message_clear_start:CP2P_WatchSynchronization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&demo_tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dota_replay_speed_) -
        reinterpret_cast<char*>(&demo_tick_)) + sizeof(dota_replay_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CP2P_WatchSynchronization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 demo_tick = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_demo_tick(&has_bits);
          demo_tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool paused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paused(&has_bits);
          paused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 tv_listen_voice_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tv_listen_voice_indices(&has_bits);
          tv_listen_voice_indices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dota_spectator_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dota_spectator_mode(&has_bits);
          dota_spectator_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dota_spectator_watching_broadcaster = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dota_spectator_watching_broadcaster(&has_bits);
          dota_spectator_watching_broadcaster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dota_spectator_hero_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dota_spectator_hero_index(&has_bits);
          dota_spectator_hero_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dota_spectator_autospeed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dota_spectator_autospeed(&has_bits);
          dota_spectator_autospeed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dota_replay_speed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_dota_replay_speed(&has_bits);
          dota_replay_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CP2P_WatchSynchronization::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CP2P_WatchSynchronization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 demo_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_demo_tick(), target);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_paused(), target);
  }

  // optional uint64 tv_listen_voice_indices = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_tv_listen_voice_indices(), target);
  }

  // optional int32 dota_spectator_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dota_spectator_mode(), target);
  }

  // optional int32 dota_spectator_watching_broadcaster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dota_spectator_watching_broadcaster(), target);
  }

  // optional int32 dota_spectator_hero_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_dota_spectator_hero_index(), target);
  }

  // optional int32 dota_spectator_autospeed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_dota_spectator_autospeed(), target);
  }

  // optional int32 dota_replay_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dota_replay_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CP2P_WatchSynchronization)
  return target;
}

size_t CP2P_WatchSynchronization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CP2P_WatchSynchronization)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 demo_tick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_demo_tick());
    }

    // optional bool paused = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint64 tv_listen_voice_indices = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_tv_listen_voice_indices());
    }

    // optional int32 dota_spectator_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dota_spectator_mode());
    }

    // optional int32 dota_spectator_watching_broadcaster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dota_spectator_watching_broadcaster());
    }

    // optional int32 dota_spectator_hero_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dota_spectator_hero_index());
    }

    // optional int32 dota_spectator_autospeed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dota_spectator_autospeed());
    }

    // optional int32 dota_replay_speed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dota_replay_speed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_WatchSynchronization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_WatchSynchronization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CP2P_WatchSynchronization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CP2P_WatchSynchronization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CP2P_WatchSynchronization)
    MergeFrom(*source);
  }
}

void CP2P_WatchSynchronization::MergeFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      demo_tick_ = from.demo_tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00000004u) {
      tv_listen_voice_indices_ = from.tv_listen_voice_indices_;
    }
    if (cached_has_bits & 0x00000008u) {
      dota_spectator_mode_ = from.dota_spectator_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      dota_spectator_watching_broadcaster_ = from.dota_spectator_watching_broadcaster_;
    }
    if (cached_has_bits & 0x00000020u) {
      dota_spectator_hero_index_ = from.dota_spectator_hero_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      dota_spectator_autospeed_ = from.dota_spectator_autospeed_;
    }
    if (cached_has_bits & 0x00000080u) {
      dota_replay_speed_ = from.dota_replay_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_WatchSynchronization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_WatchSynchronization::CopyFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_WatchSynchronization::IsInitialized() const {
  return true;
}

void CP2P_WatchSynchronization::InternalSwap(CP2P_WatchSynchronization* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CP2P_WatchSynchronization, dota_replay_speed_)
      + sizeof(CP2P_WatchSynchronization::dota_replay_speed_)
      - PROTOBUF_FIELD_OFFSET(CP2P_WatchSynchronization, demo_tick_)>(
          reinterpret_cast<char*>(&demo_tick_),
          reinterpret_cast<char*>(&other->demo_tick_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CP2P_WatchSynchronization::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CP2P_TextMessage* Arena::CreateMaybeMessage< ::CP2P_TextMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_TextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CSteam_Voice_Encoding* Arena::CreateMaybeMessage< ::CSteam_Voice_Encoding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSteam_Voice_Encoding >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_Voice* Arena::CreateMaybeMessage< ::CP2P_Voice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_Ping* Arena::CreateMaybeMessage< ::CP2P_Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_VRAvatarPosition_COrientation* Arena::CreateMaybeMessage< ::CP2P_VRAvatarPosition_COrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_VRAvatarPosition_COrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_VRAvatarPosition* Arena::CreateMaybeMessage< ::CP2P_VRAvatarPosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_VRAvatarPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::CP2P_WatchSynchronization* Arena::CreateMaybeMessage< ::CP2P_WatchSynchronization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CP2P_WatchSynchronization >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
