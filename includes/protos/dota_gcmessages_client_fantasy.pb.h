// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_fantasy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ffantasy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ffantasy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ffantasy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[98]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(int index);
class CMsgClientToGCGetPlayerCardRosterRequest;
struct CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal;
extern CMsgClientToGCGetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCGetPlayerCardRosterResponse;
struct CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal;
extern CMsgClientToGCGetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCGetPlayerCardRosterResponse_default_instance_;
class CMsgClientToGCSetPlayerCardRosterRequest;
struct CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal;
extern CMsgClientToGCSetPlayerCardRosterRequestDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterRequest_default_instance_;
class CMsgClientToGCSetPlayerCardRosterResponse;
struct CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal;
extern CMsgClientToGCSetPlayerCardRosterResponseDefaultTypeInternal _CMsgClientToGCSetPlayerCardRosterResponse_default_instance_;
class CMsgDOTACreateFantasyLeagueRequest;
struct CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal;
extern CMsgDOTACreateFantasyLeagueRequestDefaultTypeInternal _CMsgDOTACreateFantasyLeagueRequest_default_instance_;
class CMsgDOTACreateFantasyLeagueResponse;
struct CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal;
extern CMsgDOTACreateFantasyLeagueResponseDefaultTypeInternal _CMsgDOTACreateFantasyLeagueResponse_default_instance_;
class CMsgDOTADPCProfileInfo;
struct CMsgDOTADPCProfileInfoDefaultTypeInternal;
extern CMsgDOTADPCProfileInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_default_instance_;
class CMsgDOTADPCProfileInfo_FantasyInfo;
struct CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal;
extern CMsgDOTADPCProfileInfo_FantasyInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_;
class CMsgDOTADPCProfileInfo_PredictionInfo;
struct CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal;
extern CMsgDOTADPCProfileInfo_PredictionInfoDefaultTypeInternal _CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_;
class CMsgDOTADPCSearchResults;
struct CMsgDOTADPCSearchResultsDefaultTypeInternal;
extern CMsgDOTADPCSearchResultsDefaultTypeInternal _CMsgDOTADPCSearchResults_default_instance_;
class CMsgDOTADPCSearchResults_League;
struct CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal;
extern CMsgDOTADPCSearchResults_LeagueDefaultTypeInternal _CMsgDOTADPCSearchResults_League_default_instance_;
class CMsgDOTADPCSearchResults_Player;
struct CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal;
extern CMsgDOTADPCSearchResults_PlayerDefaultTypeInternal _CMsgDOTADPCSearchResults_Player_default_instance_;
class CMsgDOTADPCSearchResults_Team;
struct CMsgDOTADPCSearchResults_TeamDefaultTypeInternal;
extern CMsgDOTADPCSearchResults_TeamDefaultTypeInternal _CMsgDOTADPCSearchResults_Team_default_instance_;
class CMsgDOTADPCTeamFavoriteRankings;
struct CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal;
extern CMsgDOTADPCTeamFavoriteRankingsDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_default_instance_;
class CMsgDOTADPCTeamFavoriteRankings_Team;
struct CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal;
extern CMsgDOTADPCTeamFavoriteRankings_TeamDefaultTypeInternal _CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_;
class CMsgDOTAEditFantasyTeamRequest;
struct CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal;
extern CMsgDOTAEditFantasyTeamRequestDefaultTypeInternal _CMsgDOTAEditFantasyTeamRequest_default_instance_;
class CMsgDOTAEditFantasyTeamResponse;
struct CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal;
extern CMsgDOTAEditFantasyTeamResponseDefaultTypeInternal _CMsgDOTAEditFantasyTeamResponse_default_instance_;
class CMsgDOTAFantasyDPCLeagueStatus;
struct CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal;
extern CMsgDOTAFantasyDPCLeagueStatusDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_default_instance_;
class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo;
struct CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal;
extern CMsgDOTAFantasyDPCLeagueStatus_LeagueInfoDefaultTypeInternal _CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_;
class CMsgDOTAFantasyLeagueCreateRequest;
struct CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueCreateRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueCreateRequest_default_instance_;
class CMsgDOTAFantasyLeagueCreateResponse;
struct CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueCreateResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueCreateResponse_default_instance_;
class CMsgDOTAFantasyLeagueDraftPlayerRequest;
struct CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueDraftPlayerRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_;
class CMsgDOTAFantasyLeagueDraftPlayerResponse;
struct CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueDraftPlayerResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_;
class CMsgDOTAFantasyLeagueDraftStatus;
struct CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueDraftStatusDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftStatus_default_instance_;
class CMsgDOTAFantasyLeagueDraftStatusRequest;
struct CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueDraftStatusRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInfoRequest;
struct CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueEditInfoRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInfoResponse;
struct CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueEditInfoResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesRequest;
struct CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueEditInvitesRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange;
struct CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChangeDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_;
class CMsgDOTAFantasyLeagueEditInvitesResponse;
struct CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueEditInvitesResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_;
class CMsgDOTAFantasyLeagueFindRequest;
struct CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueFindRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueFindRequest_default_instance_;
class CMsgDOTAFantasyLeagueFindResponse;
struct CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueFindResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueFindResponse_default_instance_;
class CMsgDOTAFantasyLeagueInfo;
struct CMsgDOTAFantasyLeagueInfoDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueInfoDefaultTypeInternal _CMsgDOTAFantasyLeagueInfo_default_instance_;
class CMsgDOTAFantasyLeagueInfoRequest;
struct CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueInfoRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueInfoRequest_default_instance_;
class CMsgDOTAFantasyLeagueInfoResponse;
struct CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueInfoResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueInfoResponse_default_instance_;
class CMsgDOTAFantasyLeagueInfo_OwnerInfo;
struct CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueInfo_OwnerInfoDefaultTypeInternal _CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsRequest;
struct CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueMatchupsRequestDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse;
struct CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueMatchupsResponseDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse_Matchup;
struct CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueMatchupsResponse_MatchupDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_;
class CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups;
struct CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal;
extern CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchupsDefaultTypeInternal _CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_;
class CMsgDOTAFantasyLeaveLeagueRequest;
struct CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal;
extern CMsgDOTAFantasyLeaveLeagueRequestDefaultTypeInternal _CMsgDOTAFantasyLeaveLeagueRequest_default_instance_;
class CMsgDOTAFantasyLeaveLeagueResponse;
struct CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal;
extern CMsgDOTAFantasyLeaveLeagueResponseDefaultTypeInternal _CMsgDOTAFantasyLeaveLeagueResponse_default_instance_;
class CMsgDOTAFantasyMessageAdd;
struct CMsgDOTAFantasyMessageAddDefaultTypeInternal;
extern CMsgDOTAFantasyMessageAddDefaultTypeInternal _CMsgDOTAFantasyMessageAdd_default_instance_;
class CMsgDOTAFantasyMessagesRequest;
struct CMsgDOTAFantasyMessagesRequestDefaultTypeInternal;
extern CMsgDOTAFantasyMessagesRequestDefaultTypeInternal _CMsgDOTAFantasyMessagesRequest_default_instance_;
class CMsgDOTAFantasyMessagesResponse;
struct CMsgDOTAFantasyMessagesResponseDefaultTypeInternal;
extern CMsgDOTAFantasyMessagesResponseDefaultTypeInternal _CMsgDOTAFantasyMessagesResponse_default_instance_;
class CMsgDOTAFantasyMessagesResponse_Message;
struct CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal;
extern CMsgDOTAFantasyMessagesResponse_MessageDefaultTypeInternal _CMsgDOTAFantasyMessagesResponse_Message_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsRequest;
struct CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerHisoricalStatsRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse;
struct CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerHisoricalStatsResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator;
struct CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulatorDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_;
class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats;
struct CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsRequest;
struct CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerScoreDetailsRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsResponse;
struct CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerScoreDetailsResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_;
class CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData;
struct CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchDataDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_;
class CMsgDOTAFantasyPlayerScoreRequest;
struct CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerScoreRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreRequest_default_instance_;
class CMsgDOTAFantasyPlayerScoreResponse;
struct CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerScoreResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerScoreResponse_default_instance_;
class CMsgDOTAFantasyPlayerStandingsRequest;
struct CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerStandingsRequestDefaultTypeInternal _CMsgDOTAFantasyPlayerStandingsRequest_default_instance_;
class CMsgDOTAFantasyPlayerStandingsResponse;
struct CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerStandingsResponseDefaultTypeInternal _CMsgDOTAFantasyPlayerStandingsResponse_default_instance_;
class CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore;
struct CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScoreDefaultTypeInternal _CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_;
class CMsgDOTAFantasyRemoveOwner;
struct CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal;
extern CMsgDOTAFantasyRemoveOwnerDefaultTypeInternal _CMsgDOTAFantasyRemoveOwner_default_instance_;
class CMsgDOTAFantasyRemoveOwnerResponse;
struct CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal;
extern CMsgDOTAFantasyRemoveOwnerResponseDefaultTypeInternal _CMsgDOTAFantasyRemoveOwnerResponse_default_instance_;
class CMsgDOTAFantasyScheduledMatchesRequest;
struct CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal;
extern CMsgDOTAFantasyScheduledMatchesRequestDefaultTypeInternal _CMsgDOTAFantasyScheduledMatchesRequest_default_instance_;
class CMsgDOTAFantasyScheduledMatchesResponse;
struct CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal;
extern CMsgDOTAFantasyScheduledMatchesResponseDefaultTypeInternal _CMsgDOTAFantasyScheduledMatchesResponse_default_instance_;
class CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays;
struct CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal;
extern CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDaysDefaultTypeInternal _CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_;
class CMsgDOTAFantasyTeamCreateRequest;
struct CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamCreateRequestDefaultTypeInternal _CMsgDOTAFantasyTeamCreateRequest_default_instance_;
class CMsgDOTAFantasyTeamCreateResponse;
struct CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamCreateResponseDefaultTypeInternal _CMsgDOTAFantasyTeamCreateResponse_default_instance_;
class CMsgDOTAFantasyTeamInfo;
struct CMsgDOTAFantasyTeamInfoDefaultTypeInternal;
extern CMsgDOTAFantasyTeamInfoDefaultTypeInternal _CMsgDOTAFantasyTeamInfo_default_instance_;
class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID;
struct CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal;
extern CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueIDDefaultTypeInternal _CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_;
class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID;
struct CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal;
extern CMsgDOTAFantasyTeamInfoRequestByOwnerAccountIDDefaultTypeInternal _CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_;
class CMsgDOTAFantasyTeamInfoResponse;
struct CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamInfoResponseDefaultTypeInternal _CMsgDOTAFantasyTeamInfoResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterAddDropRequest;
struct CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamRosterAddDropRequestDefaultTypeInternal _CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterAddDropResponse;
struct CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamRosterAddDropResponseDefaultTypeInternal _CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterRequest;
struct CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamRosterRequestDefaultTypeInternal _CMsgDOTAFantasyTeamRosterRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterResponse;
struct CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamRosterResponseDefaultTypeInternal _CMsgDOTAFantasyTeamRosterResponse_default_instance_;
class CMsgDOTAFantasyTeamRosterSwapRequest;
struct CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamRosterSwapRequestDefaultTypeInternal _CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_;
class CMsgDOTAFantasyTeamRosterSwapResponse;
struct CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamRosterSwapResponseDefaultTypeInternal _CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_;
class CMsgDOTAFantasyTeamScoreRequest;
struct CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamScoreRequestDefaultTypeInternal _CMsgDOTAFantasyTeamScoreRequest_default_instance_;
class CMsgDOTAFantasyTeamScoreResponse;
struct CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamScoreResponseDefaultTypeInternal _CMsgDOTAFantasyTeamScoreResponse_default_instance_;
class CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore;
struct CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal;
extern CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScoreDefaultTypeInternal _CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_;
class CMsgDOTAFantasyTeamStandingsRequest;
struct CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamStandingsRequestDefaultTypeInternal _CMsgDOTAFantasyTeamStandingsRequest_default_instance_;
class CMsgDOTAFantasyTeamStandingsResponse;
struct CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamStandingsResponseDefaultTypeInternal _CMsgDOTAFantasyTeamStandingsResponse_default_instance_;
class CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore;
struct CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal;
extern CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScoreDefaultTypeInternal _CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_;
class CMsgDOTAFantasyTeamTradeCancelRequest;
struct CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamTradeCancelRequestDefaultTypeInternal _CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_;
class CMsgDOTAFantasyTeamTradeCancelResponse;
struct CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamTradeCancelResponseDefaultTypeInternal _CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_;
class CMsgDOTAFantasyTeamTradesRequest;
struct CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal;
extern CMsgDOTAFantasyTeamTradesRequestDefaultTypeInternal _CMsgDOTAFantasyTeamTradesRequest_default_instance_;
class CMsgDOTAFantasyTeamTradesResponse;
struct CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal;
extern CMsgDOTAFantasyTeamTradesResponseDefaultTypeInternal _CMsgDOTAFantasyTeamTradesResponse_default_instance_;
class CMsgDOTAFantasyTeamTradesResponse_Trade;
struct CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal;
extern CMsgDOTAFantasyTeamTradesResponse_TradeDefaultTypeInternal _CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_;
class CMsgDOTALeaderboards;
struct CMsgDOTALeaderboardsDefaultTypeInternal;
extern CMsgDOTALeaderboardsDefaultTypeInternal _CMsgDOTALeaderboards_default_instance_;
class CMsgDOTALeaderboards_RegionLeaderboard;
struct CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal;
extern CMsgDOTALeaderboards_RegionLeaderboardDefaultTypeInternal _CMsgDOTALeaderboards_RegionLeaderboard_default_instance_;
class CMsgDOTAPassportPlayerCardChallenge;
struct CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal;
extern CMsgDOTAPassportPlayerCardChallengeDefaultTypeInternal _CMsgDOTAPassportPlayerCardChallenge_default_instance_;
class CMsgDOTAPassportStampedPlayer;
struct CMsgDOTAPassportStampedPlayerDefaultTypeInternal;
extern CMsgDOTAPassportStampedPlayerDefaultTypeInternal _CMsgDOTAPassportStampedPlayer_default_instance_;
class CMsgDOTAPassportVote;
struct CMsgDOTAPassportVoteDefaultTypeInternal;
extern CMsgDOTAPassportVoteDefaultTypeInternal _CMsgDOTAPassportVote_default_instance_;
class CMsgDOTAPassportVoteGenericSelection;
struct CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal;
extern CMsgDOTAPassportVoteGenericSelectionDefaultTypeInternal _CMsgDOTAPassportVoteGenericSelection_default_instance_;
class CMsgDOTAPassportVoteTeamGuess;
struct CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal;
extern CMsgDOTAPassportVoteTeamGuessDefaultTypeInternal _CMsgDOTAPassportVoteTeamGuess_default_instance_;
class CMsgDOTAPlayerInfo;
struct CMsgDOTAPlayerInfoDefaultTypeInternal;
extern CMsgDOTAPlayerInfoDefaultTypeInternal _CMsgDOTAPlayerInfo_default_instance_;
class CMsgDOTAPlayerInfoList;
struct CMsgDOTAPlayerInfoListDefaultTypeInternal;
extern CMsgDOTAPlayerInfoListDefaultTypeInternal _CMsgDOTAPlayerInfoList_default_instance_;
class CMsgDOTAPlayerInfo_AuditEntry;
struct CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal;
extern CMsgDOTAPlayerInfo_AuditEntryDefaultTypeInternal _CMsgDOTAPlayerInfo_AuditEntry_default_instance_;
class CMsgDOTAPlayerInfo_Results;
struct CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal;
extern CMsgDOTAPlayerInfo_ResultsDefaultTypeInternal _CMsgDOTAPlayerInfo_Results_default_instance_;
class CMsgFantasyLeagueScoring;
struct CMsgFantasyLeagueScoringDefaultTypeInternal;
extern CMsgFantasyLeagueScoringDefaultTypeInternal _CMsgFantasyLeagueScoring_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgClientToGCGetPlayerCardRosterRequest* Arena::CreateMaybeMessage<::CMsgClientToGCGetPlayerCardRosterRequest>(Arena*);
template<> ::CMsgClientToGCGetPlayerCardRosterResponse* Arena::CreateMaybeMessage<::CMsgClientToGCGetPlayerCardRosterResponse>(Arena*);
template<> ::CMsgClientToGCSetPlayerCardRosterRequest* Arena::CreateMaybeMessage<::CMsgClientToGCSetPlayerCardRosterRequest>(Arena*);
template<> ::CMsgClientToGCSetPlayerCardRosterResponse* Arena::CreateMaybeMessage<::CMsgClientToGCSetPlayerCardRosterResponse>(Arena*);
template<> ::CMsgDOTACreateFantasyLeagueRequest* Arena::CreateMaybeMessage<::CMsgDOTACreateFantasyLeagueRequest>(Arena*);
template<> ::CMsgDOTACreateFantasyLeagueResponse* Arena::CreateMaybeMessage<::CMsgDOTACreateFantasyLeagueResponse>(Arena*);
template<> ::CMsgDOTADPCProfileInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCProfileInfo>(Arena*);
template<> ::CMsgDOTADPCProfileInfo_FantasyInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCProfileInfo_FantasyInfo>(Arena*);
template<> ::CMsgDOTADPCProfileInfo_PredictionInfo* Arena::CreateMaybeMessage<::CMsgDOTADPCProfileInfo_PredictionInfo>(Arena*);
template<> ::CMsgDOTADPCSearchResults* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults>(Arena*);
template<> ::CMsgDOTADPCSearchResults_League* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults_League>(Arena*);
template<> ::CMsgDOTADPCSearchResults_Player* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults_Player>(Arena*);
template<> ::CMsgDOTADPCSearchResults_Team* Arena::CreateMaybeMessage<::CMsgDOTADPCSearchResults_Team>(Arena*);
template<> ::CMsgDOTADPCTeamFavoriteRankings* Arena::CreateMaybeMessage<::CMsgDOTADPCTeamFavoriteRankings>(Arena*);
template<> ::CMsgDOTADPCTeamFavoriteRankings_Team* Arena::CreateMaybeMessage<::CMsgDOTADPCTeamFavoriteRankings_Team>(Arena*);
template<> ::CMsgDOTAEditFantasyTeamRequest* Arena::CreateMaybeMessage<::CMsgDOTAEditFantasyTeamRequest>(Arena*);
template<> ::CMsgDOTAEditFantasyTeamResponse* Arena::CreateMaybeMessage<::CMsgDOTAEditFantasyTeamResponse>(Arena*);
template<> ::CMsgDOTAFantasyDPCLeagueStatus* Arena::CreateMaybeMessage<::CMsgDOTAFantasyDPCLeagueStatus>(Arena*);
template<> ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* Arena::CreateMaybeMessage<::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(Arena*);
template<> ::CMsgDOTAFantasyLeagueCreateRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueCreateRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueCreateResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueCreateResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueDraftPlayerRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueDraftPlayerRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueDraftPlayerResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueDraftPlayerResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueDraftStatus* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueDraftStatus>(Arena*);
template<> ::CMsgDOTAFantasyLeagueDraftStatusRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueDraftStatusRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueEditInfoRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueEditInfoRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueEditInfoResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueEditInfoResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueEditInvitesRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueEditInvitesRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(Arena*);
template<> ::CMsgDOTAFantasyLeagueEditInvitesResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueEditInvitesResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueFindRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueFindRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueFindResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueFindResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueInfo* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueInfo>(Arena*);
template<> ::CMsgDOTAFantasyLeagueInfoRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueInfoRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueInfoResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueInfoResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueInfo_OwnerInfo>(Arena*);
template<> ::CMsgDOTAFantasyLeagueMatchupsRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueMatchupsRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeagueMatchupsResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueMatchupsResponse>(Arena*);
template<> ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(Arena*);
template<> ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(Arena*);
template<> ::CMsgDOTAFantasyLeaveLeagueRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeaveLeagueRequest>(Arena*);
template<> ::CMsgDOTAFantasyLeaveLeagueResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyLeaveLeagueResponse>(Arena*);
template<> ::CMsgDOTAFantasyMessageAdd* Arena::CreateMaybeMessage<::CMsgDOTAFantasyMessageAdd>(Arena*);
template<> ::CMsgDOTAFantasyMessagesRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyMessagesRequest>(Arena*);
template<> ::CMsgDOTAFantasyMessagesResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyMessagesResponse>(Arena*);
template<> ::CMsgDOTAFantasyMessagesResponse_Message* Arena::CreateMaybeMessage<::CMsgDOTAFantasyMessagesResponse_Message>(Arena*);
template<> ::CMsgDOTAFantasyPlayerHisoricalStatsRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerHisoricalStatsRequest>(Arena*);
template<> ::CMsgDOTAFantasyPlayerHisoricalStatsResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerHisoricalStatsResponse>(Arena*);
template<> ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(Arena*);
template<> ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(Arena*);
template<> ::CMsgDOTAFantasyPlayerScoreDetailsRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerScoreDetailsRequest>(Arena*);
template<> ::CMsgDOTAFantasyPlayerScoreDetailsResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerScoreDetailsResponse>(Arena*);
template<> ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(Arena*);
template<> ::CMsgDOTAFantasyPlayerScoreRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerScoreRequest>(Arena*);
template<> ::CMsgDOTAFantasyPlayerScoreResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerScoreResponse>(Arena*);
template<> ::CMsgDOTAFantasyPlayerStandingsRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerStandingsRequest>(Arena*);
template<> ::CMsgDOTAFantasyPlayerStandingsResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerStandingsResponse>(Arena*);
template<> ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* Arena::CreateMaybeMessage<::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(Arena*);
template<> ::CMsgDOTAFantasyRemoveOwner* Arena::CreateMaybeMessage<::CMsgDOTAFantasyRemoveOwner>(Arena*);
template<> ::CMsgDOTAFantasyRemoveOwnerResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyRemoveOwnerResponse>(Arena*);
template<> ::CMsgDOTAFantasyScheduledMatchesRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyScheduledMatchesRequest>(Arena*);
template<> ::CMsgDOTAFantasyScheduledMatchesResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyScheduledMatchesResponse>(Arena*);
template<> ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* Arena::CreateMaybeMessage<::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(Arena*);
template<> ::CMsgDOTAFantasyTeamCreateRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamCreateRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamCreateResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamCreateResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamInfo* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamInfo>(Arena*);
template<> ::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(Arena*);
template<> ::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(Arena*);
template<> ::CMsgDOTAFantasyTeamInfoResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamInfoResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamRosterAddDropRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamRosterAddDropRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamRosterAddDropResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamRosterAddDropResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamRosterRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamRosterRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamRosterResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamRosterResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamRosterSwapRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamRosterSwapRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamRosterSwapResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamRosterSwapResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamScoreRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamScoreRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamScoreResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamScoreResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(Arena*);
template<> ::CMsgDOTAFantasyTeamStandingsRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamStandingsRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamStandingsResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamStandingsResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(Arena*);
template<> ::CMsgDOTAFantasyTeamTradeCancelRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamTradeCancelRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamTradeCancelResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamTradeCancelResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamTradesRequest* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamTradesRequest>(Arena*);
template<> ::CMsgDOTAFantasyTeamTradesResponse* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamTradesResponse>(Arena*);
template<> ::CMsgDOTAFantasyTeamTradesResponse_Trade* Arena::CreateMaybeMessage<::CMsgDOTAFantasyTeamTradesResponse_Trade>(Arena*);
template<> ::CMsgDOTALeaderboards* Arena::CreateMaybeMessage<::CMsgDOTALeaderboards>(Arena*);
template<> ::CMsgDOTALeaderboards_RegionLeaderboard* Arena::CreateMaybeMessage<::CMsgDOTALeaderboards_RegionLeaderboard>(Arena*);
template<> ::CMsgDOTAPassportPlayerCardChallenge* Arena::CreateMaybeMessage<::CMsgDOTAPassportPlayerCardChallenge>(Arena*);
template<> ::CMsgDOTAPassportStampedPlayer* Arena::CreateMaybeMessage<::CMsgDOTAPassportStampedPlayer>(Arena*);
template<> ::CMsgDOTAPassportVote* Arena::CreateMaybeMessage<::CMsgDOTAPassportVote>(Arena*);
template<> ::CMsgDOTAPassportVoteGenericSelection* Arena::CreateMaybeMessage<::CMsgDOTAPassportVoteGenericSelection>(Arena*);
template<> ::CMsgDOTAPassportVoteTeamGuess* Arena::CreateMaybeMessage<::CMsgDOTAPassportVoteTeamGuess>(Arena*);
template<> ::CMsgDOTAPlayerInfo* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfo>(Arena*);
template<> ::CMsgDOTAPlayerInfoList* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfoList>(Arena*);
template<> ::CMsgDOTAPlayerInfo_AuditEntry* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfo_AuditEntry>(Arena*);
template<> ::CMsgDOTAPlayerInfo_Results* Arena::CreateMaybeMessage<::CMsgDOTAPlayerInfo_Results>(Arena*);
template<> ::CMsgFantasyLeagueScoring* Arena::CreateMaybeMessage<::CMsgFantasyLeagueScoring>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgDOTACreateFantasyLeagueResponse_EResult : int {
  CMsgDOTACreateFantasyLeagueResponse_EResult_SUCCESS = 0,
  CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_TOO_MANY_LEAGUES = 2,
  CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_INVALID_TEAM_COUNT = 3,
  CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_CREATION_DISABLED = 4
};
bool CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(int value);
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_MIN = CMsgDOTACreateFantasyLeagueResponse_EResult_SUCCESS;
constexpr CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_MAX = CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_CREATION_DISABLED;
constexpr int CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_ARRAYSIZE = CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTACreateFantasyLeagueResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTACreateFantasyLeagueResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTACreateFantasyLeagueResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTACreateFantasyLeagueResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTACreateFantasyLeagueResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTACreateFantasyLeagueResponse_EResult>(
    CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueEditInfoResponse_EResult : int {
  CMsgDOTAFantasyLeagueEditInfoResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueEditInfoResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyLeagueEditInfoResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueEditInfoResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueEditInfoResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueEditInfoResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueEditInfoResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueEditInfoResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueEditInfoResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueEditInfoResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueEditInfoResponse_EResult>(
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueFindResponse_EResult : int {
  CMsgDOTAFantasyLeagueFindResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_LEAGUE_NOT_FOUND = 1,
  CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_BAD_PASSWORD = 2,
  CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_UNSPECIFIED = 3,
  CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_FULL = 4,
  CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_ALREADY_MEMBER = 5,
  CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_LEAGUE_LOCKED = 6
};
bool CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueFindResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_LEAGUE_LOCKED;
constexpr int CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueFindResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueFindResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueFindResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueFindResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueFindResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueFindResponse_EResult>(
    CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueInfoResponse_EResult : int {
  CMsgDOTAFantasyLeagueInfoResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueInfoResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyLeagueInfoResponse_EResult_ERROR_BAD_LEAGUE_ID = 2
};
bool CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueInfoResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueInfoResponse_EResult_ERROR_BAD_LEAGUE_ID;
constexpr int CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueInfoResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueInfoResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueInfoResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueInfoResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueInfoResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueInfoResponse_EResult>(
    CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueMatchupsResponse_EResult : int {
  CMsgDOTAFantasyLeagueMatchupsResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_BAD_LEAGUE_ID = 2,
  CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_NO_PERMISSION = 3
};
bool CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueMatchupsResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueMatchupsResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueMatchupsResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueMatchupsResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueMatchupsResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueMatchupsResponse_EResult>(
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAEditFantasyTeamResponse_EResult : int {
  CMsgDOTAEditFantasyTeamResponse_EResult_SUCCESS = 0,
  CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_INVALID_TEAM_INFO = 2,
  CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_NAME_ALREADY_TAKEN = 3,
  CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_NO_PERMISSION = 4
};
bool CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(int value);
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse_EResult_EResult_MIN = CMsgDOTAEditFantasyTeamResponse_EResult_SUCCESS;
constexpr CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse_EResult_EResult_MAX = CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAEditFantasyTeamResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAEditFantasyTeamResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAEditFantasyTeamResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAEditFantasyTeamResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAEditFantasyTeamResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAEditFantasyTeamResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAEditFantasyTeamResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAEditFantasyTeamResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAEditFantasyTeamResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAEditFantasyTeamResponse_EResult>(
    CMsgDOTAEditFantasyTeamResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamScoreResponse_EResult : int {
  CMsgDOTAFantasyTeamScoreResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_NO_PERMISSION = 2,
  CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE = 3
};
bool CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamScoreResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
constexpr int CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamScoreResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamScoreResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamScoreResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamScoreResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamScoreResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamScoreResponse_EResult>(
    CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamStandingsResponse_EResult : int {
  CMsgDOTAFantasyTeamStandingsResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamStandingsResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamStandingsResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamStandingsResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamStandingsResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamStandingsResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamStandingsResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamStandingsResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamStandingsResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamStandingsResponse_EResult>(
    CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyPlayerScoreResponse_EResult : int {
  CMsgDOTAFantasyPlayerScoreResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyPlayerScoreResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyPlayerScoreResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_MIN = CMsgDOTAFantasyPlayerScoreResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_MAX = CMsgDOTAFantasyPlayerScoreResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyPlayerScoreResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyPlayerScoreResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyPlayerScoreResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyPlayerScoreResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyPlayerScoreResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyPlayerScoreResponse_EResult>(
    CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyPlayerStandingsResponse_EResult : int {
  CMsgDOTAFantasyPlayerStandingsResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyPlayerStandingsResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyPlayerStandingsResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_MIN = CMsgDOTAFantasyPlayerStandingsResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_MAX = CMsgDOTAFantasyPlayerStandingsResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyPlayerStandingsResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyPlayerStandingsResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyPlayerStandingsResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyPlayerStandingsResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyPlayerStandingsResponse_EResult>(
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueCreateResponse_EResult : int {
  CMsgDOTAFantasyLeagueCreateResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_NO_PERMISSION = 1,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_BAD_SEASON_ID = 2,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_BAD_LEAGUE_NAME = 3,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_BAD_TEAM_NAME = 4,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_UNSPECIFIED = 5,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_FAILED_LOGO_UPLOAD = 6,
  CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_NO_TICKET = 7
};
bool CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueCreateResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_NO_TICKET;
constexpr int CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueCreateResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueCreateResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueCreateResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueCreateResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueCreateResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueCreateResponse_EResult>(
    CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamCreateResponse_EResult : int {
  CMsgDOTAFantasyTeamCreateResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_NO_PERMISSION = 1,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_FAILED_LOGO_UPLOAD = 2,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_BAD_FANTASY_LEAGUE_ID = 3,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_BAD_NAME = 4,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_FULL = 5,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_ALREADY_MEMBER = 6,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_BAD_PASSWORD = 7,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_UNSPECIFIED = 8,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_NO_TICKET = 9,
  CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_LEAGUE_LOCKED = 10
};
bool CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamCreateResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_LEAGUE_LOCKED;
constexpr int CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamCreateResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamCreateResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamCreateResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamCreateResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamCreateResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamCreateResponse_EResult>(
    CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueEditInvitesResponse_EResult : int {
  CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_ERROR_UNSPECIFIED = 1
};
bool CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_ERROR_UNSPECIFIED;
constexpr int CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueEditInvitesResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueEditInvitesResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueEditInvitesResponse_EResult>(
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult : int {
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_INVALID_FANTASY_LEAGUE = 2,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_FANTASY_LEAGUE_NOT_DRAFTING = 3,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE = 4,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_NOT_OWNERS_TURN = 5,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_INVALID = 6,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_UNAVAILABLE = 7,
  CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_NO_VALID_SLOTS = 8
};
bool CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_NO_VALID_SLOTS;
constexpr int CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult>(
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamRosterSwapResponse_EResult : int {
  CMsgDOTAFantasyTeamRosterSwapResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE = 2,
  CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_SLOTS_INVALID = 3,
  CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_SLOT_LOCKED = 4
};
bool CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamRosterSwapResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_SLOT_LOCKED;
constexpr int CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamRosterSwapResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamRosterSwapResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamRosterSwapResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamRosterSwapResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamRosterSwapResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamRosterSwapResponse_EResult>(
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamRosterAddDropResponse_EResult : int {
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE = 2,
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_PLAYER_NOT_AVAILABLE = 3,
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_PLAYER_NOT_ON_TEAM = 4,
  CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_TRADE_ALREADY_PENDING = 5
};
bool CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_TRADE_ALREADY_PENDING;
constexpr int CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamRosterAddDropResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamRosterAddDropResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamRosterAddDropResponse_EResult>(
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamTradesResponse_EResult : int {
  CMsgDOTAFantasyTeamTradesResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamTradesResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamTradesResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamTradesResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamTradesResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamTradesResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamTradesResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamTradesResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamTradesResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamTradesResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamTradesResponse_EResult>(
    CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamTradeCancelResponse_EResult : int {
  CMsgDOTAFantasyTeamTradeCancelResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_NO_PERMISSION = 2,
  CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_NO_TRADE = 3
};
bool CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamTradeCancelResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_NO_TRADE;
constexpr int CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamTradeCancelResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamTradeCancelResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamTradeCancelResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamTradeCancelResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamTradeCancelResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamTradeCancelResponse_EResult>(
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyTeamRosterResponse_EResult : int {
  CMsgDOTAFantasyTeamRosterResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_NO_PERMISSION = 2,
  CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE = 3
};
bool CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_MIN = CMsgDOTAFantasyTeamRosterResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_MAX = CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
constexpr int CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyTeamRosterResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyTeamRosterResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyTeamRosterResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyTeamRosterResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyTeamRosterResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyTeamRosterResponse_EResult>(
    CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult : int {
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_MIN = CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_MAX = CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult>(
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyMessagesResponse_EResult : int {
  CMsgDOTAFantasyMessagesResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyMessagesResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyMessagesResponse_EResult_ERROR_NO_PERMISSION = 2
};
bool CMsgDOTAFantasyMessagesResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse_EResult_EResult_MIN = CMsgDOTAFantasyMessagesResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse_EResult_EResult_MAX = CMsgDOTAFantasyMessagesResponse_EResult_ERROR_NO_PERMISSION;
constexpr int CMsgDOTAFantasyMessagesResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyMessagesResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyMessagesResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyMessagesResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyMessagesResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyMessagesResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyMessagesResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyMessagesResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyMessagesResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyMessagesResponse_EResult>(
    CMsgDOTAFantasyMessagesResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyRemoveOwnerResponse_EResult : int {
  CMsgDOTAFantasyRemoveOwnerResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_NO_PERMISSION = 2,
  CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_LEAGUE_LOCKED = 3,
  CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_NOT_A_MEMBER = 4
};
bool CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_MIN = CMsgDOTAFantasyRemoveOwnerResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_MAX = CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_NOT_A_MEMBER;
constexpr int CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyRemoveOwnerResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyRemoveOwnerResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyRemoveOwnerResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyRemoveOwnerResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyRemoveOwnerResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyRemoveOwnerResponse_EResult>(
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyScheduledMatchesResponse_EResult : int {
  CMsgDOTAFantasyScheduledMatchesResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyScheduledMatchesResponse_EResult_ERROR_UNSPECIFIED = 1
};
bool CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_MIN = CMsgDOTAFantasyScheduledMatchesResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_MAX = CMsgDOTAFantasyScheduledMatchesResponse_EResult_ERROR_UNSPECIFIED;
constexpr int CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyScheduledMatchesResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyScheduledMatchesResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyScheduledMatchesResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyScheduledMatchesResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyScheduledMatchesResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyScheduledMatchesResponse_EResult>(
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyLeaveLeagueResponse_EResult : int {
  CMsgDOTAFantasyLeaveLeagueResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_NOT_MEMBER = 2,
  CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_LEAGUE_NOT_FOUND = 3,
  CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_DRAFT_ACTIVE = 4
};
bool CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_MIN = CMsgDOTAFantasyLeaveLeagueResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_MAX = CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_DRAFT_ACTIVE;
constexpr int CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyLeaveLeagueResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyLeaveLeagueResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyLeaveLeagueResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyLeaveLeagueResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyLeaveLeagueResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyLeaveLeagueResponse_EResult>(
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor(), name, value);
}
enum CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult : int {
  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_SUCCESS = 0,
  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_ERROR_UNSPECIFIED = 1,
  CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_ERROR_NOT_MEMBER = 2
};
bool CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(int value);
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_MIN = CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_SUCCESS;
constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_MAX = CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_ERROR_NOT_MEMBER;
constexpr int CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_ARRAYSIZE = CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult>(
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor(), name, value);
}
enum CMsgClientToGCGetPlayerCardRosterResponse_Result : int {
  CMsgClientToGCGetPlayerCardRosterResponse_Result_SUCCESS = 0,
  CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED = 1,
  CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID = 2,
  CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP = 3
};
bool CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(int value);
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MIN = CMsgClientToGCGetPlayerCardRosterResponse_Result_SUCCESS;
constexpr CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MAX = CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
constexpr int CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_ARRAYSIZE = CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCGetPlayerCardRosterResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCGetPlayerCardRosterResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCGetPlayerCardRosterResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCGetPlayerCardRosterResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCGetPlayerCardRosterResponse_Result>(
    CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor(), name, value);
}
enum CMsgClientToGCSetPlayerCardRosterResponse_Result : int {
  CMsgClientToGCSetPlayerCardRosterResponse_Result_SUCCESS = 0,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED = 1,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID = 2,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP = 3,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_PLAYER_CARD_NOT_OWNED = 4,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_SLOT = 5,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_FAILED_CARD_INFO = 6,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_ACCOUNT_DUPLICATE = 7,
  CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_LOCKED_TIMESTAMP = 8
};
bool CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(int value);
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MIN = CMsgClientToGCSetPlayerCardRosterResponse_Result_SUCCESS;
constexpr CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MAX = CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_LOCKED_TIMESTAMP;
constexpr int CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_ARRAYSIZE = CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor();
template<typename T>
inline const std::string& CMsgClientToGCSetPlayerCardRosterResponse_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgClientToGCSetPlayerCardRosterResponse_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgClientToGCSetPlayerCardRosterResponse_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor(), enum_t_value);
}
inline bool CMsgClientToGCSetPlayerCardRosterResponse_Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgClientToGCSetPlayerCardRosterResponse_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgClientToGCSetPlayerCardRosterResponse_Result>(
    CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor(), name, value);
}
enum CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus : int {
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_UNSET = 0,
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_PARTIAL = 1,
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_FULL = 2,
  CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_CONCLUDED = 3
};
bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(int value);
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MIN = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_UNSET;
constexpr CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MAX = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_CONCLUDED;
constexpr int CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_ARRAYSIZE = CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor();
template<typename T>
inline const std::string& CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor(), enum_t_value);
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>(
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor(), name, value);
}
enum CMsgDOTADPCSearchResults_ESearchResultsDesired : int {
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Players = 1,
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Teams = 2,
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Leagues = 4,
  CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_All = 7
};
bool CMsgDOTADPCSearchResults_ESearchResultsDesired_IsValid(int value);
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MIN = CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Players;
constexpr CMsgDOTADPCSearchResults_ESearchResultsDesired CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MAX = CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_All;
constexpr int CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_ARRAYSIZE = CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor();
template<typename T>
inline const std::string& CMsgDOTADPCSearchResults_ESearchResultsDesired_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgDOTADPCSearchResults_ESearchResultsDesired>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgDOTADPCSearchResults_ESearchResultsDesired_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor(), enum_t_value);
}
inline bool CMsgDOTADPCSearchResults_ESearchResultsDesired_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CMsgDOTADPCSearchResults_ESearchResultsDesired* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgDOTADPCSearchResults_ESearchResultsDesired>(
    CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor(), name, value);
}
enum DOTA_2013PassportSelectionIndices : int {
  PP13_SEL_ALLSTAR_PLAYER_0 = 0,
  PP13_SEL_ALLSTAR_PLAYER_1 = 1,
  PP13_SEL_ALLSTAR_PLAYER_2 = 2,
  PP13_SEL_ALLSTAR_PLAYER_3 = 3,
  PP13_SEL_ALLSTAR_PLAYER_4 = 4,
  PP13_SEL_ALLSTAR_PLAYER_5 = 5,
  PP13_SEL_ALLSTAR_PLAYER_6 = 6,
  PP13_SEL_ALLSTAR_PLAYER_7 = 7,
  PP13_SEL_ALLSTAR_PLAYER_8 = 8,
  PP13_SEL_ALLSTAR_PLAYER_9 = 9,
  PP13_SEL_QUALPRED_WEST_0 = 10,
  PP13_SEL_QUALPRED_WEST_1 = 11,
  PP13_SEL_QUALPRED_WEST_2 = 12,
  PP13_SEL_QUALPRED_WEST_3 = 13,
  PP13_SEL_QUALPRED_WEST_4 = 14,
  PP13_SEL_QUALPRED_WEST_5 = 15,
  PP13_SEL_QUALPRED_WEST_6 = 16,
  PP13_SEL_QUALPRED_WEST_7 = 17,
  PP13_SEL_QUALPRED_WEST_8 = 18,
  PP13_SEL_QUALPRED_WEST_9 = 19,
  PP13_SEL_QUALPRED_WEST_10 = 20,
  PP13_SEL_QUALPRED_WEST_11 = 21,
  PP13_SEL_QUALPRED_WEST_12 = 22,
  PP13_SEL_QUALPRED_WEST_13 = 23,
  PP13_SEL_QUALPRED_WEST_14 = 24,
  PP13_SEL_QUALPRED_EAST_0 = 25,
  PP13_SEL_QUALPRED_EAST_1 = 26,
  PP13_SEL_QUALPRED_EAST_2 = 27,
  PP13_SEL_QUALPRED_EAST_3 = 28,
  PP13_SEL_QUALPRED_EAST_4 = 29,
  PP13_SEL_QUALPRED_EAST_5 = 30,
  PP13_SEL_QUALPRED_EAST_6 = 31,
  PP13_SEL_QUALPRED_EAST_7 = 32,
  PP13_SEL_QUALPRED_EAST_8 = 33,
  PP13_SEL_QUALPRED_EAST_9 = 34,
  PP13_SEL_QUALPRED_EAST_10 = 35,
  PP13_SEL_QUALPRED_EAST_11 = 36,
  PP13_SEL_QUALPRED_EAST_12 = 37,
  PP13_SEL_QUALPRED_EAST_13 = 38,
  PP13_SEL_QUALPRED_EAST_14 = 39,
  PP13_SEL_TEAMCUP_TEAM = 40,
  PP13_SEL_TEAMCUP_PLAYER = 41,
  PP13_SEL_TEAMCUP_TEAM_LOCK = 42,
  PP13_SEL_TEAMCUP_PLAYER_LOCK = 43,
  PP13_SEL_EVENTPRED_0 = 44,
  PP13_SEL_EVENTPRED_1 = 45,
  PP13_SEL_EVENTPRED_2 = 46,
  PP13_SEL_EVENTPRED_3 = 47,
  PP13_SEL_EVENTPRED_4 = 48,
  PP13_SEL_EVENTPRED_5 = 49,
  PP13_SEL_EVENTPRED_6 = 50,
  PP13_SEL_EVENTPRED_7 = 51,
  PP13_SEL_EVENTPRED_8 = 52,
  PP13_SEL_EVENTPRED_9 = 53,
  PP13_SEL_EVENTPRED_10 = 54,
  PP13_SEL_EVENTPRED_11 = 55,
  PP13_SEL_EVENTPRED_12 = 56,
  PP13_SEL_EVENTPRED_13 = 57,
  PP13_SEL_EVENTPRED_14 = 58,
  PP13_SEL_EVENTPRED_15 = 59,
  PP13_SEL_EVENTPRED_16 = 60,
  PP13_SEL_EVENTPRED_17 = 61,
  PP13_SEL_EVENTPRED_18 = 62,
  PP13_SEL_EVENTPRED_19 = 63,
  PP13_SEL_EVENTPRED_20 = 64,
  PP13_SEL_EVENTPRED_21 = 65,
  PP13_SEL_EVENTPRED_22 = 66,
  PP13_SEL_EVENTPRED_23 = 67,
  PP13_SEL_EVENTPRED_24 = 68,
  PP13_SEL_EVENTPRED_25 = 69,
  PP13_SEL_EVENTPRED_26 = 70,
  PP13_SEL_EVENTPRED_27 = 71,
  PP13_SEL_EVENTPRED_28 = 72,
  PP13_SEL_EVENTPRED_29 = 73,
  PP13_SEL_EVENTPRED_30 = 74,
  PP13_SEL_EVENTPRED_31 = 75,
  PP13_SEL_EVENTPRED_32 = 76,
  PP13_SEL_EVENTPRED_33 = 77,
  PP13_SEL_EVENTPRED_34 = 78,
  PP13_SEL_EVENTPRED_35 = 79,
  PP13_SEL_EVENTPRED_36 = 80,
  PP13_SEL_EVENTPRED_37 = 81,
  PP13_SEL_EVENTPRED_38 = 82,
  PP13_SEL_EVENTPRED_39 = 83,
  PP13_SEL_EVENTPRED_40 = 84,
  PP13_SEL_EVENTPRED_41 = 85,
  PP13_SEL_EVENTPRED_42 = 86,
  PP13_SEL_EVENTPRED_43 = 87,
  PP13_SEL_SOLO_0 = 88,
  PP13_SEL_SOLO_1 = 89,
  PP13_SEL_SOLO_2 = 90,
  PP13_SEL_SOLO_3 = 91,
  PP13_SEL_SOLO_4 = 92,
  PP13_SEL_SOLO_5 = 93,
  PP13_SEL_SOLO_6 = 94,
  PP13_SEL_SOLO_7 = 95
};
bool DOTA_2013PassportSelectionIndices_IsValid(int value);
constexpr DOTA_2013PassportSelectionIndices DOTA_2013PassportSelectionIndices_MIN = PP13_SEL_ALLSTAR_PLAYER_0;
constexpr DOTA_2013PassportSelectionIndices DOTA_2013PassportSelectionIndices_MAX = PP13_SEL_SOLO_7;
constexpr int DOTA_2013PassportSelectionIndices_ARRAYSIZE = DOTA_2013PassportSelectionIndices_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DOTA_2013PassportSelectionIndices_descriptor();
template<typename T>
inline const std::string& DOTA_2013PassportSelectionIndices_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DOTA_2013PassportSelectionIndices>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DOTA_2013PassportSelectionIndices_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DOTA_2013PassportSelectionIndices_descriptor(), enum_t_value);
}
inline bool DOTA_2013PassportSelectionIndices_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DOTA_2013PassportSelectionIndices* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DOTA_2013PassportSelectionIndices>(
    DOTA_2013PassportSelectionIndices_descriptor(), name, value);
}
// ===================================================================

class CMsgDOTAPlayerInfo_Results PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfo.Results) */ {
 public:
  inline CMsgDOTAPlayerInfo_Results() : CMsgDOTAPlayerInfo_Results(nullptr) {}
  virtual ~CMsgDOTAPlayerInfo_Results();
  explicit constexpr CMsgDOTAPlayerInfo_Results(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfo_Results(const CMsgDOTAPlayerInfo_Results& from);
  CMsgDOTAPlayerInfo_Results(CMsgDOTAPlayerInfo_Results&& from) noexcept
    : CMsgDOTAPlayerInfo_Results() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfo_Results& operator=(const CMsgDOTAPlayerInfo_Results& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfo_Results& operator=(CMsgDOTAPlayerInfo_Results&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPlayerInfo_Results& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfo_Results* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfo_Results*>(
               &_CMsgDOTAPlayerInfo_Results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CMsgDOTAPlayerInfo_Results& a, CMsgDOTAPlayerInfo_Results& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfo_Results* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfo_Results* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerInfo_Results* New() const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo_Results>(nullptr);
  }

  CMsgDOTAPlayerInfo_Results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo_Results>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPlayerInfo_Results& from);
  void MergeFrom(const CMsgDOTAPlayerInfo_Results& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfo_Results* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfo.Results";
  }
  protected:
  explicit CMsgDOTAPlayerInfo_Results(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kPlacementFieldNumber = 2,
    kEarningsFieldNumber = 3,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 placement = 2;
  bool has_placement() const;
  private:
  bool _internal_has_placement() const;
  public:
  void clear_placement();
  ::PROTOBUF_NAMESPACE_ID::uint32 placement() const;
  void set_placement(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_placement() const;
  void _internal_set_placement(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 earnings = 3;
  bool has_earnings() const;
  private:
  bool _internal_has_earnings() const;
  public:
  void clear_earnings();
  ::PROTOBUF_NAMESPACE_ID::uint32 earnings() const;
  void set_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_earnings() const;
  void _internal_set_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfo.Results)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 placement_;
  ::PROTOBUF_NAMESPACE_ID::uint32 earnings_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerInfo_AuditEntry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfo.AuditEntry) */ {
 public:
  inline CMsgDOTAPlayerInfo_AuditEntry() : CMsgDOTAPlayerInfo_AuditEntry(nullptr) {}
  virtual ~CMsgDOTAPlayerInfo_AuditEntry();
  explicit constexpr CMsgDOTAPlayerInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfo_AuditEntry(const CMsgDOTAPlayerInfo_AuditEntry& from);
  CMsgDOTAPlayerInfo_AuditEntry(CMsgDOTAPlayerInfo_AuditEntry&& from) noexcept
    : CMsgDOTAPlayerInfo_AuditEntry() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfo_AuditEntry& operator=(const CMsgDOTAPlayerInfo_AuditEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfo_AuditEntry& operator=(CMsgDOTAPlayerInfo_AuditEntry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPlayerInfo_AuditEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfo_AuditEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfo_AuditEntry*>(
               &_CMsgDOTAPlayerInfo_AuditEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CMsgDOTAPlayerInfo_AuditEntry& a, CMsgDOTAPlayerInfo_AuditEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfo_AuditEntry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfo_AuditEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerInfo_AuditEntry* New() const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo_AuditEntry>(nullptr);
  }

  CMsgDOTAPlayerInfo_AuditEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo_AuditEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPlayerInfo_AuditEntry& from);
  void MergeFrom(const CMsgDOTAPlayerInfo_AuditEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfo_AuditEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfo.AuditEntry";
  }
  protected:
  explicit CMsgDOTAPlayerInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 4,
    kTeamTagFieldNumber = 5,
    kTeamUrlLogoFieldNumber = 6,
    kStartTimestampFieldNumber = 1,
    kEndTimestampFieldNumber = 2,
    kTeamIdFieldNumber = 3,
  };
  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 5;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  void set_team_tag(const std::string& value);
  void set_team_tag(std::string&& value);
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  std::string* mutable_team_tag();
  std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string team_url_logo = 6;
  bool has_team_url_logo() const;
  private:
  bool _internal_has_team_url_logo() const;
  public:
  void clear_team_url_logo();
  const std::string& team_url_logo() const;
  void set_team_url_logo(const std::string& value);
  void set_team_url_logo(std::string&& value);
  void set_team_url_logo(const char* value);
  void set_team_url_logo(const char* value, size_t size);
  std::string* mutable_team_url_logo();
  std::string* release_team_url_logo();
  void set_allocated_team_url_logo(std::string* team_url_logo);
  private:
  const std::string& _internal_team_url_logo() const;
  void _internal_set_team_url_logo(const std::string& value);
  std::string* _internal_mutable_team_url_logo();
  public:

  // optional uint32 start_timestamp = 1;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_timestamp() const;
  void set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_timestamp() const;
  void _internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_timestamp = 2;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_timestamp() const;
  void set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_timestamp() const;
  void _internal_set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfo.AuditEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_url_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfo) */ {
 public:
  inline CMsgDOTAPlayerInfo() : CMsgDOTAPlayerInfo(nullptr) {}
  virtual ~CMsgDOTAPlayerInfo();
  explicit constexpr CMsgDOTAPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfo(const CMsgDOTAPlayerInfo& from);
  CMsgDOTAPlayerInfo(CMsgDOTAPlayerInfo&& from) noexcept
    : CMsgDOTAPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfo& operator=(const CMsgDOTAPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfo& operator=(CMsgDOTAPlayerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfo*>(
               &_CMsgDOTAPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CMsgDOTAPlayerInfo& a, CMsgDOTAPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo>(nullptr);
  }

  CMsgDOTAPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPlayerInfo& from);
  void MergeFrom(const CMsgDOTAPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfo";
  }
  protected:
  explicit CMsgDOTAPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAPlayerInfo_Results Results;
  typedef CMsgDOTAPlayerInfo_AuditEntry AuditEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 14,
    kAuditEntriesFieldNumber = 16,
    kNameFieldNumber = 2,
    kCountryCodeFieldNumber = 3,
    kTeamNameFieldNumber = 6,
    kTeamTagFieldNumber = 7,
    kSponsorFieldNumber = 8,
    kRealNameFieldNumber = 11,
    kTeamUrlLogoFieldNumber = 15,
    kTeamAbbreviationFieldNumber = 17,
    kAccountIdFieldNumber = 1,
    kFantasyRoleFieldNumber = 4,
    kTeamIdFieldNumber = 5,
    kIsLockedFieldNumber = 9,
    kIsProFieldNumber = 10,
    kTotalEarningsFieldNumber = 13,
  };
  // repeated .CMsgDOTAPlayerInfo.Results results = 14;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::CMsgDOTAPlayerInfo_Results* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >*
      mutable_results();
  private:
  const ::CMsgDOTAPlayerInfo_Results& _internal_results(int index) const;
  ::CMsgDOTAPlayerInfo_Results* _internal_add_results();
  public:
  const ::CMsgDOTAPlayerInfo_Results& results(int index) const;
  ::CMsgDOTAPlayerInfo_Results* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >&
      results() const;

  // repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
  int audit_entries_size() const;
  private:
  int _internal_audit_entries_size() const;
  public:
  void clear_audit_entries();
  ::CMsgDOTAPlayerInfo_AuditEntry* mutable_audit_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >*
      mutable_audit_entries();
  private:
  const ::CMsgDOTAPlayerInfo_AuditEntry& _internal_audit_entries(int index) const;
  ::CMsgDOTAPlayerInfo_AuditEntry* _internal_add_audit_entries();
  public:
  const ::CMsgDOTAPlayerInfo_AuditEntry& audit_entries(int index) const;
  ::CMsgDOTAPlayerInfo_AuditEntry* add_audit_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >&
      audit_entries() const;

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string country_code = 3;
  bool has_country_code() const;
  private:
  bool _internal_has_country_code() const;
  public:
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // optional string team_name = 6;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional string team_tag = 7;
  bool has_team_tag() const;
  private:
  bool _internal_has_team_tag() const;
  public:
  void clear_team_tag();
  const std::string& team_tag() const;
  void set_team_tag(const std::string& value);
  void set_team_tag(std::string&& value);
  void set_team_tag(const char* value);
  void set_team_tag(const char* value, size_t size);
  std::string* mutable_team_tag();
  std::string* release_team_tag();
  void set_allocated_team_tag(std::string* team_tag);
  private:
  const std::string& _internal_team_tag() const;
  void _internal_set_team_tag(const std::string& value);
  std::string* _internal_mutable_team_tag();
  public:

  // optional string sponsor = 8;
  bool has_sponsor() const;
  private:
  bool _internal_has_sponsor() const;
  public:
  void clear_sponsor();
  const std::string& sponsor() const;
  void set_sponsor(const std::string& value);
  void set_sponsor(std::string&& value);
  void set_sponsor(const char* value);
  void set_sponsor(const char* value, size_t size);
  std::string* mutable_sponsor();
  std::string* release_sponsor();
  void set_allocated_sponsor(std::string* sponsor);
  private:
  const std::string& _internal_sponsor() const;
  void _internal_set_sponsor(const std::string& value);
  std::string* _internal_mutable_sponsor();
  public:

  // optional string real_name = 11;
  bool has_real_name() const;
  private:
  bool _internal_has_real_name() const;
  public:
  void clear_real_name();
  const std::string& real_name() const;
  void set_real_name(const std::string& value);
  void set_real_name(std::string&& value);
  void set_real_name(const char* value);
  void set_real_name(const char* value, size_t size);
  std::string* mutable_real_name();
  std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // optional string team_url_logo = 15;
  bool has_team_url_logo() const;
  private:
  bool _internal_has_team_url_logo() const;
  public:
  void clear_team_url_logo();
  const std::string& team_url_logo() const;
  void set_team_url_logo(const std::string& value);
  void set_team_url_logo(std::string&& value);
  void set_team_url_logo(const char* value);
  void set_team_url_logo(const char* value, size_t size);
  std::string* mutable_team_url_logo();
  std::string* release_team_url_logo();
  void set_allocated_team_url_logo(std::string* team_url_logo);
  private:
  const std::string& _internal_team_url_logo() const;
  void _internal_set_team_url_logo(const std::string& value);
  std::string* _internal_mutable_team_url_logo();
  public:

  // optional string team_abbreviation = 17;
  bool has_team_abbreviation() const;
  private:
  bool _internal_has_team_abbreviation() const;
  public:
  void clear_team_abbreviation();
  const std::string& team_abbreviation() const;
  void set_team_abbreviation(const std::string& value);
  void set_team_abbreviation(std::string&& value);
  void set_team_abbreviation(const char* value);
  void set_team_abbreviation(const char* value, size_t size);
  std::string* mutable_team_abbreviation();
  std::string* release_team_abbreviation();
  void set_allocated_team_abbreviation(std::string* team_abbreviation);
  private:
  const std::string& _internal_team_abbreviation() const;
  void _internal_set_team_abbreviation(const std::string& value);
  std::string* _internal_mutable_team_abbreviation();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
  bool has_fantasy_role() const;
  private:
  bool _internal_has_fantasy_role() const;
  public:
  void clear_fantasy_role();
  ::Fantasy_Roles fantasy_role() const;
  void set_fantasy_role(::Fantasy_Roles value);
  private:
  ::Fantasy_Roles _internal_fantasy_role() const;
  void _internal_set_fantasy_role(::Fantasy_Roles value);
  public:

  // optional uint32 team_id = 5;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool is_locked = 9;
  bool has_is_locked() const;
  private:
  bool _internal_has_is_locked() const;
  public:
  void clear_is_locked();
  bool is_locked() const;
  void set_is_locked(bool value);
  private:
  bool _internal_is_locked() const;
  void _internal_set_is_locked(bool value);
  public:

  // optional bool is_pro = 10;
  bool has_is_pro() const;
  private:
  bool _internal_has_is_pro() const;
  public:
  void clear_is_pro();
  bool is_pro() const;
  void set_is_pro(bool value);
  private:
  bool _internal_is_pro() const;
  void _internal_set_is_pro(bool value);
  public:

  // optional uint32 total_earnings = 13;
  bool has_total_earnings() const;
  private:
  bool _internal_has_total_earnings() const;
  public:
  void clear_total_earnings();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_earnings() const;
  void set_total_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_earnings() const;
  void _internal_set_total_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results > results_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry > audit_entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sponsor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_url_logo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_abbreviation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  int fantasy_role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  bool is_locked_;
  bool is_pro_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_earnings_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPlayerInfoList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPlayerInfoList) */ {
 public:
  inline CMsgDOTAPlayerInfoList() : CMsgDOTAPlayerInfoList(nullptr) {}
  virtual ~CMsgDOTAPlayerInfoList();
  explicit constexpr CMsgDOTAPlayerInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPlayerInfoList(const CMsgDOTAPlayerInfoList& from);
  CMsgDOTAPlayerInfoList(CMsgDOTAPlayerInfoList&& from) noexcept
    : CMsgDOTAPlayerInfoList() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPlayerInfoList& operator=(const CMsgDOTAPlayerInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPlayerInfoList& operator=(CMsgDOTAPlayerInfoList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPlayerInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPlayerInfoList* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPlayerInfoList*>(
               &_CMsgDOTAPlayerInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CMsgDOTAPlayerInfoList& a, CMsgDOTAPlayerInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPlayerInfoList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPlayerInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPlayerInfoList* New() const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfoList>(nullptr);
  }

  CMsgDOTAPlayerInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPlayerInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPlayerInfoList& from);
  void MergeFrom(const CMsgDOTAPlayerInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPlayerInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPlayerInfoList";
  }
  protected:
  explicit CMsgDOTAPlayerInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfosFieldNumber = 1,
  };
  // repeated .CMsgDOTAPlayerInfo player_infos = 1;
  int player_infos_size() const;
  private:
  int _internal_player_infos_size() const;
  public:
  void clear_player_infos();
  ::CMsgDOTAPlayerInfo* mutable_player_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >*
      mutable_player_infos();
  private:
  const ::CMsgDOTAPlayerInfo& _internal_player_infos(int index) const;
  ::CMsgDOTAPlayerInfo* _internal_add_player_infos();
  public:
  const ::CMsgDOTAPlayerInfo& player_infos(int index) const;
  ::CMsgDOTAPlayerInfo* add_player_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >&
      player_infos() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAPlayerInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo > player_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCProfileInfo_PredictionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCProfileInfo.PredictionInfo) */ {
 public:
  inline CMsgDOTADPCProfileInfo_PredictionInfo() : CMsgDOTADPCProfileInfo_PredictionInfo(nullptr) {}
  virtual ~CMsgDOTADPCProfileInfo_PredictionInfo();
  explicit constexpr CMsgDOTADPCProfileInfo_PredictionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCProfileInfo_PredictionInfo(const CMsgDOTADPCProfileInfo_PredictionInfo& from);
  CMsgDOTADPCProfileInfo_PredictionInfo(CMsgDOTADPCProfileInfo_PredictionInfo&& from) noexcept
    : CMsgDOTADPCProfileInfo_PredictionInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCProfileInfo_PredictionInfo& operator=(const CMsgDOTADPCProfileInfo_PredictionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCProfileInfo_PredictionInfo& operator=(CMsgDOTADPCProfileInfo_PredictionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCProfileInfo_PredictionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCProfileInfo_PredictionInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCProfileInfo_PredictionInfo*>(
               &_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CMsgDOTADPCProfileInfo_PredictionInfo& a, CMsgDOTADPCProfileInfo_PredictionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCProfileInfo_PredictionInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo_PredictionInfo>(nullptr);
  }

  CMsgDOTADPCProfileInfo_PredictionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo_PredictionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from);
  void MergeFrom(const CMsgDOTADPCProfileInfo_PredictionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCProfileInfo_PredictionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCProfileInfo.PredictionInfo";
  }
  protected:
  explicit CMsgDOTADPCProfileInfo_PredictionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentFieldNumber = 1,
    kShardWinningsFieldNumber = 2,
  };
  // optional uint32 percent = 1;
  bool has_percent() const;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  ::PROTOBUF_NAMESPACE_ID::uint32 percent() const;
  void set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_percent() const;
  void _internal_set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 shard_winnings = 2;
  bool has_shard_winnings() const;
  private:
  bool _internal_has_shard_winnings() const;
  public:
  void clear_shard_winnings();
  ::PROTOBUF_NAMESPACE_ID::int32 shard_winnings() const;
  void set_shard_winnings(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shard_winnings() const;
  void _internal_set_shard_winnings(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCProfileInfo.PredictionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 percent_;
  ::PROTOBUF_NAMESPACE_ID::int32 shard_winnings_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCProfileInfo_FantasyInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCProfileInfo.FantasyInfo) */ {
 public:
  inline CMsgDOTADPCProfileInfo_FantasyInfo() : CMsgDOTADPCProfileInfo_FantasyInfo(nullptr) {}
  virtual ~CMsgDOTADPCProfileInfo_FantasyInfo();
  explicit constexpr CMsgDOTADPCProfileInfo_FantasyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCProfileInfo_FantasyInfo(const CMsgDOTADPCProfileInfo_FantasyInfo& from);
  CMsgDOTADPCProfileInfo_FantasyInfo(CMsgDOTADPCProfileInfo_FantasyInfo&& from) noexcept
    : CMsgDOTADPCProfileInfo_FantasyInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCProfileInfo_FantasyInfo& operator=(const CMsgDOTADPCProfileInfo_FantasyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCProfileInfo_FantasyInfo& operator=(CMsgDOTADPCProfileInfo_FantasyInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCProfileInfo_FantasyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCProfileInfo_FantasyInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCProfileInfo_FantasyInfo*>(
               &_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CMsgDOTADPCProfileInfo_FantasyInfo& a, CMsgDOTADPCProfileInfo_FantasyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCProfileInfo_FantasyInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo_FantasyInfo>(nullptr);
  }

  CMsgDOTADPCProfileInfo_FantasyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo_FantasyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from);
  void MergeFrom(const CMsgDOTADPCProfileInfo_FantasyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCProfileInfo_FantasyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCProfileInfo.FantasyInfo";
  }
  protected:
  explicit CMsgDOTADPCProfileInfo_FantasyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTop90FinishesFieldNumber = 1,
    kTop75FinishesFieldNumber = 2,
    kTop50FinishesFieldNumber = 3,
    kShardWinningsFieldNumber = 4,
  };
  // optional uint32 top_90_finishes = 1;
  bool has_top_90_finishes() const;
  private:
  bool _internal_has_top_90_finishes() const;
  public:
  void clear_top_90_finishes();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_90_finishes() const;
  void set_top_90_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_90_finishes() const;
  void _internal_set_top_90_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 top_75_finishes = 2;
  bool has_top_75_finishes() const;
  private:
  bool _internal_has_top_75_finishes() const;
  public:
  void clear_top_75_finishes();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_75_finishes() const;
  void set_top_75_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_75_finishes() const;
  void _internal_set_top_75_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 top_50_finishes = 3;
  bool has_top_50_finishes() const;
  private:
  bool _internal_has_top_50_finishes() const;
  public:
  void clear_top_50_finishes();
  ::PROTOBUF_NAMESPACE_ID::uint32 top_50_finishes() const;
  void set_top_50_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_top_50_finishes() const;
  void _internal_set_top_50_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 shard_winnings = 4;
  bool has_shard_winnings() const;
  private:
  bool _internal_has_shard_winnings() const;
  public:
  void clear_shard_winnings();
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_winnings() const;
  void set_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shard_winnings() const;
  void _internal_set_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCProfileInfo.FantasyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_90_finishes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_75_finishes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 top_50_finishes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shard_winnings_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCProfileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCProfileInfo) */ {
 public:
  inline CMsgDOTADPCProfileInfo() : CMsgDOTADPCProfileInfo(nullptr) {}
  virtual ~CMsgDOTADPCProfileInfo();
  explicit constexpr CMsgDOTADPCProfileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCProfileInfo(const CMsgDOTADPCProfileInfo& from);
  CMsgDOTADPCProfileInfo(CMsgDOTADPCProfileInfo&& from) noexcept
    : CMsgDOTADPCProfileInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCProfileInfo& operator=(const CMsgDOTADPCProfileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCProfileInfo& operator=(CMsgDOTADPCProfileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCProfileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCProfileInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCProfileInfo*>(
               &_CMsgDOTADPCProfileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CMsgDOTADPCProfileInfo& a, CMsgDOTADPCProfileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCProfileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCProfileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCProfileInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo>(nullptr);
  }

  CMsgDOTADPCProfileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCProfileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCProfileInfo& from);
  void MergeFrom(const CMsgDOTADPCProfileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCProfileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCProfileInfo";
  }
  protected:
  explicit CMsgDOTADPCProfileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCProfileInfo_PredictionInfo PredictionInfo;
  typedef CMsgDOTADPCProfileInfo_FantasyInfo FantasyInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kDisabledNotificationsFieldNumber = 4,
    kPlayerInfoFieldNumber = 1,
    kPredictionInfoFieldNumber = 2,
    kFantasyInfoFieldNumber = 3,
  };
  // repeated uint32 disabled_notifications = 4;
  int disabled_notifications_size() const;
  private:
  int _internal_disabled_notifications_size() const;
  public:
  void clear_disabled_notifications();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_disabled_notifications(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_disabled_notifications() const;
  void _internal_add_disabled_notifications(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_disabled_notifications();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 disabled_notifications(int index) const;
  void set_disabled_notifications(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_disabled_notifications(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      disabled_notifications() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_disabled_notifications();

  // optional .CMsgDOTAPlayerInfo player_info = 1;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::CMsgDOTAPlayerInfo& player_info() const;
  ::CMsgDOTAPlayerInfo* release_player_info();
  ::CMsgDOTAPlayerInfo* mutable_player_info();
  void set_allocated_player_info(::CMsgDOTAPlayerInfo* player_info);
  private:
  const ::CMsgDOTAPlayerInfo& _internal_player_info() const;
  ::CMsgDOTAPlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::CMsgDOTAPlayerInfo* player_info);
  ::CMsgDOTAPlayerInfo* unsafe_arena_release_player_info();

  // optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
  bool has_prediction_info() const;
  private:
  bool _internal_has_prediction_info() const;
  public:
  void clear_prediction_info();
  const ::CMsgDOTADPCProfileInfo_PredictionInfo& prediction_info() const;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* release_prediction_info();
  ::CMsgDOTADPCProfileInfo_PredictionInfo* mutable_prediction_info();
  void set_allocated_prediction_info(::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info);
  private:
  const ::CMsgDOTADPCProfileInfo_PredictionInfo& _internal_prediction_info() const;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* _internal_mutable_prediction_info();
  public:
  void unsafe_arena_set_allocated_prediction_info(
      ::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info);
  ::CMsgDOTADPCProfileInfo_PredictionInfo* unsafe_arena_release_prediction_info();

  // optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
  bool has_fantasy_info() const;
  private:
  bool _internal_has_fantasy_info() const;
  public:
  void clear_fantasy_info();
  const ::CMsgDOTADPCProfileInfo_FantasyInfo& fantasy_info() const;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* release_fantasy_info();
  ::CMsgDOTADPCProfileInfo_FantasyInfo* mutable_fantasy_info();
  void set_allocated_fantasy_info(::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info);
  private:
  const ::CMsgDOTADPCProfileInfo_FantasyInfo& _internal_fantasy_info() const;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* _internal_mutable_fantasy_info();
  public:
  void unsafe_arena_set_allocated_fantasy_info(
      ::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info);
  ::CMsgDOTADPCProfileInfo_FantasyInfo* unsafe_arena_release_fantasy_info();

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCProfileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > disabled_notifications_;
  ::CMsgDOTAPlayerInfo* player_info_;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info_;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALeaderboards_RegionLeaderboard PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaderboards.RegionLeaderboard) */ {
 public:
  inline CMsgDOTALeaderboards_RegionLeaderboard() : CMsgDOTALeaderboards_RegionLeaderboard(nullptr) {}
  virtual ~CMsgDOTALeaderboards_RegionLeaderboard();
  explicit constexpr CMsgDOTALeaderboards_RegionLeaderboard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALeaderboards_RegionLeaderboard(const CMsgDOTALeaderboards_RegionLeaderboard& from);
  CMsgDOTALeaderboards_RegionLeaderboard(CMsgDOTALeaderboards_RegionLeaderboard&& from) noexcept
    : CMsgDOTALeaderboards_RegionLeaderboard() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaderboards_RegionLeaderboard& operator=(const CMsgDOTALeaderboards_RegionLeaderboard& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALeaderboards_RegionLeaderboard& operator=(CMsgDOTALeaderboards_RegionLeaderboard&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTALeaderboards_RegionLeaderboard& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALeaderboards_RegionLeaderboard* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaderboards_RegionLeaderboard*>(
               &_CMsgDOTALeaderboards_RegionLeaderboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CMsgDOTALeaderboards_RegionLeaderboard& a, CMsgDOTALeaderboards_RegionLeaderboard& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALeaderboards_RegionLeaderboard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaderboards_RegionLeaderboard* New() const final {
    return CreateMaybeMessage<CMsgDOTALeaderboards_RegionLeaderboard>(nullptr);
  }

  CMsgDOTALeaderboards_RegionLeaderboard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTALeaderboards_RegionLeaderboard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from);
  void MergeFrom(const CMsgDOTALeaderboards_RegionLeaderboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALeaderboards_RegionLeaderboard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALeaderboards.RegionLeaderboard";
  }
  protected:
  explicit CMsgDOTALeaderboards_RegionLeaderboard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdsFieldNumber = 2,
    kDivisionFieldNumber = 1,
  };
  // repeated uint32 account_ids = 2;
  int account_ids_size() const;
  private:
  int _internal_account_ids_size() const;
  public:
  void clear_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_account_ids() const;
  void _internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 account_ids(int index) const;
  void set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_account_ids();

  // optional uint32 division = 1;
  bool has_division() const;
  private:
  bool _internal_has_division() const;
  public:
  void clear_division();
  ::PROTOBUF_NAMESPACE_ID::uint32 division() const;
  void set_division(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_division() const;
  void _internal_set_division(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaderboards.RegionLeaderboard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > account_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 division_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTALeaderboards PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTALeaderboards) */ {
 public:
  inline CMsgDOTALeaderboards() : CMsgDOTALeaderboards(nullptr) {}
  virtual ~CMsgDOTALeaderboards();
  explicit constexpr CMsgDOTALeaderboards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTALeaderboards(const CMsgDOTALeaderboards& from);
  CMsgDOTALeaderboards(CMsgDOTALeaderboards&& from) noexcept
    : CMsgDOTALeaderboards() {
    *this = ::std::move(from);
  }

  inline CMsgDOTALeaderboards& operator=(const CMsgDOTALeaderboards& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTALeaderboards& operator=(CMsgDOTALeaderboards&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTALeaderboards& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTALeaderboards* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTALeaderboards*>(
               &_CMsgDOTALeaderboards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CMsgDOTALeaderboards& a, CMsgDOTALeaderboards& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTALeaderboards* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTALeaderboards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTALeaderboards* New() const final {
    return CreateMaybeMessage<CMsgDOTALeaderboards>(nullptr);
  }

  CMsgDOTALeaderboards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTALeaderboards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTALeaderboards& from);
  void MergeFrom(const CMsgDOTALeaderboards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTALeaderboards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTALeaderboards";
  }
  protected:
  explicit CMsgDOTALeaderboards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTALeaderboards_RegionLeaderboard RegionLeaderboard;

  // accessors -------------------------------------------------------

  enum : int {
    kLeaderboardsFieldNumber = 2,
  };
  // repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
  int leaderboards_size() const;
  private:
  int _internal_leaderboards_size() const;
  public:
  void clear_leaderboards();
  ::CMsgDOTALeaderboards_RegionLeaderboard* mutable_leaderboards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >*
      mutable_leaderboards();
  private:
  const ::CMsgDOTALeaderboards_RegionLeaderboard& _internal_leaderboards(int index) const;
  ::CMsgDOTALeaderboards_RegionLeaderboard* _internal_add_leaderboards();
  public:
  const ::CMsgDOTALeaderboards_RegionLeaderboard& leaderboards(int index) const;
  ::CMsgDOTALeaderboards_RegionLeaderboard* add_leaderboards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >&
      leaderboards() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTALeaderboards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard > leaderboards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTACreateFantasyLeagueRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTACreateFantasyLeagueRequest) */ {
 public:
  inline CMsgDOTACreateFantasyLeagueRequest() : CMsgDOTACreateFantasyLeagueRequest(nullptr) {}
  virtual ~CMsgDOTACreateFantasyLeagueRequest();
  explicit constexpr CMsgDOTACreateFantasyLeagueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTACreateFantasyLeagueRequest(const CMsgDOTACreateFantasyLeagueRequest& from);
  CMsgDOTACreateFantasyLeagueRequest(CMsgDOTACreateFantasyLeagueRequest&& from) noexcept
    : CMsgDOTACreateFantasyLeagueRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTACreateFantasyLeagueRequest& operator=(const CMsgDOTACreateFantasyLeagueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTACreateFantasyLeagueRequest& operator=(CMsgDOTACreateFantasyLeagueRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTACreateFantasyLeagueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTACreateFantasyLeagueRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACreateFantasyLeagueRequest*>(
               &_CMsgDOTACreateFantasyLeagueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CMsgDOTACreateFantasyLeagueRequest& a, CMsgDOTACreateFantasyLeagueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTACreateFantasyLeagueRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTACreateFantasyLeagueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTACreateFantasyLeagueRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTACreateFantasyLeagueRequest>(nullptr);
  }

  CMsgDOTACreateFantasyLeagueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTACreateFantasyLeagueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTACreateFantasyLeagueRequest& from);
  void MergeFrom(const CMsgDOTACreateFantasyLeagueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTACreateFantasyLeagueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTACreateFantasyLeagueRequest";
  }
  protected:
  explicit CMsgDOTACreateFantasyLeagueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueNameFieldNumber = 1,
    kLeagueLogoFieldNumber = 2,
    kSelectionModeFieldNumber = 3,
    kTeamCountFieldNumber = 4,
  };
  // optional string league_name = 1;
  bool has_league_name() const;
  private:
  bool _internal_has_league_name() const;
  public:
  void clear_league_name();
  const std::string& league_name() const;
  void set_league_name(const std::string& value);
  void set_league_name(std::string&& value);
  void set_league_name(const char* value);
  void set_league_name(const char* value, size_t size);
  std::string* mutable_league_name();
  std::string* release_league_name();
  void set_allocated_league_name(std::string* league_name);
  private:
  const std::string& _internal_league_name() const;
  void _internal_set_league_name(const std::string& value);
  std::string* _internal_mutable_league_name();
  public:

  // optional uint64 league_logo = 2;
  bool has_league_logo() const;
  private:
  bool _internal_has_league_logo() const;
  public:
  void clear_league_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 league_logo() const;
  void set_league_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_league_logo() const;
  void _internal_set_league_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
  bool has_selection_mode() const;
  private:
  bool _internal_has_selection_mode() const;
  public:
  void clear_selection_mode();
  ::Fantasy_Selection_Mode selection_mode() const;
  void set_selection_mode(::Fantasy_Selection_Mode value);
  private:
  ::Fantasy_Selection_Mode _internal_selection_mode() const;
  void _internal_set_selection_mode(::Fantasy_Selection_Mode value);
  public:

  // optional uint32 team_count = 4;
  bool has_team_count() const;
  private:
  bool _internal_has_team_count() const;
  public:
  void clear_team_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_count() const;
  void set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_count() const;
  void _internal_set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTACreateFantasyLeagueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr league_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 league_logo_;
  int selection_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_count_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTACreateFantasyLeagueResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTACreateFantasyLeagueResponse) */ {
 public:
  inline CMsgDOTACreateFantasyLeagueResponse() : CMsgDOTACreateFantasyLeagueResponse(nullptr) {}
  virtual ~CMsgDOTACreateFantasyLeagueResponse();
  explicit constexpr CMsgDOTACreateFantasyLeagueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTACreateFantasyLeagueResponse(const CMsgDOTACreateFantasyLeagueResponse& from);
  CMsgDOTACreateFantasyLeagueResponse(CMsgDOTACreateFantasyLeagueResponse&& from) noexcept
    : CMsgDOTACreateFantasyLeagueResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTACreateFantasyLeagueResponse& operator=(const CMsgDOTACreateFantasyLeagueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTACreateFantasyLeagueResponse& operator=(CMsgDOTACreateFantasyLeagueResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTACreateFantasyLeagueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTACreateFantasyLeagueResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACreateFantasyLeagueResponse*>(
               &_CMsgDOTACreateFantasyLeagueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CMsgDOTACreateFantasyLeagueResponse& a, CMsgDOTACreateFantasyLeagueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTACreateFantasyLeagueResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTACreateFantasyLeagueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTACreateFantasyLeagueResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTACreateFantasyLeagueResponse>(nullptr);
  }

  CMsgDOTACreateFantasyLeagueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTACreateFantasyLeagueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTACreateFantasyLeagueResponse& from);
  void MergeFrom(const CMsgDOTACreateFantasyLeagueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTACreateFantasyLeagueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTACreateFantasyLeagueResponse";
  }
  protected:
  explicit CMsgDOTACreateFantasyLeagueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTACreateFantasyLeagueResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTACreateFantasyLeagueResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_TOO_MANY_LEAGUES =
    CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_TOO_MANY_LEAGUES;
  static constexpr EResult ERROR_INVALID_TEAM_COUNT =
    CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_INVALID_TEAM_COUNT;
  static constexpr EResult ERROR_CREATION_DISABLED =
    CMsgDOTACreateFantasyLeagueResponse_EResult_ERROR_CREATION_DISABLED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTACreateFantasyLeagueResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTACreateFantasyLeagueResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTACreateFantasyLeagueResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTACreateFantasyLeagueResponse_EResult result() const;
  void set_result(::CMsgDOTACreateFantasyLeagueResponse_EResult value);
  private:
  ::CMsgDOTACreateFantasyLeagueResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTACreateFantasyLeagueResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTACreateFantasyLeagueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgFantasyLeagueScoring PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgFantasyLeagueScoring) */ {
 public:
  inline CMsgFantasyLeagueScoring() : CMsgFantasyLeagueScoring(nullptr) {}
  virtual ~CMsgFantasyLeagueScoring();
  explicit constexpr CMsgFantasyLeagueScoring(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgFantasyLeagueScoring(const CMsgFantasyLeagueScoring& from);
  CMsgFantasyLeagueScoring(CMsgFantasyLeagueScoring&& from) noexcept
    : CMsgFantasyLeagueScoring() {
    *this = ::std::move(from);
  }

  inline CMsgFantasyLeagueScoring& operator=(const CMsgFantasyLeagueScoring& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgFantasyLeagueScoring& operator=(CMsgFantasyLeagueScoring&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgFantasyLeagueScoring& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgFantasyLeagueScoring* internal_default_instance() {
    return reinterpret_cast<const CMsgFantasyLeagueScoring*>(
               &_CMsgFantasyLeagueScoring_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CMsgFantasyLeagueScoring& a, CMsgFantasyLeagueScoring& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgFantasyLeagueScoring* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgFantasyLeagueScoring* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgFantasyLeagueScoring* New() const final {
    return CreateMaybeMessage<CMsgFantasyLeagueScoring>(nullptr);
  }

  CMsgFantasyLeagueScoring* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgFantasyLeagueScoring>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgFantasyLeagueScoring& from);
  void MergeFrom(const CMsgFantasyLeagueScoring& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgFantasyLeagueScoring* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgFantasyLeagueScoring";
  }
  protected:
  explicit CMsgFantasyLeagueScoring(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kKillsFieldNumber = 2,
    kDeathsFieldNumber = 3,
    kAssistsFieldNumber = 4,
    kLastHitsFieldNumber = 5,
    kDeniesFieldNumber = 6,
    kGpmFieldNumber = 7,
    kXppmFieldNumber = 8,
    kStunsFieldNumber = 9,
    kHealingFieldNumber = 10,
    kTowerKillsFieldNumber = 11,
    kRoshanKillsFieldNumber = 12,
    kMultiplierPremiumFieldNumber = 13,
    kMultiplierProfessionalFieldNumber = 14,
  };
  // optional float level = 1;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  float level() const;
  void set_level(float value);
  private:
  float _internal_level() const;
  void _internal_set_level(float value);
  public:

  // optional float kills = 2;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  float kills() const;
  void set_kills(float value);
  private:
  float _internal_kills() const;
  void _internal_set_kills(float value);
  public:

  // optional float deaths = 3;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  float deaths() const;
  void set_deaths(float value);
  private:
  float _internal_deaths() const;
  void _internal_set_deaths(float value);
  public:

  // optional float assists = 4;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  float assists() const;
  void set_assists(float value);
  private:
  float _internal_assists() const;
  void _internal_set_assists(float value);
  public:

  // optional float last_hits = 5;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  float last_hits() const;
  void set_last_hits(float value);
  private:
  float _internal_last_hits() const;
  void _internal_set_last_hits(float value);
  public:

  // optional float denies = 6;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  float denies() const;
  void set_denies(float value);
  private:
  float _internal_denies() const;
  void _internal_set_denies(float value);
  public:

  // optional float gpm = 7;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  float gpm() const;
  void set_gpm(float value);
  private:
  float _internal_gpm() const;
  void _internal_set_gpm(float value);
  public:

  // optional float xppm = 8;
  bool has_xppm() const;
  private:
  bool _internal_has_xppm() const;
  public:
  void clear_xppm();
  float xppm() const;
  void set_xppm(float value);
  private:
  float _internal_xppm() const;
  void _internal_set_xppm(float value);
  public:

  // optional float stuns = 9;
  bool has_stuns() const;
  private:
  bool _internal_has_stuns() const;
  public:
  void clear_stuns();
  float stuns() const;
  void set_stuns(float value);
  private:
  float _internal_stuns() const;
  void _internal_set_stuns(float value);
  public:

  // optional float healing = 10;
  bool has_healing() const;
  private:
  bool _internal_has_healing() const;
  public:
  void clear_healing();
  float healing() const;
  void set_healing(float value);
  private:
  float _internal_healing() const;
  void _internal_set_healing(float value);
  public:

  // optional float tower_kills = 11;
  bool has_tower_kills() const;
  private:
  bool _internal_has_tower_kills() const;
  public:
  void clear_tower_kills();
  float tower_kills() const;
  void set_tower_kills(float value);
  private:
  float _internal_tower_kills() const;
  void _internal_set_tower_kills(float value);
  public:

  // optional float roshan_kills = 12;
  bool has_roshan_kills() const;
  private:
  bool _internal_has_roshan_kills() const;
  public:
  void clear_roshan_kills();
  float roshan_kills() const;
  void set_roshan_kills(float value);
  private:
  float _internal_roshan_kills() const;
  void _internal_set_roshan_kills(float value);
  public:

  // optional float multiplier_premium = 13;
  bool has_multiplier_premium() const;
  private:
  bool _internal_has_multiplier_premium() const;
  public:
  void clear_multiplier_premium();
  float multiplier_premium() const;
  void set_multiplier_premium(float value);
  private:
  float _internal_multiplier_premium() const;
  void _internal_set_multiplier_premium(float value);
  public:

  // optional float multiplier_professional = 14;
  bool has_multiplier_professional() const;
  private:
  bool _internal_has_multiplier_professional() const;
  public:
  void clear_multiplier_professional();
  float multiplier_professional() const;
  void set_multiplier_professional(float value);
  private:
  float _internal_multiplier_professional() const;
  void _internal_set_multiplier_professional(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgFantasyLeagueScoring)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float level_;
  float kills_;
  float deaths_;
  float assists_;
  float last_hits_;
  float denies_;
  float gpm_;
  float xppm_;
  float stuns_;
  float healing_;
  float tower_kills_;
  float roshan_kills_;
  float multiplier_premium_;
  float multiplier_professional_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueInfo_OwnerInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueInfo.OwnerInfo) */ {
 public:
  inline CMsgDOTAFantasyLeagueInfo_OwnerInfo() : CMsgDOTAFantasyLeagueInfo_OwnerInfo(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueInfo_OwnerInfo();
  explicit constexpr CMsgDOTAFantasyLeagueInfo_OwnerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueInfo_OwnerInfo(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from);
  CMsgDOTAFantasyLeagueInfo_OwnerInfo(CMsgDOTAFantasyLeagueInfo_OwnerInfo&& from) noexcept
    : CMsgDOTAFantasyLeagueInfo_OwnerInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueInfo_OwnerInfo& operator=(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueInfo_OwnerInfo& operator=(CMsgDOTAFantasyLeagueInfo_OwnerInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueInfo_OwnerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueInfo_OwnerInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueInfo_OwnerInfo*>(
               &_CMsgDOTAFantasyLeagueInfo_OwnerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CMsgDOTAFantasyLeagueInfo_OwnerInfo& a, CMsgDOTAFantasyLeagueInfo_OwnerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueInfo_OwnerInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfo_OwnerInfo>(nullptr);
  }

  CMsgDOTAFantasyLeagueInfo_OwnerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfo_OwnerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueInfo_OwnerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueInfo_OwnerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueInfo.OwnerInfo";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueInfo_OwnerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAccountIdFieldNumber = 3,
    kOwnerAccountIdFieldNumber = 1,
    kLeftLeagueFieldNumber = 2,
  };
  // repeated uint32 player_account_id = 3;
  int player_account_id_size() const;
  private:
  int _internal_player_account_id_size() const;
  public:
  void clear_player_account_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_player_account_id() const;
  void _internal_add_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_player_account_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id(int index) const;
  void set_player_account_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      player_account_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_player_account_id();

  // optional uint32 owner_account_id = 1;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool left_league = 2;
  bool has_left_league() const;
  private:
  bool _internal_has_left_league() const;
  public:
  void clear_left_league();
  bool left_league() const;
  void set_left_league(bool value);
  private:
  bool _internal_left_league() const;
  void _internal_set_left_league(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueInfo.OwnerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > player_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  bool left_league_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueInfo) */ {
 public:
  inline CMsgDOTAFantasyLeagueInfo() : CMsgDOTAFantasyLeagueInfo(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueInfo();
  explicit constexpr CMsgDOTAFantasyLeagueInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueInfo(const CMsgDOTAFantasyLeagueInfo& from);
  CMsgDOTAFantasyLeagueInfo(CMsgDOTAFantasyLeagueInfo&& from) noexcept
    : CMsgDOTAFantasyLeagueInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueInfo& operator=(const CMsgDOTAFantasyLeagueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueInfo& operator=(CMsgDOTAFantasyLeagueInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueInfo*>(
               &_CMsgDOTAFantasyLeagueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CMsgDOTAFantasyLeagueInfo& a, CMsgDOTAFantasyLeagueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfo>(nullptr);
  }

  CMsgDOTAFantasyLeagueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueInfo& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueInfo";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueInfo_OwnerInfo OwnerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerInfoFieldNumber = 25,
    kPlayersFieldNumber = 26,
    kFantasyLeagueNameFieldNumber = 3,
    kPasswordFieldNumber = 29,
    kScoringFieldNumber = 7,
    kFantasyLeagueIdFieldNumber = 1,
    kCommissionerAccountIdFieldNumber = 2,
    kSelectionModeFieldNumber = 4,
    kTeamCountFieldNumber = 5,
    kLogoFieldNumber = 6,
    kDraftTimeFieldNumber = 12,
    kDraftPickTimeFieldNumber = 13,
    kSeasonStartFieldNumber = 15,
    kSeasonLengthFieldNumber = 16,
    kVetoVotesFieldNumber = 17,
    kAcquisitionsFieldNumber = 18,
    kSlot1FieldNumber = 19,
    kSlot2FieldNumber = 20,
    kSlot3FieldNumber = 21,
    kSlot4FieldNumber = 22,
    kSlot5FieldNumber = 23,
    kBenchSlotsFieldNumber = 24,
    kTimeZoneFieldNumber = 27,
    kSeasonFieldNumber = 28,
  };
  // repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
  int owner_info_size() const;
  private:
  int _internal_owner_info_size() const;
  public:
  void clear_owner_info();
  ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* mutable_owner_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >*
      mutable_owner_info();
  private:
  const ::CMsgDOTAFantasyLeagueInfo_OwnerInfo& _internal_owner_info(int index) const;
  ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* _internal_add_owner_info();
  public:
  const ::CMsgDOTAFantasyLeagueInfo_OwnerInfo& owner_info(int index) const;
  ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* add_owner_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >&
      owner_info() const;

  // repeated uint32 players = 26;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_players() const;
  void _internal_add_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_players();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 players(int index) const;
  void set_players(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_players();

  // optional string fantasy_league_name = 3;
  bool has_fantasy_league_name() const;
  private:
  bool _internal_has_fantasy_league_name() const;
  public:
  void clear_fantasy_league_name();
  const std::string& fantasy_league_name() const;
  void set_fantasy_league_name(const std::string& value);
  void set_fantasy_league_name(std::string&& value);
  void set_fantasy_league_name(const char* value);
  void set_fantasy_league_name(const char* value, size_t size);
  std::string* mutable_fantasy_league_name();
  std::string* release_fantasy_league_name();
  void set_allocated_fantasy_league_name(std::string* fantasy_league_name);
  private:
  const std::string& _internal_fantasy_league_name() const;
  void _internal_set_fantasy_league_name(const std::string& value);
  std::string* _internal_mutable_fantasy_league_name();
  public:

  // optional string password = 29;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional .CMsgFantasyLeagueScoring scoring = 7;
  bool has_scoring() const;
  private:
  bool _internal_has_scoring() const;
  public:
  void clear_scoring();
  const ::CMsgFantasyLeagueScoring& scoring() const;
  ::CMsgFantasyLeagueScoring* release_scoring();
  ::CMsgFantasyLeagueScoring* mutable_scoring();
  void set_allocated_scoring(::CMsgFantasyLeagueScoring* scoring);
  private:
  const ::CMsgFantasyLeagueScoring& _internal_scoring() const;
  ::CMsgFantasyLeagueScoring* _internal_mutable_scoring();
  public:
  void unsafe_arena_set_allocated_scoring(
      ::CMsgFantasyLeagueScoring* scoring);
  ::CMsgFantasyLeagueScoring* unsafe_arena_release_scoring();

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 commissioner_account_id = 2;
  bool has_commissioner_account_id() const;
  private:
  bool _internal_has_commissioner_account_id() const;
  public:
  void clear_commissioner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 commissioner_account_id() const;
  void set_commissioner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_commissioner_account_id() const;
  void _internal_set_commissioner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
  bool has_selection_mode() const;
  private:
  bool _internal_has_selection_mode() const;
  public:
  void clear_selection_mode();
  ::Fantasy_Selection_Mode selection_mode() const;
  void set_selection_mode(::Fantasy_Selection_Mode value);
  private:
  ::Fantasy_Selection_Mode _internal_selection_mode() const;
  void _internal_set_selection_mode(::Fantasy_Selection_Mode value);
  public:

  // optional uint32 team_count = 5;
  bool has_team_count() const;
  private:
  bool _internal_has_team_count() const;
  public:
  void clear_team_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_count() const;
  void set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_count() const;
  void _internal_set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 logo = 6;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 logo() const;
  void set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_logo() const;
  void _internal_set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 draft_time = 12;
  bool has_draft_time() const;
  private:
  bool _internal_has_draft_time() const;
  public:
  void clear_draft_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 draft_time() const;
  void set_draft_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_draft_time() const;
  void _internal_set_draft_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 draft_pick_time = 13;
  bool has_draft_pick_time() const;
  private:
  bool _internal_has_draft_pick_time() const;
  public:
  void clear_draft_pick_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 draft_pick_time() const;
  void set_draft_pick_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_draft_pick_time() const;
  void _internal_set_draft_pick_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 season_start = 15;
  bool has_season_start() const;
  private:
  bool _internal_has_season_start() const;
  public:
  void clear_season_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 season_start() const;
  void set_season_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season_start() const;
  void _internal_set_season_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 season_length = 16;
  bool has_season_length() const;
  private:
  bool _internal_has_season_length() const;
  public:
  void clear_season_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 season_length() const;
  void set_season_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season_length() const;
  void _internal_set_season_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 veto_votes = 17;
  bool has_veto_votes() const;
  private:
  bool _internal_has_veto_votes() const;
  public:
  void clear_veto_votes();
  ::PROTOBUF_NAMESPACE_ID::uint32 veto_votes() const;
  void set_veto_votes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_veto_votes() const;
  void _internal_set_veto_votes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 acquisitions = 18;
  bool has_acquisitions() const;
  private:
  bool _internal_has_acquisitions() const;
  public:
  void clear_acquisitions();
  ::PROTOBUF_NAMESPACE_ID::uint32 acquisitions() const;
  void set_acquisitions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_acquisitions() const;
  void _internal_set_acquisitions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_1 = 19;
  bool has_slot_1() const;
  private:
  bool _internal_has_slot_1() const;
  public:
  void clear_slot_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_1() const;
  void set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_1() const;
  void _internal_set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_2 = 20;
  bool has_slot_2() const;
  private:
  bool _internal_has_slot_2() const;
  public:
  void clear_slot_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_2() const;
  void set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_2() const;
  void _internal_set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_3 = 21;
  bool has_slot_3() const;
  private:
  bool _internal_has_slot_3() const;
  public:
  void clear_slot_3();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_3() const;
  void set_slot_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_3() const;
  void _internal_set_slot_3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_4 = 22;
  bool has_slot_4() const;
  private:
  bool _internal_has_slot_4() const;
  public:
  void clear_slot_4();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_4() const;
  void set_slot_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_4() const;
  void _internal_set_slot_4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_5 = 23;
  bool has_slot_5() const;
  private:
  bool _internal_has_slot_5() const;
  public:
  void clear_slot_5();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_5() const;
  void set_slot_5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_5() const;
  void _internal_set_slot_5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 bench_slots = 24;
  bool has_bench_slots() const;
  private:
  bool _internal_has_bench_slots() const;
  public:
  void clear_bench_slots();
  ::PROTOBUF_NAMESPACE_ID::uint32 bench_slots() const;
  void set_bench_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bench_slots() const;
  void _internal_set_bench_slots(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_zone = 27;
  bool has_time_zone() const;
  private:
  bool _internal_has_time_zone() const;
  public:
  void clear_time_zone();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_zone() const;
  void set_time_zone(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_zone() const;
  void _internal_set_time_zone(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 season = 28;
  bool has_season() const;
  private:
  bool _internal_has_season() const;
  public:
  void clear_season();
  ::PROTOBUF_NAMESPACE_ID::uint32 season() const;
  void set_season(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season() const;
  void _internal_set_season(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo > owner_info_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > players_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_league_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::CMsgFantasyLeagueScoring* scoring_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 commissioner_account_id_;
  int selection_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_count_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 draft_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 draft_pick_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 veto_votes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 acquisitions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_4_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bench_slots_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_zone_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueEditInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueEditInfoRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueEditInfoRequest() : CMsgDOTAFantasyLeagueEditInfoRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueEditInfoRequest();
  explicit constexpr CMsgDOTAFantasyLeagueEditInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueEditInfoRequest(const CMsgDOTAFantasyLeagueEditInfoRequest& from);
  CMsgDOTAFantasyLeagueEditInfoRequest(CMsgDOTAFantasyLeagueEditInfoRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueEditInfoRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueEditInfoRequest& operator=(const CMsgDOTAFantasyLeagueEditInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueEditInfoRequest& operator=(CMsgDOTAFantasyLeagueEditInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueEditInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueEditInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueEditInfoRequest*>(
               &_CMsgDOTAFantasyLeagueEditInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CMsgDOTAFantasyLeagueEditInfoRequest& a, CMsgDOTAFantasyLeagueEditInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueEditInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueEditInfoRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInfoRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueEditInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueEditInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueEditInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueEditInfoRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueEditInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEditInfoFieldNumber = 2,
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
  bool has_edit_info() const;
  private:
  bool _internal_has_edit_info() const;
  public:
  void clear_edit_info();
  const ::CMsgDOTAFantasyLeagueInfo& edit_info() const;
  ::CMsgDOTAFantasyLeagueInfo* release_edit_info();
  ::CMsgDOTAFantasyLeagueInfo* mutable_edit_info();
  void set_allocated_edit_info(::CMsgDOTAFantasyLeagueInfo* edit_info);
  private:
  const ::CMsgDOTAFantasyLeagueInfo& _internal_edit_info() const;
  ::CMsgDOTAFantasyLeagueInfo* _internal_mutable_edit_info();
  public:
  void unsafe_arena_set_allocated_edit_info(
      ::CMsgDOTAFantasyLeagueInfo* edit_info);
  ::CMsgDOTAFantasyLeagueInfo* unsafe_arena_release_edit_info();

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueEditInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgDOTAFantasyLeagueInfo* edit_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueEditInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueEditInfoResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueEditInfoResponse() : CMsgDOTAFantasyLeagueEditInfoResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueEditInfoResponse();
  explicit constexpr CMsgDOTAFantasyLeagueEditInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueEditInfoResponse(const CMsgDOTAFantasyLeagueEditInfoResponse& from);
  CMsgDOTAFantasyLeagueEditInfoResponse(CMsgDOTAFantasyLeagueEditInfoResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueEditInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueEditInfoResponse& operator=(const CMsgDOTAFantasyLeagueEditInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueEditInfoResponse& operator=(CMsgDOTAFantasyLeagueEditInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueEditInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueEditInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueEditInfoResponse*>(
               &_CMsgDOTAFantasyLeagueEditInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CMsgDOTAFantasyLeagueEditInfoResponse& a, CMsgDOTAFantasyLeagueEditInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueEditInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueEditInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInfoResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueEditInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueEditInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueEditInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueEditInfoResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueEditInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueEditInfoResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueEditInfoResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueEditInfoResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueEditInfoResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueEditInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueFindRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueFindRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueFindRequest() : CMsgDOTAFantasyLeagueFindRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueFindRequest();
  explicit constexpr CMsgDOTAFantasyLeagueFindRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueFindRequest(const CMsgDOTAFantasyLeagueFindRequest& from);
  CMsgDOTAFantasyLeagueFindRequest(CMsgDOTAFantasyLeagueFindRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueFindRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueFindRequest& operator=(const CMsgDOTAFantasyLeagueFindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueFindRequest& operator=(CMsgDOTAFantasyLeagueFindRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueFindRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueFindRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueFindRequest*>(
               &_CMsgDOTAFantasyLeagueFindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CMsgDOTAFantasyLeagueFindRequest& a, CMsgDOTAFantasyLeagueFindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueFindRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueFindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueFindRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueFindRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueFindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueFindRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueFindRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueFindRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueFindRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueFindRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueFindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueFindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueFindResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueFindResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueFindResponse() : CMsgDOTAFantasyLeagueFindResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueFindResponse();
  explicit constexpr CMsgDOTAFantasyLeagueFindResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueFindResponse(const CMsgDOTAFantasyLeagueFindResponse& from);
  CMsgDOTAFantasyLeagueFindResponse(CMsgDOTAFantasyLeagueFindResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueFindResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueFindResponse& operator=(const CMsgDOTAFantasyLeagueFindResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueFindResponse& operator=(CMsgDOTAFantasyLeagueFindResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueFindResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueFindResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueFindResponse*>(
               &_CMsgDOTAFantasyLeagueFindResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CMsgDOTAFantasyLeagueFindResponse& a, CMsgDOTAFantasyLeagueFindResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueFindResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueFindResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueFindResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueFindResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueFindResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueFindResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueFindResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueFindResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueFindResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueFindResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueFindResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueFindResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueFindResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_LEAGUE_NOT_FOUND =
    CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_LEAGUE_NOT_FOUND;
  static constexpr EResult ERROR_BAD_PASSWORD =
    CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_BAD_PASSWORD;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_FULL =
    CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_FULL;
  static constexpr EResult ERROR_ALREADY_MEMBER =
    CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_ALREADY_MEMBER;
  static constexpr EResult ERROR_LEAGUE_LOCKED =
    CMsgDOTAFantasyLeagueFindResponse_EResult_ERROR_LEAGUE_LOCKED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueFindResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueFindResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueFindResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueNameFieldNumber = 2,
    kCommissionerNameFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // optional string fantasy_league_name = 2;
  bool has_fantasy_league_name() const;
  private:
  bool _internal_has_fantasy_league_name() const;
  public:
  void clear_fantasy_league_name();
  const std::string& fantasy_league_name() const;
  void set_fantasy_league_name(const std::string& value);
  void set_fantasy_league_name(std::string&& value);
  void set_fantasy_league_name(const char* value);
  void set_fantasy_league_name(const char* value, size_t size);
  std::string* mutable_fantasy_league_name();
  std::string* release_fantasy_league_name();
  void set_allocated_fantasy_league_name(std::string* fantasy_league_name);
  private:
  const std::string& _internal_fantasy_league_name() const;
  void _internal_set_fantasy_league_name(const std::string& value);
  std::string* _internal_mutable_fantasy_league_name();
  public:

  // optional string commissioner_name = 3;
  bool has_commissioner_name() const;
  private:
  bool _internal_has_commissioner_name() const;
  public:
  void clear_commissioner_name();
  const std::string& commissioner_name() const;
  void set_commissioner_name(const std::string& value);
  void set_commissioner_name(std::string&& value);
  void set_commissioner_name(const char* value);
  void set_commissioner_name(const char* value, size_t size);
  std::string* mutable_commissioner_name();
  std::string* release_commissioner_name();
  void set_allocated_commissioner_name(std::string* commissioner_name);
  private:
  const std::string& _internal_commissioner_name() const;
  void _internal_set_commissioner_name(const std::string& value);
  std::string* _internal_mutable_commissioner_name();
  public:

  // optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueFindResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueFindResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueFindResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueFindResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueFindResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_league_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commissioner_name_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueInfoRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueInfoRequest() : CMsgDOTAFantasyLeagueInfoRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueInfoRequest();
  explicit constexpr CMsgDOTAFantasyLeagueInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueInfoRequest(const CMsgDOTAFantasyLeagueInfoRequest& from);
  CMsgDOTAFantasyLeagueInfoRequest(CMsgDOTAFantasyLeagueInfoRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueInfoRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueInfoRequest& operator=(const CMsgDOTAFantasyLeagueInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueInfoRequest& operator=(CMsgDOTAFantasyLeagueInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueInfoRequest*>(
               &_CMsgDOTAFantasyLeagueInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CMsgDOTAFantasyLeagueInfoRequest& a, CMsgDOTAFantasyLeagueInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueInfoRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfoRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueInfoRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueInfoRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueInfoResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueInfoResponse() : CMsgDOTAFantasyLeagueInfoResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueInfoResponse();
  explicit constexpr CMsgDOTAFantasyLeagueInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueInfoResponse(const CMsgDOTAFantasyLeagueInfoResponse& from);
  CMsgDOTAFantasyLeagueInfoResponse(CMsgDOTAFantasyLeagueInfoResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueInfoResponse& operator=(const CMsgDOTAFantasyLeagueInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueInfoResponse& operator=(CMsgDOTAFantasyLeagueInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueInfoResponse*>(
               &_CMsgDOTAFantasyLeagueInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CMsgDOTAFantasyLeagueInfoResponse& a, CMsgDOTAFantasyLeagueInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfoResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueInfoResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueInfoResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueInfoResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueInfoResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueInfoResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_BAD_LEAGUE_ID =
    CMsgDOTAFantasyLeagueInfoResponse_EResult_ERROR_BAD_LEAGUE_ID;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueInfoResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueInfoResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueInfoResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueInfoResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueInfoResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueInfoResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueInfoResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueMatchupsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueMatchupsRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueMatchupsRequest() : CMsgDOTAFantasyLeagueMatchupsRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueMatchupsRequest();
  explicit constexpr CMsgDOTAFantasyLeagueMatchupsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueMatchupsRequest(const CMsgDOTAFantasyLeagueMatchupsRequest& from);
  CMsgDOTAFantasyLeagueMatchupsRequest(CMsgDOTAFantasyLeagueMatchupsRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueMatchupsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueMatchupsRequest& operator=(const CMsgDOTAFantasyLeagueMatchupsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueMatchupsRequest& operator=(CMsgDOTAFantasyLeagueMatchupsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueMatchupsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueMatchupsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueMatchupsRequest*>(
               &_CMsgDOTAFantasyLeagueMatchupsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CMsgDOTAFantasyLeagueMatchupsRequest& a, CMsgDOTAFantasyLeagueMatchupsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueMatchupsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueMatchupsRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueMatchupsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueMatchupsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueMatchupsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueMatchupsRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueMatchupsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueMatchupsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueMatchupsResponse_Matchup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup) */ {
 public:
  inline CMsgDOTAFantasyLeagueMatchupsResponse_Matchup() : CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueMatchupsResponse_Matchup();
  explicit constexpr CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from);
  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup&& from) noexcept
    : CMsgDOTAFantasyLeagueMatchupsResponse_Matchup() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& operator=(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& operator=(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup*>(
               &_CMsgDOTAFantasyLeagueMatchupsResponse_Matchup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& a, CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(nullptr);
  }

  CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsResponse_Matchup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueMatchupsResponse.Matchup";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueMatchupsResponse_Matchup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAccountId1FieldNumber = 1,
    kOwnerAccountId2FieldNumber = 2,
    kScore1FieldNumber = 3,
    kScore2FieldNumber = 4,
  };
  // optional uint32 owner_account_id_1 = 1;
  bool has_owner_account_id_1() const;
  private:
  bool _internal_has_owner_account_id_1() const;
  public:
  void clear_owner_account_id_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_1() const;
  void set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id_1() const;
  void _internal_set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id_2 = 2;
  bool has_owner_account_id_2() const;
  private:
  bool _internal_has_owner_account_id_2() const;
  public:
  void clear_owner_account_id_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_2() const;
  void set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id_2() const;
  void _internal_set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float score_1 = 3;
  bool has_score_1() const;
  private:
  bool _internal_has_score_1() const;
  public:
  void clear_score_1();
  float score_1() const;
  void set_score_1(float value);
  private:
  float _internal_score_1() const;
  void _internal_set_score_1(float value);
  public:

  // optional float score_2 = 4;
  bool has_score_2() const;
  private:
  bool _internal_has_score_2() const;
  public:
  void clear_score_2();
  float score_2() const;
  void set_score_2(float value);
  private:
  float _internal_score_2() const;
  void _internal_set_score_2(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_2_;
  float score_1_;
  float score_2_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups) */ {
 public:
  inline CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups() : CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups();
  explicit constexpr CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from);
  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups&& from) noexcept
    : CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& operator=(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& operator=(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups*>(
               &_CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& a, CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(nullptr);
  }

  CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchupFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
  int matchup_size() const;
  private:
  int _internal_matchup_size() const;
  public:
  void clear_matchup();
  ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* mutable_matchup(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >*
      mutable_matchup();
  private:
  const ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& _internal_matchup(int index) const;
  ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* _internal_add_matchup();
  public:
  const ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& matchup(int index) const;
  ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* add_matchup();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >&
      matchup() const;

  // optional uint32 start_time = 2;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_time = 3;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup > matchup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_time_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueMatchupsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueMatchupsResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueMatchupsResponse() : CMsgDOTAFantasyLeagueMatchupsResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueMatchupsResponse();
  explicit constexpr CMsgDOTAFantasyLeagueMatchupsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueMatchupsResponse(const CMsgDOTAFantasyLeagueMatchupsResponse& from);
  CMsgDOTAFantasyLeagueMatchupsResponse(CMsgDOTAFantasyLeagueMatchupsResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueMatchupsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueMatchupsResponse& operator=(const CMsgDOTAFantasyLeagueMatchupsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueMatchupsResponse& operator=(CMsgDOTAFantasyLeagueMatchupsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueMatchupsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueMatchupsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueMatchupsResponse*>(
               &_CMsgDOTAFantasyLeagueMatchupsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CMsgDOTAFantasyLeagueMatchupsResponse& a, CMsgDOTAFantasyLeagueMatchupsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueMatchupsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueMatchupsResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueMatchupsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueMatchupsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueMatchupsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueMatchupsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueMatchupsResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueMatchupsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueMatchupsResponse_Matchup Matchup;
  typedef CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups WeeklyMatchups;

  typedef CMsgDOTAFantasyLeagueMatchupsResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_BAD_LEAGUE_ID =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_BAD_LEAGUE_ID;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueMatchupsResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueMatchupsResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueMatchupsResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWeeklyMatchupsFieldNumber = 3,
    kResultFieldNumber = 1,
    kFantasyLeagueIdFieldNumber = 2,
  };
  // repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
  int weekly_matchups_size() const;
  private:
  int _internal_weekly_matchups_size() const;
  public:
  void clear_weekly_matchups();
  ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* mutable_weekly_matchups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >*
      mutable_weekly_matchups();
  private:
  const ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& _internal_weekly_matchups(int index) const;
  ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* _internal_add_weekly_matchups();
  public:
  const ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& weekly_matchups(int index) const;
  ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* add_weekly_matchups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >&
      weekly_matchups() const;

  // optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult value);
  public:

  // optional uint32 fantasy_league_id = 2;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueMatchupsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups > weekly_matchups_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAEditFantasyTeamRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditFantasyTeamRequest) */ {
 public:
  inline CMsgDOTAEditFantasyTeamRequest() : CMsgDOTAEditFantasyTeamRequest(nullptr) {}
  virtual ~CMsgDOTAEditFantasyTeamRequest();
  explicit constexpr CMsgDOTAEditFantasyTeamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAEditFantasyTeamRequest(const CMsgDOTAEditFantasyTeamRequest& from);
  CMsgDOTAEditFantasyTeamRequest(CMsgDOTAEditFantasyTeamRequest&& from) noexcept
    : CMsgDOTAEditFantasyTeamRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditFantasyTeamRequest& operator=(const CMsgDOTAEditFantasyTeamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAEditFantasyTeamRequest& operator=(CMsgDOTAEditFantasyTeamRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAEditFantasyTeamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAEditFantasyTeamRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditFantasyTeamRequest*>(
               &_CMsgDOTAEditFantasyTeamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CMsgDOTAEditFantasyTeamRequest& a, CMsgDOTAEditFantasyTeamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAEditFantasyTeamRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAEditFantasyTeamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditFantasyTeamRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAEditFantasyTeamRequest>(nullptr);
  }

  CMsgDOTAEditFantasyTeamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAEditFantasyTeamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAEditFantasyTeamRequest& from);
  void MergeFrom(const CMsgDOTAEditFantasyTeamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAEditFantasyTeamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAEditFantasyTeamRequest";
  }
  protected:
  explicit CMsgDOTAEditFantasyTeamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamNameFieldNumber = 3,
    kFantasyLeagueIdFieldNumber = 1,
    kTeamIndexFieldNumber = 2,
    kTeamLogoFieldNumber = 4,
  };
  // optional string team_name = 3;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index = 2;
  bool has_team_index() const;
  private:
  bool _internal_has_team_index() const;
  public:
  void clear_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index() const;
  void set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index() const;
  void _internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 team_logo = 4;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo() const;
  void set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_logo() const;
  void _internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditFantasyTeamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAEditFantasyTeamResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAEditFantasyTeamResponse) */ {
 public:
  inline CMsgDOTAEditFantasyTeamResponse() : CMsgDOTAEditFantasyTeamResponse(nullptr) {}
  virtual ~CMsgDOTAEditFantasyTeamResponse();
  explicit constexpr CMsgDOTAEditFantasyTeamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAEditFantasyTeamResponse(const CMsgDOTAEditFantasyTeamResponse& from);
  CMsgDOTAEditFantasyTeamResponse(CMsgDOTAEditFantasyTeamResponse&& from) noexcept
    : CMsgDOTAEditFantasyTeamResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAEditFantasyTeamResponse& operator=(const CMsgDOTAEditFantasyTeamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAEditFantasyTeamResponse& operator=(CMsgDOTAEditFantasyTeamResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAEditFantasyTeamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAEditFantasyTeamResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAEditFantasyTeamResponse*>(
               &_CMsgDOTAEditFantasyTeamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CMsgDOTAEditFantasyTeamResponse& a, CMsgDOTAEditFantasyTeamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAEditFantasyTeamResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAEditFantasyTeamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAEditFantasyTeamResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAEditFantasyTeamResponse>(nullptr);
  }

  CMsgDOTAEditFantasyTeamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAEditFantasyTeamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAEditFantasyTeamResponse& from);
  void MergeFrom(const CMsgDOTAEditFantasyTeamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAEditFantasyTeamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAEditFantasyTeamResponse";
  }
  protected:
  explicit CMsgDOTAEditFantasyTeamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAEditFantasyTeamResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAEditFantasyTeamResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_INVALID_TEAM_INFO =
    CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_INVALID_TEAM_INFO;
  static constexpr EResult ERROR_NAME_ALREADY_TAKEN =
    CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_NAME_ALREADY_TAKEN;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAEditFantasyTeamResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAEditFantasyTeamResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAEditFantasyTeamResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAEditFantasyTeamResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAEditFantasyTeamResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAEditFantasyTeamResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAEditFantasyTeamResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAEditFantasyTeamResponse_EResult result() const;
  void set_result(::CMsgDOTAEditFantasyTeamResponse_EResult value);
  private:
  ::CMsgDOTAEditFantasyTeamResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAEditFantasyTeamResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAEditFantasyTeamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID) */ {
 public:
  inline CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID() : CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID();
  explicit constexpr CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from);
  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID&& from) noexcept
    : CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& operator=(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& operator=(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID*>(
               &_CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& a, CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(nullptr);
  }

  CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from);
  void MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID";
  }
  protected:
  explicit CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID) */ {
 public:
  inline CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID() : CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID();
  explicit constexpr CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from);
  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID&& from) noexcept
    : CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& operator=(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& operator=(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID*>(
               &_CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& a, CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(nullptr);
  }

  CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from);
  void MergeFrom(const CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID";
  }
  protected:
  explicit CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAccountIdFieldNumber = 1,
  };
  // optional uint32 owner_account_id = 1;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamInfoResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamInfoResponse() : CMsgDOTAFantasyTeamInfoResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamInfoResponse();
  explicit constexpr CMsgDOTAFantasyTeamInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamInfoResponse(const CMsgDOTAFantasyTeamInfoResponse& from);
  CMsgDOTAFantasyTeamInfoResponse(CMsgDOTAFantasyTeamInfoResponse&& from) noexcept
    : CMsgDOTAFantasyTeamInfoResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamInfoResponse& operator=(const CMsgDOTAFantasyTeamInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamInfoResponse& operator=(CMsgDOTAFantasyTeamInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamInfoResponse*>(
               &_CMsgDOTAFantasyTeamInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CMsgDOTAFantasyTeamInfoResponse& a, CMsgDOTAFantasyTeamInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamInfoResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfoResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamInfoResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamInfoResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyTeamInfo results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::CMsgDOTAFantasyTeamInfo* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo >*
      mutable_results();
  private:
  const ::CMsgDOTAFantasyTeamInfo& _internal_results(int index) const;
  ::CMsgDOTAFantasyTeamInfo* _internal_add_results();
  public:
  const ::CMsgDOTAFantasyTeamInfo& results(int index) const;
  ::CMsgDOTAFantasyTeamInfo* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo >&
      results() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamInfo) */ {
 public:
  inline CMsgDOTAFantasyTeamInfo() : CMsgDOTAFantasyTeamInfo(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamInfo();
  explicit constexpr CMsgDOTAFantasyTeamInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamInfo(const CMsgDOTAFantasyTeamInfo& from);
  CMsgDOTAFantasyTeamInfo(CMsgDOTAFantasyTeamInfo&& from) noexcept
    : CMsgDOTAFantasyTeamInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamInfo& operator=(const CMsgDOTAFantasyTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamInfo& operator=(CMsgDOTAFantasyTeamInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamInfo*>(
               &_CMsgDOTAFantasyTeamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CMsgDOTAFantasyTeamInfo& a, CMsgDOTAFantasyTeamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfo>(nullptr);
  }

  CMsgDOTAFantasyTeamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamInfo& from);
  void MergeFrom(const CMsgDOTAFantasyTeamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamInfo";
  }
  protected:
  explicit CMsgDOTAFantasyTeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentRosterFieldNumber = 8,
    kTeamNameFieldNumber = 4,
    kFantasyLeagueIdFieldNumber = 1,
    kOwnerAccountIdFieldNumber = 2,
    kFantasyTeamIndexFieldNumber = 3,
    kWinsFieldNumber = 6,
    kTeamLogoFieldNumber = 5,
    kLossesFieldNumber = 7,
  };
  // repeated uint32 current_roster = 8;
  int current_roster_size() const;
  private:
  int _internal_current_roster_size() const;
  public:
  void clear_current_roster();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_roster(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_current_roster() const;
  void _internal_add_current_roster(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_current_roster();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 current_roster(int index) const;
  void set_current_roster(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_current_roster(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      current_roster() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_current_roster();

  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id = 2;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fantasy_team_index = 3;
  bool has_fantasy_team_index() const;
  private:
  bool _internal_has_fantasy_team_index() const;
  public:
  void clear_fantasy_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index() const;
  void set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_team_index() const;
  void _internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 wins = 6;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 wins() const;
  void set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wins() const;
  void _internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 team_logo = 5;
  bool has_team_logo() const;
  private:
  bool _internal_has_team_logo() const;
  public:
  void clear_team_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo() const;
  void set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_team_logo() const;
  void _internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 losses = 7;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  ::PROTOBUF_NAMESPACE_ID::uint32 losses() const;
  void set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_losses() const;
  void _internal_set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > current_roster_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wins_;
  ::PROTOBUF_NAMESPACE_ID::uint64 team_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 losses_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamScoreRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamScoreRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamScoreRequest() : CMsgDOTAFantasyTeamScoreRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamScoreRequest();
  explicit constexpr CMsgDOTAFantasyTeamScoreRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamScoreRequest(const CMsgDOTAFantasyTeamScoreRequest& from);
  CMsgDOTAFantasyTeamScoreRequest(CMsgDOTAFantasyTeamScoreRequest&& from) noexcept
    : CMsgDOTAFantasyTeamScoreRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamScoreRequest& operator=(const CMsgDOTAFantasyTeamScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamScoreRequest& operator=(CMsgDOTAFantasyTeamScoreRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamScoreRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamScoreRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamScoreRequest*>(
               &_CMsgDOTAFantasyTeamScoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CMsgDOTAFantasyTeamScoreRequest& a, CMsgDOTAFantasyTeamScoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamScoreRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamScoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamScoreRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamScoreRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamScoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamScoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamScoreRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamScoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamScoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamScoreRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamScoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kOwnerAccountIdFieldNumber = 2,
    kFilterMatchIdFieldNumber = 4,
    kFantasyTeamIndexFieldNumber = 3,
    kFilterStartTimeFieldNumber = 5,
    kFilterEndTimeFieldNumber = 6,
    kIncludeBenchFieldNumber = 7,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id = 2;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 filter_match_id = 4;
  bool has_filter_match_id() const;
  private:
  bool _internal_has_filter_match_id() const;
  public:
  void clear_filter_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id() const;
  void set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filter_match_id() const;
  void _internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 fantasy_team_index = 3;
  bool has_fantasy_team_index() const;
  private:
  bool _internal_has_fantasy_team_index() const;
  public:
  void clear_fantasy_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index() const;
  void set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_team_index() const;
  void _internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_start_time = 5;
  bool has_filter_start_time() const;
  private:
  bool _internal_has_filter_start_time() const;
  public:
  void clear_filter_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time() const;
  void set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_start_time() const;
  void _internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_end_time = 6;
  bool has_filter_end_time() const;
  private:
  bool _internal_has_filter_end_time() const;
  public:
  void clear_filter_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time() const;
  void set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_end_time() const;
  void _internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool include_bench = 7;
  bool has_include_bench() const;
  private:
  bool _internal_has_include_bench() const;
  public:
  void clear_include_bench();
  bool include_bench() const;
  void set_include_bench(bool value);
  private:
  bool _internal_include_bench() const;
  void _internal_set_include_bench(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamScoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time_;
  bool include_bench_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore) */ {
 public:
  inline CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore() : CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore();
  explicit constexpr CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from);
  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore&& from) noexcept
    : CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& operator=(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& operator=(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore*>(
               &_CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& a, CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(nullptr);
  }

  CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from);
  void MergeFrom(const CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore";
  }
  protected:
  explicit CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float score = 2;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  float score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamScoreResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamScoreResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamScoreResponse() : CMsgDOTAFantasyTeamScoreResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamScoreResponse();
  explicit constexpr CMsgDOTAFantasyTeamScoreResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamScoreResponse(const CMsgDOTAFantasyTeamScoreResponse& from);
  CMsgDOTAFantasyTeamScoreResponse(CMsgDOTAFantasyTeamScoreResponse&& from) noexcept
    : CMsgDOTAFantasyTeamScoreResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamScoreResponse& operator=(const CMsgDOTAFantasyTeamScoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamScoreResponse& operator=(CMsgDOTAFantasyTeamScoreResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamScoreResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamScoreResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamScoreResponse*>(
               &_CMsgDOTAFantasyTeamScoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CMsgDOTAFantasyTeamScoreResponse& a, CMsgDOTAFantasyTeamScoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamScoreResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamScoreResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamScoreResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamScoreResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamScoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamScoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamScoreResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamScoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamScoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamScoreResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamScoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore CMsgPlayerScore;

  typedef CMsgDOTAFantasyTeamScoreResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamScoreResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_NO_PERMISSION;
  static constexpr EResult ERROR_OWNER_NOT_IN_LEAGUE =
    CMsgDOTAFantasyTeamScoreResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamScoreResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamScoreResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamScoreResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyPlayerScoreFieldNumber = 3,
    kResultFieldNumber = 1,
    kFantasyTeamScoreFieldNumber = 2,
  };
  // repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
  int fantasy_player_score_size() const;
  private:
  int _internal_fantasy_player_score_size() const;
  public:
  void clear_fantasy_player_score();
  ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* mutable_fantasy_player_score(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >*
      mutable_fantasy_player_score();
  private:
  const ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& _internal_fantasy_player_score(int index) const;
  ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* _internal_add_fantasy_player_score();
  public:
  const ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& fantasy_player_score(int index) const;
  ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* add_fantasy_player_score();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >&
      fantasy_player_score() const;

  // optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamScoreResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamScoreResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamScoreResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamScoreResponse_EResult value);
  public:

  // optional float fantasy_team_score = 2;
  bool has_fantasy_team_score() const;
  private:
  bool _internal_has_fantasy_team_score() const;
  public:
  void clear_fantasy_team_score();
  float fantasy_team_score() const;
  void set_fantasy_team_score(float value);
  private:
  float _internal_fantasy_team_score() const;
  void _internal_set_fantasy_team_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamScoreResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore > fantasy_player_score_;
  int result_;
  float fantasy_team_score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamStandingsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamStandingsRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamStandingsRequest() : CMsgDOTAFantasyTeamStandingsRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamStandingsRequest();
  explicit constexpr CMsgDOTAFantasyTeamStandingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamStandingsRequest(const CMsgDOTAFantasyTeamStandingsRequest& from);
  CMsgDOTAFantasyTeamStandingsRequest(CMsgDOTAFantasyTeamStandingsRequest&& from) noexcept
    : CMsgDOTAFantasyTeamStandingsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamStandingsRequest& operator=(const CMsgDOTAFantasyTeamStandingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamStandingsRequest& operator=(CMsgDOTAFantasyTeamStandingsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamStandingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamStandingsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamStandingsRequest*>(
               &_CMsgDOTAFantasyTeamStandingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CMsgDOTAFantasyTeamStandingsRequest& a, CMsgDOTAFantasyTeamStandingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamStandingsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamStandingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamStandingsRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamStandingsRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamStandingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamStandingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamStandingsRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamStandingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamStandingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamStandingsRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamStandingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kFilterStartTimeFieldNumber = 3,
    kFilterEndTimeFieldNumber = 4,
    kFilterMatchIdFieldNumber = 5,
    kFilterLastMatchFieldNumber = 6,
    kFilterInHallFieldNumber = 7,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_start_time = 3;
  bool has_filter_start_time() const;
  private:
  bool _internal_has_filter_start_time() const;
  public:
  void clear_filter_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time() const;
  void set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_start_time() const;
  void _internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_end_time = 4;
  bool has_filter_end_time() const;
  private:
  bool _internal_has_filter_end_time() const;
  public:
  void clear_filter_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time() const;
  void set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_end_time() const;
  void _internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 filter_match_id = 5;
  bool has_filter_match_id() const;
  private:
  bool _internal_has_filter_match_id() const;
  public:
  void clear_filter_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id() const;
  void set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filter_match_id() const;
  void _internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool filter_last_match = 6;
  bool has_filter_last_match() const;
  private:
  bool _internal_has_filter_last_match() const;
  public:
  void clear_filter_last_match();
  bool filter_last_match() const;
  void set_filter_last_match(bool value);
  private:
  bool _internal_filter_last_match() const;
  void _internal_set_filter_last_match(bool value);
  public:

  // optional bool filter_in_hall = 7;
  bool has_filter_in_hall() const;
  private:
  bool _internal_has_filter_in_hall() const;
  public:
  void clear_filter_in_hall();
  bool filter_in_hall() const;
  void set_filter_in_hall(bool value);
  private:
  bool _internal_filter_in_hall() const;
  void _internal_set_filter_in_hall(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamStandingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id_;
  bool filter_last_match_;
  bool filter_in_hall_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore) */ {
 public:
  inline CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore() : CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore();
  explicit constexpr CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from);
  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore&& from) noexcept
    : CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& operator=(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& operator=(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore*>(
               &_CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& a, CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(nullptr);
  }

  CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from);
  void MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore";
  }
  protected:
  explicit CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerNameFieldNumber = 5,
    kFantasyTeamNameFieldNumber = 6,
    kFantasyLeagueIdFieldNumber = 1,
    kOwnerAccountIdFieldNumber = 2,
    kFantasyTeamLogoFieldNumber = 4,
    kFantasyTeamIndexFieldNumber = 3,
    kScoreFieldNumber = 7,
    kScoreAgainstFieldNumber = 8,
    kWinsFieldNumber = 9,
    kLossesFieldNumber = 10,
    kStreakFieldNumber = 11,
  };
  // optional string owner_name = 5;
  bool has_owner_name() const;
  private:
  bool _internal_has_owner_name() const;
  public:
  void clear_owner_name();
  const std::string& owner_name() const;
  void set_owner_name(const std::string& value);
  void set_owner_name(std::string&& value);
  void set_owner_name(const char* value);
  void set_owner_name(const char* value, size_t size);
  std::string* mutable_owner_name();
  std::string* release_owner_name();
  void set_allocated_owner_name(std::string* owner_name);
  private:
  const std::string& _internal_owner_name() const;
  void _internal_set_owner_name(const std::string& value);
  std::string* _internal_mutable_owner_name();
  public:

  // optional string fantasy_team_name = 6;
  bool has_fantasy_team_name() const;
  private:
  bool _internal_has_fantasy_team_name() const;
  public:
  void clear_fantasy_team_name();
  const std::string& fantasy_team_name() const;
  void set_fantasy_team_name(const std::string& value);
  void set_fantasy_team_name(std::string&& value);
  void set_fantasy_team_name(const char* value);
  void set_fantasy_team_name(const char* value, size_t size);
  std::string* mutable_fantasy_team_name();
  std::string* release_fantasy_team_name();
  void set_allocated_fantasy_team_name(std::string* fantasy_team_name);
  private:
  const std::string& _internal_fantasy_team_name() const;
  void _internal_set_fantasy_team_name(const std::string& value);
  std::string* _internal_mutable_fantasy_team_name();
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id = 2;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 fantasy_team_logo = 4;
  bool has_fantasy_team_logo() const;
  private:
  bool _internal_has_fantasy_team_logo() const;
  public:
  void clear_fantasy_team_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 fantasy_team_logo() const;
  void set_fantasy_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fantasy_team_logo() const;
  void _internal_set_fantasy_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 fantasy_team_index = 3;
  bool has_fantasy_team_index() const;
  private:
  bool _internal_has_fantasy_team_index() const;
  public:
  void clear_fantasy_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index() const;
  void set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_team_index() const;
  void _internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float score = 7;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional float score_against = 8;
  bool has_score_against() const;
  private:
  bool _internal_has_score_against() const;
  public:
  void clear_score_against();
  float score_against() const;
  void set_score_against(float value);
  private:
  float _internal_score_against() const;
  void _internal_set_score_against(float value);
  public:

  // optional uint32 wins = 9;
  bool has_wins() const;
  private:
  bool _internal_has_wins() const;
  public:
  void clear_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 wins() const;
  void set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wins() const;
  void _internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 losses = 10;
  bool has_losses() const;
  private:
  bool _internal_has_losses() const;
  public:
  void clear_losses();
  ::PROTOBUF_NAMESPACE_ID::uint32 losses() const;
  void set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_losses() const;
  void _internal_set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 streak = 11;
  bool has_streak() const;
  private:
  bool _internal_has_streak() const;
  public:
  void clear_streak();
  ::PROTOBUF_NAMESPACE_ID::int32 streak() const;
  void set_streak(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_streak() const;
  void _internal_set_streak(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fantasy_team_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index_;
  float score_;
  float score_against_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 losses_;
  ::PROTOBUF_NAMESPACE_ID::int32 streak_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamStandingsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamStandingsResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamStandingsResponse() : CMsgDOTAFantasyTeamStandingsResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamStandingsResponse();
  explicit constexpr CMsgDOTAFantasyTeamStandingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamStandingsResponse(const CMsgDOTAFantasyTeamStandingsResponse& from);
  CMsgDOTAFantasyTeamStandingsResponse(CMsgDOTAFantasyTeamStandingsResponse&& from) noexcept
    : CMsgDOTAFantasyTeamStandingsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamStandingsResponse& operator=(const CMsgDOTAFantasyTeamStandingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamStandingsResponse& operator=(CMsgDOTAFantasyTeamStandingsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamStandingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamStandingsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamStandingsResponse*>(
               &_CMsgDOTAFantasyTeamStandingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CMsgDOTAFantasyTeamStandingsResponse& a, CMsgDOTAFantasyTeamStandingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamStandingsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamStandingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamStandingsResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamStandingsResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamStandingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamStandingsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamStandingsResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamStandingsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamStandingsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamStandingsResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamStandingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore CMsgTeamScore;

  typedef CMsgDOTAFantasyTeamStandingsResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamStandingsResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamStandingsResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyTeamStandingsResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamStandingsResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamStandingsResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamStandingsResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTeamScoresFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
  int team_scores_size() const;
  private:
  int _internal_team_scores_size() const;
  public:
  void clear_team_scores();
  ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* mutable_team_scores(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >*
      mutable_team_scores();
  private:
  const ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& _internal_team_scores(int index) const;
  ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* _internal_add_team_scores();
  public:
  const ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& team_scores(int index) const;
  ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* add_team_scores();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >&
      team_scores() const;

  // optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamStandingsResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamStandingsResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamStandingsResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamStandingsResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamStandingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore > team_scores_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerScoreRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerScoreRequest) */ {
 public:
  inline CMsgDOTAFantasyPlayerScoreRequest() : CMsgDOTAFantasyPlayerScoreRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerScoreRequest();
  explicit constexpr CMsgDOTAFantasyPlayerScoreRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerScoreRequest(const CMsgDOTAFantasyPlayerScoreRequest& from);
  CMsgDOTAFantasyPlayerScoreRequest(CMsgDOTAFantasyPlayerScoreRequest&& from) noexcept
    : CMsgDOTAFantasyPlayerScoreRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerScoreRequest& operator=(const CMsgDOTAFantasyPlayerScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerScoreRequest& operator=(CMsgDOTAFantasyPlayerScoreRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerScoreRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerScoreRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerScoreRequest*>(
               &_CMsgDOTAFantasyPlayerScoreRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CMsgDOTAFantasyPlayerScoreRequest& a, CMsgDOTAFantasyPlayerScoreRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerScoreRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerScoreRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerScoreRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreRequest>(nullptr);
  }

  CMsgDOTAFantasyPlayerScoreRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerScoreRequest& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerScoreRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerScoreRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerScoreRequest";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerScoreRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kPlayerAccountIdFieldNumber = 2,
    kFilterStartTimeFieldNumber = 3,
    kFilterEndTimeFieldNumber = 4,
    kFilterMatchIdFieldNumber = 5,
    kFilterLastMatchFieldNumber = 6,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id() const;
  void set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id() const;
  void _internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_start_time = 3;
  bool has_filter_start_time() const;
  private:
  bool _internal_has_filter_start_time() const;
  public:
  void clear_filter_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time() const;
  void set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_start_time() const;
  void _internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_end_time = 4;
  bool has_filter_end_time() const;
  private:
  bool _internal_has_filter_end_time() const;
  public:
  void clear_filter_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time() const;
  void set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_end_time() const;
  void _internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 filter_match_id = 5;
  bool has_filter_match_id() const;
  private:
  bool _internal_has_filter_match_id() const;
  public:
  void clear_filter_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id() const;
  void set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filter_match_id() const;
  void _internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool filter_last_match = 6;
  bool has_filter_last_match() const;
  private:
  bool _internal_has_filter_last_match() const;
  public:
  void clear_filter_last_match();
  bool filter_last_match() const;
  void set_filter_last_match(bool value);
  private:
  bool _internal_filter_last_match() const;
  void _internal_set_filter_last_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerScoreRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id_;
  bool filter_last_match_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerScoreResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerScoreResponse) */ {
 public:
  inline CMsgDOTAFantasyPlayerScoreResponse() : CMsgDOTAFantasyPlayerScoreResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerScoreResponse();
  explicit constexpr CMsgDOTAFantasyPlayerScoreResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerScoreResponse(const CMsgDOTAFantasyPlayerScoreResponse& from);
  CMsgDOTAFantasyPlayerScoreResponse(CMsgDOTAFantasyPlayerScoreResponse&& from) noexcept
    : CMsgDOTAFantasyPlayerScoreResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerScoreResponse& operator=(const CMsgDOTAFantasyPlayerScoreResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerScoreResponse& operator=(CMsgDOTAFantasyPlayerScoreResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerScoreResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerScoreResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerScoreResponse*>(
               &_CMsgDOTAFantasyPlayerScoreResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CMsgDOTAFantasyPlayerScoreResponse& a, CMsgDOTAFantasyPlayerScoreResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerScoreResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerScoreResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerScoreResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreResponse>(nullptr);
  }

  CMsgDOTAFantasyPlayerScoreResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerScoreResponse& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerScoreResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerScoreResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerScoreResponse";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerScoreResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyPlayerScoreResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyPlayerScoreResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyPlayerScoreResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyPlayerScoreResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyPlayerScoreResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyPlayerScoreResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyPlayerScoreResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 4,
    kResultFieldNumber = 1,
    kFantasyLeagueIdFieldNumber = 2,
    kPlayerAccountIdFieldNumber = 3,
    kScoreFieldNumber = 5,
  };
  // optional string player_name = 4;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyPlayerScoreResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyPlayerScoreResponse_EResult value);
  private:
  ::CMsgDOTAFantasyPlayerScoreResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyPlayerScoreResponse_EResult value);
  public:

  // optional uint32 fantasy_league_id = 2;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id = 3;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id() const;
  void set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id() const;
  void _internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float score = 5;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerScoreResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_;
  float score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStandingsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerStandingsRequest) */ {
 public:
  inline CMsgDOTAFantasyPlayerStandingsRequest() : CMsgDOTAFantasyPlayerStandingsRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerStandingsRequest();
  explicit constexpr CMsgDOTAFantasyPlayerStandingsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerStandingsRequest(const CMsgDOTAFantasyPlayerStandingsRequest& from);
  CMsgDOTAFantasyPlayerStandingsRequest(CMsgDOTAFantasyPlayerStandingsRequest&& from) noexcept
    : CMsgDOTAFantasyPlayerStandingsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerStandingsRequest& operator=(const CMsgDOTAFantasyPlayerStandingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerStandingsRequest& operator=(CMsgDOTAFantasyPlayerStandingsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerStandingsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerStandingsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerStandingsRequest*>(
               &_CMsgDOTAFantasyPlayerStandingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CMsgDOTAFantasyPlayerStandingsRequest& a, CMsgDOTAFantasyPlayerStandingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerStandingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerStandingsRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStandingsRequest>(nullptr);
  }

  CMsgDOTAFantasyPlayerStandingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStandingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerStandingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerStandingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerStandingsRequest";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerStandingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kCountFieldNumber = 2,
    kRoleFieldNumber = 3,
    kFilterStartTimeFieldNumber = 4,
    kFilterMatchIdFieldNumber = 6,
    kFilterEndTimeFieldNumber = 5,
    kFilterLastMatchFieldNumber = 7,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 count = 2;
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 role = 3;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 filter_start_time = 4;
  bool has_filter_start_time() const;
  private:
  bool _internal_has_filter_start_time() const;
  public:
  void clear_filter_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time() const;
  void set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_start_time() const;
  void _internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 filter_match_id = 6;
  bool has_filter_match_id() const;
  private:
  bool _internal_has_filter_match_id() const;
  public:
  void clear_filter_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id() const;
  void set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_filter_match_id() const;
  void _internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 filter_end_time = 5;
  bool has_filter_end_time() const;
  private:
  bool _internal_has_filter_end_time() const;
  public:
  void clear_filter_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time() const;
  void set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_filter_end_time() const;
  void _internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool filter_last_match = 7;
  bool has_filter_last_match() const;
  private:
  bool _internal_has_filter_last_match() const;
  public:
  void clear_filter_last_match();
  bool filter_last_match() const;
  void set_filter_last_match(bool value);
  private:
  bool _internal_filter_last_match() const;
  void _internal_set_filter_last_match(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerStandingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 filter_match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 filter_end_time_;
  bool filter_last_match_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore) */ {
 public:
  inline CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore() : CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore();
  explicit constexpr CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from);
  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore&& from) noexcept
    : CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& operator=(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& operator=(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore*>(
               &_CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& a, CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(nullptr);
  }

  CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kPlayerAccountIdFieldNumber = 1,
    kScoreFieldNumber = 3,
  };
  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional uint32 player_account_id = 1;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id() const;
  void set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id() const;
  void _internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float score = 3;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_;
  float score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerStandingsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerStandingsResponse) */ {
 public:
  inline CMsgDOTAFantasyPlayerStandingsResponse() : CMsgDOTAFantasyPlayerStandingsResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerStandingsResponse();
  explicit constexpr CMsgDOTAFantasyPlayerStandingsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerStandingsResponse(const CMsgDOTAFantasyPlayerStandingsResponse& from);
  CMsgDOTAFantasyPlayerStandingsResponse(CMsgDOTAFantasyPlayerStandingsResponse&& from) noexcept
    : CMsgDOTAFantasyPlayerStandingsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerStandingsResponse& operator=(const CMsgDOTAFantasyPlayerStandingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerStandingsResponse& operator=(CMsgDOTAFantasyPlayerStandingsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerStandingsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerStandingsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerStandingsResponse*>(
               &_CMsgDOTAFantasyPlayerStandingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CMsgDOTAFantasyPlayerStandingsResponse& a, CMsgDOTAFantasyPlayerStandingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerStandingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerStandingsResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStandingsResponse>(nullptr);
  }

  CMsgDOTAFantasyPlayerStandingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerStandingsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerStandingsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerStandingsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerStandingsResponse";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerStandingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore CMsgPlayerScore;

  typedef CMsgDOTAFantasyPlayerStandingsResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyPlayerStandingsResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyPlayerStandingsResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyPlayerStandingsResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerScoresFieldNumber = 4,
    kResultFieldNumber = 1,
    kFantasyLeagueIdFieldNumber = 2,
    kRoleFieldNumber = 3,
  };
  // repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
  int player_scores_size() const;
  private:
  int _internal_player_scores_size() const;
  public:
  void clear_player_scores();
  ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* mutable_player_scores(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >*
      mutable_player_scores();
  private:
  const ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& _internal_player_scores(int index) const;
  ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* _internal_add_player_scores();
  public:
  const ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& player_scores(int index) const;
  ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* add_player_scores();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >&
      player_scores() const;

  // optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyPlayerStandingsResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyPlayerStandingsResponse_EResult value);
  private:
  ::CMsgDOTAFantasyPlayerStandingsResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyPlayerStandingsResponse_EResult value);
  public:

  // optional uint32 fantasy_league_id = 2;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 role = 3;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::PROTOBUF_NAMESPACE_ID::uint32 role() const;
  void set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_role() const;
  void _internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerStandingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore > player_scores_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 role_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueCreateRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueCreateRequest() : CMsgDOTAFantasyLeagueCreateRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueCreateRequest();
  explicit constexpr CMsgDOTAFantasyLeagueCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueCreateRequest(const CMsgDOTAFantasyLeagueCreateRequest& from);
  CMsgDOTAFantasyLeagueCreateRequest(CMsgDOTAFantasyLeagueCreateRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueCreateRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueCreateRequest& operator=(const CMsgDOTAFantasyLeagueCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueCreateRequest& operator=(CMsgDOTAFantasyLeagueCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueCreateRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueCreateRequest*>(
               &_CMsgDOTAFantasyLeagueCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CMsgDOTAFantasyLeagueCreateRequest& a, CMsgDOTAFantasyLeagueCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueCreateRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueCreateRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueCreateRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueCreateRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kTeamNameFieldNumber = 4,
    kLogoFieldNumber = 5,
    kTicketItemIdFieldNumber = 6,
    kSeasonIdFieldNumber = 1,
  };
  // optional string fantasy_league_name = 2;
  bool has_fantasy_league_name() const;
  private:
  bool _internal_has_fantasy_league_name() const;
  public:
  void clear_fantasy_league_name();
  const std::string& fantasy_league_name() const;
  void set_fantasy_league_name(const std::string& value);
  void set_fantasy_league_name(std::string&& value);
  void set_fantasy_league_name(const char* value);
  void set_fantasy_league_name(const char* value, size_t size);
  std::string* mutable_fantasy_league_name();
  std::string* release_fantasy_league_name();
  void set_allocated_fantasy_league_name(std::string* fantasy_league_name);
  private:
  const std::string& _internal_fantasy_league_name() const;
  void _internal_set_fantasy_league_name(const std::string& value);
  std::string* _internal_mutable_fantasy_league_name();
  public:

  // optional string password = 3;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string team_name = 4;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint64 logo = 5;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 logo() const;
  void set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_logo() const;
  void _internal_set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ticket_item_id = 6;
  bool has_ticket_item_id() const;
  private:
  bool _internal_has_ticket_item_id() const;
  public:
  void clear_ticket_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_item_id() const;
  void set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ticket_item_id() const;
  void _internal_set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 season_id = 1;
  bool has_season_id() const;
  private:
  bool _internal_has_season_id() const;
  public:
  void clear_season_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 season_id() const;
  void set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_season_id() const;
  void _internal_set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fantasy_league_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 season_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueCreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueCreateResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueCreateResponse() : CMsgDOTAFantasyLeagueCreateResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueCreateResponse();
  explicit constexpr CMsgDOTAFantasyLeagueCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueCreateResponse(const CMsgDOTAFantasyLeagueCreateResponse& from);
  CMsgDOTAFantasyLeagueCreateResponse(CMsgDOTAFantasyLeagueCreateResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueCreateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueCreateResponse& operator=(const CMsgDOTAFantasyLeagueCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueCreateResponse& operator=(CMsgDOTAFantasyLeagueCreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueCreateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueCreateResponse*>(
               &_CMsgDOTAFantasyLeagueCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CMsgDOTAFantasyLeagueCreateResponse& a, CMsgDOTAFantasyLeagueCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueCreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueCreateResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueCreateResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueCreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueCreateResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueCreateResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueCreateResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_NO_PERMISSION;
  static constexpr EResult ERROR_BAD_SEASON_ID =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_BAD_SEASON_ID;
  static constexpr EResult ERROR_BAD_LEAGUE_NAME =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_BAD_LEAGUE_NAME;
  static constexpr EResult ERROR_BAD_TEAM_NAME =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_BAD_TEAM_NAME;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_FAILED_LOGO_UPLOAD =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_FAILED_LOGO_UPLOAD;
  static constexpr EResult ERROR_NO_TICKET =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_ERROR_NO_TICKET;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueCreateResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueCreateResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueCreateResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kFantasyLeagueIdFieldNumber = 2,
  };
  // optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueCreateResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueCreateResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueCreateResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueCreateResponse_EResult value);
  public:

  // optional uint32 fantasy_league_id = 2;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamCreateRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamCreateRequest() : CMsgDOTAFantasyTeamCreateRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamCreateRequest();
  explicit constexpr CMsgDOTAFantasyTeamCreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamCreateRequest(const CMsgDOTAFantasyTeamCreateRequest& from);
  CMsgDOTAFantasyTeamCreateRequest(CMsgDOTAFantasyTeamCreateRequest&& from) noexcept
    : CMsgDOTAFantasyTeamCreateRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamCreateRequest& operator=(const CMsgDOTAFantasyTeamCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamCreateRequest& operator=(CMsgDOTAFantasyTeamCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamCreateRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamCreateRequest*>(
               &_CMsgDOTAFantasyTeamCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CMsgDOTAFantasyTeamCreateRequest& a, CMsgDOTAFantasyTeamCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamCreateRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamCreateRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamCreateRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamCreateRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kTeamNameFieldNumber = 3,
    kLogoFieldNumber = 4,
    kTicketItemIdFieldNumber = 5,
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional string team_name = 3;
  bool has_team_name() const;
  private:
  bool _internal_has_team_name() const;
  public:
  void clear_team_name();
  const std::string& team_name() const;
  void set_team_name(const std::string& value);
  void set_team_name(std::string&& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  std::string* mutable_team_name();
  std::string* release_team_name();
  void set_allocated_team_name(std::string* team_name);
  private:
  const std::string& _internal_team_name() const;
  void _internal_set_team_name(const std::string& value);
  std::string* _internal_mutable_team_name();
  public:

  // optional uint64 logo = 4;
  bool has_logo() const;
  private:
  bool _internal_has_logo() const;
  public:
  void clear_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 logo() const;
  void set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_logo() const;
  void _internal_set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ticket_item_id = 5;
  bool has_ticket_item_id() const;
  private:
  bool _internal_has_ticket_item_id() const;
  public:
  void clear_ticket_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_item_id() const;
  void set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ticket_item_id() const;
  void _internal_set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 logo_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ticket_item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamCreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamCreateResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamCreateResponse() : CMsgDOTAFantasyTeamCreateResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamCreateResponse();
  explicit constexpr CMsgDOTAFantasyTeamCreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamCreateResponse(const CMsgDOTAFantasyTeamCreateResponse& from);
  CMsgDOTAFantasyTeamCreateResponse(CMsgDOTAFantasyTeamCreateResponse&& from) noexcept
    : CMsgDOTAFantasyTeamCreateResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamCreateResponse& operator=(const CMsgDOTAFantasyTeamCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamCreateResponse& operator=(CMsgDOTAFantasyTeamCreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamCreateResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamCreateResponse*>(
               &_CMsgDOTAFantasyTeamCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CMsgDOTAFantasyTeamCreateResponse& a, CMsgDOTAFantasyTeamCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamCreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamCreateResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamCreateResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamCreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamCreateResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamCreateResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamCreateResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamCreateResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_NO_PERMISSION;
  static constexpr EResult ERROR_FAILED_LOGO_UPLOAD =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_FAILED_LOGO_UPLOAD;
  static constexpr EResult ERROR_BAD_FANTASY_LEAGUE_ID =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_BAD_FANTASY_LEAGUE_ID;
  static constexpr EResult ERROR_BAD_NAME =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_BAD_NAME;
  static constexpr EResult ERROR_FULL =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_FULL;
  static constexpr EResult ERROR_ALREADY_MEMBER =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_ALREADY_MEMBER;
  static constexpr EResult ERROR_BAD_PASSWORD =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_BAD_PASSWORD;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_TICKET =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_NO_TICKET;
  static constexpr EResult ERROR_LEAGUE_LOCKED =
    CMsgDOTAFantasyTeamCreateResponse_EResult_ERROR_LEAGUE_LOCKED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamCreateResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamCreateResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamCreateResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kFantasyTeamIndexFieldNumber = 2,
  };
  // optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamCreateResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamCreateResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamCreateResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamCreateResponse_EResult value);
  public:

  // optional uint32 fantasy_team_index = 2;
  bool has_fantasy_team_index() const;
  private:
  bool _internal_has_fantasy_team_index() const;
  public:
  void clear_fantasy_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index() const;
  void set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_team_index() const;
  void _internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange) */ {
 public:
  inline CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange() : CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange();
  explicit constexpr CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from);
  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange&& from) noexcept
    : CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& operator=(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& operator=(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange*>(
               &_CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& a, CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(nullptr);
  }

  CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kInvitedFieldNumber = 2,
  };
  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool invited = 2;
  bool has_invited() const;
  private:
  bool _internal_has_invited() const;
  public:
  void clear_invited();
  bool invited() const;
  void set_invited(bool value);
  private:
  bool _internal_invited() const;
  void _internal_set_invited(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  bool invited_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueEditInvitesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueEditInvitesRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueEditInvitesRequest() : CMsgDOTAFantasyLeagueEditInvitesRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueEditInvitesRequest();
  explicit constexpr CMsgDOTAFantasyLeagueEditInvitesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueEditInvitesRequest(const CMsgDOTAFantasyLeagueEditInvitesRequest& from);
  CMsgDOTAFantasyLeagueEditInvitesRequest(CMsgDOTAFantasyLeagueEditInvitesRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueEditInvitesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueEditInvitesRequest& operator=(const CMsgDOTAFantasyLeagueEditInvitesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueEditInvitesRequest& operator=(CMsgDOTAFantasyLeagueEditInvitesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueEditInvitesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueEditInvitesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueEditInvitesRequest*>(
               &_CMsgDOTAFantasyLeagueEditInvitesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CMsgDOTAFantasyLeagueEditInvitesRequest& a, CMsgDOTAFantasyLeagueEditInvitesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueEditInvitesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueEditInvitesRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInvitesRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueEditInvitesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInvitesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueEditInvitesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueEditInvitesRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueEditInvitesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange InviteChange;

  // accessors -------------------------------------------------------

  enum : int {
    kInviteChangeFieldNumber = 3,
    kPasswordFieldNumber = 2,
    kFantasyLeagueIdFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
  int invite_change_size() const;
  private:
  int _internal_invite_change_size() const;
  public:
  void clear_invite_change();
  ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* mutable_invite_change(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >*
      mutable_invite_change();
  private:
  const ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& _internal_invite_change(int index) const;
  ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* _internal_add_invite_change();
  public:
  const ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& invite_change(int index) const;
  ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* add_invite_change();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >&
      invite_change() const;

  // optional string password = 2;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueEditInvitesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange > invite_change_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueEditInvitesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueEditInvitesResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueEditInvitesResponse() : CMsgDOTAFantasyLeagueEditInvitesResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueEditInvitesResponse();
  explicit constexpr CMsgDOTAFantasyLeagueEditInvitesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueEditInvitesResponse(const CMsgDOTAFantasyLeagueEditInvitesResponse& from);
  CMsgDOTAFantasyLeagueEditInvitesResponse(CMsgDOTAFantasyLeagueEditInvitesResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueEditInvitesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueEditInvitesResponse& operator=(const CMsgDOTAFantasyLeagueEditInvitesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueEditInvitesResponse& operator=(CMsgDOTAFantasyLeagueEditInvitesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueEditInvitesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueEditInvitesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueEditInvitesResponse*>(
               &_CMsgDOTAFantasyLeagueEditInvitesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CMsgDOTAFantasyLeagueEditInvitesResponse& a, CMsgDOTAFantasyLeagueEditInvitesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueEditInvitesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueEditInvitesResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInvitesResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueEditInvitesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueEditInvitesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueEditInvitesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueEditInvitesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueEditInvitesResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueEditInvitesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueEditInvitesResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_ERROR_UNSPECIFIED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueEditInvitesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueDraftStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueDraftStatusRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueDraftStatusRequest() : CMsgDOTAFantasyLeagueDraftStatusRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueDraftStatusRequest();
  explicit constexpr CMsgDOTAFantasyLeagueDraftStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueDraftStatusRequest(const CMsgDOTAFantasyLeagueDraftStatusRequest& from);
  CMsgDOTAFantasyLeagueDraftStatusRequest(CMsgDOTAFantasyLeagueDraftStatusRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueDraftStatusRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueDraftStatusRequest& operator=(const CMsgDOTAFantasyLeagueDraftStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueDraftStatusRequest& operator=(CMsgDOTAFantasyLeagueDraftStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueDraftStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueDraftStatusRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueDraftStatusRequest*>(
               &_CMsgDOTAFantasyLeagueDraftStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CMsgDOTAFantasyLeagueDraftStatusRequest& a, CMsgDOTAFantasyLeagueDraftStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueDraftStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueDraftStatusRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftStatusRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueDraftStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueDraftStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueDraftStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueDraftStatusRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueDraftStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueDraftStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueDraftStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueDraftStatus) */ {
 public:
  inline CMsgDOTAFantasyLeagueDraftStatus() : CMsgDOTAFantasyLeagueDraftStatus(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueDraftStatus();
  explicit constexpr CMsgDOTAFantasyLeagueDraftStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueDraftStatus(const CMsgDOTAFantasyLeagueDraftStatus& from);
  CMsgDOTAFantasyLeagueDraftStatus(CMsgDOTAFantasyLeagueDraftStatus&& from) noexcept
    : CMsgDOTAFantasyLeagueDraftStatus() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueDraftStatus& operator=(const CMsgDOTAFantasyLeagueDraftStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueDraftStatus& operator=(CMsgDOTAFantasyLeagueDraftStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueDraftStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueDraftStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueDraftStatus*>(
               &_CMsgDOTAFantasyLeagueDraftStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CMsgDOTAFantasyLeagueDraftStatus& a, CMsgDOTAFantasyLeagueDraftStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueDraftStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueDraftStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueDraftStatus* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftStatus>(nullptr);
  }

  CMsgDOTAFantasyLeagueDraftStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueDraftStatus& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueDraftStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueDraftStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueDraftStatus";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueDraftStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDraftOrderFieldNumber = 2,
    kAvailablePlayersFieldNumber = 7,
    kFantasyLeagueIdFieldNumber = 1,
    kCurrentPickFieldNumber = 3,
    kTimeRemainingFieldNumber = 4,
    kPendingResumeFieldNumber = 5,
    kCompletedFieldNumber = 6,
  };
  // repeated uint32 draft_order = 2;
  int draft_order_size() const;
  private:
  int _internal_draft_order_size() const;
  public:
  void clear_draft_order();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_draft_order(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_draft_order() const;
  void _internal_add_draft_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_draft_order();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 draft_order(int index) const;
  void set_draft_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_draft_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      draft_order() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_draft_order();

  // repeated uint32 available_players = 7;
  int available_players_size() const;
  private:
  int _internal_available_players_size() const;
  public:
  void clear_available_players();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_available_players(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_available_players() const;
  void _internal_add_available_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_available_players();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 available_players(int index) const;
  void set_available_players(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_available_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      available_players() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_available_players();

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 current_pick = 3;
  bool has_current_pick() const;
  private:
  bool _internal_has_current_pick() const;
  public:
  void clear_current_pick();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_pick() const;
  void set_current_pick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_pick() const;
  void _internal_set_current_pick(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_remaining = 4;
  bool has_time_remaining() const;
  private:
  bool _internal_has_time_remaining() const;
  public:
  void clear_time_remaining();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_remaining() const;
  void set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_remaining() const;
  void _internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool pending_resume = 5;
  bool has_pending_resume() const;
  private:
  bool _internal_has_pending_resume() const;
  public:
  void clear_pending_resume();
  bool pending_resume() const;
  void set_pending_resume(bool value);
  private:
  bool _internal_pending_resume() const;
  void _internal_set_pending_resume(bool value);
  public:

  // optional bool completed = 6;
  bool has_completed() const;
  private:
  bool _internal_has_completed() const;
  public:
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueDraftStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > draft_order_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > available_players_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_pick_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_remaining_;
  bool pending_resume_;
  bool completed_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueDraftPlayerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueDraftPlayerRequest) */ {
 public:
  inline CMsgDOTAFantasyLeagueDraftPlayerRequest() : CMsgDOTAFantasyLeagueDraftPlayerRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueDraftPlayerRequest();
  explicit constexpr CMsgDOTAFantasyLeagueDraftPlayerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueDraftPlayerRequest(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from);
  CMsgDOTAFantasyLeagueDraftPlayerRequest(CMsgDOTAFantasyLeagueDraftPlayerRequest&& from) noexcept
    : CMsgDOTAFantasyLeagueDraftPlayerRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueDraftPlayerRequest& operator=(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueDraftPlayerRequest& operator=(CMsgDOTAFantasyLeagueDraftPlayerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueDraftPlayerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueDraftPlayerRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueDraftPlayerRequest*>(
               &_CMsgDOTAFantasyLeagueDraftPlayerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CMsgDOTAFantasyLeagueDraftPlayerRequest& a, CMsgDOTAFantasyLeagueDraftPlayerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueDraftPlayerRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftPlayerRequest>(nullptr);
  }

  CMsgDOTAFantasyLeagueDraftPlayerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftPlayerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueDraftPlayerRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueDraftPlayerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kTeamIndexFieldNumber = 2,
    kPlayerAccountIdFieldNumber = 3,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index = 2;
  bool has_team_index() const;
  private:
  bool _internal_has_team_index() const;
  public:
  void clear_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index() const;
  void set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index() const;
  void _internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id = 3;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id() const;
  void set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id() const;
  void _internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueDraftPlayerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeagueDraftPlayerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeagueDraftPlayerResponse) */ {
 public:
  inline CMsgDOTAFantasyLeagueDraftPlayerResponse() : CMsgDOTAFantasyLeagueDraftPlayerResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeagueDraftPlayerResponse();
  explicit constexpr CMsgDOTAFantasyLeagueDraftPlayerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeagueDraftPlayerResponse(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from);
  CMsgDOTAFantasyLeagueDraftPlayerResponse(CMsgDOTAFantasyLeagueDraftPlayerResponse&& from) noexcept
    : CMsgDOTAFantasyLeagueDraftPlayerResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeagueDraftPlayerResponse& operator=(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeagueDraftPlayerResponse& operator=(CMsgDOTAFantasyLeagueDraftPlayerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeagueDraftPlayerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeagueDraftPlayerResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeagueDraftPlayerResponse*>(
               &_CMsgDOTAFantasyLeagueDraftPlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CMsgDOTAFantasyLeagueDraftPlayerResponse& a, CMsgDOTAFantasyLeagueDraftPlayerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeagueDraftPlayerResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftPlayerResponse>(nullptr);
  }

  CMsgDOTAFantasyLeagueDraftPlayerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeagueDraftPlayerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeagueDraftPlayerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeagueDraftPlayerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeagueDraftPlayerResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeagueDraftPlayerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_INVALID_FANTASY_LEAGUE =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_INVALID_FANTASY_LEAGUE;
  static constexpr EResult ERROR_FANTASY_LEAGUE_NOT_DRAFTING =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_FANTASY_LEAGUE_NOT_DRAFTING;
  static constexpr EResult ERROR_OWNER_NOT_IN_LEAGUE =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
  static constexpr EResult ERROR_NOT_OWNERS_TURN =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_NOT_OWNERS_TURN;
  static constexpr EResult ERROR_PLAYER_INVALID =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_INVALID;
  static constexpr EResult ERROR_PLAYER_UNAVAILABLE =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_UNAVAILABLE;
  static constexpr EResult ERROR_PLAYER_NO_VALID_SLOTS =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_ERROR_PLAYER_NO_VALID_SLOTS;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeagueDraftPlayerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamRosterSwapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamRosterSwapRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamRosterSwapRequest() : CMsgDOTAFantasyTeamRosterSwapRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamRosterSwapRequest();
  explicit constexpr CMsgDOTAFantasyTeamRosterSwapRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamRosterSwapRequest(const CMsgDOTAFantasyTeamRosterSwapRequest& from);
  CMsgDOTAFantasyTeamRosterSwapRequest(CMsgDOTAFantasyTeamRosterSwapRequest&& from) noexcept
    : CMsgDOTAFantasyTeamRosterSwapRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamRosterSwapRequest& operator=(const CMsgDOTAFantasyTeamRosterSwapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamRosterSwapRequest& operator=(CMsgDOTAFantasyTeamRosterSwapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamRosterSwapRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamRosterSwapRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamRosterSwapRequest*>(
               &_CMsgDOTAFantasyTeamRosterSwapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CMsgDOTAFantasyTeamRosterSwapRequest& a, CMsgDOTAFantasyTeamRosterSwapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamRosterSwapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamRosterSwapRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterSwapRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamRosterSwapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterSwapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamRosterSwapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamRosterSwapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamRosterSwapRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamRosterSwapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kTeamIndexFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kSlot1FieldNumber = 4,
    kSlot2FieldNumber = 5,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index = 2;
  bool has_team_index() const;
  private:
  bool _internal_has_team_index() const;
  public:
  void clear_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index() const;
  void set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index() const;
  void _internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_1 = 4;
  bool has_slot_1() const;
  private:
  bool _internal_has_slot_1() const;
  public:
  void clear_slot_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_1() const;
  void set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_1() const;
  void _internal_set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 slot_2 = 5;
  bool has_slot_2() const;
  private:
  bool _internal_has_slot_2() const;
  public:
  void clear_slot_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_2() const;
  void set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot_2() const;
  void _internal_set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamRosterSwapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_2_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamRosterSwapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamRosterSwapResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamRosterSwapResponse() : CMsgDOTAFantasyTeamRosterSwapResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamRosterSwapResponse();
  explicit constexpr CMsgDOTAFantasyTeamRosterSwapResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamRosterSwapResponse(const CMsgDOTAFantasyTeamRosterSwapResponse& from);
  CMsgDOTAFantasyTeamRosterSwapResponse(CMsgDOTAFantasyTeamRosterSwapResponse&& from) noexcept
    : CMsgDOTAFantasyTeamRosterSwapResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamRosterSwapResponse& operator=(const CMsgDOTAFantasyTeamRosterSwapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamRosterSwapResponse& operator=(CMsgDOTAFantasyTeamRosterSwapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamRosterSwapResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamRosterSwapResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamRosterSwapResponse*>(
               &_CMsgDOTAFantasyTeamRosterSwapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CMsgDOTAFantasyTeamRosterSwapResponse& a, CMsgDOTAFantasyTeamRosterSwapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamRosterSwapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamRosterSwapResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterSwapResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamRosterSwapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterSwapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamRosterSwapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamRosterSwapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamRosterSwapResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamRosterSwapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamRosterSwapResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_OWNER_NOT_IN_LEAGUE =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
  static constexpr EResult ERROR_SLOTS_INVALID =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_SLOTS_INVALID;
  static constexpr EResult ERROR_SLOT_LOCKED =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_ERROR_SLOT_LOCKED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamRosterSwapResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamRosterSwapResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamRosterSwapResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamRosterSwapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamRosterAddDropRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamRosterAddDropRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamRosterAddDropRequest() : CMsgDOTAFantasyTeamRosterAddDropRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamRosterAddDropRequest();
  explicit constexpr CMsgDOTAFantasyTeamRosterAddDropRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamRosterAddDropRequest(const CMsgDOTAFantasyTeamRosterAddDropRequest& from);
  CMsgDOTAFantasyTeamRosterAddDropRequest(CMsgDOTAFantasyTeamRosterAddDropRequest&& from) noexcept
    : CMsgDOTAFantasyTeamRosterAddDropRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamRosterAddDropRequest& operator=(const CMsgDOTAFantasyTeamRosterAddDropRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamRosterAddDropRequest& operator=(CMsgDOTAFantasyTeamRosterAddDropRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamRosterAddDropRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamRosterAddDropRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamRosterAddDropRequest*>(
               &_CMsgDOTAFantasyTeamRosterAddDropRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CMsgDOTAFantasyTeamRosterAddDropRequest& a, CMsgDOTAFantasyTeamRosterAddDropRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamRosterAddDropRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamRosterAddDropRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterAddDropRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamRosterAddDropRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterAddDropRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamRosterAddDropRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamRosterAddDropRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamRosterAddDropRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kTeamIndexFieldNumber = 2,
    kAddAccountIdFieldNumber = 5,
    kDropAccountIdFieldNumber = 6,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index = 2;
  bool has_team_index() const;
  private:
  bool _internal_has_team_index() const;
  public:
  void clear_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index() const;
  void set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index() const;
  void _internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 add_account_id = 5;
  bool has_add_account_id() const;
  private:
  bool _internal_has_add_account_id() const;
  public:
  void clear_add_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 add_account_id() const;
  void set_add_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_add_account_id() const;
  void _internal_set_add_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 drop_account_id = 6;
  bool has_drop_account_id() const;
  private:
  bool _internal_has_drop_account_id() const;
  public:
  void clear_drop_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 drop_account_id() const;
  void set_drop_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drop_account_id() const;
  void _internal_set_drop_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamRosterAddDropRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 add_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drop_account_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamRosterAddDropResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamRosterAddDropResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamRosterAddDropResponse() : CMsgDOTAFantasyTeamRosterAddDropResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamRosterAddDropResponse();
  explicit constexpr CMsgDOTAFantasyTeamRosterAddDropResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamRosterAddDropResponse(const CMsgDOTAFantasyTeamRosterAddDropResponse& from);
  CMsgDOTAFantasyTeamRosterAddDropResponse(CMsgDOTAFantasyTeamRosterAddDropResponse&& from) noexcept
    : CMsgDOTAFantasyTeamRosterAddDropResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamRosterAddDropResponse& operator=(const CMsgDOTAFantasyTeamRosterAddDropResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamRosterAddDropResponse& operator=(CMsgDOTAFantasyTeamRosterAddDropResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamRosterAddDropResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamRosterAddDropResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamRosterAddDropResponse*>(
               &_CMsgDOTAFantasyTeamRosterAddDropResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CMsgDOTAFantasyTeamRosterAddDropResponse& a, CMsgDOTAFantasyTeamRosterAddDropResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamRosterAddDropResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamRosterAddDropResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterAddDropResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamRosterAddDropResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterAddDropResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamRosterAddDropResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamRosterAddDropResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamRosterAddDropResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamRosterAddDropResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamRosterAddDropResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_OWNER_NOT_IN_LEAGUE =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
  static constexpr EResult ERROR_PLAYER_NOT_AVAILABLE =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_PLAYER_NOT_AVAILABLE;
  static constexpr EResult ERROR_PLAYER_NOT_ON_TEAM =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_PLAYER_NOT_ON_TEAM;
  static constexpr EResult ERROR_TRADE_ALREADY_PENDING =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_ERROR_TRADE_ALREADY_PENDING;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamRosterAddDropResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamTradesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamTradesRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamTradesRequest() : CMsgDOTAFantasyTeamTradesRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamTradesRequest();
  explicit constexpr CMsgDOTAFantasyTeamTradesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamTradesRequest(const CMsgDOTAFantasyTeamTradesRequest& from);
  CMsgDOTAFantasyTeamTradesRequest(CMsgDOTAFantasyTeamTradesRequest&& from) noexcept
    : CMsgDOTAFantasyTeamTradesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamTradesRequest& operator=(const CMsgDOTAFantasyTeamTradesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamTradesRequest& operator=(CMsgDOTAFantasyTeamTradesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamTradesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamTradesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamTradesRequest*>(
               &_CMsgDOTAFantasyTeamTradesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CMsgDOTAFantasyTeamTradesRequest& a, CMsgDOTAFantasyTeamTradesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamTradesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamTradesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamTradesRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradesRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamTradesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamTradesRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamTradesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamTradesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamTradesRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamTradesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamTradesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamTradesResponse_Trade PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamTradesResponse.Trade) */ {
 public:
  inline CMsgDOTAFantasyTeamTradesResponse_Trade() : CMsgDOTAFantasyTeamTradesResponse_Trade(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamTradesResponse_Trade();
  explicit constexpr CMsgDOTAFantasyTeamTradesResponse_Trade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamTradesResponse_Trade(const CMsgDOTAFantasyTeamTradesResponse_Trade& from);
  CMsgDOTAFantasyTeamTradesResponse_Trade(CMsgDOTAFantasyTeamTradesResponse_Trade&& from) noexcept
    : CMsgDOTAFantasyTeamTradesResponse_Trade() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamTradesResponse_Trade& operator=(const CMsgDOTAFantasyTeamTradesResponse_Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamTradesResponse_Trade& operator=(CMsgDOTAFantasyTeamTradesResponse_Trade&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamTradesResponse_Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamTradesResponse_Trade* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamTradesResponse_Trade*>(
               &_CMsgDOTAFantasyTeamTradesResponse_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CMsgDOTAFantasyTeamTradesResponse_Trade& a, CMsgDOTAFantasyTeamTradesResponse_Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamTradesResponse_Trade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamTradesResponse_Trade* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradesResponse_Trade>(nullptr);
  }

  CMsgDOTAFantasyTeamTradesResponse_Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradesResponse_Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from);
  void MergeFrom(const CMsgDOTAFantasyTeamTradesResponse_Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamTradesResponse_Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamTradesResponse.Trade";
  }
  protected:
  explicit CMsgDOTAFantasyTeamTradesResponse_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kOwnerAccountId1FieldNumber = 2,
    kOwnerAccountId2FieldNumber = 3,
    kPlayerAccountId1FieldNumber = 4,
    kPlayerAccountId2FieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id_1 = 2;
  bool has_owner_account_id_1() const;
  private:
  bool _internal_has_owner_account_id_1() const;
  public:
  void clear_owner_account_id_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_1() const;
  void set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id_1() const;
  void _internal_set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id_2 = 3;
  bool has_owner_account_id_2() const;
  private:
  bool _internal_has_owner_account_id_2() const;
  public:
  void clear_owner_account_id_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_2() const;
  void set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id_2() const;
  void _internal_set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id_1 = 4;
  bool has_player_account_id_1() const;
  private:
  bool _internal_has_player_account_id_1() const;
  public:
  void clear_player_account_id_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_1() const;
  void set_player_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id_1() const;
  void _internal_set_player_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id_2 = 5;
  bool has_player_account_id_2() const;
  private:
  bool _internal_has_player_account_id_2() const;
  public:
  void clear_player_account_id_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_2() const;
  void set_player_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id_2() const;
  void _internal_set_player_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamTradesResponse.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamTradesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamTradesResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamTradesResponse() : CMsgDOTAFantasyTeamTradesResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamTradesResponse();
  explicit constexpr CMsgDOTAFantasyTeamTradesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamTradesResponse(const CMsgDOTAFantasyTeamTradesResponse& from);
  CMsgDOTAFantasyTeamTradesResponse(CMsgDOTAFantasyTeamTradesResponse&& from) noexcept
    : CMsgDOTAFantasyTeamTradesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamTradesResponse& operator=(const CMsgDOTAFantasyTeamTradesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamTradesResponse& operator=(CMsgDOTAFantasyTeamTradesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamTradesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamTradesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamTradesResponse*>(
               &_CMsgDOTAFantasyTeamTradesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CMsgDOTAFantasyTeamTradesResponse& a, CMsgDOTAFantasyTeamTradesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamTradesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamTradesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamTradesResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradesResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamTradesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamTradesResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamTradesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamTradesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamTradesResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamTradesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamTradesResponse_Trade Trade;

  typedef CMsgDOTAFantasyTeamTradesResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamTradesResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamTradesResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyTeamTradesResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamTradesResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamTradesResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamTradesResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::CMsgDOTAFantasyTeamTradesResponse_Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade >*
      mutable_trades();
  private:
  const ::CMsgDOTAFantasyTeamTradesResponse_Trade& _internal_trades(int index) const;
  ::CMsgDOTAFantasyTeamTradesResponse_Trade* _internal_add_trades();
  public:
  const ::CMsgDOTAFantasyTeamTradesResponse_Trade& trades(int index) const;
  ::CMsgDOTAFantasyTeamTradesResponse_Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade >&
      trades() const;

  // optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamTradesResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamTradesResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamTradesResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamTradesResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamTradesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade > trades_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamTradeCancelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamTradeCancelRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamTradeCancelRequest() : CMsgDOTAFantasyTeamTradeCancelRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamTradeCancelRequest();
  explicit constexpr CMsgDOTAFantasyTeamTradeCancelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamTradeCancelRequest(const CMsgDOTAFantasyTeamTradeCancelRequest& from);
  CMsgDOTAFantasyTeamTradeCancelRequest(CMsgDOTAFantasyTeamTradeCancelRequest&& from) noexcept
    : CMsgDOTAFantasyTeamTradeCancelRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamTradeCancelRequest& operator=(const CMsgDOTAFantasyTeamTradeCancelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamTradeCancelRequest& operator=(CMsgDOTAFantasyTeamTradeCancelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamTradeCancelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamTradeCancelRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamTradeCancelRequest*>(
               &_CMsgDOTAFantasyTeamTradeCancelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CMsgDOTAFantasyTeamTradeCancelRequest& a, CMsgDOTAFantasyTeamTradeCancelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamTradeCancelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamTradeCancelRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradeCancelRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamTradeCancelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradeCancelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamTradeCancelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamTradeCancelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamTradeCancelRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamTradeCancelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kTeamIndex1FieldNumber = 3,
    kOwnerAccountId2FieldNumber = 4,
    kTeamIndex2FieldNumber = 5,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index_1 = 3;
  bool has_team_index_1() const;
  private:
  bool _internal_has_team_index_1() const;
  public:
  void clear_team_index_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_1() const;
  void set_team_index_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index_1() const;
  void _internal_set_team_index_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id_2 = 4;
  bool has_owner_account_id_2() const;
  private:
  bool _internal_has_owner_account_id_2() const;
  public:
  void clear_owner_account_id_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_2() const;
  void set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id_2() const;
  void _internal_set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index_2 = 5;
  bool has_team_index_2() const;
  private:
  bool _internal_has_team_index_2() const;
  public:
  void clear_team_index_2();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_2() const;
  void set_team_index_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index_2() const;
  void _internal_set_team_index_2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamTradeCancelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_2_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamTradeCancelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamTradeCancelResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamTradeCancelResponse() : CMsgDOTAFantasyTeamTradeCancelResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamTradeCancelResponse();
  explicit constexpr CMsgDOTAFantasyTeamTradeCancelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamTradeCancelResponse(const CMsgDOTAFantasyTeamTradeCancelResponse& from);
  CMsgDOTAFantasyTeamTradeCancelResponse(CMsgDOTAFantasyTeamTradeCancelResponse&& from) noexcept
    : CMsgDOTAFantasyTeamTradeCancelResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamTradeCancelResponse& operator=(const CMsgDOTAFantasyTeamTradeCancelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamTradeCancelResponse& operator=(CMsgDOTAFantasyTeamTradeCancelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamTradeCancelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamTradeCancelResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamTradeCancelResponse*>(
               &_CMsgDOTAFantasyTeamTradeCancelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CMsgDOTAFantasyTeamTradeCancelResponse& a, CMsgDOTAFantasyTeamTradeCancelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamTradeCancelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamTradeCancelResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradeCancelResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamTradeCancelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamTradeCancelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamTradeCancelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamTradeCancelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamTradeCancelResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamTradeCancelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamTradeCancelResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_NO_PERMISSION;
  static constexpr EResult ERROR_NO_TRADE =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_ERROR_NO_TRADE;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamTradeCancelResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamTradeCancelResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamTradeCancelResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamTradeCancelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamRosterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamRosterRequest) */ {
 public:
  inline CMsgDOTAFantasyTeamRosterRequest() : CMsgDOTAFantasyTeamRosterRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamRosterRequest();
  explicit constexpr CMsgDOTAFantasyTeamRosterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamRosterRequest(const CMsgDOTAFantasyTeamRosterRequest& from);
  CMsgDOTAFantasyTeamRosterRequest(CMsgDOTAFantasyTeamRosterRequest&& from) noexcept
    : CMsgDOTAFantasyTeamRosterRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamRosterRequest& operator=(const CMsgDOTAFantasyTeamRosterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamRosterRequest& operator=(CMsgDOTAFantasyTeamRosterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamRosterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamRosterRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamRosterRequest*>(
               &_CMsgDOTAFantasyTeamRosterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(CMsgDOTAFantasyTeamRosterRequest& a, CMsgDOTAFantasyTeamRosterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamRosterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamRosterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamRosterRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterRequest>(nullptr);
  }

  CMsgDOTAFantasyTeamRosterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamRosterRequest& from);
  void MergeFrom(const CMsgDOTAFantasyTeamRosterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamRosterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamRosterRequest";
  }
  protected:
  explicit CMsgDOTAFantasyTeamRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kTeamIndexFieldNumber = 2,
    kOwnerAccountIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index = 2;
  bool has_team_index() const;
  private:
  bool _internal_has_team_index() const;
  public:
  void clear_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index() const;
  void set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index() const;
  void _internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id = 3;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamRosterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyTeamRosterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyTeamRosterResponse) */ {
 public:
  inline CMsgDOTAFantasyTeamRosterResponse() : CMsgDOTAFantasyTeamRosterResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyTeamRosterResponse();
  explicit constexpr CMsgDOTAFantasyTeamRosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyTeamRosterResponse(const CMsgDOTAFantasyTeamRosterResponse& from);
  CMsgDOTAFantasyTeamRosterResponse(CMsgDOTAFantasyTeamRosterResponse&& from) noexcept
    : CMsgDOTAFantasyTeamRosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyTeamRosterResponse& operator=(const CMsgDOTAFantasyTeamRosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyTeamRosterResponse& operator=(CMsgDOTAFantasyTeamRosterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyTeamRosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyTeamRosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyTeamRosterResponse*>(
               &_CMsgDOTAFantasyTeamRosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(CMsgDOTAFantasyTeamRosterResponse& a, CMsgDOTAFantasyTeamRosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyTeamRosterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyTeamRosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyTeamRosterResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterResponse>(nullptr);
  }

  CMsgDOTAFantasyTeamRosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyTeamRosterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyTeamRosterResponse& from);
  void MergeFrom(const CMsgDOTAFantasyTeamRosterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyTeamRosterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyTeamRosterResponse";
  }
  protected:
  explicit CMsgDOTAFantasyTeamRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyTeamRosterResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyTeamRosterResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_NO_PERMISSION;
  static constexpr EResult ERROR_OWNER_NOT_IN_LEAGUE =
    CMsgDOTAFantasyTeamRosterResponse_EResult_ERROR_OWNER_NOT_IN_LEAGUE;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyTeamRosterResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyTeamRosterResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyTeamRosterResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerAccountIdsFieldNumber = 2,
    kPlayerLockedFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated uint32 player_account_ids = 2;
  int player_account_ids_size() const;
  private:
  int _internal_player_account_ids_size() const;
  public:
  void clear_player_account_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_player_account_ids() const;
  void _internal_add_player_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_player_account_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_ids(int index) const;
  void set_player_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_player_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      player_account_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_player_account_ids();

  // repeated bool player_locked = 3;
  int player_locked_size() const;
  private:
  int _internal_player_locked_size() const;
  public:
  void clear_player_locked();
  private:
  bool _internal_player_locked(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_player_locked() const;
  void _internal_add_player_locked(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_player_locked();
  public:
  bool player_locked(int index) const;
  void set_player_locked(int index, bool value);
  void add_player_locked(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      player_locked() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_player_locked();

  // optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyTeamRosterResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyTeamRosterResponse_EResult value);
  private:
  ::CMsgDOTAFantasyTeamRosterResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyTeamRosterResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyTeamRosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > player_account_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > player_locked_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerHisoricalStatsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerHisoricalStatsRequest) */ {
 public:
  inline CMsgDOTAFantasyPlayerHisoricalStatsRequest() : CMsgDOTAFantasyPlayerHisoricalStatsRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerHisoricalStatsRequest();
  explicit constexpr CMsgDOTAFantasyPlayerHisoricalStatsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerHisoricalStatsRequest(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from);
  CMsgDOTAFantasyPlayerHisoricalStatsRequest(CMsgDOTAFantasyPlayerHisoricalStatsRequest&& from) noexcept
    : CMsgDOTAFantasyPlayerHisoricalStatsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerHisoricalStatsRequest& operator=(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerHisoricalStatsRequest& operator=(CMsgDOTAFantasyPlayerHisoricalStatsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerHisoricalStatsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerHisoricalStatsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerHisoricalStatsRequest*>(
               &_CMsgDOTAFantasyPlayerHisoricalStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(CMsgDOTAFantasyPlayerHisoricalStatsRequest& a, CMsgDOTAFantasyPlayerHisoricalStatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerHisoricalStatsRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsRequest>(nullptr);
  }

  CMsgDOTAFantasyPlayerHisoricalStatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerHisoricalStatsRequest";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerHisoricalStatsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerHisoricalStatsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator) */ {
 public:
  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator() : CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator();
  explicit constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&& from) noexcept
    : CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& operator=(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& operator=(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator*>(
               &_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& a, CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(nullptr);
  }

  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchesFieldNumber = 1,
    kLevelsFieldNumber = 2,
    kKillsFieldNumber = 3,
    kDeathsFieldNumber = 4,
    kAssistsFieldNumber = 5,
    kLastHitsFieldNumber = 6,
    kDeniesFieldNumber = 7,
    kGpmFieldNumber = 8,
    kXppmFieldNumber = 9,
    kStunsFieldNumber = 10,
    kHealingFieldNumber = 11,
    kTowerKillsFieldNumber = 12,
    kRoshanKillsFieldNumber = 13,
    kScoreFieldNumber = 14,
  };
  // optional uint32 matches = 1;
  bool has_matches() const;
  private:
  bool _internal_has_matches() const;
  public:
  void clear_matches();
  ::PROTOBUF_NAMESPACE_ID::uint32 matches() const;
  void set_matches(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matches() const;
  void _internal_set_matches(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float levels = 2;
  bool has_levels() const;
  private:
  bool _internal_has_levels() const;
  public:
  void clear_levels();
  float levels() const;
  void set_levels(float value);
  private:
  float _internal_levels() const;
  void _internal_set_levels(float value);
  public:

  // optional float kills = 3;
  bool has_kills() const;
  private:
  bool _internal_has_kills() const;
  public:
  void clear_kills();
  float kills() const;
  void set_kills(float value);
  private:
  float _internal_kills() const;
  void _internal_set_kills(float value);
  public:

  // optional float deaths = 4;
  bool has_deaths() const;
  private:
  bool _internal_has_deaths() const;
  public:
  void clear_deaths();
  float deaths() const;
  void set_deaths(float value);
  private:
  float _internal_deaths() const;
  void _internal_set_deaths(float value);
  public:

  // optional float assists = 5;
  bool has_assists() const;
  private:
  bool _internal_has_assists() const;
  public:
  void clear_assists();
  float assists() const;
  void set_assists(float value);
  private:
  float _internal_assists() const;
  void _internal_set_assists(float value);
  public:

  // optional float last_hits = 6;
  bool has_last_hits() const;
  private:
  bool _internal_has_last_hits() const;
  public:
  void clear_last_hits();
  float last_hits() const;
  void set_last_hits(float value);
  private:
  float _internal_last_hits() const;
  void _internal_set_last_hits(float value);
  public:

  // optional float denies = 7;
  bool has_denies() const;
  private:
  bool _internal_has_denies() const;
  public:
  void clear_denies();
  float denies() const;
  void set_denies(float value);
  private:
  float _internal_denies() const;
  void _internal_set_denies(float value);
  public:

  // optional float gpm = 8;
  bool has_gpm() const;
  private:
  bool _internal_has_gpm() const;
  public:
  void clear_gpm();
  float gpm() const;
  void set_gpm(float value);
  private:
  float _internal_gpm() const;
  void _internal_set_gpm(float value);
  public:

  // optional float xppm = 9;
  bool has_xppm() const;
  private:
  bool _internal_has_xppm() const;
  public:
  void clear_xppm();
  float xppm() const;
  void set_xppm(float value);
  private:
  float _internal_xppm() const;
  void _internal_set_xppm(float value);
  public:

  // optional float stuns = 10;
  bool has_stuns() const;
  private:
  bool _internal_has_stuns() const;
  public:
  void clear_stuns();
  float stuns() const;
  void set_stuns(float value);
  private:
  float _internal_stuns() const;
  void _internal_set_stuns(float value);
  public:

  // optional float healing = 11;
  bool has_healing() const;
  private:
  bool _internal_has_healing() const;
  public:
  void clear_healing();
  float healing() const;
  void set_healing(float value);
  private:
  float _internal_healing() const;
  void _internal_set_healing(float value);
  public:

  // optional float tower_kills = 12;
  bool has_tower_kills() const;
  private:
  bool _internal_has_tower_kills() const;
  public:
  void clear_tower_kills();
  float tower_kills() const;
  void set_tower_kills(float value);
  private:
  float _internal_tower_kills() const;
  void _internal_set_tower_kills(float value);
  public:

  // optional float roshan_kills = 13;
  bool has_roshan_kills() const;
  private:
  bool _internal_has_roshan_kills() const;
  public:
  void clear_roshan_kills();
  float roshan_kills() const;
  void set_roshan_kills(float value);
  private:
  float _internal_roshan_kills() const;
  void _internal_set_roshan_kills(float value);
  public:

  // optional float score = 14;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matches_;
  float levels_;
  float kills_;
  float deaths_;
  float assists_;
  float last_hits_;
  float denies_;
  float gpm_;
  float xppm_;
  float stuns_;
  float healing_;
  float tower_kills_;
  float roshan_kills_;
  float score_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats) */ {
 public:
  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats() : CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats();
  explicit constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats&& from) noexcept
    : CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& operator=(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& operator=(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats*>(
               &_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& a, CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(nullptr);
  }

  CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsPremiumFieldNumber = 4,
    kStatsProfessionalFieldNumber = 5,
    kAccountIdFieldNumber = 1,
    kWeeksFieldNumber = 2,
  };
  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
  bool has_stats_premium() const;
  private:
  bool _internal_has_stats_premium() const;
  public:
  void clear_stats_premium();
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& stats_premium() const;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* release_stats_premium();
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* mutable_stats_premium();
  void set_allocated_stats_premium(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium);
  private:
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& _internal_stats_premium() const;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* _internal_mutable_stats_premium();
  public:
  void unsafe_arena_set_allocated_stats_premium(
      ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium);
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* unsafe_arena_release_stats_premium();

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
  bool has_stats_professional() const;
  private:
  bool _internal_has_stats_professional() const;
  public:
  void clear_stats_professional();
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& stats_professional() const;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* release_stats_professional();
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* mutable_stats_professional();
  void set_allocated_stats_professional(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional);
  private:
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& _internal_stats_professional() const;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* _internal_mutable_stats_professional();
  public:
  void unsafe_arena_set_allocated_stats_professional(
      ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional);
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* unsafe_arena_release_stats_professional();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 weeks = 2;
  bool has_weeks() const;
  private:
  bool _internal_has_weeks() const;
  public:
  void clear_weeks();
  ::PROTOBUF_NAMESPACE_ID::uint32 weeks() const;
  void set_weeks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_weeks() const;
  void _internal_set_weeks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium_;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 weeks_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerHisoricalStatsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerHisoricalStatsResponse) */ {
 public:
  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse() : CMsgDOTAFantasyPlayerHisoricalStatsResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerHisoricalStatsResponse();
  explicit constexpr CMsgDOTAFantasyPlayerHisoricalStatsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerHisoricalStatsResponse(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from);
  CMsgDOTAFantasyPlayerHisoricalStatsResponse(CMsgDOTAFantasyPlayerHisoricalStatsResponse&& from) noexcept
    : CMsgDOTAFantasyPlayerHisoricalStatsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse& operator=(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse& operator=(CMsgDOTAFantasyPlayerHisoricalStatsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerHisoricalStatsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerHisoricalStatsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerHisoricalStatsResponse*>(
               &_CMsgDOTAFantasyPlayerHisoricalStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse& a, CMsgDOTAFantasyPlayerHisoricalStatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerHisoricalStatsResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsResponse>(nullptr);
  }

  CMsgDOTAFantasyPlayerHisoricalStatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerHisoricalStatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerHisoricalStatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerHisoricalStatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerHisoricalStatsResponse";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerHisoricalStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator PlayerScoreAccumulator;
  typedef CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats PlayerStats;

  typedef CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >*
      mutable_stats();
  private:
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& _internal_stats(int index) const;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* _internal_add_stats();
  public:
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& stats(int index) const;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >&
      stats() const;

  // optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult value);
  private:
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerHisoricalStatsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats > stats_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyMessageAdd PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyMessageAdd) */ {
 public:
  inline CMsgDOTAFantasyMessageAdd() : CMsgDOTAFantasyMessageAdd(nullptr) {}
  virtual ~CMsgDOTAFantasyMessageAdd();
  explicit constexpr CMsgDOTAFantasyMessageAdd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyMessageAdd(const CMsgDOTAFantasyMessageAdd& from);
  CMsgDOTAFantasyMessageAdd(CMsgDOTAFantasyMessageAdd&& from) noexcept
    : CMsgDOTAFantasyMessageAdd() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyMessageAdd& operator=(const CMsgDOTAFantasyMessageAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyMessageAdd& operator=(CMsgDOTAFantasyMessageAdd&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyMessageAdd& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyMessageAdd* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyMessageAdd*>(
               &_CMsgDOTAFantasyMessageAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(CMsgDOTAFantasyMessageAdd& a, CMsgDOTAFantasyMessageAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyMessageAdd* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyMessageAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyMessageAdd* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessageAdd>(nullptr);
  }

  CMsgDOTAFantasyMessageAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessageAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyMessageAdd& from);
  void MergeFrom(const CMsgDOTAFantasyMessageAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyMessageAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyMessageAdd";
  }
  protected:
  explicit CMsgDOTAFantasyMessageAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyMessageAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyMessagesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyMessagesRequest) */ {
 public:
  inline CMsgDOTAFantasyMessagesRequest() : CMsgDOTAFantasyMessagesRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyMessagesRequest();
  explicit constexpr CMsgDOTAFantasyMessagesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyMessagesRequest(const CMsgDOTAFantasyMessagesRequest& from);
  CMsgDOTAFantasyMessagesRequest(CMsgDOTAFantasyMessagesRequest&& from) noexcept
    : CMsgDOTAFantasyMessagesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyMessagesRequest& operator=(const CMsgDOTAFantasyMessagesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyMessagesRequest& operator=(CMsgDOTAFantasyMessagesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyMessagesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyMessagesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyMessagesRequest*>(
               &_CMsgDOTAFantasyMessagesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(CMsgDOTAFantasyMessagesRequest& a, CMsgDOTAFantasyMessagesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyMessagesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyMessagesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyMessagesRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessagesRequest>(nullptr);
  }

  CMsgDOTAFantasyMessagesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessagesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyMessagesRequest& from);
  void MergeFrom(const CMsgDOTAFantasyMessagesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyMessagesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyMessagesRequest";
  }
  protected:
  explicit CMsgDOTAFantasyMessagesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kStartMessageFieldNumber = 2,
    kEndMessageFieldNumber = 3,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_message = 2;
  bool has_start_message() const;
  private:
  bool _internal_has_start_message() const;
  public:
  void clear_start_message();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_message() const;
  void set_start_message(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_message() const;
  void _internal_set_start_message(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_message = 3;
  bool has_end_message() const;
  private:
  bool _internal_has_end_message() const;
  public:
  void clear_end_message();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_message() const;
  void set_end_message(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_message() const;
  void _internal_set_end_message(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyMessagesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_message_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyMessagesResponse_Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyMessagesResponse.Message) */ {
 public:
  inline CMsgDOTAFantasyMessagesResponse_Message() : CMsgDOTAFantasyMessagesResponse_Message(nullptr) {}
  virtual ~CMsgDOTAFantasyMessagesResponse_Message();
  explicit constexpr CMsgDOTAFantasyMessagesResponse_Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyMessagesResponse_Message(const CMsgDOTAFantasyMessagesResponse_Message& from);
  CMsgDOTAFantasyMessagesResponse_Message(CMsgDOTAFantasyMessagesResponse_Message&& from) noexcept
    : CMsgDOTAFantasyMessagesResponse_Message() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyMessagesResponse_Message& operator=(const CMsgDOTAFantasyMessagesResponse_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyMessagesResponse_Message& operator=(CMsgDOTAFantasyMessagesResponse_Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyMessagesResponse_Message& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyMessagesResponse_Message* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyMessagesResponse_Message*>(
               &_CMsgDOTAFantasyMessagesResponse_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CMsgDOTAFantasyMessagesResponse_Message& a, CMsgDOTAFantasyMessagesResponse_Message& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyMessagesResponse_Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyMessagesResponse_Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyMessagesResponse_Message* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessagesResponse_Message>(nullptr);
  }

  CMsgDOTAFantasyMessagesResponse_Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessagesResponse_Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyMessagesResponse_Message& from);
  void MergeFrom(const CMsgDOTAFantasyMessagesResponse_Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyMessagesResponse_Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyMessagesResponse.Message";
  }
  protected:
  explicit CMsgDOTAFantasyMessagesResponse_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kMessageIdFieldNumber = 1,
    kAuthorAccountIdFieldNumber = 3,
    kTimeFieldNumber = 4,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // optional uint32 message_id = 1;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id() const;
  void set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_id() const;
  void _internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 author_account_id = 3;
  bool has_author_account_id() const;
  private:
  bool _internal_has_author_account_id() const;
  public:
  void clear_author_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 author_account_id() const;
  void set_author_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_author_account_id() const;
  void _internal_set_author_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyMessagesResponse.Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 author_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyMessagesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyMessagesResponse) */ {
 public:
  inline CMsgDOTAFantasyMessagesResponse() : CMsgDOTAFantasyMessagesResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyMessagesResponse();
  explicit constexpr CMsgDOTAFantasyMessagesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyMessagesResponse(const CMsgDOTAFantasyMessagesResponse& from);
  CMsgDOTAFantasyMessagesResponse(CMsgDOTAFantasyMessagesResponse&& from) noexcept
    : CMsgDOTAFantasyMessagesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyMessagesResponse& operator=(const CMsgDOTAFantasyMessagesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyMessagesResponse& operator=(CMsgDOTAFantasyMessagesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyMessagesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyMessagesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyMessagesResponse*>(
               &_CMsgDOTAFantasyMessagesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CMsgDOTAFantasyMessagesResponse& a, CMsgDOTAFantasyMessagesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyMessagesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyMessagesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyMessagesResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessagesResponse>(nullptr);
  }

  CMsgDOTAFantasyMessagesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyMessagesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyMessagesResponse& from);
  void MergeFrom(const CMsgDOTAFantasyMessagesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyMessagesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyMessagesResponse";
  }
  protected:
  explicit CMsgDOTAFantasyMessagesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyMessagesResponse_Message Message;

  typedef CMsgDOTAFantasyMessagesResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyMessagesResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyMessagesResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyMessagesResponse_EResult_ERROR_NO_PERMISSION;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyMessagesResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyMessagesResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyMessagesResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyMessagesResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyMessagesResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyMessagesResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 2,
    kResultFieldNumber = 1,
    kNumTotalMessagesFieldNumber = 3,
  };
  // repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::CMsgDOTAFantasyMessagesResponse_Message* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message >*
      mutable_messages();
  private:
  const ::CMsgDOTAFantasyMessagesResponse_Message& _internal_messages(int index) const;
  ::CMsgDOTAFantasyMessagesResponse_Message* _internal_add_messages();
  public:
  const ::CMsgDOTAFantasyMessagesResponse_Message& messages(int index) const;
  ::CMsgDOTAFantasyMessagesResponse_Message* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message >&
      messages() const;

  // optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyMessagesResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyMessagesResponse_EResult value);
  private:
  ::CMsgDOTAFantasyMessagesResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyMessagesResponse_EResult value);
  public:

  // optional uint32 num_total_messages = 3;
  bool has_num_total_messages() const;
  private:
  bool _internal_has_num_total_messages() const;
  public:
  void clear_num_total_messages();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_total_messages() const;
  void set_num_total_messages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_total_messages() const;
  void _internal_set_num_total_messages(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyMessagesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message > messages_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_total_messages_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyRemoveOwner PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyRemoveOwner) */ {
 public:
  inline CMsgDOTAFantasyRemoveOwner() : CMsgDOTAFantasyRemoveOwner(nullptr) {}
  virtual ~CMsgDOTAFantasyRemoveOwner();
  explicit constexpr CMsgDOTAFantasyRemoveOwner(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyRemoveOwner(const CMsgDOTAFantasyRemoveOwner& from);
  CMsgDOTAFantasyRemoveOwner(CMsgDOTAFantasyRemoveOwner&& from) noexcept
    : CMsgDOTAFantasyRemoveOwner() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyRemoveOwner& operator=(const CMsgDOTAFantasyRemoveOwner& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyRemoveOwner& operator=(CMsgDOTAFantasyRemoveOwner&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyRemoveOwner& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyRemoveOwner* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyRemoveOwner*>(
               &_CMsgDOTAFantasyRemoveOwner_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(CMsgDOTAFantasyRemoveOwner& a, CMsgDOTAFantasyRemoveOwner& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyRemoveOwner* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyRemoveOwner* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyRemoveOwner* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyRemoveOwner>(nullptr);
  }

  CMsgDOTAFantasyRemoveOwner* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyRemoveOwner>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyRemoveOwner& from);
  void MergeFrom(const CMsgDOTAFantasyRemoveOwner& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyRemoveOwner* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyRemoveOwner";
  }
  protected:
  explicit CMsgDOTAFantasyRemoveOwner(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kOwnerAccountIdFieldNumber = 2,
    kTeamIndexFieldNumber = 3,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 owner_account_id = 2;
  bool has_owner_account_id() const;
  private:
  bool _internal_has_owner_account_id() const;
  public:
  void clear_owner_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id() const;
  void set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owner_account_id() const;
  void _internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 team_index = 3;
  bool has_team_index() const;
  private:
  bool _internal_has_team_index() const;
  public:
  void clear_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index() const;
  void set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_index() const;
  void _internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyRemoveOwner)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owner_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_index_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyRemoveOwnerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyRemoveOwnerResponse) */ {
 public:
  inline CMsgDOTAFantasyRemoveOwnerResponse() : CMsgDOTAFantasyRemoveOwnerResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyRemoveOwnerResponse();
  explicit constexpr CMsgDOTAFantasyRemoveOwnerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyRemoveOwnerResponse(const CMsgDOTAFantasyRemoveOwnerResponse& from);
  CMsgDOTAFantasyRemoveOwnerResponse(CMsgDOTAFantasyRemoveOwnerResponse&& from) noexcept
    : CMsgDOTAFantasyRemoveOwnerResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyRemoveOwnerResponse& operator=(const CMsgDOTAFantasyRemoveOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyRemoveOwnerResponse& operator=(CMsgDOTAFantasyRemoveOwnerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyRemoveOwnerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyRemoveOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyRemoveOwnerResponse*>(
               &_CMsgDOTAFantasyRemoveOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(CMsgDOTAFantasyRemoveOwnerResponse& a, CMsgDOTAFantasyRemoveOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyRemoveOwnerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyRemoveOwnerResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyRemoveOwnerResponse>(nullptr);
  }

  CMsgDOTAFantasyRemoveOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyRemoveOwnerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from);
  void MergeFrom(const CMsgDOTAFantasyRemoveOwnerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyRemoveOwnerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyRemoveOwnerResponse";
  }
  protected:
  explicit CMsgDOTAFantasyRemoveOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyRemoveOwnerResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NO_PERMISSION =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_NO_PERMISSION;
  static constexpr EResult ERROR_LEAGUE_LOCKED =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_LEAGUE_LOCKED;
  static constexpr EResult ERROR_NOT_A_MEMBER =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_ERROR_NOT_A_MEMBER;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyRemoveOwnerResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyRemoveOwnerResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyRemoveOwnerResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyRemoveOwnerResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyRemoveOwnerResponse_EResult value);
  private:
  ::CMsgDOTAFantasyRemoveOwnerResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyRemoveOwnerResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyRemoveOwnerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyScheduledMatchesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyScheduledMatchesRequest) */ {
 public:
  inline CMsgDOTAFantasyScheduledMatchesRequest() : CMsgDOTAFantasyScheduledMatchesRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyScheduledMatchesRequest();
  explicit constexpr CMsgDOTAFantasyScheduledMatchesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyScheduledMatchesRequest(const CMsgDOTAFantasyScheduledMatchesRequest& from);
  CMsgDOTAFantasyScheduledMatchesRequest(CMsgDOTAFantasyScheduledMatchesRequest&& from) noexcept
    : CMsgDOTAFantasyScheduledMatchesRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyScheduledMatchesRequest& operator=(const CMsgDOTAFantasyScheduledMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyScheduledMatchesRequest& operator=(CMsgDOTAFantasyScheduledMatchesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyScheduledMatchesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyScheduledMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyScheduledMatchesRequest*>(
               &_CMsgDOTAFantasyScheduledMatchesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(CMsgDOTAFantasyScheduledMatchesRequest& a, CMsgDOTAFantasyScheduledMatchesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyScheduledMatchesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyScheduledMatchesRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyScheduledMatchesRequest>(nullptr);
  }

  CMsgDOTAFantasyScheduledMatchesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyScheduledMatchesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from);
  void MergeFrom(const CMsgDOTAFantasyScheduledMatchesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyScheduledMatchesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyScheduledMatchesRequest";
  }
  protected:
  explicit CMsgDOTAFantasyScheduledMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyScheduledMatchesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays) */ {
 public:
  inline CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays() : CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(nullptr) {}
  virtual ~CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays();
  explicit constexpr CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from);
  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays&& from) noexcept
    : CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& operator=(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& operator=(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays*>(
               &_CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& a, CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(nullptr);
  }

  CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from);
  void MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays";
  }
  protected:
  explicit CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdsFieldNumber = 2,
    kLeagueIdsFieldNumber = 3,
    kTimestampFieldNumber = 1,
  };
  // repeated uint32 team_ids = 2;
  int team_ids_size() const;
  private:
  int _internal_team_ids_size() const;
  public:
  void clear_team_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_team_ids() const;
  void _internal_add_team_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_team_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 team_ids(int index) const;
  void set_team_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_team_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      team_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_team_ids();

  // repeated uint32 league_ids = 3;
  int league_ids_size() const;
  private:
  int _internal_league_ids_size() const;
  public:
  void clear_league_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_league_ids() const;
  void _internal_add_league_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_league_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 league_ids(int index) const;
  void set_league_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_league_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      league_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_league_ids();

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > team_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > league_ids_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyScheduledMatchesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyScheduledMatchesResponse) */ {
 public:
  inline CMsgDOTAFantasyScheduledMatchesResponse() : CMsgDOTAFantasyScheduledMatchesResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyScheduledMatchesResponse();
  explicit constexpr CMsgDOTAFantasyScheduledMatchesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyScheduledMatchesResponse(const CMsgDOTAFantasyScheduledMatchesResponse& from);
  CMsgDOTAFantasyScheduledMatchesResponse(CMsgDOTAFantasyScheduledMatchesResponse&& from) noexcept
    : CMsgDOTAFantasyScheduledMatchesResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyScheduledMatchesResponse& operator=(const CMsgDOTAFantasyScheduledMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyScheduledMatchesResponse& operator=(CMsgDOTAFantasyScheduledMatchesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyScheduledMatchesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyScheduledMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyScheduledMatchesResponse*>(
               &_CMsgDOTAFantasyScheduledMatchesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(CMsgDOTAFantasyScheduledMatchesResponse& a, CMsgDOTAFantasyScheduledMatchesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyScheduledMatchesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyScheduledMatchesResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyScheduledMatchesResponse>(nullptr);
  }

  CMsgDOTAFantasyScheduledMatchesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyScheduledMatchesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from);
  void MergeFrom(const CMsgDOTAFantasyScheduledMatchesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyScheduledMatchesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyScheduledMatchesResponse";
  }
  protected:
  explicit CMsgDOTAFantasyScheduledMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays ScheduledMatchDays;

  typedef CMsgDOTAFantasyScheduledMatchesResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_ERROR_UNSPECIFIED;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyScheduledMatchesResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyScheduledMatchesResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyScheduledMatchesResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kScheduledMatchDaysFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
  int scheduled_match_days_size() const;
  private:
  int _internal_scheduled_match_days_size() const;
  public:
  void clear_scheduled_match_days();
  ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* mutable_scheduled_match_days(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >*
      mutable_scheduled_match_days();
  private:
  const ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& _internal_scheduled_match_days(int index) const;
  ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* _internal_add_scheduled_match_days();
  public:
  const ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& scheduled_match_days(int index) const;
  ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* add_scheduled_match_days();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >&
      scheduled_match_days() const;

  // optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyScheduledMatchesResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyScheduledMatchesResponse_EResult value);
  private:
  ::CMsgDOTAFantasyScheduledMatchesResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyScheduledMatchesResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyScheduledMatchesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays > scheduled_match_days_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeaveLeagueRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeaveLeagueRequest) */ {
 public:
  inline CMsgDOTAFantasyLeaveLeagueRequest() : CMsgDOTAFantasyLeaveLeagueRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyLeaveLeagueRequest();
  explicit constexpr CMsgDOTAFantasyLeaveLeagueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeaveLeagueRequest(const CMsgDOTAFantasyLeaveLeagueRequest& from);
  CMsgDOTAFantasyLeaveLeagueRequest(CMsgDOTAFantasyLeaveLeagueRequest&& from) noexcept
    : CMsgDOTAFantasyLeaveLeagueRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeaveLeagueRequest& operator=(const CMsgDOTAFantasyLeaveLeagueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeaveLeagueRequest& operator=(CMsgDOTAFantasyLeaveLeagueRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeaveLeagueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeaveLeagueRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeaveLeagueRequest*>(
               &_CMsgDOTAFantasyLeaveLeagueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(CMsgDOTAFantasyLeaveLeagueRequest& a, CMsgDOTAFantasyLeaveLeagueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeaveLeagueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeaveLeagueRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeaveLeagueRequest>(nullptr);
  }

  CMsgDOTAFantasyLeaveLeagueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeaveLeagueRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from);
  void MergeFrom(const CMsgDOTAFantasyLeaveLeagueRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeaveLeagueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeaveLeagueRequest";
  }
  protected:
  explicit CMsgDOTAFantasyLeaveLeagueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kFantasyTeamIndexFieldNumber = 2,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 fantasy_team_index = 2;
  bool has_fantasy_team_index() const;
  private:
  bool _internal_has_fantasy_team_index() const;
  public:
  void clear_fantasy_team_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index() const;
  void set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_team_index() const;
  void _internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeaveLeagueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_team_index_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyLeaveLeagueResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyLeaveLeagueResponse) */ {
 public:
  inline CMsgDOTAFantasyLeaveLeagueResponse() : CMsgDOTAFantasyLeaveLeagueResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyLeaveLeagueResponse();
  explicit constexpr CMsgDOTAFantasyLeaveLeagueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyLeaveLeagueResponse(const CMsgDOTAFantasyLeaveLeagueResponse& from);
  CMsgDOTAFantasyLeaveLeagueResponse(CMsgDOTAFantasyLeaveLeagueResponse&& from) noexcept
    : CMsgDOTAFantasyLeaveLeagueResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyLeaveLeagueResponse& operator=(const CMsgDOTAFantasyLeaveLeagueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyLeaveLeagueResponse& operator=(CMsgDOTAFantasyLeaveLeagueResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyLeaveLeagueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyLeaveLeagueResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyLeaveLeagueResponse*>(
               &_CMsgDOTAFantasyLeaveLeagueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(CMsgDOTAFantasyLeaveLeagueResponse& a, CMsgDOTAFantasyLeaveLeagueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyLeaveLeagueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyLeaveLeagueResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeaveLeagueResponse>(nullptr);
  }

  CMsgDOTAFantasyLeaveLeagueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyLeaveLeagueResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from);
  void MergeFrom(const CMsgDOTAFantasyLeaveLeagueResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyLeaveLeagueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyLeaveLeagueResponse";
  }
  protected:
  explicit CMsgDOTAFantasyLeaveLeagueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyLeaveLeagueResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NOT_MEMBER =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_NOT_MEMBER;
  static constexpr EResult ERROR_LEAGUE_NOT_FOUND =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_LEAGUE_NOT_FOUND;
  static constexpr EResult ERROR_DRAFT_ACTIVE =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_ERROR_DRAFT_ACTIVE;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyLeaveLeagueResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyLeaveLeagueResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyLeaveLeagueResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyLeaveLeagueResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyLeaveLeagueResponse_EResult value);
  private:
  ::CMsgDOTAFantasyLeaveLeagueResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyLeaveLeagueResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyLeaveLeagueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerScoreDetailsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerScoreDetailsRequest) */ {
 public:
  inline CMsgDOTAFantasyPlayerScoreDetailsRequest() : CMsgDOTAFantasyPlayerScoreDetailsRequest(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerScoreDetailsRequest();
  explicit constexpr CMsgDOTAFantasyPlayerScoreDetailsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerScoreDetailsRequest(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from);
  CMsgDOTAFantasyPlayerScoreDetailsRequest(CMsgDOTAFantasyPlayerScoreDetailsRequest&& from) noexcept
    : CMsgDOTAFantasyPlayerScoreDetailsRequest() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerScoreDetailsRequest& operator=(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerScoreDetailsRequest& operator=(CMsgDOTAFantasyPlayerScoreDetailsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerScoreDetailsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerScoreDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerScoreDetailsRequest*>(
               &_CMsgDOTAFantasyPlayerScoreDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(CMsgDOTAFantasyPlayerScoreDetailsRequest& a, CMsgDOTAFantasyPlayerScoreDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerScoreDetailsRequest* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreDetailsRequest>(nullptr);
  }

  CMsgDOTAFantasyPlayerScoreDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreDetailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerScoreDetailsRequest";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerScoreDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFantasyLeagueIdFieldNumber = 1,
    kPlayerAccountIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // optional uint32 fantasy_league_id = 1;
  bool has_fantasy_league_id() const;
  private:
  bool _internal_has_fantasy_league_id() const;
  public:
  void clear_fantasy_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id() const;
  void set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fantasy_league_id() const;
  void _internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  private:
  bool _internal_has_player_account_id() const;
  public:
  void clear_player_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id() const;
  void set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_player_account_id() const;
  void _internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_time = 3;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_time = 4;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerScoreDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fantasy_league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 player_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_time_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData) */ {
 public:
  inline CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData() : CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData();
  explicit constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from);
  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData&& from) noexcept
    : CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& operator=(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& operator=(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData*>(
               &_CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& a, CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(nullptr);
  }

  CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpposingTeamNameFieldNumber = 9,
    kMatchIdFieldNumber = 1,
    kSeriesIdFieldNumber = 2,
    kSeriesNumFieldNumber = 3,
    kSeriesTypeFieldNumber = 4,
    kLeagueTierFieldNumber = 5,
    kLeagueIdFieldNumber = 6,
    kOpposingTeamIdFieldNumber = 7,
    kOpposingTeamLogoFieldNumber = 8,
    kOwnedByFieldNumber = 11,
    kBenchedFieldNumber = 12,
  };
  // optional string opposing_team_name = 9;
  bool has_opposing_team_name() const;
  private:
  bool _internal_has_opposing_team_name() const;
  public:
  void clear_opposing_team_name();
  const std::string& opposing_team_name() const;
  void set_opposing_team_name(const std::string& value);
  void set_opposing_team_name(std::string&& value);
  void set_opposing_team_name(const char* value);
  void set_opposing_team_name(const char* value, size_t size);
  std::string* mutable_opposing_team_name();
  std::string* release_opposing_team_name();
  void set_allocated_opposing_team_name(std::string* opposing_team_name);
  private:
  const std::string& _internal_opposing_team_name() const;
  void _internal_set_opposing_team_name(const std::string& value);
  std::string* _internal_mutable_opposing_team_name();
  public:

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  private:
  bool _internal_has_match_id() const;
  public:
  void clear_match_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id() const;
  void set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_match_id() const;
  void _internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 series_id = 2;
  bool has_series_id() const;
  private:
  bool _internal_has_series_id() const;
  public:
  void clear_series_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_id() const;
  void set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_id() const;
  void _internal_set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_num = 3;
  bool has_series_num() const;
  private:
  bool _internal_has_series_num() const;
  public:
  void clear_series_num();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_num() const;
  void set_series_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_num() const;
  void _internal_set_series_num(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 series_type = 4;
  bool has_series_type() const;
  private:
  bool _internal_has_series_type() const;
  public:
  void clear_series_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type() const;
  void set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_series_type() const;
  void _internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 league_tier = 5;
  bool has_league_tier() const;
  private:
  bool _internal_has_league_tier() const;
  public:
  void clear_league_tier();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_tier() const;
  void set_league_tier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_tier() const;
  void _internal_set_league_tier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 league_id = 6;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 opposing_team_id = 7;
  bool has_opposing_team_id() const;
  private:
  bool _internal_has_opposing_team_id() const;
  public:
  void clear_opposing_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 opposing_team_id() const;
  void set_opposing_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_opposing_team_id() const;
  void _internal_set_opposing_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 opposing_team_logo = 8;
  bool has_opposing_team_logo() const;
  private:
  bool _internal_has_opposing_team_logo() const;
  public:
  void clear_opposing_team_logo();
  ::PROTOBUF_NAMESPACE_ID::uint64 opposing_team_logo() const;
  void set_opposing_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_opposing_team_logo() const;
  void _internal_set_opposing_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 owned_by = 11;
  bool has_owned_by() const;
  private:
  bool _internal_has_owned_by() const;
  public:
  void clear_owned_by();
  ::PROTOBUF_NAMESPACE_ID::uint32 owned_by() const;
  void set_owned_by(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_owned_by() const;
  void _internal_set_owned_by(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool benched = 12;
  bool has_benched() const;
  private:
  bool _internal_has_benched() const;
  public:
  void clear_benched();
  bool benched() const;
  void set_benched(bool value);
  private:
  bool _internal_benched() const;
  void _internal_set_benched(bool value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opposing_team_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 match_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_num_;
  ::PROTOBUF_NAMESPACE_ID::uint32 series_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_tier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 opposing_team_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 opposing_team_logo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 owned_by_;
  bool benched_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyPlayerScoreDetailsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyPlayerScoreDetailsResponse) */ {
 public:
  inline CMsgDOTAFantasyPlayerScoreDetailsResponse() : CMsgDOTAFantasyPlayerScoreDetailsResponse(nullptr) {}
  virtual ~CMsgDOTAFantasyPlayerScoreDetailsResponse();
  explicit constexpr CMsgDOTAFantasyPlayerScoreDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyPlayerScoreDetailsResponse(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from);
  CMsgDOTAFantasyPlayerScoreDetailsResponse(CMsgDOTAFantasyPlayerScoreDetailsResponse&& from) noexcept
    : CMsgDOTAFantasyPlayerScoreDetailsResponse() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyPlayerScoreDetailsResponse& operator=(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyPlayerScoreDetailsResponse& operator=(CMsgDOTAFantasyPlayerScoreDetailsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyPlayerScoreDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyPlayerScoreDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyPlayerScoreDetailsResponse*>(
               &_CMsgDOTAFantasyPlayerScoreDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(CMsgDOTAFantasyPlayerScoreDetailsResponse& a, CMsgDOTAFantasyPlayerScoreDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyPlayerScoreDetailsResponse* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreDetailsResponse>(nullptr);
  }

  CMsgDOTAFantasyPlayerScoreDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyPlayerScoreDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from);
  void MergeFrom(const CMsgDOTAFantasyPlayerScoreDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyPlayerScoreDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyPlayerScoreDetailsResponse";
  }
  protected:
  explicit CMsgDOTAFantasyPlayerScoreDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData PlayerMatchData;

  typedef CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult EResult;
  static constexpr EResult SUCCESS =
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_SUCCESS;
  static constexpr EResult ERROR_UNSPECIFIED =
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_ERROR_UNSPECIFIED;
  static constexpr EResult ERROR_NOT_MEMBER =
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_ERROR_NOT_MEMBER;
  static inline bool EResult_IsValid(int value) {
    return CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value);
  }
  static constexpr EResult EResult_MIN =
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_MIN;
  static constexpr EResult EResult_MAX =
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_MAX;
  static constexpr int EResult_ARRAYSIZE =
    CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_EResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EResult_descriptor() {
    return CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor();
  }
  template<typename T>
  static inline const std::string& EResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EResult_Name.");
    return CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_Name(enum_t_value);
  }
  static inline bool EResult_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EResult* value) {
    return CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >*
      mutable_data();
  private:
  const ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& _internal_data(int index) const;
  ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* _internal_add_data();
  public:
  const ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& data(int index) const;
  ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >&
      data() const;

  // optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult result() const;
  void set_result(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult value);
  private:
  ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult _internal_result() const;
  void _internal_set_result(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyPlayerScoreDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData > data_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVoteTeamGuess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVoteTeamGuess) */ {
 public:
  inline CMsgDOTAPassportVoteTeamGuess() : CMsgDOTAPassportVoteTeamGuess(nullptr) {}
  virtual ~CMsgDOTAPassportVoteTeamGuess();
  explicit constexpr CMsgDOTAPassportVoteTeamGuess(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportVoteTeamGuess(const CMsgDOTAPassportVoteTeamGuess& from);
  CMsgDOTAPassportVoteTeamGuess(CMsgDOTAPassportVoteTeamGuess&& from) noexcept
    : CMsgDOTAPassportVoteTeamGuess() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVoteTeamGuess& operator=(const CMsgDOTAPassportVoteTeamGuess& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportVoteTeamGuess& operator=(CMsgDOTAPassportVoteTeamGuess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPassportVoteTeamGuess& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportVoteTeamGuess* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVoteTeamGuess*>(
               &_CMsgDOTAPassportVoteTeamGuess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(CMsgDOTAPassportVoteTeamGuess& a, CMsgDOTAPassportVoteTeamGuess& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportVoteTeamGuess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportVoteTeamGuess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportVoteTeamGuess* New() const final {
    return CreateMaybeMessage<CMsgDOTAPassportVoteTeamGuess>(nullptr);
  }

  CMsgDOTAPassportVoteTeamGuess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPassportVoteTeamGuess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPassportVoteTeamGuess& from);
  void MergeFrom(const CMsgDOTAPassportVoteTeamGuess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportVoteTeamGuess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportVoteTeamGuess";
  }
  protected:
  explicit CMsgDOTAPassportVoteTeamGuess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kWinnerIdFieldNumber = 2,
    kRunnerupIdFieldNumber = 3,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 winner_id = 2;
  bool has_winner_id() const;
  private:
  bool _internal_has_winner_id() const;
  public:
  void clear_winner_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 winner_id() const;
  void set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_winner_id() const;
  void _internal_set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 runnerup_id = 3;
  bool has_runnerup_id() const;
  private:
  bool _internal_has_runnerup_id() const;
  public:
  void clear_runnerup_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 runnerup_id() const;
  void set_runnerup_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_runnerup_id() const;
  void _internal_set_runnerup_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVoteTeamGuess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 winner_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 runnerup_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVoteGenericSelection PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVoteGenericSelection) */ {
 public:
  inline CMsgDOTAPassportVoteGenericSelection() : CMsgDOTAPassportVoteGenericSelection(nullptr) {}
  virtual ~CMsgDOTAPassportVoteGenericSelection();
  explicit constexpr CMsgDOTAPassportVoteGenericSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportVoteGenericSelection(const CMsgDOTAPassportVoteGenericSelection& from);
  CMsgDOTAPassportVoteGenericSelection(CMsgDOTAPassportVoteGenericSelection&& from) noexcept
    : CMsgDOTAPassportVoteGenericSelection() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVoteGenericSelection& operator=(const CMsgDOTAPassportVoteGenericSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportVoteGenericSelection& operator=(CMsgDOTAPassportVoteGenericSelection&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPassportVoteGenericSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportVoteGenericSelection* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVoteGenericSelection*>(
               &_CMsgDOTAPassportVoteGenericSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(CMsgDOTAPassportVoteGenericSelection& a, CMsgDOTAPassportVoteGenericSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportVoteGenericSelection* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportVoteGenericSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportVoteGenericSelection* New() const final {
    return CreateMaybeMessage<CMsgDOTAPassportVoteGenericSelection>(nullptr);
  }

  CMsgDOTAPassportVoteGenericSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPassportVoteGenericSelection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPassportVoteGenericSelection& from);
  void MergeFrom(const CMsgDOTAPassportVoteGenericSelection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportVoteGenericSelection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportVoteGenericSelection";
  }
  protected:
  explicit CMsgDOTAPassportVoteGenericSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSelectionIndexFieldNumber = 1,
    kSelectionFieldNumber = 2,
  };
  // optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
  bool has_selection_index() const;
  private:
  bool _internal_has_selection_index() const;
  public:
  void clear_selection_index();
  ::DOTA_2013PassportSelectionIndices selection_index() const;
  void set_selection_index(::DOTA_2013PassportSelectionIndices value);
  private:
  ::DOTA_2013PassportSelectionIndices _internal_selection_index() const;
  void _internal_set_selection_index(::DOTA_2013PassportSelectionIndices value);
  public:

  // optional uint32 selection = 2;
  bool has_selection() const;
  private:
  bool _internal_has_selection() const;
  public:
  void clear_selection();
  ::PROTOBUF_NAMESPACE_ID::uint32 selection() const;
  void set_selection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_selection() const;
  void _internal_set_selection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVoteGenericSelection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int selection_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 selection_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportStampedPlayer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportStampedPlayer) */ {
 public:
  inline CMsgDOTAPassportStampedPlayer() : CMsgDOTAPassportStampedPlayer(nullptr) {}
  virtual ~CMsgDOTAPassportStampedPlayer();
  explicit constexpr CMsgDOTAPassportStampedPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportStampedPlayer(const CMsgDOTAPassportStampedPlayer& from);
  CMsgDOTAPassportStampedPlayer(CMsgDOTAPassportStampedPlayer&& from) noexcept
    : CMsgDOTAPassportStampedPlayer() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportStampedPlayer& operator=(const CMsgDOTAPassportStampedPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportStampedPlayer& operator=(CMsgDOTAPassportStampedPlayer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPassportStampedPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportStampedPlayer* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportStampedPlayer*>(
               &_CMsgDOTAPassportStampedPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(CMsgDOTAPassportStampedPlayer& a, CMsgDOTAPassportStampedPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportStampedPlayer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportStampedPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportStampedPlayer* New() const final {
    return CreateMaybeMessage<CMsgDOTAPassportStampedPlayer>(nullptr);
  }

  CMsgDOTAPassportStampedPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPassportStampedPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPassportStampedPlayer& from);
  void MergeFrom(const CMsgDOTAPassportStampedPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportStampedPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportStampedPlayer";
  }
  protected:
  explicit CMsgDOTAPassportStampedPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteamIdFieldNumber = 1,
    kStampLevelFieldNumber = 2,
  };
  // optional uint64 steam_id = 1;
  bool has_steam_id() const;
  private:
  bool _internal_has_steam_id() const;
  public:
  void clear_steam_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id() const;
  void set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steam_id() const;
  void _internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 stamp_level = 2;
  bool has_stamp_level() const;
  private:
  bool _internal_has_stamp_level() const;
  public:
  void clear_stamp_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 stamp_level() const;
  void set_stamp_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stamp_level() const;
  void _internal_set_stamp_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportStampedPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steam_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stamp_level_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportPlayerCardChallenge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportPlayerCardChallenge) */ {
 public:
  inline CMsgDOTAPassportPlayerCardChallenge() : CMsgDOTAPassportPlayerCardChallenge(nullptr) {}
  virtual ~CMsgDOTAPassportPlayerCardChallenge();
  explicit constexpr CMsgDOTAPassportPlayerCardChallenge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportPlayerCardChallenge(const CMsgDOTAPassportPlayerCardChallenge& from);
  CMsgDOTAPassportPlayerCardChallenge(CMsgDOTAPassportPlayerCardChallenge&& from) noexcept
    : CMsgDOTAPassportPlayerCardChallenge() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportPlayerCardChallenge& operator=(const CMsgDOTAPassportPlayerCardChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportPlayerCardChallenge& operator=(CMsgDOTAPassportPlayerCardChallenge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPassportPlayerCardChallenge& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportPlayerCardChallenge* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportPlayerCardChallenge*>(
               &_CMsgDOTAPassportPlayerCardChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(CMsgDOTAPassportPlayerCardChallenge& a, CMsgDOTAPassportPlayerCardChallenge& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportPlayerCardChallenge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportPlayerCardChallenge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportPlayerCardChallenge* New() const final {
    return CreateMaybeMessage<CMsgDOTAPassportPlayerCardChallenge>(nullptr);
  }

  CMsgDOTAPassportPlayerCardChallenge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPassportPlayerCardChallenge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPassportPlayerCardChallenge& from);
  void MergeFrom(const CMsgDOTAPassportPlayerCardChallenge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportPlayerCardChallenge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportPlayerCardChallenge";
  }
  protected:
  explicit CMsgDOTAPassportPlayerCardChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallengeIdFieldNumber = 1,
  };
  // optional uint32 challenge_id = 1;
  bool has_challenge_id() const;
  private:
  bool _internal_has_challenge_id() const;
  public:
  void clear_challenge_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_id() const;
  void set_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_challenge_id() const;
  void _internal_set_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportPlayerCardChallenge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 challenge_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAPassportVote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAPassportVote) */ {
 public:
  inline CMsgDOTAPassportVote() : CMsgDOTAPassportVote(nullptr) {}
  virtual ~CMsgDOTAPassportVote();
  explicit constexpr CMsgDOTAPassportVote(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAPassportVote(const CMsgDOTAPassportVote& from);
  CMsgDOTAPassportVote(CMsgDOTAPassportVote&& from) noexcept
    : CMsgDOTAPassportVote() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAPassportVote& operator=(const CMsgDOTAPassportVote& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAPassportVote& operator=(CMsgDOTAPassportVote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAPassportVote& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAPassportVote* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAPassportVote*>(
               &_CMsgDOTAPassportVote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CMsgDOTAPassportVote& a, CMsgDOTAPassportVote& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAPassportVote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAPassportVote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAPassportVote* New() const final {
    return CreateMaybeMessage<CMsgDOTAPassportVote>(nullptr);
  }

  CMsgDOTAPassportVote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAPassportVote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAPassportVote& from);
  void MergeFrom(const CMsgDOTAPassportVote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAPassportVote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAPassportVote";
  }
  protected:
  explicit CMsgDOTAPassportVote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamVotesFieldNumber = 1,
    kGenericSelectionsFieldNumber = 2,
    kStampedPlayersFieldNumber = 3,
    kPlayerCardChallengesFieldNumber = 4,
  };
  // repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
  int team_votes_size() const;
  private:
  int _internal_team_votes_size() const;
  public:
  void clear_team_votes();
  ::CMsgDOTAPassportVoteTeamGuess* mutable_team_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
      mutable_team_votes();
  private:
  const ::CMsgDOTAPassportVoteTeamGuess& _internal_team_votes(int index) const;
  ::CMsgDOTAPassportVoteTeamGuess* _internal_add_team_votes();
  public:
  const ::CMsgDOTAPassportVoteTeamGuess& team_votes(int index) const;
  ::CMsgDOTAPassportVoteTeamGuess* add_team_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
      team_votes() const;

  // repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
  int generic_selections_size() const;
  private:
  int _internal_generic_selections_size() const;
  public:
  void clear_generic_selections();
  ::CMsgDOTAPassportVoteGenericSelection* mutable_generic_selections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
      mutable_generic_selections();
  private:
  const ::CMsgDOTAPassportVoteGenericSelection& _internal_generic_selections(int index) const;
  ::CMsgDOTAPassportVoteGenericSelection* _internal_add_generic_selections();
  public:
  const ::CMsgDOTAPassportVoteGenericSelection& generic_selections(int index) const;
  ::CMsgDOTAPassportVoteGenericSelection* add_generic_selections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
      generic_selections() const;

  // repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
  int stamped_players_size() const;
  private:
  int _internal_stamped_players_size() const;
  public:
  void clear_stamped_players();
  ::CMsgDOTAPassportStampedPlayer* mutable_stamped_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
      mutable_stamped_players();
  private:
  const ::CMsgDOTAPassportStampedPlayer& _internal_stamped_players(int index) const;
  ::CMsgDOTAPassportStampedPlayer* _internal_add_stamped_players();
  public:
  const ::CMsgDOTAPassportStampedPlayer& stamped_players(int index) const;
  ::CMsgDOTAPassportStampedPlayer* add_stamped_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
      stamped_players() const;

  // repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
  int player_card_challenges_size() const;
  private:
  int _internal_player_card_challenges_size() const;
  public:
  void clear_player_card_challenges();
  ::CMsgDOTAPassportPlayerCardChallenge* mutable_player_card_challenges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >*
      mutable_player_card_challenges();
  private:
  const ::CMsgDOTAPassportPlayerCardChallenge& _internal_player_card_challenges(int index) const;
  ::CMsgDOTAPassportPlayerCardChallenge* _internal_add_player_card_challenges();
  public:
  const ::CMsgDOTAPassportPlayerCardChallenge& player_card_challenges(int index) const;
  ::CMsgDOTAPassportPlayerCardChallenge* add_player_card_challenges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >&
      player_card_challenges() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAPassportVote)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess > team_votes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection > generic_selections_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer > stamped_players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge > player_card_challenges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetPlayerCardRosterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetPlayerCardRosterRequest) */ {
 public:
  inline CMsgClientToGCGetPlayerCardRosterRequest() : CMsgClientToGCGetPlayerCardRosterRequest(nullptr) {}
  virtual ~CMsgClientToGCGetPlayerCardRosterRequest();
  explicit constexpr CMsgClientToGCGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetPlayerCardRosterRequest(const CMsgClientToGCGetPlayerCardRosterRequest& from);
  CMsgClientToGCGetPlayerCardRosterRequest(CMsgClientToGCGetPlayerCardRosterRequest&& from) noexcept
    : CMsgClientToGCGetPlayerCardRosterRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetPlayerCardRosterRequest& operator=(const CMsgClientToGCGetPlayerCardRosterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetPlayerCardRosterRequest& operator=(CMsgClientToGCGetPlayerCardRosterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCGetPlayerCardRosterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetPlayerCardRosterRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetPlayerCardRosterRequest*>(
               &_CMsgClientToGCGetPlayerCardRosterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(CMsgClientToGCGetPlayerCardRosterRequest& a, CMsgClientToGCGetPlayerCardRosterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetPlayerCardRosterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCGetPlayerCardRosterRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCGetPlayerCardRosterRequest>(nullptr);
  }

  CMsgClientToGCGetPlayerCardRosterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCGetPlayerCardRosterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from);
  void MergeFrom(const CMsgClientToGCGetPlayerCardRosterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetPlayerCardRosterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetPlayerCardRosterRequest";
  }
  protected:
  explicit CMsgClientToGCGetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetPlayerCardRosterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCGetPlayerCardRosterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCGetPlayerCardRosterResponse) */ {
 public:
  inline CMsgClientToGCGetPlayerCardRosterResponse() : CMsgClientToGCGetPlayerCardRosterResponse(nullptr) {}
  virtual ~CMsgClientToGCGetPlayerCardRosterResponse();
  explicit constexpr CMsgClientToGCGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCGetPlayerCardRosterResponse(const CMsgClientToGCGetPlayerCardRosterResponse& from);
  CMsgClientToGCGetPlayerCardRosterResponse(CMsgClientToGCGetPlayerCardRosterResponse&& from) noexcept
    : CMsgClientToGCGetPlayerCardRosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCGetPlayerCardRosterResponse& operator=(const CMsgClientToGCGetPlayerCardRosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCGetPlayerCardRosterResponse& operator=(CMsgClientToGCGetPlayerCardRosterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCGetPlayerCardRosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCGetPlayerCardRosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCGetPlayerCardRosterResponse*>(
               &_CMsgClientToGCGetPlayerCardRosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(CMsgClientToGCGetPlayerCardRosterResponse& a, CMsgClientToGCGetPlayerCardRosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCGetPlayerCardRosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCGetPlayerCardRosterResponse* New() const final {
    return CreateMaybeMessage<CMsgClientToGCGetPlayerCardRosterResponse>(nullptr);
  }

  CMsgClientToGCGetPlayerCardRosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCGetPlayerCardRosterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from);
  void MergeFrom(const CMsgClientToGCGetPlayerCardRosterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCGetPlayerCardRosterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCGetPlayerCardRosterResponse";
  }
  protected:
  explicit CMsgClientToGCGetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCGetPlayerCardRosterResponse_Result Result;
  static constexpr Result SUCCESS =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_SUCCESS;
  static constexpr Result ERROR_UNSPECIFIED =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED;
  static constexpr Result ERROR_INVALID_LEAGUE_ID =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID;
  static constexpr Result ERROR_INVALID_TIMESTAMP =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
  static inline bool Result_IsValid(int value) {
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgClientToGCGetPlayerCardRosterResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgClientToGCGetPlayerCardRosterResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerCardItemIdFieldNumber = 2,
    kResultFieldNumber = 1,
    kScoreFieldNumber = 3,
    kFinalizedFieldNumber = 4,
    kPercentileFieldNumber = 5,
  };
  // repeated uint64 player_card_item_id = 2;
  int player_card_item_id_size() const;
  private:
  int _internal_player_card_item_id_size() const;
  public:
  void clear_player_card_item_id();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_card_item_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_player_card_item_id() const;
  void _internal_add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_player_card_item_id();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 player_card_item_id(int index) const;
  void set_player_card_item_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      player_card_item_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_player_card_item_id();

  // optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgClientToGCGetPlayerCardRosterResponse_Result result() const;
  void set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value);
  private:
  ::CMsgClientToGCGetPlayerCardRosterResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value);
  public:

  // optional float score = 3;
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // optional bool finalized = 4;
  bool has_finalized() const;
  private:
  bool _internal_has_finalized() const;
  public:
  void clear_finalized();
  bool finalized() const;
  void set_finalized(bool value);
  private:
  bool _internal_finalized() const;
  void _internal_set_finalized(bool value);
  public:

  // optional float percentile = 5;
  bool has_percentile() const;
  private:
  bool _internal_has_percentile() const;
  public:
  void clear_percentile();
  float percentile() const;
  void set_percentile(float value);
  private:
  float _internal_percentile() const;
  void _internal_set_percentile(float value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCGetPlayerCardRosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > player_card_item_id_;
  int result_;
  float score_;
  bool finalized_;
  float percentile_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCSetPlayerCardRosterRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCSetPlayerCardRosterRequest) */ {
 public:
  inline CMsgClientToGCSetPlayerCardRosterRequest() : CMsgClientToGCSetPlayerCardRosterRequest(nullptr) {}
  virtual ~CMsgClientToGCSetPlayerCardRosterRequest();
  explicit constexpr CMsgClientToGCSetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCSetPlayerCardRosterRequest(const CMsgClientToGCSetPlayerCardRosterRequest& from);
  CMsgClientToGCSetPlayerCardRosterRequest(CMsgClientToGCSetPlayerCardRosterRequest&& from) noexcept
    : CMsgClientToGCSetPlayerCardRosterRequest() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCSetPlayerCardRosterRequest& operator=(const CMsgClientToGCSetPlayerCardRosterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCSetPlayerCardRosterRequest& operator=(CMsgClientToGCSetPlayerCardRosterRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCSetPlayerCardRosterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCSetPlayerCardRosterRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCSetPlayerCardRosterRequest*>(
               &_CMsgClientToGCSetPlayerCardRosterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CMsgClientToGCSetPlayerCardRosterRequest& a, CMsgClientToGCSetPlayerCardRosterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCSetPlayerCardRosterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCSetPlayerCardRosterRequest* New() const final {
    return CreateMaybeMessage<CMsgClientToGCSetPlayerCardRosterRequest>(nullptr);
  }

  CMsgClientToGCSetPlayerCardRosterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCSetPlayerCardRosterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from);
  void MergeFrom(const CMsgClientToGCSetPlayerCardRosterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCSetPlayerCardRosterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCSetPlayerCardRosterRequest";
  }
  protected:
  explicit CMsgClientToGCSetPlayerCardRosterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueIdFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kPlayerCardItemIdFieldNumber = 4,
    kSlotFieldNumber = 3,
    kEventIdFieldNumber = 5,
  };
  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 player_card_item_id = 4;
  bool has_player_card_item_id() const;
  private:
  bool _internal_has_player_card_item_id() const;
  public:
  void clear_player_card_item_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 player_card_item_id() const;
  void set_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_player_card_item_id() const;
  void _internal_set_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 slot = 3;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  ::PROTOBUF_NAMESPACE_ID::uint32 slot() const;
  void set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_slot() const;
  void _internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 event_id = 5;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCSetPlayerCardRosterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 player_card_item_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 slot_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgClientToGCSetPlayerCardRosterResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgClientToGCSetPlayerCardRosterResponse) */ {
 public:
  inline CMsgClientToGCSetPlayerCardRosterResponse() : CMsgClientToGCSetPlayerCardRosterResponse(nullptr) {}
  virtual ~CMsgClientToGCSetPlayerCardRosterResponse();
  explicit constexpr CMsgClientToGCSetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgClientToGCSetPlayerCardRosterResponse(const CMsgClientToGCSetPlayerCardRosterResponse& from);
  CMsgClientToGCSetPlayerCardRosterResponse(CMsgClientToGCSetPlayerCardRosterResponse&& from) noexcept
    : CMsgClientToGCSetPlayerCardRosterResponse() {
    *this = ::std::move(from);
  }

  inline CMsgClientToGCSetPlayerCardRosterResponse& operator=(const CMsgClientToGCSetPlayerCardRosterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgClientToGCSetPlayerCardRosterResponse& operator=(CMsgClientToGCSetPlayerCardRosterResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgClientToGCSetPlayerCardRosterResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgClientToGCSetPlayerCardRosterResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCSetPlayerCardRosterResponse*>(
               &_CMsgClientToGCSetPlayerCardRosterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(CMsgClientToGCSetPlayerCardRosterResponse& a, CMsgClientToGCSetPlayerCardRosterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgClientToGCSetPlayerCardRosterResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgClientToGCSetPlayerCardRosterResponse* New() const final {
    return CreateMaybeMessage<CMsgClientToGCSetPlayerCardRosterResponse>(nullptr);
  }

  CMsgClientToGCSetPlayerCardRosterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgClientToGCSetPlayerCardRosterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from);
  void MergeFrom(const CMsgClientToGCSetPlayerCardRosterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgClientToGCSetPlayerCardRosterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgClientToGCSetPlayerCardRosterResponse";
  }
  protected:
  explicit CMsgClientToGCSetPlayerCardRosterResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgClientToGCSetPlayerCardRosterResponse_Result Result;
  static constexpr Result SUCCESS =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_SUCCESS;
  static constexpr Result ERROR_UNSPECIFIED =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_UNSPECIFIED;
  static constexpr Result ERROR_INVALID_LEAGUE_ID =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_LEAGUE_ID;
  static constexpr Result ERROR_INVALID_TIMESTAMP =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_TIMESTAMP;
  static constexpr Result ERROR_PLAYER_CARD_NOT_OWNED =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_PLAYER_CARD_NOT_OWNED;
  static constexpr Result ERROR_INVALID_SLOT =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_INVALID_SLOT;
  static constexpr Result ERROR_FAILED_CARD_INFO =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_FAILED_CARD_INFO;
  static constexpr Result ERROR_ACCOUNT_DUPLICATE =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_ACCOUNT_DUPLICATE;
  static constexpr Result ERROR_LOCKED_TIMESTAMP =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_ERROR_LOCKED_TIMESTAMP;
  static inline bool Result_IsValid(int value) {
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MIN;
  static constexpr Result Result_MAX =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    CMsgClientToGCSetPlayerCardRosterResponse_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Result* value) {
    return CMsgClientToGCSetPlayerCardRosterResponse_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  ::CMsgClientToGCSetPlayerCardRosterResponse_Result result() const;
  void set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value);
  private:
  ::CMsgClientToGCSetPlayerCardRosterResponse_Result _internal_result() const;
  void _internal_set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgClientToGCSetPlayerCardRosterResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int result_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo) */ {
 public:
  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() : CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(nullptr) {}
  virtual ~CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo();
  explicit constexpr CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from);
  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo&& from) noexcept
    : CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& operator=(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& operator=(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo*>(
               &_CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& a, CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(nullptr);
  }

  CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from);
  void MergeFrom(const CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo";
  }
  protected:
  explicit CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayTimestampsFieldNumber = 5,
    kLeagueNameFieldNumber = 2,
    kLeagueIdFieldNumber = 1,
    kStartTimestampFieldNumber = 3,
    kEndTimestampFieldNumber = 4,
    kStatusFieldNumber = 8,
  };
  // repeated uint32 day_timestamps = 5;
  int day_timestamps_size() const;
  private:
  int _internal_day_timestamps_size() const;
  public:
  void clear_day_timestamps();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_day_timestamps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_day_timestamps() const;
  void _internal_add_day_timestamps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_day_timestamps();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 day_timestamps(int index) const;
  void set_day_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_day_timestamps(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      day_timestamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_day_timestamps();

  // optional string league_name = 2;
  bool has_league_name() const;
  private:
  bool _internal_has_league_name() const;
  public:
  void clear_league_name();
  const std::string& league_name() const;
  void set_league_name(const std::string& value);
  void set_league_name(std::string&& value);
  void set_league_name(const char* value);
  void set_league_name(const char* value, size_t size);
  std::string* mutable_league_name();
  std::string* release_league_name();
  void set_allocated_league_name(std::string* league_name);
  private:
  const std::string& _internal_league_name() const;
  void _internal_set_league_name(const std::string& value);
  std::string* _internal_mutable_league_name();
  public:

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  private:
  bool _internal_has_league_id() const;
  public:
  void clear_league_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id() const;
  void set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_league_id() const;
  void _internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_timestamp = 3;
  bool has_start_timestamp() const;
  private:
  bool _internal_has_start_timestamp() const;
  public:
  void clear_start_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_timestamp() const;
  void set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_timestamp() const;
  void _internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 end_timestamp = 4;
  bool has_end_timestamp() const;
  private:
  bool _internal_has_end_timestamp() const;
  public:
  void clear_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 end_timestamp() const;
  void set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_end_timestamp() const;
  void _internal_set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus status() const;
  void set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value);
  private:
  ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus _internal_status() const;
  void _internal_set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > day_timestamps_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr league_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 league_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 end_timestamp_;
  int status_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTAFantasyDPCLeagueStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTAFantasyDPCLeagueStatus) */ {
 public:
  inline CMsgDOTAFantasyDPCLeagueStatus() : CMsgDOTAFantasyDPCLeagueStatus(nullptr) {}
  virtual ~CMsgDOTAFantasyDPCLeagueStatus();
  explicit constexpr CMsgDOTAFantasyDPCLeagueStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTAFantasyDPCLeagueStatus(const CMsgDOTAFantasyDPCLeagueStatus& from);
  CMsgDOTAFantasyDPCLeagueStatus(CMsgDOTAFantasyDPCLeagueStatus&& from) noexcept
    : CMsgDOTAFantasyDPCLeagueStatus() {
    *this = ::std::move(from);
  }

  inline CMsgDOTAFantasyDPCLeagueStatus& operator=(const CMsgDOTAFantasyDPCLeagueStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTAFantasyDPCLeagueStatus& operator=(CMsgDOTAFantasyDPCLeagueStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTAFantasyDPCLeagueStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTAFantasyDPCLeagueStatus* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAFantasyDPCLeagueStatus*>(
               &_CMsgDOTAFantasyDPCLeagueStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(CMsgDOTAFantasyDPCLeagueStatus& a, CMsgDOTAFantasyDPCLeagueStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTAFantasyDPCLeagueStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTAFantasyDPCLeagueStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTAFantasyDPCLeagueStatus* New() const final {
    return CreateMaybeMessage<CMsgDOTAFantasyDPCLeagueStatus>(nullptr);
  }

  CMsgDOTAFantasyDPCLeagueStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTAFantasyDPCLeagueStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTAFantasyDPCLeagueStatus& from);
  void MergeFrom(const CMsgDOTAFantasyDPCLeagueStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTAFantasyDPCLeagueStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTAFantasyDPCLeagueStatus";
  }
  protected:
  explicit CMsgDOTAFantasyDPCLeagueStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo LeagueInfo;

  typedef CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus ERosterStatus;
  static constexpr ERosterStatus UNSET =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_UNSET;
  static constexpr ERosterStatus PARTIAL =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_PARTIAL;
  static constexpr ERosterStatus FULL =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_FULL;
  static constexpr ERosterStatus CONCLUDED =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_CONCLUDED;
  static inline bool ERosterStatus_IsValid(int value) {
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(value);
  }
  static constexpr ERosterStatus ERosterStatus_MIN =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MIN;
  static constexpr ERosterStatus ERosterStatus_MAX =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_MAX;
  static constexpr int ERosterStatus_ARRAYSIZE =
    CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_ERosterStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ERosterStatus_descriptor() {
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ERosterStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ERosterStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ERosterStatus_Name.");
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Name(enum_t_value);
  }
  static inline bool ERosterStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ERosterStatus* value) {
    return CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLeagueInfosFieldNumber = 1,
  };
  // repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
  int league_infos_size() const;
  private:
  int _internal_league_infos_size() const;
  public:
  void clear_league_infos();
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* mutable_league_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >*
      mutable_league_infos();
  private:
  const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& _internal_league_infos(int index) const;
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* _internal_add_league_infos();
  public:
  const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& league_infos(int index) const;
  ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* add_league_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >&
      league_infos() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTAFantasyDPCLeagueStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo > league_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults_Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults.Player) */ {
 public:
  inline CMsgDOTADPCSearchResults_Player() : CMsgDOTADPCSearchResults_Player(nullptr) {}
  virtual ~CMsgDOTADPCSearchResults_Player();
  explicit constexpr CMsgDOTADPCSearchResults_Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults_Player(const CMsgDOTADPCSearchResults_Player& from);
  CMsgDOTADPCSearchResults_Player(CMsgDOTADPCSearchResults_Player&& from) noexcept
    : CMsgDOTADPCSearchResults_Player() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults_Player& operator=(const CMsgDOTADPCSearchResults_Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults_Player& operator=(CMsgDOTADPCSearchResults_Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCSearchResults_Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults_Player*>(
               &_CMsgDOTADPCSearchResults_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(CMsgDOTADPCSearchResults_Player& a, CMsgDOTADPCSearchResults_Player& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults_Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults_Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCSearchResults_Player* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_Player>(nullptr);
  }

  CMsgDOTADPCSearchResults_Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCSearchResults_Player& from);
  void MergeFrom(const CMsgDOTADPCSearchResults_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults_Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults.Player";
  }
  protected:
  explicit CMsgDOTADPCSearchResults_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRealNameFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string real_name = 3;
  bool has_real_name() const;
  private:
  bool _internal_has_real_name() const;
  public:
  void clear_real_name();
  const std::string& real_name() const;
  void set_real_name(const std::string& value);
  void set_real_name(std::string&& value);
  void set_real_name(const char* value);
  void set_real_name(const char* value, size_t size);
  std::string* mutable_real_name();
  std::string* release_real_name();
  void set_allocated_real_name(std::string* real_name);
  private:
  const std::string& _internal_real_name() const;
  void _internal_set_real_name(const std::string& value);
  std::string* _internal_mutable_real_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr real_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults_Team PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults.Team) */ {
 public:
  inline CMsgDOTADPCSearchResults_Team() : CMsgDOTADPCSearchResults_Team(nullptr) {}
  virtual ~CMsgDOTADPCSearchResults_Team();
  explicit constexpr CMsgDOTADPCSearchResults_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults_Team(const CMsgDOTADPCSearchResults_Team& from);
  CMsgDOTADPCSearchResults_Team(CMsgDOTADPCSearchResults_Team&& from) noexcept
    : CMsgDOTADPCSearchResults_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults_Team& operator=(const CMsgDOTADPCSearchResults_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults_Team& operator=(CMsgDOTADPCSearchResults_Team&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCSearchResults_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults_Team*>(
               &_CMsgDOTADPCSearchResults_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(CMsgDOTADPCSearchResults_Team& a, CMsgDOTADPCSearchResults_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults_Team* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCSearchResults_Team* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_Team>(nullptr);
  }

  CMsgDOTADPCSearchResults_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCSearchResults_Team& from);
  void MergeFrom(const CMsgDOTADPCSearchResults_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults_Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults.Team";
  }
  protected:
  explicit CMsgDOTADPCSearchResults_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUrlFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string url = 3;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults_League PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults.League) */ {
 public:
  inline CMsgDOTADPCSearchResults_League() : CMsgDOTADPCSearchResults_League(nullptr) {}
  virtual ~CMsgDOTADPCSearchResults_League();
  explicit constexpr CMsgDOTADPCSearchResults_League(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults_League(const CMsgDOTADPCSearchResults_League& from);
  CMsgDOTADPCSearchResults_League(CMsgDOTADPCSearchResults_League&& from) noexcept
    : CMsgDOTADPCSearchResults_League() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults_League& operator=(const CMsgDOTADPCSearchResults_League& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults_League& operator=(CMsgDOTADPCSearchResults_League&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCSearchResults_League& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults_League* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults_League*>(
               &_CMsgDOTADPCSearchResults_League_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(CMsgDOTADPCSearchResults_League& a, CMsgDOTADPCSearchResults_League& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults_League* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults_League* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCSearchResults_League* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_League>(nullptr);
  }

  CMsgDOTADPCSearchResults_League* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults_League>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCSearchResults_League& from);
  void MergeFrom(const CMsgDOTADPCSearchResults_League& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults_League* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults.League";
  }
  protected:
  explicit CMsgDOTADPCSearchResults_League(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults.League)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCSearchResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCSearchResults) */ {
 public:
  inline CMsgDOTADPCSearchResults() : CMsgDOTADPCSearchResults(nullptr) {}
  virtual ~CMsgDOTADPCSearchResults();
  explicit constexpr CMsgDOTADPCSearchResults(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCSearchResults(const CMsgDOTADPCSearchResults& from);
  CMsgDOTADPCSearchResults(CMsgDOTADPCSearchResults&& from) noexcept
    : CMsgDOTADPCSearchResults() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCSearchResults& operator=(const CMsgDOTADPCSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCSearchResults& operator=(CMsgDOTADPCSearchResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCSearchResults& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCSearchResults* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCSearchResults*>(
               &_CMsgDOTADPCSearchResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(CMsgDOTADPCSearchResults& a, CMsgDOTADPCSearchResults& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCSearchResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCSearchResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCSearchResults* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults>(nullptr);
  }

  CMsgDOTADPCSearchResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCSearchResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCSearchResults& from);
  void MergeFrom(const CMsgDOTADPCSearchResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCSearchResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCSearchResults";
  }
  protected:
  explicit CMsgDOTADPCSearchResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCSearchResults_Player Player;
  typedef CMsgDOTADPCSearchResults_Team Team;
  typedef CMsgDOTADPCSearchResults_League League;

  typedef CMsgDOTADPCSearchResults_ESearchResultsDesired ESearchResultsDesired;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_Players =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Players;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_Teams =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Teams;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_Leagues =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_Leagues;
  static constexpr ESearchResultsDesired k_ESearchResultsDesired_All =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_k_ESearchResultsDesired_All;
  static inline bool ESearchResultsDesired_IsValid(int value) {
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_IsValid(value);
  }
  static constexpr ESearchResultsDesired ESearchResultsDesired_MIN =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MIN;
  static constexpr ESearchResultsDesired ESearchResultsDesired_MAX =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_MAX;
  static constexpr int ESearchResultsDesired_ARRAYSIZE =
    CMsgDOTADPCSearchResults_ESearchResultsDesired_ESearchResultsDesired_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ESearchResultsDesired_descriptor() {
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor();
  }
  template<typename T>
  static inline const std::string& ESearchResultsDesired_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ESearchResultsDesired>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ESearchResultsDesired_Name.");
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_Name(enum_t_value);
  }
  static inline bool ESearchResultsDesired_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ESearchResultsDesired* value) {
    return CMsgDOTADPCSearchResults_ESearchResultsDesired_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
    kTeamsFieldNumber = 2,
    kLeaguesFieldNumber = 3,
  };
  // repeated .CMsgDOTADPCSearchResults.Player players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::CMsgDOTADPCSearchResults_Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >*
      mutable_players();
  private:
  const ::CMsgDOTADPCSearchResults_Player& _internal_players(int index) const;
  ::CMsgDOTADPCSearchResults_Player* _internal_add_players();
  public:
  const ::CMsgDOTADPCSearchResults_Player& players(int index) const;
  ::CMsgDOTADPCSearchResults_Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >&
      players() const;

  // repeated .CMsgDOTADPCSearchResults.Team teams = 2;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTADPCSearchResults_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >*
      mutable_teams();
  private:
  const ::CMsgDOTADPCSearchResults_Team& _internal_teams(int index) const;
  ::CMsgDOTADPCSearchResults_Team* _internal_add_teams();
  public:
  const ::CMsgDOTADPCSearchResults_Team& teams(int index) const;
  ::CMsgDOTADPCSearchResults_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >&
      teams() const;

  // repeated .CMsgDOTADPCSearchResults.League leagues = 3;
  int leagues_size() const;
  private:
  int _internal_leagues_size() const;
  public:
  void clear_leagues();
  ::CMsgDOTADPCSearchResults_League* mutable_leagues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >*
      mutable_leagues();
  private:
  const ::CMsgDOTADPCSearchResults_League& _internal_leagues(int index) const;
  ::CMsgDOTADPCSearchResults_League* _internal_add_leagues();
  public:
  const ::CMsgDOTADPCSearchResults_League& leagues(int index) const;
  ::CMsgDOTADPCSearchResults_League* add_leagues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >&
      leagues() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCSearchResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player > players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team > teams_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League > leagues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCTeamFavoriteRankings_Team PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCTeamFavoriteRankings.Team) */ {
 public:
  inline CMsgDOTADPCTeamFavoriteRankings_Team() : CMsgDOTADPCTeamFavoriteRankings_Team(nullptr) {}
  virtual ~CMsgDOTADPCTeamFavoriteRankings_Team();
  explicit constexpr CMsgDOTADPCTeamFavoriteRankings_Team(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCTeamFavoriteRankings_Team(const CMsgDOTADPCTeamFavoriteRankings_Team& from);
  CMsgDOTADPCTeamFavoriteRankings_Team(CMsgDOTADPCTeamFavoriteRankings_Team&& from) noexcept
    : CMsgDOTADPCTeamFavoriteRankings_Team() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCTeamFavoriteRankings_Team& operator=(const CMsgDOTADPCTeamFavoriteRankings_Team& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCTeamFavoriteRankings_Team& operator=(CMsgDOTADPCTeamFavoriteRankings_Team&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCTeamFavoriteRankings_Team& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCTeamFavoriteRankings_Team* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCTeamFavoriteRankings_Team*>(
               &_CMsgDOTADPCTeamFavoriteRankings_Team_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(CMsgDOTADPCTeamFavoriteRankings_Team& a, CMsgDOTADPCTeamFavoriteRankings_Team& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCTeamFavoriteRankings_Team* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCTeamFavoriteRankings_Team* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCTeamFavoriteRankings_Team* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCTeamFavoriteRankings_Team>(nullptr);
  }

  CMsgDOTADPCTeamFavoriteRankings_Team* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCTeamFavoriteRankings_Team>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCTeamFavoriteRankings_Team& from);
  void MergeFrom(const CMsgDOTADPCTeamFavoriteRankings_Team& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCTeamFavoriteRankings_Team* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCTeamFavoriteRankings.Team";
  }
  protected:
  explicit CMsgDOTADPCTeamFavoriteRankings_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kFavoritesFieldNumber = 2,
  };
  // optional uint32 team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 favorites = 2;
  bool has_favorites() const;
  private:
  bool _internal_has_favorites() const;
  public:
  void clear_favorites();
  ::PROTOBUF_NAMESPACE_ID::uint32 favorites() const;
  void set_favorites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_favorites() const;
  void _internal_set_favorites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCTeamFavoriteRankings.Team)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 team_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 favorites_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTADPCTeamFavoriteRankings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgDOTADPCTeamFavoriteRankings) */ {
 public:
  inline CMsgDOTADPCTeamFavoriteRankings() : CMsgDOTADPCTeamFavoriteRankings(nullptr) {}
  virtual ~CMsgDOTADPCTeamFavoriteRankings();
  explicit constexpr CMsgDOTADPCTeamFavoriteRankings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CMsgDOTADPCTeamFavoriteRankings(const CMsgDOTADPCTeamFavoriteRankings& from);
  CMsgDOTADPCTeamFavoriteRankings(CMsgDOTADPCTeamFavoriteRankings&& from) noexcept
    : CMsgDOTADPCTeamFavoriteRankings() {
    *this = ::std::move(from);
  }

  inline CMsgDOTADPCTeamFavoriteRankings& operator=(const CMsgDOTADPCTeamFavoriteRankings& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgDOTADPCTeamFavoriteRankings& operator=(CMsgDOTADPCTeamFavoriteRankings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgDOTADPCTeamFavoriteRankings& default_instance() {
    return *internal_default_instance();
  }
  static inline const CMsgDOTADPCTeamFavoriteRankings* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTADPCTeamFavoriteRankings*>(
               &_CMsgDOTADPCTeamFavoriteRankings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CMsgDOTADPCTeamFavoriteRankings& a, CMsgDOTADPCTeamFavoriteRankings& b) {
    a.Swap(&b);
  }
  inline void Swap(CMsgDOTADPCTeamFavoriteRankings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgDOTADPCTeamFavoriteRankings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTADPCTeamFavoriteRankings* New() const final {
    return CreateMaybeMessage<CMsgDOTADPCTeamFavoriteRankings>(nullptr);
  }

  CMsgDOTADPCTeamFavoriteRankings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTADPCTeamFavoriteRankings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgDOTADPCTeamFavoriteRankings& from);
  void MergeFrom(const CMsgDOTADPCTeamFavoriteRankings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTADPCTeamFavoriteRankings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgDOTADPCTeamFavoriteRankings";
  }
  protected:
  explicit CMsgDOTADPCTeamFavoriteRankings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fgcmessages_5fclient_5ffantasy_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgDOTADPCTeamFavoriteRankings_Team Team;

  // accessors -------------------------------------------------------

  enum : int {
    kTeamsFieldNumber = 1,
  };
  // repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
  int teams_size() const;
  private:
  int _internal_teams_size() const;
  public:
  void clear_teams();
  ::CMsgDOTADPCTeamFavoriteRankings_Team* mutable_teams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >*
      mutable_teams();
  private:
  const ::CMsgDOTADPCTeamFavoriteRankings_Team& _internal_teams(int index) const;
  ::CMsgDOTADPCTeamFavoriteRankings_Team* _internal_add_teams();
  public:
  const ::CMsgDOTADPCTeamFavoriteRankings_Team& teams(int index) const;
  ::CMsgDOTADPCTeamFavoriteRankings_Team* add_teams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >&
      teams() const;

  // @@protoc_insertion_point(class_scope:CMsgDOTADPCTeamFavoriteRankings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team > teams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fgcmessages_5fclient_5ffantasy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgDOTAPlayerInfo_Results

// optional uint32 league_id = 1;
inline bool CMsgDOTAPlayerInfo_Results::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_Results::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAPlayerInfo_Results::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_Results::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_Results::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.Results.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAPlayerInfo_Results::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  league_id_ = value;
}
inline void CMsgDOTAPlayerInfo_Results::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.Results.league_id)
}

// optional uint32 placement = 2;
inline bool CMsgDOTAPlayerInfo_Results::_internal_has_placement() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_Results::has_placement() const {
  return _internal_has_placement();
}
inline void CMsgDOTAPlayerInfo_Results::clear_placement() {
  placement_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_Results::_internal_placement() const {
  return placement_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_Results::placement() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.Results.placement)
  return _internal_placement();
}
inline void CMsgDOTAPlayerInfo_Results::_internal_set_placement(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  placement_ = value;
}
inline void CMsgDOTAPlayerInfo_Results::set_placement(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_placement(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.Results.placement)
}

// optional uint32 earnings = 3;
inline bool CMsgDOTAPlayerInfo_Results::_internal_has_earnings() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_Results::has_earnings() const {
  return _internal_has_earnings();
}
inline void CMsgDOTAPlayerInfo_Results::clear_earnings() {
  earnings_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_Results::_internal_earnings() const {
  return earnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_Results::earnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.Results.earnings)
  return _internal_earnings();
}
inline void CMsgDOTAPlayerInfo_Results::_internal_set_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  earnings_ = value;
}
inline void CMsgDOTAPlayerInfo_Results::set_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_earnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.Results.earnings)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerInfo_AuditEntry

// optional uint32 start_timestamp = 1;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_start_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_start_timestamp() {
  start_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_AuditEntry::_internal_start_timestamp() const {
  return start_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_AuditEntry::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_timestamp_ = value;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.start_timestamp)
}

// optional uint32 end_timestamp = 2;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_end_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_end_timestamp() {
  end_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_AuditEntry::_internal_end_timestamp() const {
  return end_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_AuditEntry::end_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.end_timestamp)
  return _internal_end_timestamp();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  end_timestamp_ = value;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.end_timestamp)
}

// optional uint32 team_id = 3;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_AuditEntry::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo_AuditEntry::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  team_id_ = value;
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_id)
}

// optional string team_name = 4;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_name)
  return _internal_team_name();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.AuditEntry.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.AuditEntry.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.AuditEntry.team_name)
}

// optional string team_tag = 5;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_tag() {
  team_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
  return _internal_team_tag();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_tag(const std::string& value) {
  _internal_set_team_tag(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::mutable_team_tag() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
  return _internal_mutable_team_tag();
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::_internal_team_tag() const {
  return team_tag_.Get();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::_internal_mutable_team_tag() {
  _has_bits_[0] |= 0x00000002u;
  return team_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.AuditEntry.team_tag)
}

// optional string team_url_logo = 6;
inline bool CMsgDOTAPlayerInfo_AuditEntry::_internal_has_team_url_logo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo_AuditEntry::has_team_url_logo() const {
  return _internal_has_team_url_logo();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::clear_team_url_logo() {
  team_url_logo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::team_url_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
  return _internal_team_url_logo();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_url_logo(const std::string& value) {
  _internal_set_team_url_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::mutable_team_url_logo() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
  return _internal_mutable_team_url_logo();
}
inline const std::string& CMsgDOTAPlayerInfo_AuditEntry::_internal_team_url_logo() const {
  return team_url_logo_.Get();
}
inline void CMsgDOTAPlayerInfo_AuditEntry::_internal_set_team_url_logo(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_url_logo(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  team_url_logo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_url_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_team_url_logo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::_internal_mutable_team_url_logo() {
  _has_bits_[0] |= 0x00000004u;
  return team_url_logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo_AuditEntry::release_team_url_logo() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
  if (!_internal_has_team_url_logo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_url_logo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo_AuditEntry::set_allocated_team_url_logo(std::string* team_url_logo) {
  if (team_url_logo != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_url_logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_url_logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.AuditEntry.team_url_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerInfo

// optional uint32 account_id = 1;
inline bool CMsgDOTAPlayerInfo::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAPlayerInfo::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAPlayerInfo::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  account_id_ = value;
}
inline void CMsgDOTAPlayerInfo::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.account_id)
}

// optional string name = 2;
inline bool CMsgDOTAPlayerInfo::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTAPlayerInfo::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAPlayerInfo::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.name)
  return _internal_name();
}
inline void CMsgDOTAPlayerInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.name)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_name() const {
  return name_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.name)
}
inline void CMsgDOTAPlayerInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.name)
}
inline void CMsgDOTAPlayerInfo::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.name)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.name)
}

// optional string country_code = 3;
inline bool CMsgDOTAPlayerInfo::_internal_has_country_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_country_code() const {
  return _internal_has_country_code();
}
inline void CMsgDOTAPlayerInfo::clear_country_code() {
  country_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAPlayerInfo::country_code() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.country_code)
  return _internal_country_code();
}
inline void CMsgDOTAPlayerInfo::set_country_code(const std::string& value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.country_code)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_country_code() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.country_code)
  return _internal_mutable_country_code();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_country_code() const {
  return country_code_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_country_code(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_country_code(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.country_code)
}
inline void CMsgDOTAPlayerInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.country_code)
}
inline void CMsgDOTAPlayerInfo::set_country_code(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.country_code)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_country_code() {
  _has_bits_[0] |= 0x00000002u;
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.country_code)
  if (!_internal_has_country_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return country_code_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.country_code)
}

// optional .Fantasy_Roles fantasy_role = 4 [default = FANTASY_ROLE_UNDEFINED];
inline bool CMsgDOTAPlayerInfo::_internal_has_fantasy_role() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_fantasy_role() const {
  return _internal_has_fantasy_role();
}
inline void CMsgDOTAPlayerInfo::clear_fantasy_role() {
  fantasy_role_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::Fantasy_Roles CMsgDOTAPlayerInfo::_internal_fantasy_role() const {
  return static_cast< ::Fantasy_Roles >(fantasy_role_);
}
inline ::Fantasy_Roles CMsgDOTAPlayerInfo::fantasy_role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.fantasy_role)
  return _internal_fantasy_role();
}
inline void CMsgDOTAPlayerInfo::_internal_set_fantasy_role(::Fantasy_Roles value) {
  assert(::Fantasy_Roles_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  fantasy_role_ = value;
}
inline void CMsgDOTAPlayerInfo::set_fantasy_role(::Fantasy_Roles value) {
  _internal_set_fantasy_role(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.fantasy_role)
}

// optional uint32 team_id = 5;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTAPlayerInfo::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_id)
  return _internal_team_id();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  team_id_ = value;
}
inline void CMsgDOTAPlayerInfo::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_id)
}

// optional string team_name = 6;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAPlayerInfo::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_name)
  return _internal_team_name();
}
inline void CMsgDOTAPlayerInfo::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_name)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.team_name)
}
inline void CMsgDOTAPlayerInfo::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.team_name)
}
inline void CMsgDOTAPlayerInfo::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.team_name)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000004u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_name)
}

// optional string team_tag = 7;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_tag() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_tag() const {
  return _internal_has_team_tag();
}
inline void CMsgDOTAPlayerInfo::clear_team_tag() {
  team_tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_tag() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_tag)
  return _internal_team_tag();
}
inline void CMsgDOTAPlayerInfo::set_team_tag(const std::string& value) {
  _internal_set_team_tag(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_tag)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_tag() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_tag)
  return _internal_mutable_team_tag();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_tag() const {
  return team_tag_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_team_tag(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  team_tag_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.team_tag)
}
inline void CMsgDOTAPlayerInfo::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.team_tag)
}
inline void CMsgDOTAPlayerInfo::set_team_tag(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.team_tag)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_tag() {
  _has_bits_[0] |= 0x00000008u;
  return team_tag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_tag() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_tag)
  if (!_internal_has_team_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return team_tag_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_tag(std::string* team_tag) {
  if (team_tag != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  team_tag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_tag,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_tag)
}

// optional string sponsor = 8;
inline bool CMsgDOTAPlayerInfo::_internal_has_sponsor() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_sponsor() const {
  return _internal_has_sponsor();
}
inline void CMsgDOTAPlayerInfo::clear_sponsor() {
  sponsor_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CMsgDOTAPlayerInfo::sponsor() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.sponsor)
  return _internal_sponsor();
}
inline void CMsgDOTAPlayerInfo::set_sponsor(const std::string& value) {
  _internal_set_sponsor(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.sponsor)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_sponsor() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.sponsor)
  return _internal_mutable_sponsor();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_sponsor() const {
  return sponsor_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_sponsor(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  sponsor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_sponsor(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  sponsor_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.sponsor)
}
inline void CMsgDOTAPlayerInfo::set_sponsor(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  sponsor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.sponsor)
}
inline void CMsgDOTAPlayerInfo::set_sponsor(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  sponsor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.sponsor)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_sponsor() {
  _has_bits_[0] |= 0x00000010u;
  return sponsor_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_sponsor() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.sponsor)
  if (!_internal_has_sponsor()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return sponsor_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_sponsor(std::string* sponsor) {
  if (sponsor != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  sponsor_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sponsor,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.sponsor)
}

// optional bool is_locked = 9;
inline bool CMsgDOTAPlayerInfo::_internal_has_is_locked() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_is_locked() const {
  return _internal_has_is_locked();
}
inline void CMsgDOTAPlayerInfo::clear_is_locked() {
  is_locked_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CMsgDOTAPlayerInfo::_internal_is_locked() const {
  return is_locked_;
}
inline bool CMsgDOTAPlayerInfo::is_locked() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.is_locked)
  return _internal_is_locked();
}
inline void CMsgDOTAPlayerInfo::_internal_set_is_locked(bool value) {
  _has_bits_[0] |= 0x00000800u;
  is_locked_ = value;
}
inline void CMsgDOTAPlayerInfo::set_is_locked(bool value) {
  _internal_set_is_locked(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.is_locked)
}

// optional bool is_pro = 10;
inline bool CMsgDOTAPlayerInfo::_internal_has_is_pro() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_is_pro() const {
  return _internal_has_is_pro();
}
inline void CMsgDOTAPlayerInfo::clear_is_pro() {
  is_pro_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgDOTAPlayerInfo::_internal_is_pro() const {
  return is_pro_;
}
inline bool CMsgDOTAPlayerInfo::is_pro() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.is_pro)
  return _internal_is_pro();
}
inline void CMsgDOTAPlayerInfo::_internal_set_is_pro(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_pro_ = value;
}
inline void CMsgDOTAPlayerInfo::set_is_pro(bool value) {
  _internal_set_is_pro(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.is_pro)
}

// optional string real_name = 11;
inline bool CMsgDOTAPlayerInfo::_internal_has_real_name() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_real_name() const {
  return _internal_has_real_name();
}
inline void CMsgDOTAPlayerInfo::clear_real_name() {
  real_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CMsgDOTAPlayerInfo::real_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.real_name)
  return _internal_real_name();
}
inline void CMsgDOTAPlayerInfo::set_real_name(const std::string& value) {
  _internal_set_real_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.real_name)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_real_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.real_name)
  return _internal_mutable_real_name();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_real_name() const {
  return real_name_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_real_name(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_real_name(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  real_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.real_name)
}
inline void CMsgDOTAPlayerInfo::set_real_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.real_name)
}
inline void CMsgDOTAPlayerInfo::set_real_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.real_name)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_real_name() {
  _has_bits_[0] |= 0x00000020u;
  return real_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_real_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.real_name)
  if (!_internal_has_real_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return real_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.real_name)
}

// optional uint32 total_earnings = 13;
inline bool CMsgDOTAPlayerInfo::_internal_has_total_earnings() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_total_earnings() const {
  return _internal_has_total_earnings();
}
inline void CMsgDOTAPlayerInfo::clear_total_earnings() {
  total_earnings_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo::_internal_total_earnings() const {
  return total_earnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPlayerInfo::total_earnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.total_earnings)
  return _internal_total_earnings();
}
inline void CMsgDOTAPlayerInfo::_internal_set_total_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  total_earnings_ = value;
}
inline void CMsgDOTAPlayerInfo::set_total_earnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_earnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.total_earnings)
}

// repeated .CMsgDOTAPlayerInfo.Results results = 14;
inline int CMsgDOTAPlayerInfo::_internal_results_size() const {
  return results_.size();
}
inline int CMsgDOTAPlayerInfo::results_size() const {
  return _internal_results_size();
}
inline void CMsgDOTAPlayerInfo::clear_results() {
  results_.Clear();
}
inline ::CMsgDOTAPlayerInfo_Results* CMsgDOTAPlayerInfo::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >*
CMsgDOTAPlayerInfo::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerInfo.results)
  return &results_;
}
inline const ::CMsgDOTAPlayerInfo_Results& CMsgDOTAPlayerInfo::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::CMsgDOTAPlayerInfo_Results& CMsgDOTAPlayerInfo::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.results)
  return _internal_results(index);
}
inline ::CMsgDOTAPlayerInfo_Results* CMsgDOTAPlayerInfo::_internal_add_results() {
  return results_.Add();
}
inline ::CMsgDOTAPlayerInfo_Results* CMsgDOTAPlayerInfo::add_results() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerInfo.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_Results >&
CMsgDOTAPlayerInfo::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerInfo.results)
  return results_;
}

// optional string team_url_logo = 15;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_url_logo() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_url_logo() const {
  return _internal_has_team_url_logo();
}
inline void CMsgDOTAPlayerInfo::clear_team_url_logo() {
  team_url_logo_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_url_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_url_logo)
  return _internal_team_url_logo();
}
inline void CMsgDOTAPlayerInfo::set_team_url_logo(const std::string& value) {
  _internal_set_team_url_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_url_logo)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_url_logo() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_url_logo)
  return _internal_mutable_team_url_logo();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_url_logo() const {
  return team_url_logo_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_url_logo(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_team_url_logo(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  team_url_logo_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.team_url_logo)
}
inline void CMsgDOTAPlayerInfo::set_team_url_logo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.team_url_logo)
}
inline void CMsgDOTAPlayerInfo::set_team_url_logo(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  team_url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.team_url_logo)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_url_logo() {
  _has_bits_[0] |= 0x00000040u;
  return team_url_logo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_url_logo() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_url_logo)
  if (!_internal_has_team_url_logo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return team_url_logo_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_url_logo(std::string* team_url_logo) {
  if (team_url_logo != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  team_url_logo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_url_logo,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_url_logo)
}

// repeated .CMsgDOTAPlayerInfo.AuditEntry audit_entries = 16;
inline int CMsgDOTAPlayerInfo::_internal_audit_entries_size() const {
  return audit_entries_.size();
}
inline int CMsgDOTAPlayerInfo::audit_entries_size() const {
  return _internal_audit_entries_size();
}
inline void CMsgDOTAPlayerInfo::clear_audit_entries() {
  audit_entries_.Clear();
}
inline ::CMsgDOTAPlayerInfo_AuditEntry* CMsgDOTAPlayerInfo::mutable_audit_entries(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.audit_entries)
  return audit_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >*
CMsgDOTAPlayerInfo::mutable_audit_entries() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerInfo.audit_entries)
  return &audit_entries_;
}
inline const ::CMsgDOTAPlayerInfo_AuditEntry& CMsgDOTAPlayerInfo::_internal_audit_entries(int index) const {
  return audit_entries_.Get(index);
}
inline const ::CMsgDOTAPlayerInfo_AuditEntry& CMsgDOTAPlayerInfo::audit_entries(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.audit_entries)
  return _internal_audit_entries(index);
}
inline ::CMsgDOTAPlayerInfo_AuditEntry* CMsgDOTAPlayerInfo::_internal_add_audit_entries() {
  return audit_entries_.Add();
}
inline ::CMsgDOTAPlayerInfo_AuditEntry* CMsgDOTAPlayerInfo::add_audit_entries() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerInfo.audit_entries)
  return _internal_add_audit_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo_AuditEntry >&
CMsgDOTAPlayerInfo::audit_entries() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerInfo.audit_entries)
  return audit_entries_;
}

// optional string team_abbreviation = 17;
inline bool CMsgDOTAPlayerInfo::_internal_has_team_abbreviation() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAPlayerInfo::has_team_abbreviation() const {
  return _internal_has_team_abbreviation();
}
inline void CMsgDOTAPlayerInfo::clear_team_abbreviation() {
  team_abbreviation_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CMsgDOTAPlayerInfo::team_abbreviation() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfo.team_abbreviation)
  return _internal_team_abbreviation();
}
inline void CMsgDOTAPlayerInfo::set_team_abbreviation(const std::string& value) {
  _internal_set_team_abbreviation(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPlayerInfo.team_abbreviation)
}
inline std::string* CMsgDOTAPlayerInfo::mutable_team_abbreviation() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfo.team_abbreviation)
  return _internal_mutable_team_abbreviation();
}
inline const std::string& CMsgDOTAPlayerInfo::_internal_team_abbreviation() const {
  return team_abbreviation_.Get();
}
inline void CMsgDOTAPlayerInfo::_internal_set_team_abbreviation(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAPlayerInfo::set_team_abbreviation(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  team_abbreviation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAPlayerInfo.team_abbreviation)
}
inline void CMsgDOTAPlayerInfo::set_team_abbreviation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAPlayerInfo.team_abbreviation)
}
inline void CMsgDOTAPlayerInfo::set_team_abbreviation(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  team_abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAPlayerInfo.team_abbreviation)
}
inline std::string* CMsgDOTAPlayerInfo::_internal_mutable_team_abbreviation() {
  _has_bits_[0] |= 0x00000080u;
  return team_abbreviation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAPlayerInfo::release_team_abbreviation() {
  // @@protoc_insertion_point(field_release:CMsgDOTAPlayerInfo.team_abbreviation)
  if (!_internal_has_team_abbreviation()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return team_abbreviation_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAPlayerInfo::set_allocated_team_abbreviation(std::string* team_abbreviation) {
  if (team_abbreviation != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  team_abbreviation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_abbreviation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAPlayerInfo.team_abbreviation)
}

// -------------------------------------------------------------------

// CMsgDOTAPlayerInfoList

// repeated .CMsgDOTAPlayerInfo player_infos = 1;
inline int CMsgDOTAPlayerInfoList::_internal_player_infos_size() const {
  return player_infos_.size();
}
inline int CMsgDOTAPlayerInfoList::player_infos_size() const {
  return _internal_player_infos_size();
}
inline void CMsgDOTAPlayerInfoList::clear_player_infos() {
  player_infos_.Clear();
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTAPlayerInfoList::mutable_player_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPlayerInfoList.player_infos)
  return player_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >*
CMsgDOTAPlayerInfoList::mutable_player_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPlayerInfoList.player_infos)
  return &player_infos_;
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTAPlayerInfoList::_internal_player_infos(int index) const {
  return player_infos_.Get(index);
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTAPlayerInfoList::player_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPlayerInfoList.player_infos)
  return _internal_player_infos(index);
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTAPlayerInfoList::_internal_add_player_infos() {
  return player_infos_.Add();
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTAPlayerInfoList::add_player_infos() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPlayerInfoList.player_infos)
  return _internal_add_player_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPlayerInfo >&
CMsgDOTAPlayerInfoList::player_infos() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPlayerInfoList.player_infos)
  return player_infos_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCProfileInfo_PredictionInfo

// optional uint32 percent = 1;
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::_internal_has_percent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::has_percent() const {
  return _internal_has_percent();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::clear_percent() {
  percent_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_PredictionInfo::_internal_percent() const {
  return percent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_PredictionInfo::percent() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.PredictionInfo.percent)
  return _internal_percent();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::_internal_set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  percent_ = value;
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::set_percent(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.PredictionInfo.percent)
}

// optional int32 shard_winnings = 2;
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::_internal_has_shard_winnings() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_PredictionInfo::has_shard_winnings() const {
  return _internal_has_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::clear_shard_winnings() {
  shard_winnings_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDOTADPCProfileInfo_PredictionInfo::_internal_shard_winnings() const {
  return shard_winnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDOTADPCProfileInfo_PredictionInfo::shard_winnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.PredictionInfo.shard_winnings)
  return _internal_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::_internal_set_shard_winnings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  shard_winnings_ = value;
}
inline void CMsgDOTADPCProfileInfo_PredictionInfo::set_shard_winnings(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.PredictionInfo.shard_winnings)
}

// -------------------------------------------------------------------

// CMsgDOTADPCProfileInfo_FantasyInfo

// optional uint32 top_90_finishes = 1;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_top_90_finishes() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_top_90_finishes() const {
  return _internal_has_top_90_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_top_90_finishes() {
  top_90_finishes_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::_internal_top_90_finishes() const {
  return top_90_finishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::top_90_finishes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.top_90_finishes)
  return _internal_top_90_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_top_90_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  top_90_finishes_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_top_90_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_90_finishes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.top_90_finishes)
}

// optional uint32 top_75_finishes = 2;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_top_75_finishes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_top_75_finishes() const {
  return _internal_has_top_75_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_top_75_finishes() {
  top_75_finishes_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::_internal_top_75_finishes() const {
  return top_75_finishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::top_75_finishes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.top_75_finishes)
  return _internal_top_75_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_top_75_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  top_75_finishes_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_top_75_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_75_finishes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.top_75_finishes)
}

// optional uint32 top_50_finishes = 3;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_top_50_finishes() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_top_50_finishes() const {
  return _internal_has_top_50_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_top_50_finishes() {
  top_50_finishes_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::_internal_top_50_finishes() const {
  return top_50_finishes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::top_50_finishes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.top_50_finishes)
  return _internal_top_50_finishes();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_top_50_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  top_50_finishes_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_top_50_finishes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_top_50_finishes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.top_50_finishes)
}

// optional uint32 shard_winnings = 4;
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::_internal_has_shard_winnings() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTADPCProfileInfo_FantasyInfo::has_shard_winnings() const {
  return _internal_has_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::clear_shard_winnings() {
  shard_winnings_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::_internal_shard_winnings() const {
  return shard_winnings_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo_FantasyInfo::shard_winnings() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.FantasyInfo.shard_winnings)
  return _internal_shard_winnings();
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::_internal_set_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  shard_winnings_ = value;
}
inline void CMsgDOTADPCProfileInfo_FantasyInfo::set_shard_winnings(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shard_winnings(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.FantasyInfo.shard_winnings)
}

// -------------------------------------------------------------------

// CMsgDOTADPCProfileInfo

// optional .CMsgDOTAPlayerInfo player_info = 1;
inline bool CMsgDOTADPCProfileInfo::_internal_has_player_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || player_info_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCProfileInfo::has_player_info() const {
  return _internal_has_player_info();
}
inline void CMsgDOTADPCProfileInfo::clear_player_info() {
  if (player_info_ != nullptr) player_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTADPCProfileInfo::_internal_player_info() const {
  const ::CMsgDOTAPlayerInfo* p = player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAPlayerInfo&>(
      ::_CMsgDOTAPlayerInfo_default_instance_);
}
inline const ::CMsgDOTAPlayerInfo& CMsgDOTADPCProfileInfo::player_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.player_info)
  return _internal_player_info();
}
inline void CMsgDOTADPCProfileInfo::unsafe_arena_set_allocated_player_info(
    ::CMsgDOTAPlayerInfo* player_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCProfileInfo.player_info)
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::release_player_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAPlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCProfileInfo.player_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAPlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::_internal_mutable_player_info() {
  _has_bits_[0] |= 0x00000001u;
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAPlayerInfo>(GetArena());
    player_info_ = p;
  }
  return player_info_;
}
inline ::CMsgDOTAPlayerInfo* CMsgDOTADPCProfileInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCProfileInfo.player_info)
  return _internal_mutable_player_info();
}
inline void CMsgDOTADPCProfileInfo::set_allocated_player_info(::CMsgDOTAPlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCProfileInfo.player_info)
}

// optional .CMsgDOTADPCProfileInfo.PredictionInfo prediction_info = 2;
inline bool CMsgDOTADPCProfileInfo::_internal_has_prediction_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || prediction_info_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCProfileInfo::has_prediction_info() const {
  return _internal_has_prediction_info();
}
inline void CMsgDOTADPCProfileInfo::clear_prediction_info() {
  if (prediction_info_ != nullptr) prediction_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTADPCProfileInfo_PredictionInfo& CMsgDOTADPCProfileInfo::_internal_prediction_info() const {
  const ::CMsgDOTADPCProfileInfo_PredictionInfo* p = prediction_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTADPCProfileInfo_PredictionInfo&>(
      ::_CMsgDOTADPCProfileInfo_PredictionInfo_default_instance_);
}
inline const ::CMsgDOTADPCProfileInfo_PredictionInfo& CMsgDOTADPCProfileInfo::prediction_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.prediction_info)
  return _internal_prediction_info();
}
inline void CMsgDOTADPCProfileInfo::unsafe_arena_set_allocated_prediction_info(
    ::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prediction_info_);
  }
  prediction_info_ = prediction_info;
  if (prediction_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCProfileInfo.prediction_info)
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::release_prediction_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* temp = prediction_info_;
  prediction_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::unsafe_arena_release_prediction_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCProfileInfo.prediction_info)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTADPCProfileInfo_PredictionInfo* temp = prediction_info_;
  prediction_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::_internal_mutable_prediction_info() {
  _has_bits_[0] |= 0x00000002u;
  if (prediction_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTADPCProfileInfo_PredictionInfo>(GetArena());
    prediction_info_ = p;
  }
  return prediction_info_;
}
inline ::CMsgDOTADPCProfileInfo_PredictionInfo* CMsgDOTADPCProfileInfo::mutable_prediction_info() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCProfileInfo.prediction_info)
  return _internal_mutable_prediction_info();
}
inline void CMsgDOTADPCProfileInfo::set_allocated_prediction_info(::CMsgDOTADPCProfileInfo_PredictionInfo* prediction_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete prediction_info_;
  }
  if (prediction_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prediction_info);
    if (message_arena != submessage_arena) {
      prediction_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prediction_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  prediction_info_ = prediction_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCProfileInfo.prediction_info)
}

// optional .CMsgDOTADPCProfileInfo.FantasyInfo fantasy_info = 3;
inline bool CMsgDOTADPCProfileInfo::_internal_has_fantasy_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || fantasy_info_ != nullptr);
  return value;
}
inline bool CMsgDOTADPCProfileInfo::has_fantasy_info() const {
  return _internal_has_fantasy_info();
}
inline void CMsgDOTADPCProfileInfo::clear_fantasy_info() {
  if (fantasy_info_ != nullptr) fantasy_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgDOTADPCProfileInfo_FantasyInfo& CMsgDOTADPCProfileInfo::_internal_fantasy_info() const {
  const ::CMsgDOTADPCProfileInfo_FantasyInfo* p = fantasy_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTADPCProfileInfo_FantasyInfo&>(
      ::_CMsgDOTADPCProfileInfo_FantasyInfo_default_instance_);
}
inline const ::CMsgDOTADPCProfileInfo_FantasyInfo& CMsgDOTADPCProfileInfo::fantasy_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.fantasy_info)
  return _internal_fantasy_info();
}
inline void CMsgDOTADPCProfileInfo::unsafe_arena_set_allocated_fantasy_info(
    ::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fantasy_info_);
  }
  fantasy_info_ = fantasy_info;
  if (fantasy_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTADPCProfileInfo.fantasy_info)
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::release_fantasy_info() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* temp = fantasy_info_;
  fantasy_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::unsafe_arena_release_fantasy_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCProfileInfo.fantasy_info)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgDOTADPCProfileInfo_FantasyInfo* temp = fantasy_info_;
  fantasy_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::_internal_mutable_fantasy_info() {
  _has_bits_[0] |= 0x00000004u;
  if (fantasy_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTADPCProfileInfo_FantasyInfo>(GetArena());
    fantasy_info_ = p;
  }
  return fantasy_info_;
}
inline ::CMsgDOTADPCProfileInfo_FantasyInfo* CMsgDOTADPCProfileInfo::mutable_fantasy_info() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCProfileInfo.fantasy_info)
  return _internal_mutable_fantasy_info();
}
inline void CMsgDOTADPCProfileInfo::set_allocated_fantasy_info(::CMsgDOTADPCProfileInfo_FantasyInfo* fantasy_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete fantasy_info_;
  }
  if (fantasy_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fantasy_info);
    if (message_arena != submessage_arena) {
      fantasy_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fantasy_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  fantasy_info_ = fantasy_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCProfileInfo.fantasy_info)
}

// repeated uint32 disabled_notifications = 4;
inline int CMsgDOTADPCProfileInfo::_internal_disabled_notifications_size() const {
  return disabled_notifications_.size();
}
inline int CMsgDOTADPCProfileInfo::disabled_notifications_size() const {
  return _internal_disabled_notifications_size();
}
inline void CMsgDOTADPCProfileInfo::clear_disabled_notifications() {
  disabled_notifications_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo::_internal_disabled_notifications(int index) const {
  return disabled_notifications_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCProfileInfo::disabled_notifications(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCProfileInfo.disabled_notifications)
  return _internal_disabled_notifications(index);
}
inline void CMsgDOTADPCProfileInfo::set_disabled_notifications(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  disabled_notifications_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCProfileInfo.disabled_notifications)
}
inline void CMsgDOTADPCProfileInfo::_internal_add_disabled_notifications(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  disabled_notifications_.Add(value);
}
inline void CMsgDOTADPCProfileInfo::add_disabled_notifications(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_disabled_notifications(value);
  // @@protoc_insertion_point(field_add:CMsgDOTADPCProfileInfo.disabled_notifications)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTADPCProfileInfo::_internal_disabled_notifications() const {
  return disabled_notifications_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTADPCProfileInfo::disabled_notifications() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCProfileInfo.disabled_notifications)
  return _internal_disabled_notifications();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTADPCProfileInfo::_internal_mutable_disabled_notifications() {
  return &disabled_notifications_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTADPCProfileInfo::mutable_disabled_notifications() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCProfileInfo.disabled_notifications)
  return _internal_mutable_disabled_notifications();
}

// -------------------------------------------------------------------

// CMsgDOTALeaderboards_RegionLeaderboard

// optional uint32 division = 1;
inline bool CMsgDOTALeaderboards_RegionLeaderboard::_internal_has_division() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTALeaderboards_RegionLeaderboard::has_division() const {
  return _internal_has_division();
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::clear_division() {
  division_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTALeaderboards_RegionLeaderboard::_internal_division() const {
  return division_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTALeaderboards_RegionLeaderboard::division() const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaderboards.RegionLeaderboard.division)
  return _internal_division();
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::_internal_set_division(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  division_ = value;
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::set_division(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_division(value);
  // @@protoc_insertion_point(field_set:CMsgDOTALeaderboards.RegionLeaderboard.division)
}

// repeated uint32 account_ids = 2;
inline int CMsgDOTALeaderboards_RegionLeaderboard::_internal_account_ids_size() const {
  return account_ids_.size();
}
inline int CMsgDOTALeaderboards_RegionLeaderboard::account_ids_size() const {
  return _internal_account_ids_size();
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::clear_account_ids() {
  account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTALeaderboards_RegionLeaderboard::_internal_account_ids(int index) const {
  return account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTALeaderboards_RegionLeaderboard::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
  return _internal_account_ids(index);
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::set_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::_internal_add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  account_ids_.Add(value);
}
inline void CMsgDOTALeaderboards_RegionLeaderboard::add_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTALeaderboards_RegionLeaderboard::_internal_account_ids() const {
  return account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTALeaderboards_RegionLeaderboard::account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
  return _internal_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTALeaderboards_RegionLeaderboard::_internal_mutable_account_ids() {
  return &account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTALeaderboards_RegionLeaderboard::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALeaderboards.RegionLeaderboard.account_ids)
  return _internal_mutable_account_ids();
}

// -------------------------------------------------------------------

// CMsgDOTALeaderboards

// repeated .CMsgDOTALeaderboards.RegionLeaderboard leaderboards = 2;
inline int CMsgDOTALeaderboards::_internal_leaderboards_size() const {
  return leaderboards_.size();
}
inline int CMsgDOTALeaderboards::leaderboards_size() const {
  return _internal_leaderboards_size();
}
inline void CMsgDOTALeaderboards::clear_leaderboards() {
  leaderboards_.Clear();
}
inline ::CMsgDOTALeaderboards_RegionLeaderboard* CMsgDOTALeaderboards::mutable_leaderboards(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTALeaderboards.leaderboards)
  return leaderboards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >*
CMsgDOTALeaderboards::mutable_leaderboards() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTALeaderboards.leaderboards)
  return &leaderboards_;
}
inline const ::CMsgDOTALeaderboards_RegionLeaderboard& CMsgDOTALeaderboards::_internal_leaderboards(int index) const {
  return leaderboards_.Get(index);
}
inline const ::CMsgDOTALeaderboards_RegionLeaderboard& CMsgDOTALeaderboards::leaderboards(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTALeaderboards.leaderboards)
  return _internal_leaderboards(index);
}
inline ::CMsgDOTALeaderboards_RegionLeaderboard* CMsgDOTALeaderboards::_internal_add_leaderboards() {
  return leaderboards_.Add();
}
inline ::CMsgDOTALeaderboards_RegionLeaderboard* CMsgDOTALeaderboards::add_leaderboards() {
  // @@protoc_insertion_point(field_add:CMsgDOTALeaderboards.leaderboards)
  return _internal_add_leaderboards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTALeaderboards_RegionLeaderboard >&
CMsgDOTALeaderboards::leaderboards() const {
  // @@protoc_insertion_point(field_list:CMsgDOTALeaderboards.leaderboards)
  return leaderboards_;
}

// -------------------------------------------------------------------

// CMsgDOTACreateFantasyLeagueRequest

// optional string league_name = 1;
inline bool CMsgDOTACreateFantasyLeagueRequest::_internal_has_league_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTACreateFantasyLeagueRequest::has_league_name() const {
  return _internal_has_league_name();
}
inline void CMsgDOTACreateFantasyLeagueRequest::clear_league_name() {
  league_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTACreateFantasyLeagueRequest::league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.league_name)
  return _internal_league_name();
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const std::string& value) {
  _internal_set_league_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
inline std::string* CMsgDOTACreateFantasyLeagueRequest::mutable_league_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTACreateFantasyLeagueRequest.league_name)
  return _internal_mutable_league_name();
}
inline const std::string& CMsgDOTACreateFantasyLeagueRequest::_internal_league_name() const {
  return league_name_.Get();
}
inline void CMsgDOTACreateFantasyLeagueRequest::_internal_set_league_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_league_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_league_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTACreateFantasyLeagueRequest.league_name)
}
inline std::string* CMsgDOTACreateFantasyLeagueRequest::_internal_mutable_league_name() {
  _has_bits_[0] |= 0x00000001u;
  return league_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTACreateFantasyLeagueRequest::release_league_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTACreateFantasyLeagueRequest.league_name)
  if (!_internal_has_league_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return league_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_allocated_league_name(std::string* league_name) {
  if (league_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  league_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), league_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTACreateFantasyLeagueRequest.league_name)
}

// optional uint64 league_logo = 2;
inline bool CMsgDOTACreateFantasyLeagueRequest::_internal_has_league_logo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTACreateFantasyLeagueRequest::has_league_logo() const {
  return _internal_has_league_logo();
}
inline void CMsgDOTACreateFantasyLeagueRequest::clear_league_logo() {
  league_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTACreateFantasyLeagueRequest::_internal_league_logo() const {
  return league_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTACreateFantasyLeagueRequest::league_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.league_logo)
  return _internal_league_logo();
}
inline void CMsgDOTACreateFantasyLeagueRequest::_internal_set_league_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  league_logo_ = value;
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_league_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_league_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.league_logo)
}

// optional .Fantasy_Selection_Mode selection_mode = 3 [default = FANTASY_SELECTION_INVALID];
inline bool CMsgDOTACreateFantasyLeagueRequest::_internal_has_selection_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTACreateFantasyLeagueRequest::has_selection_mode() const {
  return _internal_has_selection_mode();
}
inline void CMsgDOTACreateFantasyLeagueRequest::clear_selection_mode() {
  selection_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::Fantasy_Selection_Mode CMsgDOTACreateFantasyLeagueRequest::_internal_selection_mode() const {
  return static_cast< ::Fantasy_Selection_Mode >(selection_mode_);
}
inline ::Fantasy_Selection_Mode CMsgDOTACreateFantasyLeagueRequest::selection_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.selection_mode)
  return _internal_selection_mode();
}
inline void CMsgDOTACreateFantasyLeagueRequest::_internal_set_selection_mode(::Fantasy_Selection_Mode value) {
  assert(::Fantasy_Selection_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  selection_mode_ = value;
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_selection_mode(::Fantasy_Selection_Mode value) {
  _internal_set_selection_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.selection_mode)
}

// optional uint32 team_count = 4;
inline bool CMsgDOTACreateFantasyLeagueRequest::_internal_has_team_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTACreateFantasyLeagueRequest::has_team_count() const {
  return _internal_has_team_count();
}
inline void CMsgDOTACreateFantasyLeagueRequest::clear_team_count() {
  team_count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTACreateFantasyLeagueRequest::_internal_team_count() const {
  return team_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTACreateFantasyLeagueRequest::team_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueRequest.team_count)
  return _internal_team_count();
}
inline void CMsgDOTACreateFantasyLeagueRequest::_internal_set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_count_ = value;
}
inline void CMsgDOTACreateFantasyLeagueRequest::set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueRequest.team_count)
}

// -------------------------------------------------------------------

// CMsgDOTACreateFantasyLeagueResponse

// optional .CMsgDOTACreateFantasyLeagueResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTACreateFantasyLeagueResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTACreateFantasyLeagueResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTACreateFantasyLeagueResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::_internal_result() const {
  return static_cast< ::CMsgDOTACreateFantasyLeagueResponse_EResult >(result_);
}
inline ::CMsgDOTACreateFantasyLeagueResponse_EResult CMsgDOTACreateFantasyLeagueResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTACreateFantasyLeagueResponse.result)
  return _internal_result();
}
inline void CMsgDOTACreateFantasyLeagueResponse::_internal_set_result(::CMsgDOTACreateFantasyLeagueResponse_EResult value) {
  assert(::CMsgDOTACreateFantasyLeagueResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTACreateFantasyLeagueResponse::set_result(::CMsgDOTACreateFantasyLeagueResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTACreateFantasyLeagueResponse.result)
}

// -------------------------------------------------------------------

// CMsgFantasyLeagueScoring

// optional float level = 1;
inline bool CMsgFantasyLeagueScoring::_internal_has_level() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_level() const {
  return _internal_has_level();
}
inline void CMsgFantasyLeagueScoring::clear_level() {
  level_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CMsgFantasyLeagueScoring::_internal_level() const {
  return level_;
}
inline float CMsgFantasyLeagueScoring::level() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.level)
  return _internal_level();
}
inline void CMsgFantasyLeagueScoring::_internal_set_level(float value) {
  _has_bits_[0] |= 0x00000001u;
  level_ = value;
}
inline void CMsgFantasyLeagueScoring::set_level(float value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.level)
}

// optional float kills = 2;
inline bool CMsgFantasyLeagueScoring::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgFantasyLeagueScoring::clear_kills() {
  kills_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgFantasyLeagueScoring::_internal_kills() const {
  return kills_;
}
inline float CMsgFantasyLeagueScoring::kills() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.kills)
  return _internal_kills();
}
inline void CMsgFantasyLeagueScoring::_internal_set_kills(float value) {
  _has_bits_[0] |= 0x00000002u;
  kills_ = value;
}
inline void CMsgFantasyLeagueScoring::set_kills(float value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.kills)
}

// optional float deaths = 3;
inline bool CMsgFantasyLeagueScoring::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgFantasyLeagueScoring::clear_deaths() {
  deaths_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgFantasyLeagueScoring::_internal_deaths() const {
  return deaths_;
}
inline float CMsgFantasyLeagueScoring::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.deaths)
  return _internal_deaths();
}
inline void CMsgFantasyLeagueScoring::_internal_set_deaths(float value) {
  _has_bits_[0] |= 0x00000004u;
  deaths_ = value;
}
inline void CMsgFantasyLeagueScoring::set_deaths(float value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.deaths)
}

// optional float assists = 4;
inline bool CMsgFantasyLeagueScoring::_internal_has_assists() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgFantasyLeagueScoring::clear_assists() {
  assists_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgFantasyLeagueScoring::_internal_assists() const {
  return assists_;
}
inline float CMsgFantasyLeagueScoring::assists() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.assists)
  return _internal_assists();
}
inline void CMsgFantasyLeagueScoring::_internal_set_assists(float value) {
  _has_bits_[0] |= 0x00000008u;
  assists_ = value;
}
inline void CMsgFantasyLeagueScoring::set_assists(float value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.assists)
}

// optional float last_hits = 5;
inline bool CMsgFantasyLeagueScoring::_internal_has_last_hits() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgFantasyLeagueScoring::clear_last_hits() {
  last_hits_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgFantasyLeagueScoring::_internal_last_hits() const {
  return last_hits_;
}
inline float CMsgFantasyLeagueScoring::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.last_hits)
  return _internal_last_hits();
}
inline void CMsgFantasyLeagueScoring::_internal_set_last_hits(float value) {
  _has_bits_[0] |= 0x00000010u;
  last_hits_ = value;
}
inline void CMsgFantasyLeagueScoring::set_last_hits(float value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.last_hits)
}

// optional float denies = 6;
inline bool CMsgFantasyLeagueScoring::_internal_has_denies() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgFantasyLeagueScoring::clear_denies() {
  denies_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgFantasyLeagueScoring::_internal_denies() const {
  return denies_;
}
inline float CMsgFantasyLeagueScoring::denies() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.denies)
  return _internal_denies();
}
inline void CMsgFantasyLeagueScoring::_internal_set_denies(float value) {
  _has_bits_[0] |= 0x00000020u;
  denies_ = value;
}
inline void CMsgFantasyLeagueScoring::set_denies(float value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.denies)
}

// optional float gpm = 7;
inline bool CMsgFantasyLeagueScoring::_internal_has_gpm() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgFantasyLeagueScoring::clear_gpm() {
  gpm_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgFantasyLeagueScoring::_internal_gpm() const {
  return gpm_;
}
inline float CMsgFantasyLeagueScoring::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.gpm)
  return _internal_gpm();
}
inline void CMsgFantasyLeagueScoring::_internal_set_gpm(float value) {
  _has_bits_[0] |= 0x00000040u;
  gpm_ = value;
}
inline void CMsgFantasyLeagueScoring::set_gpm(float value) {
  _internal_set_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.gpm)
}

// optional float xppm = 8;
inline bool CMsgFantasyLeagueScoring::_internal_has_xppm() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_xppm() const {
  return _internal_has_xppm();
}
inline void CMsgFantasyLeagueScoring::clear_xppm() {
  xppm_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgFantasyLeagueScoring::_internal_xppm() const {
  return xppm_;
}
inline float CMsgFantasyLeagueScoring::xppm() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.xppm)
  return _internal_xppm();
}
inline void CMsgFantasyLeagueScoring::_internal_set_xppm(float value) {
  _has_bits_[0] |= 0x00000080u;
  xppm_ = value;
}
inline void CMsgFantasyLeagueScoring::set_xppm(float value) {
  _internal_set_xppm(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.xppm)
}

// optional float stuns = 9;
inline bool CMsgFantasyLeagueScoring::_internal_has_stuns() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_stuns() const {
  return _internal_has_stuns();
}
inline void CMsgFantasyLeagueScoring::clear_stuns() {
  stuns_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CMsgFantasyLeagueScoring::_internal_stuns() const {
  return stuns_;
}
inline float CMsgFantasyLeagueScoring::stuns() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.stuns)
  return _internal_stuns();
}
inline void CMsgFantasyLeagueScoring::_internal_set_stuns(float value) {
  _has_bits_[0] |= 0x00000100u;
  stuns_ = value;
}
inline void CMsgFantasyLeagueScoring::set_stuns(float value) {
  _internal_set_stuns(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.stuns)
}

// optional float healing = 10;
inline bool CMsgFantasyLeagueScoring::_internal_has_healing() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_healing() const {
  return _internal_has_healing();
}
inline void CMsgFantasyLeagueScoring::clear_healing() {
  healing_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CMsgFantasyLeagueScoring::_internal_healing() const {
  return healing_;
}
inline float CMsgFantasyLeagueScoring::healing() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.healing)
  return _internal_healing();
}
inline void CMsgFantasyLeagueScoring::_internal_set_healing(float value) {
  _has_bits_[0] |= 0x00000200u;
  healing_ = value;
}
inline void CMsgFantasyLeagueScoring::set_healing(float value) {
  _internal_set_healing(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.healing)
}

// optional float tower_kills = 11;
inline bool CMsgFantasyLeagueScoring::_internal_has_tower_kills() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_tower_kills() const {
  return _internal_has_tower_kills();
}
inline void CMsgFantasyLeagueScoring::clear_tower_kills() {
  tower_kills_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgFantasyLeagueScoring::_internal_tower_kills() const {
  return tower_kills_;
}
inline float CMsgFantasyLeagueScoring::tower_kills() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.tower_kills)
  return _internal_tower_kills();
}
inline void CMsgFantasyLeagueScoring::_internal_set_tower_kills(float value) {
  _has_bits_[0] |= 0x00000400u;
  tower_kills_ = value;
}
inline void CMsgFantasyLeagueScoring::set_tower_kills(float value) {
  _internal_set_tower_kills(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.tower_kills)
}

// optional float roshan_kills = 12;
inline bool CMsgFantasyLeagueScoring::_internal_has_roshan_kills() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_roshan_kills() const {
  return _internal_has_roshan_kills();
}
inline void CMsgFantasyLeagueScoring::clear_roshan_kills() {
  roshan_kills_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CMsgFantasyLeagueScoring::_internal_roshan_kills() const {
  return roshan_kills_;
}
inline float CMsgFantasyLeagueScoring::roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.roshan_kills)
  return _internal_roshan_kills();
}
inline void CMsgFantasyLeagueScoring::_internal_set_roshan_kills(float value) {
  _has_bits_[0] |= 0x00000800u;
  roshan_kills_ = value;
}
inline void CMsgFantasyLeagueScoring::set_roshan_kills(float value) {
  _internal_set_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.roshan_kills)
}

// optional float multiplier_premium = 13;
inline bool CMsgFantasyLeagueScoring::_internal_has_multiplier_premium() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_multiplier_premium() const {
  return _internal_has_multiplier_premium();
}
inline void CMsgFantasyLeagueScoring::clear_multiplier_premium() {
  multiplier_premium_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CMsgFantasyLeagueScoring::_internal_multiplier_premium() const {
  return multiplier_premium_;
}
inline float CMsgFantasyLeagueScoring::multiplier_premium() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.multiplier_premium)
  return _internal_multiplier_premium();
}
inline void CMsgFantasyLeagueScoring::_internal_set_multiplier_premium(float value) {
  _has_bits_[0] |= 0x00001000u;
  multiplier_premium_ = value;
}
inline void CMsgFantasyLeagueScoring::set_multiplier_premium(float value) {
  _internal_set_multiplier_premium(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.multiplier_premium)
}

// optional float multiplier_professional = 14;
inline bool CMsgFantasyLeagueScoring::_internal_has_multiplier_professional() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgFantasyLeagueScoring::has_multiplier_professional() const {
  return _internal_has_multiplier_professional();
}
inline void CMsgFantasyLeagueScoring::clear_multiplier_professional() {
  multiplier_professional_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgFantasyLeagueScoring::_internal_multiplier_professional() const {
  return multiplier_professional_;
}
inline float CMsgFantasyLeagueScoring::multiplier_professional() const {
  // @@protoc_insertion_point(field_get:CMsgFantasyLeagueScoring.multiplier_professional)
  return _internal_multiplier_professional();
}
inline void CMsgFantasyLeagueScoring::_internal_set_multiplier_professional(float value) {
  _has_bits_[0] |= 0x00002000u;
  multiplier_professional_ = value;
}
inline void CMsgFantasyLeagueScoring::set_multiplier_professional(float value) {
  _internal_set_multiplier_professional(value);
  // @@protoc_insertion_point(field_set:CMsgFantasyLeagueScoring.multiplier_professional)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueInfo_OwnerInfo

// optional uint32 owner_account_id = 1;
inline bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.OwnerInfo.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.OwnerInfo.owner_account_id)
}

// optional bool left_league = 2;
inline bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_has_left_league() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::has_left_league() const {
  return _internal_has_left_league();
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_left_league() {
  left_league_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_left_league() const {
  return left_league_;
}
inline bool CMsgDOTAFantasyLeagueInfo_OwnerInfo::left_league() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.OwnerInfo.left_league)
  return _internal_left_league();
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_set_left_league(bool value) {
  _has_bits_[0] |= 0x00000002u;
  left_league_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_left_league(bool value) {
  _internal_set_left_league(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.OwnerInfo.left_league)
}

// repeated uint32 player_account_id = 3;
inline int CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_player_account_id_size() const {
  return player_account_id_.size();
}
inline int CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id_size() const {
  return _internal_player_account_id_size();
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::clear_player_account_id() {
  player_account_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_player_account_id(int index) const {
  return player_account_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return _internal_player_account_id(index);
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::set_player_account_id(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  player_account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_add_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  player_account_id_.Add(value);
}
inline void CMsgDOTAFantasyLeagueInfo_OwnerInfo::add_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_player_account_id(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_player_account_id() const {
  return player_account_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueInfo_OwnerInfo::player_account_id() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return _internal_player_account_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueInfo_OwnerInfo::_internal_mutable_player_account_id() {
  return &player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueInfo_OwnerInfo::mutable_player_account_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueInfo.OwnerInfo.player_account_id)
  return _internal_mutable_player_account_id();
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueInfo

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.fantasy_league_id)
}

// optional uint32 commissioner_account_id = 2;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_commissioner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_commissioner_account_id() const {
  return _internal_has_commissioner_account_id();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_commissioner_account_id() {
  commissioner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_commissioner_account_id() const {
  return commissioner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::commissioner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.commissioner_account_id)
  return _internal_commissioner_account_id();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_commissioner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  commissioner_account_id_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_commissioner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_commissioner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.commissioner_account_id)
}

// optional string fantasy_league_name = 3;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_fantasy_league_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_fantasy_league_name() const {
  return _internal_has_fantasy_league_name();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyLeagueInfo::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  return _internal_fantasy_league_name();
}
inline void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const std::string& value) {
  _internal_set_fantasy_league_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
inline std::string* CMsgDOTAFantasyLeagueInfo::mutable_fantasy_league_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  return _internal_mutable_fantasy_league_name();
}
inline const std::string& CMsgDOTAFantasyLeagueInfo::_internal_fantasy_league_name() const {
  return fantasy_league_name_.Get();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_fantasy_league_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
inline void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
inline void CMsgDOTAFantasyLeagueInfo::set_fantasy_league_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}
inline std::string* CMsgDOTAFantasyLeagueInfo::_internal_mutable_fantasy_league_name() {
  _has_bits_[0] |= 0x00000001u;
  return fantasy_league_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueInfo::release_fantasy_league_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
  if (!_internal_has_fantasy_league_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fantasy_league_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueInfo::set_allocated_fantasy_league_name(std::string* fantasy_league_name) {
  if (fantasy_league_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fantasy_league_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_league_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueInfo.fantasy_league_name)
}

// optional .Fantasy_Selection_Mode selection_mode = 4 [default = FANTASY_SELECTION_INVALID];
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_selection_mode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_selection_mode() const {
  return _internal_has_selection_mode();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_selection_mode() {
  selection_mode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Fantasy_Selection_Mode CMsgDOTAFantasyLeagueInfo::_internal_selection_mode() const {
  return static_cast< ::Fantasy_Selection_Mode >(selection_mode_);
}
inline ::Fantasy_Selection_Mode CMsgDOTAFantasyLeagueInfo::selection_mode() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.selection_mode)
  return _internal_selection_mode();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_selection_mode(::Fantasy_Selection_Mode value) {
  assert(::Fantasy_Selection_Mode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  selection_mode_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_selection_mode(::Fantasy_Selection_Mode value) {
  _internal_set_selection_mode(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.selection_mode)
}

// optional uint32 team_count = 5;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_team_count() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_team_count() const {
  return _internal_has_team_count();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_team_count() {
  team_count_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_team_count() const {
  return team_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::team_count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.team_count)
  return _internal_team_count();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  team_count_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_team_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.team_count)
}

// optional uint64 logo = 6;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_logo() const {
  return _internal_has_logo();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_logo() {
  logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyLeagueInfo::_internal_logo() const {
  return logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyLeagueInfo::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.logo)
  return _internal_logo();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  logo_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.logo)
}

// optional .CMsgFantasyLeagueScoring scoring = 7;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_scoring() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || scoring_ != nullptr);
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_scoring() const {
  return _internal_has_scoring();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_scoring() {
  if (scoring_ != nullptr) scoring_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgFantasyLeagueScoring& CMsgDOTAFantasyLeagueInfo::_internal_scoring() const {
  const ::CMsgFantasyLeagueScoring* p = scoring_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgFantasyLeagueScoring&>(
      ::_CMsgFantasyLeagueScoring_default_instance_);
}
inline const ::CMsgFantasyLeagueScoring& CMsgDOTAFantasyLeagueInfo::scoring() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.scoring)
  return _internal_scoring();
}
inline void CMsgDOTAFantasyLeagueInfo::unsafe_arena_set_allocated_scoring(
    ::CMsgFantasyLeagueScoring* scoring) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scoring_);
  }
  scoring_ = scoring;
  if (scoring) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAFantasyLeagueInfo.scoring)
}
inline ::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::release_scoring() {
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgFantasyLeagueScoring* temp = scoring_;
  scoring_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::unsafe_arena_release_scoring() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueInfo.scoring)
  _has_bits_[0] &= ~0x00000004u;
  ::CMsgFantasyLeagueScoring* temp = scoring_;
  scoring_ = nullptr;
  return temp;
}
inline ::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::_internal_mutable_scoring() {
  _has_bits_[0] |= 0x00000004u;
  if (scoring_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgFantasyLeagueScoring>(GetArena());
    scoring_ = p;
  }
  return scoring_;
}
inline ::CMsgFantasyLeagueScoring* CMsgDOTAFantasyLeagueInfo::mutable_scoring() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.scoring)
  return _internal_mutable_scoring();
}
inline void CMsgDOTAFantasyLeagueInfo::set_allocated_scoring(::CMsgFantasyLeagueScoring* scoring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scoring_;
  }
  if (scoring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scoring);
    if (message_arena != submessage_arena) {
      scoring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scoring, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  scoring_ = scoring;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueInfo.scoring)
}

// optional uint32 draft_time = 12;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_draft_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_draft_time() const {
  return _internal_has_draft_time();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_draft_time() {
  draft_time_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_draft_time() const {
  return draft_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::draft_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.draft_time)
  return _internal_draft_time();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_draft_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  draft_time_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_draft_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_draft_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.draft_time)
}

// optional uint32 draft_pick_time = 13;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_draft_pick_time() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_draft_pick_time() const {
  return _internal_has_draft_pick_time();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_draft_pick_time() {
  draft_pick_time_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_draft_pick_time() const {
  return draft_pick_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::draft_pick_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.draft_pick_time)
  return _internal_draft_pick_time();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_draft_pick_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  draft_pick_time_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_draft_pick_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_draft_pick_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.draft_pick_time)
}

// optional uint32 season_start = 15;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_season_start() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_season_start() const {
  return _internal_has_season_start();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_season_start() {
  season_start_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_season_start() const {
  return season_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::season_start() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.season_start)
  return _internal_season_start();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_season_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  season_start_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_season_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season_start(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.season_start)
}

// optional uint32 season_length = 16;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_season_length() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_season_length() const {
  return _internal_has_season_length();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_season_length() {
  season_length_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_season_length() const {
  return season_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::season_length() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.season_length)
  return _internal_season_length();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_season_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  season_length_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_season_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season_length(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.season_length)
}

// optional uint32 veto_votes = 17;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_veto_votes() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_veto_votes() const {
  return _internal_has_veto_votes();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_veto_votes() {
  veto_votes_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_veto_votes() const {
  return veto_votes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::veto_votes() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.veto_votes)
  return _internal_veto_votes();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_veto_votes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  veto_votes_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_veto_votes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_veto_votes(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.veto_votes)
}

// optional uint32 acquisitions = 18;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_acquisitions() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_acquisitions() const {
  return _internal_has_acquisitions();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_acquisitions() {
  acquisitions_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_acquisitions() const {
  return acquisitions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::acquisitions() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.acquisitions)
  return _internal_acquisitions();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_acquisitions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  acquisitions_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_acquisitions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_acquisitions(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.acquisitions)
}

// optional uint32 slot_1 = 19;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_slot_1() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_slot_1() const {
  return _internal_has_slot_1();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_slot_1() {
  slot_1_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_slot_1() const {
  return slot_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::slot_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_1)
  return _internal_slot_1();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  slot_1_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_1)
}

// optional uint32 slot_2 = 20;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_slot_2() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_slot_2() const {
  return _internal_has_slot_2();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_slot_2() {
  slot_2_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_slot_2() const {
  return slot_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::slot_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_2)
  return _internal_slot_2();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  slot_2_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_2)
}

// optional uint32 slot_3 = 21;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_slot_3() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_slot_3() const {
  return _internal_has_slot_3();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_slot_3() {
  slot_3_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_slot_3() const {
  return slot_3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::slot_3() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_3)
  return _internal_slot_3();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_slot_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  slot_3_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_slot_3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_3(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_3)
}

// optional uint32 slot_4 = 22;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_slot_4() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_slot_4() const {
  return _internal_has_slot_4();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_slot_4() {
  slot_4_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_slot_4() const {
  return slot_4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::slot_4() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_4)
  return _internal_slot_4();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_slot_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  slot_4_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_slot_4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_4(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_4)
}

// optional uint32 slot_5 = 23;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_slot_5() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_slot_5() const {
  return _internal_has_slot_5();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_slot_5() {
  slot_5_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_slot_5() const {
  return slot_5_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::slot_5() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.slot_5)
  return _internal_slot_5();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_slot_5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  slot_5_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_slot_5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_5(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.slot_5)
}

// optional uint32 bench_slots = 24;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_bench_slots() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_bench_slots() const {
  return _internal_has_bench_slots();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_bench_slots() {
  bench_slots_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_bench_slots() const {
  return bench_slots_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::bench_slots() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.bench_slots)
  return _internal_bench_slots();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_bench_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  bench_slots_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_bench_slots(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bench_slots(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.bench_slots)
}

// repeated .CMsgDOTAFantasyLeagueInfo.OwnerInfo owner_info = 25;
inline int CMsgDOTAFantasyLeagueInfo::_internal_owner_info_size() const {
  return owner_info_.size();
}
inline int CMsgDOTAFantasyLeagueInfo::owner_info_size() const {
  return _internal_owner_info_size();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_owner_info() {
  owner_info_.Clear();
}
inline ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::mutable_owner_info(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >*
CMsgDOTAFantasyLeagueInfo::mutable_owner_info() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueInfo.owner_info)
  return &owner_info_;
}
inline const ::CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo::_internal_owner_info(int index) const {
  return owner_info_.Get(index);
}
inline const ::CMsgDOTAFantasyLeagueInfo_OwnerInfo& CMsgDOTAFantasyLeagueInfo::owner_info(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.owner_info)
  return _internal_owner_info(index);
}
inline ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::_internal_add_owner_info() {
  return owner_info_.Add();
}
inline ::CMsgDOTAFantasyLeagueInfo_OwnerInfo* CMsgDOTAFantasyLeagueInfo::add_owner_info() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueInfo.owner_info)
  return _internal_add_owner_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueInfo_OwnerInfo >&
CMsgDOTAFantasyLeagueInfo::owner_info() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueInfo.owner_info)
  return owner_info_;
}

// repeated uint32 players = 26;
inline int CMsgDOTAFantasyLeagueInfo::_internal_players_size() const {
  return players_.size();
}
inline int CMsgDOTAFantasyLeagueInfo::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_players() {
  players_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_players(int index) const {
  return players_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.players)
  return _internal_players(index);
}
inline void CMsgDOTAFantasyLeagueInfo::set_players(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.players)
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_add_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  players_.Add(value);
}
inline void CMsgDOTAFantasyLeagueInfo::add_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_players(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueInfo.players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueInfo::_internal_players() const {
  return players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueInfo::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueInfo.players)
  return _internal_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueInfo::_internal_mutable_players() {
  return &players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueInfo.players)
  return _internal_mutable_players();
}

// optional uint32 time_zone = 27;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_time_zone() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_time_zone() const {
  return _internal_has_time_zone();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_time_zone() {
  time_zone_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_time_zone() const {
  return time_zone_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::time_zone() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.time_zone)
  return _internal_time_zone();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_time_zone(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  time_zone_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_time_zone(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_zone(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.time_zone)
}

// optional uint32 season = 28;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_season() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_season() const {
  return _internal_has_season();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_season() {
  season_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::_internal_season() const {
  return season_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfo::season() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.season)
  return _internal_season();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_season(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  season_ = value;
}
inline void CMsgDOTAFantasyLeagueInfo::set_season(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.season)
}

// optional string password = 29;
inline bool CMsgDOTAFantasyLeagueInfo::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfo::has_password() const {
  return _internal_has_password();
}
inline void CMsgDOTAFantasyLeagueInfo::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyLeagueInfo::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfo.password)
  return _internal_password();
}
inline void CMsgDOTAFantasyLeagueInfo::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfo.password)
}
inline std::string* CMsgDOTAFantasyLeagueInfo::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueInfo.password)
  return _internal_mutable_password();
}
inline const std::string& CMsgDOTAFantasyLeagueInfo::_internal_password() const {
  return password_.Get();
}
inline void CMsgDOTAFantasyLeagueInfo::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueInfo::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueInfo.password)
}
inline void CMsgDOTAFantasyLeagueInfo::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueInfo.password)
}
inline void CMsgDOTAFantasyLeagueInfo::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueInfo.password)
}
inline std::string* CMsgDOTAFantasyLeagueInfo::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueInfo::release_password() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueInfo.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueInfo::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueInfo.password)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueEditInfoRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueEditInfoRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInfoRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueEditInfoRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueEditInfoRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueEditInfoRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInfoRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueEditInfoRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueEditInfoRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInfoRequest.fantasy_league_id)
}

// optional .CMsgDOTAFantasyLeagueInfo edit_info = 2;
inline bool CMsgDOTAFantasyLeagueEditInfoRequest::_internal_has_edit_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || edit_info_ != nullptr);
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInfoRequest::has_edit_info() const {
  return _internal_has_edit_info();
}
inline void CMsgDOTAFantasyLeagueEditInfoRequest::clear_edit_info() {
  if (edit_info_ != nullptr) edit_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueEditInfoRequest::_internal_edit_info() const {
  const ::CMsgDOTAFantasyLeagueInfo* p = edit_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAFantasyLeagueInfo&>(
      ::_CMsgDOTAFantasyLeagueInfo_default_instance_);
}
inline const ::CMsgDOTAFantasyLeagueInfo& CMsgDOTAFantasyLeagueEditInfoRequest::edit_info() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  return _internal_edit_info();
}
inline void CMsgDOTAFantasyLeagueEditInfoRequest::unsafe_arena_set_allocated_edit_info(
    ::CMsgDOTAFantasyLeagueInfo* edit_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edit_info_);
  }
  edit_info_ = edit_info;
  if (edit_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
}
inline ::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::release_edit_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAFantasyLeagueInfo* temp = edit_info_;
  edit_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::unsafe_arena_release_edit_info() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAFantasyLeagueInfo* temp = edit_info_;
  edit_info_ = nullptr;
  return temp;
}
inline ::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::_internal_mutable_edit_info() {
  _has_bits_[0] |= 0x00000001u;
  if (edit_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAFantasyLeagueInfo>(GetArena());
    edit_info_ = p;
  }
  return edit_info_;
}
inline ::CMsgDOTAFantasyLeagueInfo* CMsgDOTAFantasyLeagueEditInfoRequest::mutable_edit_info() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
  return _internal_mutable_edit_info();
}
inline void CMsgDOTAFantasyLeagueEditInfoRequest::set_allocated_edit_info(::CMsgDOTAFantasyLeagueInfo* edit_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete edit_info_;
  }
  if (edit_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(edit_info);
    if (message_arena != submessage_arena) {
      edit_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edit_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  edit_info_ = edit_info;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueEditInfoRequest.edit_info)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueEditInfoResponse

// optional .CMsgDOTAFantasyLeagueEditInfoResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueEditInfoResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueEditInfoResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult CMsgDOTAFantasyLeagueEditInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInfoResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueEditInfoResponse::_internal_set_result(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueEditInfoResponse::set_result(::CMsgDOTAFantasyLeagueEditInfoResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInfoResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueFindRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueFindRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueFindRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueFindRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueFindRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueFindRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueFindRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueFindRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindRequest.fantasy_league_id)
}

// optional string password = 2;
inline bool CMsgDOTAFantasyLeagueFindRequest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueFindRequest::has_password() const {
  return _internal_has_password();
}
inline void CMsgDOTAFantasyLeagueFindRequest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyLeagueFindRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindRequest.password)
  return _internal_password();
}
inline void CMsgDOTAFantasyLeagueFindRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindRequest.password)
}
inline std::string* CMsgDOTAFantasyLeagueFindRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueFindRequest.password)
  return _internal_mutable_password();
}
inline const std::string& CMsgDOTAFantasyLeagueFindRequest::_internal_password() const {
  return password_.Get();
}
inline void CMsgDOTAFantasyLeagueFindRequest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueFindRequest::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueFindRequest.password)
}
inline void CMsgDOTAFantasyLeagueFindRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueFindRequest.password)
}
inline void CMsgDOTAFantasyLeagueFindRequest::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueFindRequest.password)
}
inline std::string* CMsgDOTAFantasyLeagueFindRequest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueFindRequest::release_password() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueFindRequest.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueFindRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueFindRequest.password)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueFindResponse

// optional .CMsgDOTAFantasyLeagueFindResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueFindResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueFindResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueFindResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueFindResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueFindResponse_EResult CMsgDOTAFantasyLeagueFindResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueFindResponse::_internal_set_result(::CMsgDOTAFantasyLeagueFindResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueFindResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_result(::CMsgDOTAFantasyLeagueFindResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindResponse.result)
}

// optional string fantasy_league_name = 2;
inline bool CMsgDOTAFantasyLeagueFindResponse::_internal_has_fantasy_league_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueFindResponse::has_fantasy_league_name() const {
  return _internal_has_fantasy_league_name();
}
inline void CMsgDOTAFantasyLeagueFindResponse::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyLeagueFindResponse::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  return _internal_fantasy_league_name();
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const std::string& value) {
  _internal_set_fantasy_league_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
inline std::string* CMsgDOTAFantasyLeagueFindResponse::mutable_fantasy_league_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  return _internal_mutable_fantasy_league_name();
}
inline const std::string& CMsgDOTAFantasyLeagueFindResponse::_internal_fantasy_league_name() const {
  return fantasy_league_name_.Get();
}
inline void CMsgDOTAFantasyLeagueFindResponse::_internal_set_fantasy_league_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_fantasy_league_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}
inline std::string* CMsgDOTAFantasyLeagueFindResponse::_internal_mutable_fantasy_league_name() {
  _has_bits_[0] |= 0x00000001u;
  return fantasy_league_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueFindResponse::release_fantasy_league_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
  if (!_internal_has_fantasy_league_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fantasy_league_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_allocated_fantasy_league_name(std::string* fantasy_league_name) {
  if (fantasy_league_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fantasy_league_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_league_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueFindResponse.fantasy_league_name)
}

// optional string commissioner_name = 3;
inline bool CMsgDOTAFantasyLeagueFindResponse::_internal_has_commissioner_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueFindResponse::has_commissioner_name() const {
  return _internal_has_commissioner_name();
}
inline void CMsgDOTAFantasyLeagueFindResponse::clear_commissioner_name() {
  commissioner_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyLeagueFindResponse::commissioner_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  return _internal_commissioner_name();
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const std::string& value) {
  _internal_set_commissioner_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
inline std::string* CMsgDOTAFantasyLeagueFindResponse::mutable_commissioner_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  return _internal_mutable_commissioner_name();
}
inline const std::string& CMsgDOTAFantasyLeagueFindResponse::_internal_commissioner_name() const {
  return commissioner_name_.Get();
}
inline void CMsgDOTAFantasyLeagueFindResponse::_internal_set_commissioner_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  commissioner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  commissioner_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  commissioner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_commissioner_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  commissioner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}
inline std::string* CMsgDOTAFantasyLeagueFindResponse::_internal_mutable_commissioner_name() {
  _has_bits_[0] |= 0x00000002u;
  return commissioner_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueFindResponse::release_commissioner_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
  if (!_internal_has_commissioner_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return commissioner_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueFindResponse::set_allocated_commissioner_name(std::string* commissioner_name) {
  if (commissioner_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  commissioner_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commissioner_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueFindResponse.commissioner_name)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueInfoRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueInfoRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfoRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueInfoRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfoRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueInfoRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfoRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueInfoRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueInfoRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfoRequest.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueInfoResponse

// optional .CMsgDOTAFantasyLeagueInfoResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueInfoResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueInfoResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueInfoResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueInfoResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueInfoResponse_EResult CMsgDOTAFantasyLeagueInfoResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueInfoResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueInfoResponse::_internal_set_result(::CMsgDOTAFantasyLeagueInfoResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueInfoResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueInfoResponse::set_result(::CMsgDOTAFantasyLeagueInfoResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueInfoResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueMatchupsRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueMatchupsRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueMatchupsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueMatchupsRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsRequest.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueMatchupsResponse_Matchup

// optional uint32 owner_account_id_1 = 1;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_has_owner_account_id_1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_owner_account_id_1() const {
  return _internal_has_owner_account_id_1();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_owner_account_id_1() {
  owner_account_id_1_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_owner_account_id_1() const {
  return owner_account_id_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::owner_account_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_1)
  return _internal_owner_account_id_1();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  owner_account_id_1_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_1)
}

// optional uint32 owner_account_id_2 = 2;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_has_owner_account_id_2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_owner_account_id_2() const {
  return _internal_has_owner_account_id_2();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_owner_account_id_2() const {
  return owner_account_id_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_2)
  return _internal_owner_account_id_2();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_account_id_2_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.owner_account_id_2)
}

// optional float score_1 = 3;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_has_score_1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_score_1() const {
  return _internal_has_score_1();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_score_1() {
  score_1_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_score_1() const {
  return score_1_;
}
inline float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_1)
  return _internal_score_1();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_set_score_1(float value) {
  _has_bits_[0] |= 0x00000004u;
  score_1_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_score_1(float value) {
  _internal_set_score_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_1)
}

// optional float score_2 = 4;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_has_score_2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::has_score_2() const {
  return _internal_has_score_2();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::clear_score_2() {
  score_2_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_score_2() const {
  return score_2_;
}
inline float CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::score_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_2)
  return _internal_score_2();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::_internal_set_score_2(float value) {
  _has_bits_[0] |= 0x00000008u;
  score_2_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_Matchup::set_score_2(float value) {
  _internal_set_score_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.Matchup.score_2)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups

// repeated .CMsgDOTAFantasyLeagueMatchupsResponse.Matchup matchup = 1;
inline int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_matchup_size() const {
  return matchup_.size();
}
inline int CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup_size() const {
  return _internal_matchup_size();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_matchup() {
  matchup_.Clear();
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::mutable_matchup(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >*
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::mutable_matchup() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return &matchup_;
}
inline const ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_matchup(int index) const {
  return matchup_.Get(index);
}
inline const ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup& CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return _internal_matchup(index);
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_add_matchup() {
  return matchup_.Add();
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup* CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::add_matchup() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return _internal_add_matchup();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_Matchup >&
CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::matchup() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.matchup)
  return matchup_;
}

// optional uint32 start_time = 2;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.start_time)
  return _internal_start_time();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  start_time_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.start_time)
}

// optional uint32 end_time = 3;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::has_end_time() const {
  return _internal_has_end_time();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::clear_end_time() {
  end_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.end_time)
  return _internal_end_time();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups::set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups.end_time)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueMatchupsResponse

// optional .CMsgDOTAFantasyLeagueMatchupsResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueMatchupsResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult CMsgDOTAFantasyLeagueMatchupsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::_internal_set_result(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::set_result(::CMsgDOTAFantasyLeagueMatchupsResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.result)
}

// optional uint32 fantasy_league_id = 2;
inline bool CMsgDOTAFantasyLeagueMatchupsResponse::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueMatchupsResponse::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueMatchupsResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueMatchupsResponse.fantasy_league_id)
}

// repeated .CMsgDOTAFantasyLeagueMatchupsResponse.WeeklyMatchups weekly_matchups = 3;
inline int CMsgDOTAFantasyLeagueMatchupsResponse::_internal_weekly_matchups_size() const {
  return weekly_matchups_.size();
}
inline int CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups_size() const {
  return _internal_weekly_matchups_size();
}
inline void CMsgDOTAFantasyLeagueMatchupsResponse::clear_weekly_matchups() {
  weekly_matchups_.Clear();
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::mutable_weekly_matchups(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >*
CMsgDOTAFantasyLeagueMatchupsResponse::mutable_weekly_matchups() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return &weekly_matchups_;
}
inline const ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse::_internal_weekly_matchups(int index) const {
  return weekly_matchups_.Get(index);
}
inline const ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups& CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return _internal_weekly_matchups(index);
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::_internal_add_weekly_matchups() {
  return weekly_matchups_.Add();
}
inline ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups* CMsgDOTAFantasyLeagueMatchupsResponse::add_weekly_matchups() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return _internal_add_weekly_matchups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueMatchupsResponse_WeeklyMatchups >&
CMsgDOTAFantasyLeagueMatchupsResponse::weekly_matchups() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueMatchupsResponse.weekly_matchups)
  return weekly_matchups_;
}

// -------------------------------------------------------------------

// CMsgDOTAEditFantasyTeamRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAEditFantasyTeamRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAEditFantasyTeamRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAEditFantasyTeamRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAEditFantasyTeamRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAEditFantasyTeamRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAEditFantasyTeamRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAEditFantasyTeamRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
inline bool CMsgDOTAEditFantasyTeamRequest::_internal_has_team_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAEditFantasyTeamRequest::has_team_index() const {
  return _internal_has_team_index();
}
inline void CMsgDOTAEditFantasyTeamRequest::clear_team_index() {
  team_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAEditFantasyTeamRequest::_internal_team_index() const {
  return team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAEditFantasyTeamRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.team_index)
  return _internal_team_index();
}
inline void CMsgDOTAEditFantasyTeamRequest::_internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_index_ = value;
}
inline void CMsgDOTAEditFantasyTeamRequest::set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.team_index)
}

// optional string team_name = 3;
inline bool CMsgDOTAEditFantasyTeamRequest::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAEditFantasyTeamRequest::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAEditFantasyTeamRequest::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAEditFantasyTeamRequest::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.team_name)
  return _internal_team_name();
}
inline void CMsgDOTAEditFantasyTeamRequest::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.team_name)
}
inline std::string* CMsgDOTAEditFantasyTeamRequest::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAEditFantasyTeamRequest.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgDOTAEditFantasyTeamRequest::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgDOTAEditFantasyTeamRequest::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAEditFantasyTeamRequest::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAEditFantasyTeamRequest.team_name)
}
inline void CMsgDOTAEditFantasyTeamRequest::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAEditFantasyTeamRequest.team_name)
}
inline void CMsgDOTAEditFantasyTeamRequest::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAEditFantasyTeamRequest.team_name)
}
inline std::string* CMsgDOTAEditFantasyTeamRequest::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAEditFantasyTeamRequest::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAEditFantasyTeamRequest.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAEditFantasyTeamRequest::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAEditFantasyTeamRequest.team_name)
}

// optional uint64 team_logo = 4;
inline bool CMsgDOTAEditFantasyTeamRequest::_internal_has_team_logo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAEditFantasyTeamRequest::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CMsgDOTAEditFantasyTeamRequest::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAEditFantasyTeamRequest::_internal_team_logo() const {
  return team_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAEditFantasyTeamRequest::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamRequest.team_logo)
  return _internal_team_logo();
}
inline void CMsgDOTAEditFantasyTeamRequest::_internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  team_logo_ = value;
}
inline void CMsgDOTAEditFantasyTeamRequest::set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamRequest.team_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAEditFantasyTeamResponse

// optional .CMsgDOTAEditFantasyTeamResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAEditFantasyTeamResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAEditFantasyTeamResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAEditFantasyTeamResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAEditFantasyTeamResponse_EResult >(result_);
}
inline ::CMsgDOTAEditFantasyTeamResponse_EResult CMsgDOTAEditFantasyTeamResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAEditFantasyTeamResponse.result)
  return _internal_result();
}
inline void CMsgDOTAEditFantasyTeamResponse::_internal_set_result(::CMsgDOTAEditFantasyTeamResponse_EResult value) {
  assert(::CMsgDOTAEditFantasyTeamResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAEditFantasyTeamResponse::set_result(::CMsgDOTAEditFantasyTeamResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAEditFantasyTeamResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfoRequestByFantasyLeagueID.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID

// optional uint32 owner_account_id = 1;
inline bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfoRequestByOwnerAccountID.owner_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamInfoResponse

// repeated .CMsgDOTAFantasyTeamInfo results = 1;
inline int CMsgDOTAFantasyTeamInfoResponse::_internal_results_size() const {
  return results_.size();
}
inline int CMsgDOTAFantasyTeamInfoResponse::results_size() const {
  return _internal_results_size();
}
inline void CMsgDOTAFantasyTeamInfoResponse::clear_results() {
  results_.Clear();
}
inline ::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamInfoResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo >*
CMsgDOTAFantasyTeamInfoResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamInfoResponse.results)
  return &results_;
}
inline const ::CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfoResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::CMsgDOTAFantasyTeamInfo& CMsgDOTAFantasyTeamInfoResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfoResponse.results)
  return _internal_results(index);
}
inline ::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::_internal_add_results() {
  return results_.Add();
}
inline ::CMsgDOTAFantasyTeamInfo* CMsgDOTAFantasyTeamInfoResponse::add_results() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamInfoResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamInfo >&
CMsgDOTAFantasyTeamInfoResponse::results() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamInfoResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamInfo

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamInfo::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamInfo::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyTeamInfo::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamInfo::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_fantasy_team_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_fantasy_team_index() const {
  return _internal_has_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamInfo::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::_internal_fantasy_team_index() const {
  return fantasy_team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.fantasy_team_index)
  return _internal_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  fantasy_team_index_ = value;
}
inline void CMsgDOTAFantasyTeamInfo::set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.fantasy_team_index)
}

// optional string team_name = 4;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAFantasyTeamInfo::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyTeamInfo::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.team_name)
  return _internal_team_name();
}
inline void CMsgDOTAFantasyTeamInfo::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.team_name)
}
inline std::string* CMsgDOTAFantasyTeamInfo::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamInfo.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgDOTAFantasyTeamInfo::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyTeamInfo::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyTeamInfo.team_name)
}
inline void CMsgDOTAFantasyTeamInfo::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamInfo.team_name)
}
inline void CMsgDOTAFantasyTeamInfo::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamInfo.team_name)
}
inline std::string* CMsgDOTAFantasyTeamInfo::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyTeamInfo::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyTeamInfo.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyTeamInfo::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamInfo.team_name)
}

// optional uint64 team_logo = 5;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_team_logo() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_team_logo() const {
  return _internal_has_team_logo();
}
inline void CMsgDOTAFantasyTeamInfo::clear_team_logo() {
  team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamInfo::_internal_team_logo() const {
  return team_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamInfo::team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.team_logo)
  return _internal_team_logo();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  team_logo_ = value;
}
inline void CMsgDOTAFantasyTeamInfo::set_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.team_logo)
}

// optional uint32 wins = 6;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_wins() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_wins() const {
  return _internal_has_wins();
}
inline void CMsgDOTAFantasyTeamInfo::clear_wins() {
  wins_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::_internal_wins() const {
  return wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.wins)
  return _internal_wins();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  wins_ = value;
}
inline void CMsgDOTAFantasyTeamInfo::set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.wins)
}

// optional uint32 losses = 7;
inline bool CMsgDOTAFantasyTeamInfo::_internal_has_losses() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamInfo::has_losses() const {
  return _internal_has_losses();
}
inline void CMsgDOTAFantasyTeamInfo::clear_losses() {
  losses_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::_internal_losses() const {
  return losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.losses)
  return _internal_losses();
}
inline void CMsgDOTAFantasyTeamInfo::_internal_set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  losses_ = value;
}
inline void CMsgDOTAFantasyTeamInfo::set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.losses)
}

// repeated uint32 current_roster = 8;
inline int CMsgDOTAFantasyTeamInfo::_internal_current_roster_size() const {
  return current_roster_.size();
}
inline int CMsgDOTAFantasyTeamInfo::current_roster_size() const {
  return _internal_current_roster_size();
}
inline void CMsgDOTAFantasyTeamInfo::clear_current_roster() {
  current_roster_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::_internal_current_roster(int index) const {
  return current_roster_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamInfo::current_roster(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamInfo.current_roster)
  return _internal_current_roster(index);
}
inline void CMsgDOTAFantasyTeamInfo::set_current_roster(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  current_roster_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamInfo.current_roster)
}
inline void CMsgDOTAFantasyTeamInfo::_internal_add_current_roster(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  current_roster_.Add(value);
}
inline void CMsgDOTAFantasyTeamInfo::add_current_roster(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_current_roster(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamInfo.current_roster)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyTeamInfo::_internal_current_roster() const {
  return current_roster_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyTeamInfo::current_roster() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamInfo.current_roster)
  return _internal_current_roster();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyTeamInfo::_internal_mutable_current_roster() {
  return &current_roster_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyTeamInfo::mutable_current_roster() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamInfo.current_roster)
  return _internal_mutable_current_roster();
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamScoreRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_fantasy_team_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_fantasy_team_index() const {
  return _internal_has_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::_internal_fantasy_team_index() const {
  return fantasy_team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.fantasy_team_index)
  return _internal_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  fantasy_team_index_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.fantasy_team_index)
}

// optional uint64 filter_match_id = 4;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_filter_match_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_filter_match_id() const {
  return _internal_has_filter_match_id();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_filter_match_id() {
  filter_match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamScoreRequest::_internal_filter_match_id() const {
  return filter_match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamScoreRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.filter_match_id)
  return _internal_filter_match_id();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  filter_match_id_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filter_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.filter_match_id)
}

// optional uint32 filter_start_time = 5;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_filter_start_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_filter_start_time() const {
  return _internal_has_filter_start_time();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::_internal_filter_start_time() const {
  return filter_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.filter_start_time)
  return _internal_filter_start_time();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_start_time_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.filter_start_time)
}

// optional uint32 filter_end_time = 6;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_filter_end_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_filter_end_time() const {
  return _internal_has_filter_end_time();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::_internal_filter_end_time() const {
  return filter_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.filter_end_time)
  return _internal_filter_end_time();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  filter_end_time_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.filter_end_time)
}

// optional bool include_bench = 7;
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_has_include_bench() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::has_include_bench() const {
  return _internal_has_include_bench();
}
inline void CMsgDOTAFantasyTeamScoreRequest::clear_include_bench() {
  include_bench_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::_internal_include_bench() const {
  return include_bench_;
}
inline bool CMsgDOTAFantasyTeamScoreRequest::include_bench() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreRequest.include_bench)
  return _internal_include_bench();
}
inline void CMsgDOTAFantasyTeamScoreRequest::_internal_set_include_bench(bool value) {
  _has_bits_[0] |= 0x00000040u;
  include_bench_ = value;
}
inline void CMsgDOTAFantasyTeamScoreRequest::set_include_bench(bool value) {
  _internal_set_include_bench(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreRequest.include_bench)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore

// optional uint32 account_id = 1;
inline bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.account_id)
}

// optional float score = 2;
inline bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_internal_score() const {
  return score_;
}
inline float CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamScoreResponse

// optional .CMsgDOTAFantasyTeamScoreResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamScoreResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamScoreResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamScoreResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamScoreResponse_EResult CMsgDOTAFantasyTeamScoreResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamScoreResponse::_internal_set_result(::CMsgDOTAFantasyTeamScoreResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamScoreResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamScoreResponse::set_result(::CMsgDOTAFantasyTeamScoreResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.result)
}

// optional float fantasy_team_score = 2;
inline bool CMsgDOTAFantasyTeamScoreResponse::_internal_has_fantasy_team_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamScoreResponse::has_fantasy_team_score() const {
  return _internal_has_fantasy_team_score();
}
inline void CMsgDOTAFantasyTeamScoreResponse::clear_fantasy_team_score() {
  fantasy_team_score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTAFantasyTeamScoreResponse::_internal_fantasy_team_score() const {
  return fantasy_team_score_;
}
inline float CMsgDOTAFantasyTeamScoreResponse::fantasy_team_score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.fantasy_team_score)
  return _internal_fantasy_team_score();
}
inline void CMsgDOTAFantasyTeamScoreResponse::_internal_set_fantasy_team_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_score_ = value;
}
inline void CMsgDOTAFantasyTeamScoreResponse::set_fantasy_team_score(float value) {
  _internal_set_fantasy_team_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamScoreResponse.fantasy_team_score)
}

// repeated .CMsgDOTAFantasyTeamScoreResponse.CMsgPlayerScore fantasy_player_score = 3;
inline int CMsgDOTAFantasyTeamScoreResponse::_internal_fantasy_player_score_size() const {
  return fantasy_player_score_.size();
}
inline int CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score_size() const {
  return _internal_fantasy_player_score_size();
}
inline void CMsgDOTAFantasyTeamScoreResponse::clear_fantasy_player_score() {
  fantasy_player_score_.Clear();
}
inline ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::mutable_fantasy_player_score(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >*
CMsgDOTAFantasyTeamScoreResponse::mutable_fantasy_player_score() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return &fantasy_player_score_;
}
inline const ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse::_internal_fantasy_player_score(int index) const {
  return fantasy_player_score_.Get(index);
}
inline const ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore& CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return _internal_fantasy_player_score(index);
}
inline ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::_internal_add_fantasy_player_score() {
  return fantasy_player_score_.Add();
}
inline ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore* CMsgDOTAFantasyTeamScoreResponse::add_fantasy_player_score() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return _internal_add_fantasy_player_score();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamScoreResponse_CMsgPlayerScore >&
CMsgDOTAFantasyTeamScoreResponse::fantasy_player_score() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamScoreResponse.fantasy_player_score)
  return fantasy_player_score_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamStandingsRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.fantasy_league_id)
}

// optional uint32 count = 2;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_count() const {
  return _internal_has_count();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.count)
  return _internal_count();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.count)
}

// optional uint32 filter_start_time = 3;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_filter_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_start_time() const {
  return _internal_has_filter_start_time();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::_internal_filter_start_time() const {
  return filter_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_start_time)
  return _internal_filter_start_time();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  filter_start_time_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_start_time)
}

// optional uint32 filter_end_time = 4;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_filter_end_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_end_time() const {
  return _internal_has_filter_end_time();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::_internal_filter_end_time() const {
  return filter_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_end_time)
  return _internal_filter_end_time();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  filter_end_time_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_end_time)
}

// optional uint64 filter_match_id = 5;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_filter_match_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_match_id() const {
  return _internal_has_filter_match_id();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_match_id() {
  filter_match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamStandingsRequest::_internal_filter_match_id() const {
  return filter_match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamStandingsRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_match_id)
  return _internal_filter_match_id();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_match_id_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filter_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_match_id)
}

// optional bool filter_last_match = 6;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_filter_last_match() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_last_match() const {
  return _internal_has_filter_last_match();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_filter_last_match() const {
  return filter_last_match_;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_last_match)
  return _internal_filter_last_match();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_filter_last_match(bool value) {
  _has_bits_[0] |= 0x00000020u;
  filter_last_match_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_filter_last_match(bool value) {
  _internal_set_filter_last_match(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_last_match)
}

// optional bool filter_in_hall = 7;
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_has_filter_in_hall() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::has_filter_in_hall() const {
  return _internal_has_filter_in_hall();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::clear_filter_in_hall() {
  filter_in_hall_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::_internal_filter_in_hall() const {
  return filter_in_hall_;
}
inline bool CMsgDOTAFantasyTeamStandingsRequest::filter_in_hall() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsRequest.filter_in_hall)
  return _internal_filter_in_hall();
}
inline void CMsgDOTAFantasyTeamStandingsRequest::_internal_set_filter_in_hall(bool value) {
  _has_bits_[0] |= 0x00000040u;
  filter_in_hall_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsRequest::set_filter_in_hall(bool value) {
  _internal_set_filter_in_hall(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsRequest.filter_in_hall)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_account_id)
}

// optional uint32 fantasy_team_index = 3;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_fantasy_team_index() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_index() const {
  return _internal_has_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_fantasy_team_index() const {
  return fantasy_team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_index)
  return _internal_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  fantasy_team_index_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_index)
}

// optional uint64 fantasy_team_logo = 4;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_fantasy_team_logo() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_logo() const {
  return _internal_has_fantasy_team_logo();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_logo() {
  fantasy_team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_fantasy_team_logo() const {
  return fantasy_team_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_logo)
  return _internal_fantasy_team_logo();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_fantasy_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  fantasy_team_logo_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fantasy_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_logo)
}

// optional string owner_name = 5;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_owner_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_owner_name() const {
  return _internal_has_owner_name();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_owner_name() {
  owner_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::owner_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  return _internal_owner_name();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const std::string& value) {
  _internal_set_owner_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
inline std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::mutable_owner_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  return _internal_mutable_owner_name();
}
inline const std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_owner_name() const {
  return owner_name_.Get();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_owner_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  owner_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_owner_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  owner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}
inline std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_mutable_owner_name() {
  _has_bits_[0] |= 0x00000001u;
  return owner_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::release_owner_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
  if (!_internal_has_owner_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return owner_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_allocated_owner_name(std::string* owner_name) {
  if (owner_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  owner_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.owner_name)
}

// optional string fantasy_team_name = 6;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_fantasy_team_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_fantasy_team_name() const {
  return _internal_has_fantasy_team_name();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_fantasy_team_name() {
  fantasy_team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::fantasy_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  return _internal_fantasy_team_name();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const std::string& value) {
  _internal_set_fantasy_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
inline std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::mutable_fantasy_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  return _internal_mutable_fantasy_team_name();
}
inline const std::string& CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_fantasy_team_name() const {
  return fantasy_team_name_.Get();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_fantasy_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_fantasy_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}
inline std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_mutable_fantasy_team_name() {
  _has_bits_[0] |= 0x00000002u;
  return fantasy_team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::release_fantasy_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
  if (!_internal_has_fantasy_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fantasy_team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_allocated_fantasy_team_name(std::string* fantasy_team_name) {
  if (fantasy_team_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fantasy_team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.fantasy_team_name)
}

// optional float score = 7;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_score() const {
  return score_;
}
inline float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000040u;
  score_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score)
}

// optional float score_against = 8;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_score_against() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_score_against() const {
  return _internal_has_score_against();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_score_against() {
  score_against_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_score_against() const {
  return score_against_;
}
inline float CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::score_against() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score_against)
  return _internal_score_against();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_score_against(float value) {
  _has_bits_[0] |= 0x00000080u;
  score_against_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_score_against(float value) {
  _internal_set_score_against(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.score_against)
}

// optional uint32 wins = 9;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_wins() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_wins() const {
  return _internal_has_wins();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_wins() {
  wins_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_wins() const {
  return wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::wins() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.wins)
  return _internal_wins();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  wins_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.wins)
}

// optional uint32 losses = 10;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_losses() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_losses() const {
  return _internal_has_losses();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_losses() {
  losses_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_losses() const {
  return losses_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::losses() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.losses)
  return _internal_losses();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  losses_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_losses(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_losses(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.losses)
}

// optional int32 streak = 11;
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_has_streak() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::has_streak() const {
  return _internal_has_streak();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::clear_streak() {
  streak_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_streak() const {
  return streak_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::streak() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.streak)
  return _internal_streak();
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::_internal_set_streak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  streak_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore::set_streak(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_streak(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore.streak)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamStandingsResponse

// optional .CMsgDOTAFantasyTeamStandingsResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamStandingsResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamStandingsResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamStandingsResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamStandingsResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamStandingsResponse_EResult CMsgDOTAFantasyTeamStandingsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamStandingsResponse::_internal_set_result(::CMsgDOTAFantasyTeamStandingsResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamStandingsResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamStandingsResponse::set_result(::CMsgDOTAFantasyTeamStandingsResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamStandingsResponse.result)
}

// repeated .CMsgDOTAFantasyTeamStandingsResponse.CMsgTeamScore team_scores = 3;
inline int CMsgDOTAFantasyTeamStandingsResponse::_internal_team_scores_size() const {
  return team_scores_.size();
}
inline int CMsgDOTAFantasyTeamStandingsResponse::team_scores_size() const {
  return _internal_team_scores_size();
}
inline void CMsgDOTAFantasyTeamStandingsResponse::clear_team_scores() {
  team_scores_.Clear();
}
inline ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::mutable_team_scores(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >*
CMsgDOTAFantasyTeamStandingsResponse::mutable_team_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return &team_scores_;
}
inline const ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse::_internal_team_scores(int index) const {
  return team_scores_.Get(index);
}
inline const ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore& CMsgDOTAFantasyTeamStandingsResponse::team_scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return _internal_team_scores(index);
}
inline ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::_internal_add_team_scores() {
  return team_scores_.Add();
}
inline ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore* CMsgDOTAFantasyTeamStandingsResponse::add_team_scores() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return _internal_add_team_scores();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamStandingsResponse_CMsgTeamScore >&
CMsgDOTAFantasyTeamStandingsResponse::team_scores() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamStandingsResponse.team_scores)
  return team_scores_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerScoreRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.fantasy_league_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_has_player_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::_internal_player_account_id() const {
  return player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::_internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_account_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreRequest::set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.player_account_id)
}

// optional uint32 filter_start_time = 3;
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_has_filter_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_start_time() const {
  return _internal_has_filter_start_time();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::_internal_filter_start_time() const {
  return filter_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_start_time)
  return _internal_filter_start_time();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::_internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  filter_start_time_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreRequest::set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_start_time)
}

// optional uint32 filter_end_time = 4;
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_has_filter_end_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_end_time() const {
  return _internal_has_filter_end_time();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::_internal_filter_end_time() const {
  return filter_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_end_time)
  return _internal_filter_end_time();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::_internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  filter_end_time_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreRequest::set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_end_time)
}

// optional uint64 filter_match_id = 5;
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_has_filter_match_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_match_id() const {
  return _internal_has_filter_match_id();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_match_id() {
  filter_match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerScoreRequest::_internal_filter_match_id() const {
  return filter_match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerScoreRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_match_id)
  return _internal_filter_match_id();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::_internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_match_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreRequest::set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filter_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_match_id)
}

// optional bool filter_last_match = 6;
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_has_filter_last_match() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::has_filter_last_match() const {
  return _internal_has_filter_last_match();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::_internal_filter_last_match() const {
  return filter_last_match_;
}
inline bool CMsgDOTAFantasyPlayerScoreRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreRequest.filter_last_match)
  return _internal_filter_last_match();
}
inline void CMsgDOTAFantasyPlayerScoreRequest::_internal_set_filter_last_match(bool value) {
  _has_bits_[0] |= 0x00000020u;
  filter_last_match_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreRequest::set_filter_last_match(bool value) {
  _internal_set_filter_last_match(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreRequest.filter_last_match)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerScoreResponse

// optional .CMsgDOTAFantasyPlayerScoreResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyPlayerScoreResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyPlayerScoreResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyPlayerScoreResponse_EResult CMsgDOTAFantasyPlayerScoreResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::_internal_set_result(::CMsgDOTAFantasyPlayerScoreResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerScoreResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_result(::CMsgDOTAFantasyPlayerScoreResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.result)
}

// optional uint32 fantasy_league_id = 2;
inline bool CMsgDOTAFantasyPlayerScoreResponse::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreResponse::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreResponse::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.fantasy_league_id)
}

// optional uint32 player_account_id = 3;
inline bool CMsgDOTAFantasyPlayerScoreResponse::_internal_has_player_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreResponse::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreResponse::_internal_player_account_id() const {
  return player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreResponse::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::_internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  player_account_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.player_account_id)
}

// optional string player_name = 4;
inline bool CMsgDOTAFantasyPlayerScoreResponse::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreResponse::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyPlayerScoreResponse::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.player_name)
  return _internal_player_name();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
inline std::string* CMsgDOTAFantasyPlayerScoreResponse::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreResponse.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& CMsgDOTAFantasyPlayerScoreResponse::_internal_player_name() const {
  return player_name_.Get();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_player_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}
inline std::string* CMsgDOTAFantasyPlayerScoreResponse::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyPlayerScoreResponse::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyPlayerScoreResponse.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerScoreResponse.player_name)
}

// optional float score = 5;
inline bool CMsgDOTAFantasyPlayerScoreResponse::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreResponse::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgDOTAFantasyPlayerScoreResponse::_internal_score() const {
  return score_;
}
inline float CMsgDOTAFantasyPlayerScoreResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreResponse.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyPlayerScoreResponse::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000010u;
  score_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreResponse::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreResponse.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStandingsRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.fantasy_league_id)
}

// optional uint32 count = 2;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_count() const {
  return _internal_has_count();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::count() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.count)
  return _internal_count();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  count_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.count)
}

// optional uint32 role = 3;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_role() const {
  return _internal_has_role();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_role() {
  role_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.role)
  return _internal_role();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  role_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.role)
}

// optional uint32 filter_start_time = 4;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_filter_start_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_start_time() const {
  return _internal_has_filter_start_time();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_start_time() {
  filter_start_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::_internal_filter_start_time() const {
  return filter_start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::filter_start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_start_time)
  return _internal_filter_start_time();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  filter_start_time_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_start_time)
}

// optional uint32 filter_end_time = 5;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_filter_end_time() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_end_time() const {
  return _internal_has_filter_end_time();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_end_time() {
  filter_end_time_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::_internal_filter_end_time() const {
  return filter_end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsRequest::filter_end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_end_time)
  return _internal_filter_end_time();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  filter_end_time_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_filter_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_end_time)
}

// optional uint64 filter_match_id = 6;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_filter_match_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_match_id() const {
  return _internal_has_filter_match_id();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_match_id() {
  filter_match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerStandingsRequest::_internal_filter_match_id() const {
  return filter_match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerStandingsRequest::filter_match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_match_id)
  return _internal_filter_match_id();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_match_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_filter_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_match_id)
}

// optional bool filter_last_match = 7;
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_has_filter_last_match() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::has_filter_last_match() const {
  return _internal_has_filter_last_match();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::clear_filter_last_match() {
  filter_last_match_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::_internal_filter_last_match() const {
  return filter_last_match_;
}
inline bool CMsgDOTAFantasyPlayerStandingsRequest::filter_last_match() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsRequest.filter_last_match)
  return _internal_filter_last_match();
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::_internal_set_filter_last_match(bool value) {
  _has_bits_[0] |= 0x00000040u;
  filter_last_match_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsRequest::set_filter_last_match(bool value) {
  _internal_set_filter_last_match(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsRequest.filter_last_match)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore

// optional uint32 player_account_id = 1;
inline bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_has_player_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_player_account_id() const {
  return player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_account_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_account_id)
}

// optional string player_name = 2;
inline bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_player_name() const {
  return _internal_has_player_name();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::player_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  return _internal_player_name();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
inline std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_player_name() const {
  return player_name_.Get();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_player_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}
inline std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::release_player_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.player_name)
}

// optional float score = 3;
inline bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_score() const {
  return score_;
}
inline float CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000004u;
  score_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerStandingsResponse

// optional .CMsgDOTAFantasyPlayerStandingsResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyPlayerStandingsResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyPlayerStandingsResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyPlayerStandingsResponse_EResult CMsgDOTAFantasyPlayerStandingsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::_internal_set_result(::CMsgDOTAFantasyPlayerStandingsResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerStandingsResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::set_result(::CMsgDOTAFantasyPlayerStandingsResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.result)
}

// optional uint32 fantasy_league_id = 2;
inline bool CMsgDOTAFantasyPlayerStandingsResponse::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsResponse::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.fantasy_league_id)
}

// optional uint32 role = 3;
inline bool CMsgDOTAFantasyPlayerStandingsResponse::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerStandingsResponse::has_role() const {
  return _internal_has_role();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::clear_role() {
  role_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsResponse::_internal_role() const {
  return role_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerStandingsResponse::role() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.role)
  return _internal_role();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::_internal_set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  role_ = value;
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::set_role(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerStandingsResponse.role)
}

// repeated .CMsgDOTAFantasyPlayerStandingsResponse.CMsgPlayerScore player_scores = 4;
inline int CMsgDOTAFantasyPlayerStandingsResponse::_internal_player_scores_size() const {
  return player_scores_.size();
}
inline int CMsgDOTAFantasyPlayerStandingsResponse::player_scores_size() const {
  return _internal_player_scores_size();
}
inline void CMsgDOTAFantasyPlayerStandingsResponse::clear_player_scores() {
  player_scores_.Clear();
}
inline ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::mutable_player_scores(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >*
CMsgDOTAFantasyPlayerStandingsResponse::mutable_player_scores() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return &player_scores_;
}
inline const ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse::_internal_player_scores(int index) const {
  return player_scores_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore& CMsgDOTAFantasyPlayerStandingsResponse::player_scores(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return _internal_player_scores(index);
}
inline ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::_internal_add_player_scores() {
  return player_scores_.Add();
}
inline ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore* CMsgDOTAFantasyPlayerStandingsResponse::add_player_scores() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return _internal_add_player_scores();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerStandingsResponse_CMsgPlayerScore >&
CMsgDOTAFantasyPlayerStandingsResponse::player_scores() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerStandingsResponse.player_scores)
  return player_scores_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueCreateRequest

// optional uint32 season_id = 1;
inline bool CMsgDOTAFantasyLeagueCreateRequest::_internal_has_season_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateRequest::has_season_id() const {
  return _internal_has_season_id();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::clear_season_id() {
  season_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueCreateRequest::_internal_season_id() const {
  return season_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueCreateRequest::season_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.season_id)
  return _internal_season_id();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::_internal_set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  season_id_ = value;
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_season_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_season_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.season_id)
}

// optional string fantasy_league_name = 2;
inline bool CMsgDOTAFantasyLeagueCreateRequest::_internal_has_fantasy_league_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateRequest::has_fantasy_league_name() const {
  return _internal_has_fantasy_league_name();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::clear_fantasy_league_name() {
  fantasy_league_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyLeagueCreateRequest::fantasy_league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  return _internal_fantasy_league_name();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const std::string& value) {
  _internal_set_fantasy_league_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_fantasy_league_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  return _internal_mutable_fantasy_league_name();
}
inline const std::string& CMsgDOTAFantasyLeagueCreateRequest::_internal_fantasy_league_name() const {
  return fantasy_league_name_.Get();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::_internal_set_fantasy_league_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_fantasy_league_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::_internal_mutable_fantasy_league_name() {
  _has_bits_[0] |= 0x00000001u;
  return fantasy_league_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::release_fantasy_league_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
  if (!_internal_has_fantasy_league_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return fantasy_league_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_fantasy_league_name(std::string* fantasy_league_name) {
  if (fantasy_league_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fantasy_league_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fantasy_league_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueCreateRequest.fantasy_league_name)
}

// optional string password = 3;
inline bool CMsgDOTAFantasyLeagueCreateRequest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateRequest::has_password() const {
  return _internal_has_password();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyLeagueCreateRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.password)
  return _internal_password();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.password)
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueCreateRequest.password)
  return _internal_mutable_password();
}
inline const std::string& CMsgDOTAFantasyLeagueCreateRequest::_internal_password() const {
  return password_.Get();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueCreateRequest.password)
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueCreateRequest.password)
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueCreateRequest.password)
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::release_password() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueCreateRequest.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueCreateRequest.password)
}

// optional string team_name = 4;
inline bool CMsgDOTAFantasyLeagueCreateRequest::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateRequest::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgDOTAFantasyLeagueCreateRequest::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.team_name)
  return _internal_team_name();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueCreateRequest.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgDOTAFantasyLeagueCreateRequest::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000004u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueCreateRequest::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueCreateRequest.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueCreateRequest.team_name)
}

// optional uint64 logo = 5;
inline bool CMsgDOTAFantasyLeagueCreateRequest::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateRequest::has_logo() const {
  return _internal_has_logo();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::clear_logo() {
  logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyLeagueCreateRequest::_internal_logo() const {
  return logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyLeagueCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.logo)
  return _internal_logo();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::_internal_set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  logo_ = value;
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.logo)
}

// optional uint64 ticket_item_id = 6;
inline bool CMsgDOTAFantasyLeagueCreateRequest::_internal_has_ticket_item_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateRequest::has_ticket_item_id() const {
  return _internal_has_ticket_item_id();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::clear_ticket_item_id() {
  ticket_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyLeagueCreateRequest::_internal_ticket_item_id() const {
  return ticket_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyLeagueCreateRequest::ticket_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateRequest.ticket_item_id)
  return _internal_ticket_item_id();
}
inline void CMsgDOTAFantasyLeagueCreateRequest::_internal_set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  ticket_item_id_ = value;
}
inline void CMsgDOTAFantasyLeagueCreateRequest::set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ticket_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateRequest.ticket_item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueCreateResponse

// optional .CMsgDOTAFantasyLeagueCreateResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueCreateResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueCreateResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueCreateResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueCreateResponse_EResult CMsgDOTAFantasyLeagueCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueCreateResponse::_internal_set_result(::CMsgDOTAFantasyLeagueCreateResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueCreateResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueCreateResponse::set_result(::CMsgDOTAFantasyLeagueCreateResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateResponse.result)
}

// optional uint32 fantasy_league_id = 2;
inline bool CMsgDOTAFantasyLeagueCreateResponse::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueCreateResponse::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueCreateResponse::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueCreateResponse::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueCreateResponse::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueCreateResponse.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueCreateResponse::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueCreateResponse::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueCreateResponse.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamCreateRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamCreateRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamCreateRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamCreateRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamCreateRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamCreateRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.fantasy_league_id)
}

// optional string password = 2;
inline bool CMsgDOTAFantasyTeamCreateRequest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateRequest::has_password() const {
  return _internal_has_password();
}
inline void CMsgDOTAFantasyTeamCreateRequest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyTeamCreateRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.password)
  return _internal_password();
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.password)
}
inline std::string* CMsgDOTAFantasyTeamCreateRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamCreateRequest.password)
  return _internal_mutable_password();
}
inline const std::string& CMsgDOTAFantasyTeamCreateRequest::_internal_password() const {
  return password_.Get();
}
inline void CMsgDOTAFantasyTeamCreateRequest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyTeamCreateRequest.password)
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamCreateRequest.password)
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamCreateRequest.password)
}
inline std::string* CMsgDOTAFantasyTeamCreateRequest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyTeamCreateRequest::release_password() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyTeamCreateRequest.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamCreateRequest.password)
}

// optional string team_name = 3;
inline bool CMsgDOTAFantasyTeamCreateRequest::_internal_has_team_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateRequest::has_team_name() const {
  return _internal_has_team_name();
}
inline void CMsgDOTAFantasyTeamCreateRequest::clear_team_name() {
  team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTAFantasyTeamCreateRequest::team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.team_name)
  return _internal_team_name();
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const std::string& value) {
  _internal_set_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
inline std::string* CMsgDOTAFantasyTeamCreateRequest::mutable_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamCreateRequest.team_name)
  return _internal_mutable_team_name();
}
inline const std::string& CMsgDOTAFantasyTeamCreateRequest::_internal_team_name() const {
  return team_name_.Get();
}
inline void CMsgDOTAFantasyTeamCreateRequest::_internal_set_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyTeamCreateRequest.team_name)
}
inline std::string* CMsgDOTAFantasyTeamCreateRequest::_internal_mutable_team_name() {
  _has_bits_[0] |= 0x00000002u;
  return team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyTeamCreateRequest::release_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyTeamCreateRequest.team_name)
  if (!_internal_has_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_allocated_team_name(std::string* team_name) {
  if (team_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyTeamCreateRequest.team_name)
}

// optional uint64 logo = 4;
inline bool CMsgDOTAFantasyTeamCreateRequest::_internal_has_logo() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateRequest::has_logo() const {
  return _internal_has_logo();
}
inline void CMsgDOTAFantasyTeamCreateRequest::clear_logo() {
  logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamCreateRequest::_internal_logo() const {
  return logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.logo)
  return _internal_logo();
}
inline void CMsgDOTAFantasyTeamCreateRequest::_internal_set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  logo_ = value;
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.logo)
}

// optional uint64 ticket_item_id = 5;
inline bool CMsgDOTAFantasyTeamCreateRequest::_internal_has_ticket_item_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateRequest::has_ticket_item_id() const {
  return _internal_has_ticket_item_id();
}
inline void CMsgDOTAFantasyTeamCreateRequest::clear_ticket_item_id() {
  ticket_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamCreateRequest::_internal_ticket_item_id() const {
  return ticket_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyTeamCreateRequest::ticket_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateRequest.ticket_item_id)
  return _internal_ticket_item_id();
}
inline void CMsgDOTAFantasyTeamCreateRequest::_internal_set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  ticket_item_id_ = value;
}
inline void CMsgDOTAFantasyTeamCreateRequest::set_ticket_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ticket_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateRequest.ticket_item_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamCreateResponse

// optional .CMsgDOTAFantasyTeamCreateResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamCreateResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamCreateResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamCreateResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamCreateResponse_EResult CMsgDOTAFantasyTeamCreateResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamCreateResponse::_internal_set_result(::CMsgDOTAFantasyTeamCreateResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamCreateResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamCreateResponse::set_result(::CMsgDOTAFantasyTeamCreateResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateResponse.result)
}

// optional uint32 fantasy_team_index = 2;
inline bool CMsgDOTAFantasyTeamCreateResponse::_internal_has_fantasy_team_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamCreateResponse::has_fantasy_team_index() const {
  return _internal_has_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamCreateResponse::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamCreateResponse::_internal_fantasy_team_index() const {
  return fantasy_team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamCreateResponse::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamCreateResponse.fantasy_team_index)
  return _internal_fantasy_team_index();
}
inline void CMsgDOTAFantasyTeamCreateResponse::_internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_index_ = value;
}
inline void CMsgDOTAFantasyTeamCreateResponse::set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamCreateResponse.fantasy_team_index)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange

// optional uint32 account_id = 1;
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  account_id_ = value;
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.account_id)
}

// optional bool invited = 2;
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_internal_has_invited() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::has_invited() const {
  return _internal_has_invited();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::clear_invited() {
  invited_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_internal_invited() const {
  return invited_;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::invited() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.invited)
  return _internal_invited();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::_internal_set_invited(bool value) {
  _has_bits_[0] |= 0x00000002u;
  invited_ = value;
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange::set_invited(bool value) {
  _internal_set_invited(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange.invited)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueEditInvitesRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueEditInvitesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.fantasy_league_id)
}

// optional string password = 2;
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesRequest::has_password() const {
  return _internal_has_password();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyLeagueEditInvitesRequest::password() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  return _internal_password();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
inline std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  return _internal_mutable_password();
}
inline const std::string& CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_password() const {
  return password_.Get();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::set_password(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}
inline std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000001u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyLeagueEditInvitesRequest::release_password() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyLeagueEditInvitesRequest.password)
}

// repeated .CMsgDOTAFantasyLeagueEditInvitesRequest.InviteChange invite_change = 3;
inline int CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_invite_change_size() const {
  return invite_change_.size();
}
inline int CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change_size() const {
  return _internal_invite_change_size();
}
inline void CMsgDOTAFantasyLeagueEditInvitesRequest::clear_invite_change() {
  invite_change_.Clear();
}
inline ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_invite_change(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >*
CMsgDOTAFantasyLeagueEditInvitesRequest::mutable_invite_change() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return &invite_change_;
}
inline const ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_invite_change(int index) const {
  return invite_change_.Get(index);
}
inline const ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange& CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return _internal_invite_change(index);
}
inline ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::_internal_add_invite_change() {
  return invite_change_.Add();
}
inline ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange* CMsgDOTAFantasyLeagueEditInvitesRequest::add_invite_change() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return _internal_add_invite_change();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyLeagueEditInvitesRequest_InviteChange >&
CMsgDOTAFantasyLeagueEditInvitesRequest::invite_change() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueEditInvitesRequest.invite_change)
  return invite_change_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueEditInvitesResponse

// optional .CMsgDOTAFantasyLeagueEditInvitesResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueEditInvitesResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueEditInvitesResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueEditInvitesResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult CMsgDOTAFantasyLeagueEditInvitesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueEditInvitesResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueEditInvitesResponse::_internal_set_result(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueEditInvitesResponse::set_result(::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueEditInvitesResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueDraftStatusRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueDraftStatusRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftStatusRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueDraftStatusRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatusRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatusRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatusRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueDraftStatusRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftStatusRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatusRequest.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueDraftStatus

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.fantasy_league_id)
}

// repeated uint32 draft_order = 2;
inline int CMsgDOTAFantasyLeagueDraftStatus::_internal_draft_order_size() const {
  return draft_order_.size();
}
inline int CMsgDOTAFantasyLeagueDraftStatus::draft_order_size() const {
  return _internal_draft_order_size();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_draft_order() {
  draft_order_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::_internal_draft_order(int index) const {
  return draft_order_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::draft_order(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return _internal_draft_order(index);
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_draft_order(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  draft_order_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_add_draft_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  draft_order_.Add(value);
}
inline void CMsgDOTAFantasyLeagueDraftStatus::add_draft_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_draft_order(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::_internal_draft_order() const {
  return draft_order_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::draft_order() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return _internal_draft_order();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::_internal_mutable_draft_order() {
  return &draft_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::mutable_draft_order() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueDraftStatus.draft_order)
  return _internal_mutable_draft_order();
}

// optional uint32 current_pick = 3;
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_has_current_pick() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::has_current_pick() const {
  return _internal_has_current_pick();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_current_pick() {
  current_pick_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::_internal_current_pick() const {
  return current_pick_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::current_pick() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.current_pick)
  return _internal_current_pick();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_set_current_pick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  current_pick_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_current_pick(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_pick(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.current_pick)
}

// optional uint32 time_remaining = 4;
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_has_time_remaining() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::has_time_remaining() const {
  return _internal_has_time_remaining();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_time_remaining() {
  time_remaining_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::_internal_time_remaining() const {
  return time_remaining_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::time_remaining() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.time_remaining)
  return _internal_time_remaining();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  time_remaining_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_time_remaining(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_remaining(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.time_remaining)
}

// optional bool pending_resume = 5;
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_has_pending_resume() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::has_pending_resume() const {
  return _internal_has_pending_resume();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_pending_resume() {
  pending_resume_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_pending_resume() const {
  return pending_resume_;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::pending_resume() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.pending_resume)
  return _internal_pending_resume();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_set_pending_resume(bool value) {
  _has_bits_[0] |= 0x00000008u;
  pending_resume_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_pending_resume(bool value) {
  _internal_set_pending_resume(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.pending_resume)
}

// optional bool completed = 6;
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_has_completed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::has_completed() const {
  return _internal_has_completed();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_completed() {
  completed_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::_internal_completed() const {
  return completed_;
}
inline bool CMsgDOTAFantasyLeagueDraftStatus::completed() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.completed)
  return _internal_completed();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_set_completed(bool value) {
  _has_bits_[0] |= 0x00000010u;
  completed_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.completed)
}

// repeated uint32 available_players = 7;
inline int CMsgDOTAFantasyLeagueDraftStatus::_internal_available_players_size() const {
  return available_players_.size();
}
inline int CMsgDOTAFantasyLeagueDraftStatus::available_players_size() const {
  return _internal_available_players_size();
}
inline void CMsgDOTAFantasyLeagueDraftStatus::clear_available_players() {
  available_players_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::_internal_available_players(int index) const {
  return available_players_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftStatus::available_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return _internal_available_players(index);
}
inline void CMsgDOTAFantasyLeagueDraftStatus::set_available_players(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  available_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftStatus.available_players)
}
inline void CMsgDOTAFantasyLeagueDraftStatus::_internal_add_available_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  available_players_.Add(value);
}
inline void CMsgDOTAFantasyLeagueDraftStatus::add_available_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_available_players(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyLeagueDraftStatus.available_players)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::_internal_available_players() const {
  return available_players_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyLeagueDraftStatus::available_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return _internal_available_players();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::_internal_mutable_available_players() {
  return &available_players_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyLeagueDraftStatus::mutable_available_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyLeagueDraftStatus.available_players)
  return _internal_mutable_available_players();
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueDraftPlayerRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
inline bool CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_has_team_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_team_index() const {
  return _internal_has_team_index();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_team_index() {
  team_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_team_index() const {
  return team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerRequest.team_index)
  return _internal_team_index();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_index_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerRequest.team_index)
}

// optional uint32 player_account_id = 3;
inline bool CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_has_player_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftPlayerRequest::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_player_account_id() const {
  return player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeagueDraftPlayerRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerRequest.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::_internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  player_account_id_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftPlayerRequest::set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerRequest.player_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeagueDraftPlayerResponse

// optional .CMsgDOTAFantasyLeagueDraftPlayerResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeagueDraftPlayerResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeagueDraftPlayerResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult CMsgDOTAFantasyLeagueDraftPlayerResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeagueDraftPlayerResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeagueDraftPlayerResponse::_internal_set_result(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeagueDraftPlayerResponse::set_result(::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeagueDraftPlayerResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamRosterSwapRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::_internal_has_team_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::has_team_index() const {
  return _internal_has_team_index();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::clear_team_index() {
  team_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::_internal_team_index() const {
  return team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.team_index)
  return _internal_team_index();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::_internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_index_ = value;
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.team_index)
}

// optional uint32 timestamp = 3;
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.timestamp)
}

// optional uint32 slot_1 = 4;
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::_internal_has_slot_1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::has_slot_1() const {
  return _internal_has_slot_1();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::clear_slot_1() {
  slot_1_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::_internal_slot_1() const {
  return slot_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::slot_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.slot_1)
  return _internal_slot_1();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::_internal_set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  slot_1_ = value;
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::set_slot_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.slot_1)
}

// optional uint32 slot_2 = 5;
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::_internal_has_slot_2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterSwapRequest::has_slot_2() const {
  return _internal_has_slot_2();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::clear_slot_2() {
  slot_2_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::_internal_slot_2() const {
  return slot_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterSwapRequest::slot_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapRequest.slot_2)
  return _internal_slot_2();
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::_internal_set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  slot_2_ = value;
}
inline void CMsgDOTAFantasyTeamRosterSwapRequest::set_slot_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapRequest.slot_2)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamRosterSwapResponse

// optional .CMsgDOTAFantasyTeamRosterSwapResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamRosterSwapResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterSwapResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamRosterSwapResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult CMsgDOTAFantasyTeamRosterSwapResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterSwapResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamRosterSwapResponse::_internal_set_result(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamRosterSwapResponse::set_result(::CMsgDOTAFantasyTeamRosterSwapResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterSwapResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamRosterAddDropRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_has_team_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_team_index() const {
  return _internal_has_team_index();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_team_index() {
  team_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_team_index() const {
  return team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.team_index)
  return _internal_team_index();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_index_ = value;
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.team_index)
}

// optional uint32 add_account_id = 5;
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_has_add_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_add_account_id() const {
  return _internal_has_add_account_id();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_add_account_id() {
  add_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_add_account_id() const {
  return add_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::add_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.add_account_id)
  return _internal_add_account_id();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_set_add_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  add_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::set_add_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_add_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.add_account_id)
}

// optional uint32 drop_account_id = 6;
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_has_drop_account_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterAddDropRequest::has_drop_account_id() const {
  return _internal_has_drop_account_id();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::clear_drop_account_id() {
  drop_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_drop_account_id() const {
  return drop_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterAddDropRequest::drop_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropRequest.drop_account_id)
  return _internal_drop_account_id();
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::_internal_set_drop_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  drop_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamRosterAddDropRequest::set_drop_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drop_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropRequest.drop_account_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamRosterAddDropResponse

// optional .CMsgDOTAFantasyTeamRosterAddDropResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamRosterAddDropResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterAddDropResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamRosterAddDropResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult CMsgDOTAFantasyTeamRosterAddDropResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterAddDropResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamRosterAddDropResponse::_internal_set_result(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamRosterAddDropResponse::set_result(::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterAddDropResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamTradesRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamTradesRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamTradesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamTradesRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamTradesRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesRequest.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamTradesResponse_Trade

// optional uint32 timestamp = 1;
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.timestamp)
}

// optional uint32 owner_account_id_1 = 2;
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_has_owner_account_id_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_owner_account_id_1() const {
  return _internal_has_owner_account_id_1();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_owner_account_id_1() {
  owner_account_id_1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_owner_account_id_1() const {
  return owner_account_id_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::owner_account_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_1)
  return _internal_owner_account_id_1();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_account_id_1_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::set_owner_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_1)
}

// optional uint32 owner_account_id_2 = 3;
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_has_owner_account_id_2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_owner_account_id_2() const {
  return _internal_has_owner_account_id_2();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_owner_account_id_2() const {
  return owner_account_id_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_2)
  return _internal_owner_account_id_2();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  owner_account_id_2_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.owner_account_id_2)
}

// optional uint32 player_account_id_1 = 4;
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_has_player_account_id_1() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_player_account_id_1() const {
  return _internal_has_player_account_id_1();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_player_account_id_1() {
  player_account_id_1_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_player_account_id_1() const {
  return player_account_id_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::player_account_id_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_1)
  return _internal_player_account_id_1();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_set_player_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  player_account_id_1_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::set_player_account_id_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_1)
}

// optional uint32 player_account_id_2 = 5;
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_has_player_account_id_2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_player_account_id_2() const {
  return _internal_has_player_account_id_2();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_player_account_id_2() {
  player_account_id_2_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_player_account_id_2() const {
  return player_account_id_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::player_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_2)
  return _internal_player_account_id_2();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_set_player_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  player_account_id_2_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::set_player_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.player_account_id_2)
}

// optional uint32 status = 6;
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse_Trade::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradesResponse_Trade::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.Trade.status)
  return _internal_status();
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse_Trade::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.Trade.status)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamTradesResponse

// optional .CMsgDOTAFantasyTeamTradesResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamTradesResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradesResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamTradesResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamTradesResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamTradesResponse_EResult CMsgDOTAFantasyTeamTradesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamTradesResponse::_internal_set_result(::CMsgDOTAFantasyTeamTradesResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamTradesResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamTradesResponse::set_result(::CMsgDOTAFantasyTeamTradesResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradesResponse.result)
}

// repeated .CMsgDOTAFantasyTeamTradesResponse.Trade trades = 2;
inline int CMsgDOTAFantasyTeamTradesResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int CMsgDOTAFantasyTeamTradesResponse::trades_size() const {
  return _internal_trades_size();
}
inline void CMsgDOTAFantasyTeamTradesResponse::clear_trades() {
  trades_.Clear();
}
inline ::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade >*
CMsgDOTAFantasyTeamTradesResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamTradesResponse.trades)
  return &trades_;
}
inline const ::CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::CMsgDOTAFantasyTeamTradesResponse_Trade& CMsgDOTAFantasyTeamTradesResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradesResponse.trades)
  return _internal_trades(index);
}
inline ::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::CMsgDOTAFantasyTeamTradesResponse_Trade* CMsgDOTAFantasyTeamTradesResponse::add_trades() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamTradesResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyTeamTradesResponse_Trade >&
CMsgDOTAFantasyTeamTradesResponse::trades() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamTradesResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamTradeCancelRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.fantasy_league_id)
}

// optional uint32 team_index_1 = 3;
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::_internal_has_team_index_1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::has_team_index_1() const {
  return _internal_has_team_index_1();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::clear_team_index_1() {
  team_index_1_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::_internal_team_index_1() const {
  return team_index_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::team_index_1() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_1)
  return _internal_team_index_1();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::_internal_set_team_index_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_index_1_ = value;
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::set_team_index_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index_1(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_1)
}

// optional uint32 owner_account_id_2 = 4;
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::_internal_has_owner_account_id_2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::has_owner_account_id_2() const {
  return _internal_has_owner_account_id_2();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::clear_owner_account_id_2() {
  owner_account_id_2_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::_internal_owner_account_id_2() const {
  return owner_account_id_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::owner_account_id_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.owner_account_id_2)
  return _internal_owner_account_id_2();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::_internal_set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  owner_account_id_2_ = value;
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::set_owner_account_id_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.owner_account_id_2)
}

// optional uint32 team_index_2 = 5;
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::_internal_has_team_index_2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradeCancelRequest::has_team_index_2() const {
  return _internal_has_team_index_2();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::clear_team_index_2() {
  team_index_2_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::_internal_team_index_2() const {
  return team_index_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamTradeCancelRequest::team_index_2() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_2)
  return _internal_team_index_2();
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::_internal_set_team_index_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  team_index_2_ = value;
}
inline void CMsgDOTAFantasyTeamTradeCancelRequest::set_team_index_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index_2(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelRequest.team_index_2)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamTradeCancelResponse

// optional .CMsgDOTAFantasyTeamTradeCancelResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamTradeCancelResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamTradeCancelResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamTradeCancelResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult CMsgDOTAFantasyTeamTradeCancelResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamTradeCancelResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamTradeCancelResponse::_internal_set_result(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamTradeCancelResponse::set_result(::CMsgDOTAFantasyTeamTradeCancelResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamTradeCancelResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamRosterRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyTeamRosterRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamRosterRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyTeamRosterRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyTeamRosterRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.fantasy_league_id)
}

// optional uint32 team_index = 2;
inline bool CMsgDOTAFantasyTeamRosterRequest::_internal_has_team_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterRequest::has_team_index() const {
  return _internal_has_team_index();
}
inline void CMsgDOTAFantasyTeamRosterRequest::clear_team_index() {
  team_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::_internal_team_index() const {
  return team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.team_index)
  return _internal_team_index();
}
inline void CMsgDOTAFantasyTeamRosterRequest::_internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team_index_ = value;
}
inline void CMsgDOTAFantasyTeamRosterRequest::set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.team_index)
}

// optional uint32 owner_account_id = 3;
inline bool CMsgDOTAFantasyTeamRosterRequest::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterRequest::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyTeamRosterRequest::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyTeamRosterRequest::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyTeamRosterRequest::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.owner_account_id)
}

// optional uint32 timestamp = 4;
inline bool CMsgDOTAFantasyTeamRosterRequest::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTAFantasyTeamRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterRequest.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTAFantasyTeamRosterRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void CMsgDOTAFantasyTeamRosterRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterRequest.timestamp)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyTeamRosterResponse

// optional .CMsgDOTAFantasyTeamRosterResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyTeamRosterResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyTeamRosterResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyTeamRosterResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyTeamRosterResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyTeamRosterResponse_EResult CMsgDOTAFantasyTeamRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyTeamRosterResponse::_internal_set_result(::CMsgDOTAFantasyTeamRosterResponse_EResult value) {
  assert(::CMsgDOTAFantasyTeamRosterResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyTeamRosterResponse::set_result(::CMsgDOTAFantasyTeamRosterResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterResponse.result)
}

// repeated uint32 player_account_ids = 2;
inline int CMsgDOTAFantasyTeamRosterResponse::_internal_player_account_ids_size() const {
  return player_account_ids_.size();
}
inline int CMsgDOTAFantasyTeamRosterResponse::player_account_ids_size() const {
  return _internal_player_account_ids_size();
}
inline void CMsgDOTAFantasyTeamRosterResponse::clear_player_account_ids() {
  player_account_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterResponse::_internal_player_account_ids(int index) const {
  return player_account_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyTeamRosterResponse::player_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return _internal_player_account_ids(index);
}
inline void CMsgDOTAFantasyTeamRosterResponse::set_player_account_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  player_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
}
inline void CMsgDOTAFantasyTeamRosterResponse::_internal_add_player_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  player_account_ids_.Add(value);
}
inline void CMsgDOTAFantasyTeamRosterResponse::add_player_account_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_player_account_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyTeamRosterResponse::_internal_player_account_ids() const {
  return player_account_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyTeamRosterResponse::player_account_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return _internal_player_account_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyTeamRosterResponse::_internal_mutable_player_account_ids() {
  return &player_account_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyTeamRosterResponse::mutable_player_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamRosterResponse.player_account_ids)
  return _internal_mutable_player_account_ids();
}

// repeated bool player_locked = 3;
inline int CMsgDOTAFantasyTeamRosterResponse::_internal_player_locked_size() const {
  return player_locked_.size();
}
inline int CMsgDOTAFantasyTeamRosterResponse::player_locked_size() const {
  return _internal_player_locked_size();
}
inline void CMsgDOTAFantasyTeamRosterResponse::clear_player_locked() {
  player_locked_.Clear();
}
inline bool CMsgDOTAFantasyTeamRosterResponse::_internal_player_locked(int index) const {
  return player_locked_.Get(index);
}
inline bool CMsgDOTAFantasyTeamRosterResponse::player_locked(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return _internal_player_locked(index);
}
inline void CMsgDOTAFantasyTeamRosterResponse::set_player_locked(int index, bool value) {
  player_locked_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyTeamRosterResponse.player_locked)
}
inline void CMsgDOTAFantasyTeamRosterResponse::_internal_add_player_locked(bool value) {
  player_locked_.Add(value);
}
inline void CMsgDOTAFantasyTeamRosterResponse::add_player_locked(bool value) {
  _internal_add_player_locked(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyTeamRosterResponse.player_locked)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgDOTAFantasyTeamRosterResponse::_internal_player_locked() const {
  return player_locked_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
CMsgDOTAFantasyTeamRosterResponse::player_locked() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return _internal_player_locked();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgDOTAFantasyTeamRosterResponse::_internal_mutable_player_locked() {
  return &player_locked_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
CMsgDOTAFantasyTeamRosterResponse::mutable_player_locked() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyTeamRosterResponse.player_locked)
  return _internal_mutable_player_locked();
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerHisoricalStatsRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsRequest.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator

// optional uint32 matches = 1;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_matches() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_matches() const {
  return _internal_has_matches();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_matches() {
  matches_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_matches() const {
  return matches_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::matches() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.matches)
  return _internal_matches();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_matches(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  matches_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_matches(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matches(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.matches)
}

// optional float levels = 2;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_levels() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_levels() const {
  return _internal_has_levels();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_levels() {
  levels_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_levels() const {
  return levels_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::levels() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.levels)
  return _internal_levels();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_levels(float value) {
  _has_bits_[0] |= 0x00000002u;
  levels_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_levels(float value) {
  _internal_set_levels(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.levels)
}

// optional float kills = 3;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_kills() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_kills() const {
  return _internal_has_kills();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_kills() {
  kills_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_kills() const {
  return kills_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.kills)
  return _internal_kills();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_kills(float value) {
  _has_bits_[0] |= 0x00000004u;
  kills_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_kills(float value) {
  _internal_set_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.kills)
}

// optional float deaths = 4;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_deaths() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_deaths() const {
  return _internal_has_deaths();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_deaths() {
  deaths_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_deaths() const {
  return deaths_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::deaths() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.deaths)
  return _internal_deaths();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_deaths(float value) {
  _has_bits_[0] |= 0x00000008u;
  deaths_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_deaths(float value) {
  _internal_set_deaths(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.deaths)
}

// optional float assists = 5;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_assists() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_assists() const {
  return _internal_has_assists();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_assists() {
  assists_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_assists() const {
  return assists_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::assists() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.assists)
  return _internal_assists();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_assists(float value) {
  _has_bits_[0] |= 0x00000010u;
  assists_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_assists(float value) {
  _internal_set_assists(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.assists)
}

// optional float last_hits = 6;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_last_hits() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_last_hits() const {
  return _internal_has_last_hits();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_last_hits() {
  last_hits_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_last_hits() const {
  return last_hits_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::last_hits() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.last_hits)
  return _internal_last_hits();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_last_hits(float value) {
  _has_bits_[0] |= 0x00000020u;
  last_hits_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_last_hits(float value) {
  _internal_set_last_hits(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.last_hits)
}

// optional float denies = 7;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_denies() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_denies() const {
  return _internal_has_denies();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_denies() {
  denies_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_denies() const {
  return denies_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::denies() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.denies)
  return _internal_denies();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_denies(float value) {
  _has_bits_[0] |= 0x00000040u;
  denies_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_denies(float value) {
  _internal_set_denies(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.denies)
}

// optional float gpm = 8;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_gpm() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_gpm() const {
  return _internal_has_gpm();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_gpm() {
  gpm_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_gpm() const {
  return gpm_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::gpm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.gpm)
  return _internal_gpm();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_gpm(float value) {
  _has_bits_[0] |= 0x00000080u;
  gpm_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_gpm(float value) {
  _internal_set_gpm(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.gpm)
}

// optional float xppm = 9;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_xppm() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_xppm() const {
  return _internal_has_xppm();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_xppm() {
  xppm_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_xppm() const {
  return xppm_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::xppm() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.xppm)
  return _internal_xppm();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_xppm(float value) {
  _has_bits_[0] |= 0x00000100u;
  xppm_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_xppm(float value) {
  _internal_set_xppm(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.xppm)
}

// optional float stuns = 10;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_stuns() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_stuns() const {
  return _internal_has_stuns();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_stuns() {
  stuns_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_stuns() const {
  return stuns_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::stuns() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.stuns)
  return _internal_stuns();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_stuns(float value) {
  _has_bits_[0] |= 0x00000200u;
  stuns_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_stuns(float value) {
  _internal_set_stuns(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.stuns)
}

// optional float healing = 11;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_healing() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_healing() const {
  return _internal_has_healing();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_healing() {
  healing_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_healing() const {
  return healing_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::healing() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.healing)
  return _internal_healing();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_healing(float value) {
  _has_bits_[0] |= 0x00000400u;
  healing_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_healing(float value) {
  _internal_set_healing(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.healing)
}

// optional float tower_kills = 12;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_tower_kills() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_tower_kills() const {
  return _internal_has_tower_kills();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_tower_kills() {
  tower_kills_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_tower_kills() const {
  return tower_kills_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::tower_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.tower_kills)
  return _internal_tower_kills();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_tower_kills(float value) {
  _has_bits_[0] |= 0x00000800u;
  tower_kills_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_tower_kills(float value) {
  _internal_set_tower_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.tower_kills)
}

// optional float roshan_kills = 13;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_roshan_kills() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_roshan_kills() const {
  return _internal_has_roshan_kills();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_roshan_kills() {
  roshan_kills_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_roshan_kills() const {
  return roshan_kills_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::roshan_kills() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.roshan_kills)
  return _internal_roshan_kills();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_roshan_kills(float value) {
  _has_bits_[0] |= 0x00001000u;
  roshan_kills_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_roshan_kills(float value) {
  _internal_set_roshan_kills(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.roshan_kills)
}

// optional float score = 14;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::has_score() const {
  return _internal_has_score();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_score() const {
  return score_;
}
inline float CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::score() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.score)
  return _internal_score();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00002000u;
  score_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator.score)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats

// optional uint32 account_id = 1;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_account_id() const {
  return _internal_has_account_id();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.account_id)
  return _internal_account_id();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  account_id_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.account_id)
}

// optional uint32 weeks = 2;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_has_weeks() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_weeks() const {
  return _internal_has_weeks();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_weeks() {
  weeks_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_weeks() const {
  return weeks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::weeks() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.weeks)
  return _internal_weeks();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_set_weeks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  weeks_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_weeks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_weeks(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.weeks)
}

// optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_premium = 4;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_has_stats_premium() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || stats_premium_ != nullptr);
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_stats_premium() const {
  return _internal_has_stats_premium();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_stats_premium() {
  if (stats_premium_ != nullptr) stats_premium_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_stats_premium() const {
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* p = stats_premium_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&>(
      ::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_);
}
inline const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::stats_premium() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  return _internal_stats_premium();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::unsafe_arena_set_allocated_stats_premium(
    ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_premium_);
  }
  stats_premium_ = stats_premium;
  if (stats_premium) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::release_stats_premium() {
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_premium_;
  stats_premium_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::unsafe_arena_release_stats_premium() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_premium_;
  stats_premium_ = nullptr;
  return temp;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_mutable_stats_premium() {
  _has_bits_[0] |= 0x00000001u;
  if (stats_premium_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(GetArena());
    stats_premium_ = p;
  }
  return stats_premium_;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::mutable_stats_premium() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
  return _internal_mutable_stats_premium();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_allocated_stats_premium(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_premium) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_premium_;
  }
  if (stats_premium) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats_premium);
    if (message_arena != submessage_arena) {
      stats_premium = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_premium, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stats_premium_ = stats_premium;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_premium)
}

// optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerScoreAccumulator stats_professional = 5;
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_has_stats_professional() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || stats_professional_ != nullptr);
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::has_stats_professional() const {
  return _internal_has_stats_professional();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::clear_stats_professional() {
  if (stats_professional_ != nullptr) stats_professional_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_stats_professional() const {
  const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* p = stats_professional_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator&>(
      ::_CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator_default_instance_);
}
inline const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator& CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::stats_professional() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  return _internal_stats_professional();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::unsafe_arena_set_allocated_stats_professional(
    ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stats_professional_);
  }
  stats_professional_ = stats_professional;
  if (stats_professional) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::release_stats_professional() {
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_professional_;
  stats_professional_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::unsafe_arena_release_stats_professional() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* temp = stats_professional_;
  stats_professional_ = nullptr;
  return temp;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::_internal_mutable_stats_professional() {
  _has_bits_[0] |= 0x00000002u;
  if (stats_professional_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator>(GetArena());
    stats_professional_ = p;
  }
  return stats_professional_;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::mutable_stats_professional() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
  return _internal_mutable_stats_professional();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats::set_allocated_stats_professional(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerScoreAccumulator* stats_professional) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stats_professional_;
  }
  if (stats_professional) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats_professional);
    if (message_arena != submessage_arena) {
      stats_professional = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_professional, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  stats_professional_ = stats_professional;
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats.stats_professional)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerHisoricalStatsResponse

// optional .CMsgDOTAFantasyPlayerHisoricalStatsResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerHisoricalStatsResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult CMsgDOTAFantasyPlayerHisoricalStatsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse::_internal_set_result(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse::set_result(::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerHisoricalStatsResponse.result)
}

// repeated .CMsgDOTAFantasyPlayerHisoricalStatsResponse.PlayerStats stats = 2;
inline int CMsgDOTAFantasyPlayerHisoricalStatsResponse::_internal_stats_size() const {
  return stats_.size();
}
inline int CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats_size() const {
  return _internal_stats_size();
}
inline void CMsgDOTAFantasyPlayerHisoricalStatsResponse::clear_stats() {
  stats_.Clear();
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >*
CMsgDOTAFantasyPlayerHisoricalStatsResponse::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return &stats_;
}
inline const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats& CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return _internal_stats(index);
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::_internal_add_stats() {
  return stats_.Add();
}
inline ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats* CMsgDOTAFantasyPlayerHisoricalStatsResponse::add_stats() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return _internal_add_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_PlayerStats >&
CMsgDOTAFantasyPlayerHisoricalStatsResponse::stats() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerHisoricalStatsResponse.stats)
  return stats_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyMessageAdd

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyMessageAdd::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessageAdd::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyMessageAdd::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessageAdd::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessageAdd::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessageAdd.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyMessageAdd::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyMessageAdd::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessageAdd.fantasy_league_id)
}

// optional string message = 2;
inline bool CMsgDOTAFantasyMessageAdd::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessageAdd::has_message() const {
  return _internal_has_message();
}
inline void CMsgDOTAFantasyMessageAdd::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyMessageAdd::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessageAdd.message)
  return _internal_message();
}
inline void CMsgDOTAFantasyMessageAdd::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessageAdd.message)
}
inline std::string* CMsgDOTAFantasyMessageAdd::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyMessageAdd.message)
  return _internal_mutable_message();
}
inline const std::string& CMsgDOTAFantasyMessageAdd::_internal_message() const {
  return message_.Get();
}
inline void CMsgDOTAFantasyMessageAdd::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyMessageAdd::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyMessageAdd.message)
}
inline void CMsgDOTAFantasyMessageAdd::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyMessageAdd.message)
}
inline void CMsgDOTAFantasyMessageAdd::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyMessageAdd.message)
}
inline std::string* CMsgDOTAFantasyMessageAdd::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyMessageAdd::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyMessageAdd.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyMessageAdd::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyMessageAdd.message)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyMessagesRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyMessagesRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyMessagesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyMessagesRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyMessagesRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesRequest.fantasy_league_id)
}

// optional uint32 start_message = 2;
inline bool CMsgDOTAFantasyMessagesRequest::_internal_has_start_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesRequest::has_start_message() const {
  return _internal_has_start_message();
}
inline void CMsgDOTAFantasyMessagesRequest::clear_start_message() {
  start_message_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesRequest::_internal_start_message() const {
  return start_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesRequest::start_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesRequest.start_message)
  return _internal_start_message();
}
inline void CMsgDOTAFantasyMessagesRequest::_internal_set_start_message(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  start_message_ = value;
}
inline void CMsgDOTAFantasyMessagesRequest::set_start_message(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_message(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesRequest.start_message)
}

// optional uint32 end_message = 3;
inline bool CMsgDOTAFantasyMessagesRequest::_internal_has_end_message() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesRequest::has_end_message() const {
  return _internal_has_end_message();
}
inline void CMsgDOTAFantasyMessagesRequest::clear_end_message() {
  end_message_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesRequest::_internal_end_message() const {
  return end_message_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesRequest::end_message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesRequest.end_message)
  return _internal_end_message();
}
inline void CMsgDOTAFantasyMessagesRequest::_internal_set_end_message(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  end_message_ = value;
}
inline void CMsgDOTAFantasyMessagesRequest::set_end_message(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_message(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesRequest.end_message)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyMessagesResponse_Message

// optional uint32 message_id = 1;
inline bool CMsgDOTAFantasyMessagesResponse_Message::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesResponse_Message::has_message_id() const {
  return _internal_has_message_id();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::clear_message_id() {
  message_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse_Message::_internal_message_id() const {
  return message_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse_Message::message_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.message_id)
  return _internal_message_id();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::_internal_set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  message_id_ = value;
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_message_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.message_id)
}

// optional string message = 2;
inline bool CMsgDOTAFantasyMessagesResponse_Message::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesResponse_Message::has_message() const {
  return _internal_has_message();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyMessagesResponse_Message::message() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.message)
  return _internal_message();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.message)
}
inline std::string* CMsgDOTAFantasyMessagesResponse_Message::mutable_message() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyMessagesResponse.Message.message)
  return _internal_mutable_message();
}
inline const std::string& CMsgDOTAFantasyMessagesResponse_Message::_internal_message() const {
  return message_.Get();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyMessagesResponse.Message.message)
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyMessagesResponse.Message.message)
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyMessagesResponse.Message.message)
}
inline std::string* CMsgDOTAFantasyMessagesResponse_Message::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyMessagesResponse_Message::release_message() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyMessagesResponse.Message.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyMessagesResponse.Message.message)
}

// optional uint32 author_account_id = 3;
inline bool CMsgDOTAFantasyMessagesResponse_Message::_internal_has_author_account_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesResponse_Message::has_author_account_id() const {
  return _internal_has_author_account_id();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::clear_author_account_id() {
  author_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse_Message::_internal_author_account_id() const {
  return author_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse_Message::author_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.author_account_id)
  return _internal_author_account_id();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::_internal_set_author_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  author_account_id_ = value;
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_author_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_author_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.author_account_id)
}

// optional uint32 time = 4;
inline bool CMsgDOTAFantasyMessagesResponse_Message::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesResponse_Message::has_time() const {
  return _internal_has_time();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::clear_time() {
  time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse_Message::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse_Message::time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.Message.time)
  return _internal_time();
}
inline void CMsgDOTAFantasyMessagesResponse_Message::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void CMsgDOTAFantasyMessagesResponse_Message::set_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.Message.time)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyMessagesResponse

// optional .CMsgDOTAFantasyMessagesResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyMessagesResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyMessagesResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyMessagesResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyMessagesResponse_EResult CMsgDOTAFantasyMessagesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyMessagesResponse::_internal_set_result(::CMsgDOTAFantasyMessagesResponse_EResult value) {
  assert(::CMsgDOTAFantasyMessagesResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyMessagesResponse::set_result(::CMsgDOTAFantasyMessagesResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.result)
}

// repeated .CMsgDOTAFantasyMessagesResponse.Message messages = 2;
inline int CMsgDOTAFantasyMessagesResponse::_internal_messages_size() const {
  return messages_.size();
}
inline int CMsgDOTAFantasyMessagesResponse::messages_size() const {
  return _internal_messages_size();
}
inline void CMsgDOTAFantasyMessagesResponse::clear_messages() {
  messages_.Clear();
}
inline ::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyMessagesResponse.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message >*
CMsgDOTAFantasyMessagesResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyMessagesResponse.messages)
  return &messages_;
}
inline const ::CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::CMsgDOTAFantasyMessagesResponse_Message& CMsgDOTAFantasyMessagesResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.messages)
  return _internal_messages(index);
}
inline ::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::_internal_add_messages() {
  return messages_.Add();
}
inline ::CMsgDOTAFantasyMessagesResponse_Message* CMsgDOTAFantasyMessagesResponse::add_messages() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyMessagesResponse.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyMessagesResponse_Message >&
CMsgDOTAFantasyMessagesResponse::messages() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyMessagesResponse.messages)
  return messages_;
}

// optional uint32 num_total_messages = 3;
inline bool CMsgDOTAFantasyMessagesResponse::_internal_has_num_total_messages() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyMessagesResponse::has_num_total_messages() const {
  return _internal_has_num_total_messages();
}
inline void CMsgDOTAFantasyMessagesResponse::clear_num_total_messages() {
  num_total_messages_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse::_internal_num_total_messages() const {
  return num_total_messages_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyMessagesResponse::num_total_messages() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyMessagesResponse.num_total_messages)
  return _internal_num_total_messages();
}
inline void CMsgDOTAFantasyMessagesResponse::_internal_set_num_total_messages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_total_messages_ = value;
}
inline void CMsgDOTAFantasyMessagesResponse::set_num_total_messages(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_total_messages(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyMessagesResponse.num_total_messages)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyRemoveOwner

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyRemoveOwner::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyRemoveOwner::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyRemoveOwner::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyRemoveOwner::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyRemoveOwner::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwner.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyRemoveOwner::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyRemoveOwner::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwner.fantasy_league_id)
}

// optional uint32 owner_account_id = 2;
inline bool CMsgDOTAFantasyRemoveOwner::_internal_has_owner_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyRemoveOwner::has_owner_account_id() const {
  return _internal_has_owner_account_id();
}
inline void CMsgDOTAFantasyRemoveOwner::clear_owner_account_id() {
  owner_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyRemoveOwner::_internal_owner_account_id() const {
  return owner_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyRemoveOwner::owner_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwner.owner_account_id)
  return _internal_owner_account_id();
}
inline void CMsgDOTAFantasyRemoveOwner::_internal_set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  owner_account_id_ = value;
}
inline void CMsgDOTAFantasyRemoveOwner::set_owner_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owner_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwner.owner_account_id)
}

// optional uint32 team_index = 3;
inline bool CMsgDOTAFantasyRemoveOwner::_internal_has_team_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyRemoveOwner::has_team_index() const {
  return _internal_has_team_index();
}
inline void CMsgDOTAFantasyRemoveOwner::clear_team_index() {
  team_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyRemoveOwner::_internal_team_index() const {
  return team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyRemoveOwner::team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwner.team_index)
  return _internal_team_index();
}
inline void CMsgDOTAFantasyRemoveOwner::_internal_set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team_index_ = value;
}
inline void CMsgDOTAFantasyRemoveOwner::set_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwner.team_index)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyRemoveOwnerResponse

// optional .CMsgDOTAFantasyRemoveOwnerResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyRemoveOwnerResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyRemoveOwnerResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyRemoveOwnerResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyRemoveOwnerResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyRemoveOwnerResponse_EResult CMsgDOTAFantasyRemoveOwnerResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyRemoveOwnerResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyRemoveOwnerResponse::_internal_set_result(::CMsgDOTAFantasyRemoveOwnerResponse_EResult value) {
  assert(::CMsgDOTAFantasyRemoveOwnerResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyRemoveOwnerResponse::set_result(::CMsgDOTAFantasyRemoveOwnerResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyRemoveOwnerResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyScheduledMatchesRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyScheduledMatchesRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyScheduledMatchesRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyScheduledMatchesRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyScheduledMatchesRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyScheduledMatchesRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesRequest.fantasy_league_id)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays

// optional uint32 timestamp = 1;
inline bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.timestamp)
  return _internal_timestamp();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.timestamp)
}

// repeated uint32 team_ids = 2;
inline int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_team_ids_size() const {
  return team_ids_.size();
}
inline int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids_size() const {
  return _internal_team_ids_size();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_team_ids() {
  team_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_team_ids(int index) const {
  return team_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return _internal_team_ids(index);
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_team_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  team_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_add_team_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  team_ids_.Add(value);
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::add_team_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_team_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_team_ids() const {
  return team_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::team_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return _internal_team_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_mutable_team_ids() {
  return &team_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::mutable_team_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.team_ids)
  return _internal_mutable_team_ids();
}

// repeated uint32 league_ids = 3;
inline int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_league_ids_size() const {
  return league_ids_.size();
}
inline int CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids_size() const {
  return _internal_league_ids_size();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::clear_league_ids() {
  league_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_league_ids(int index) const {
  return league_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return _internal_league_ids(index);
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::set_league_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  league_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_add_league_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  league_ids_.Add(value);
}
inline void CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::add_league_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_league_ids(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_league_ids() const {
  return league_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::league_ids() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return _internal_league_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::_internal_mutable_league_ids() {
  return &league_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays::mutable_league_ids() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays.league_ids)
  return _internal_mutable_league_ids();
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyScheduledMatchesResponse

// optional .CMsgDOTAFantasyScheduledMatchesResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyScheduledMatchesResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyScheduledMatchesResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyScheduledMatchesResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyScheduledMatchesResponse_EResult CMsgDOTAFantasyScheduledMatchesResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse::_internal_set_result(::CMsgDOTAFantasyScheduledMatchesResponse_EResult value) {
  assert(::CMsgDOTAFantasyScheduledMatchesResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyScheduledMatchesResponse::set_result(::CMsgDOTAFantasyScheduledMatchesResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyScheduledMatchesResponse.result)
}

// repeated .CMsgDOTAFantasyScheduledMatchesResponse.ScheduledMatchDays scheduled_match_days = 2;
inline int CMsgDOTAFantasyScheduledMatchesResponse::_internal_scheduled_match_days_size() const {
  return scheduled_match_days_.size();
}
inline int CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days_size() const {
  return _internal_scheduled_match_days_size();
}
inline void CMsgDOTAFantasyScheduledMatchesResponse::clear_scheduled_match_days() {
  scheduled_match_days_.Clear();
}
inline ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::mutable_scheduled_match_days(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >*
CMsgDOTAFantasyScheduledMatchesResponse::mutable_scheduled_match_days() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return &scheduled_match_days_;
}
inline const ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse::_internal_scheduled_match_days(int index) const {
  return scheduled_match_days_.Get(index);
}
inline const ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays& CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return _internal_scheduled_match_days(index);
}
inline ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::_internal_add_scheduled_match_days() {
  return scheduled_match_days_.Add();
}
inline ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays* CMsgDOTAFantasyScheduledMatchesResponse::add_scheduled_match_days() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return _internal_add_scheduled_match_days();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyScheduledMatchesResponse_ScheduledMatchDays >&
CMsgDOTAFantasyScheduledMatchesResponse::scheduled_match_days() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyScheduledMatchesResponse.scheduled_match_days)
  return scheduled_match_days_;
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeaveLeagueRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyLeaveLeagueRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeaveLeagueRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeaveLeagueRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeaveLeagueRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeaveLeagueRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyLeaveLeagueRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyLeaveLeagueRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_league_id)
}

// optional uint32 fantasy_team_index = 2;
inline bool CMsgDOTAFantasyLeaveLeagueRequest::_internal_has_fantasy_team_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeaveLeagueRequest::has_fantasy_team_index() const {
  return _internal_has_fantasy_team_index();
}
inline void CMsgDOTAFantasyLeaveLeagueRequest::clear_fantasy_team_index() {
  fantasy_team_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeaveLeagueRequest::_internal_fantasy_team_index() const {
  return fantasy_team_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyLeaveLeagueRequest::fantasy_team_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_team_index)
  return _internal_fantasy_team_index();
}
inline void CMsgDOTAFantasyLeaveLeagueRequest::_internal_set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  fantasy_team_index_ = value;
}
inline void CMsgDOTAFantasyLeaveLeagueRequest::set_fantasy_team_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_team_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeaveLeagueRequest.fantasy_team_index)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyLeaveLeagueResponse

// optional .CMsgDOTAFantasyLeaveLeagueResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyLeaveLeagueResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyLeaveLeagueResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyLeaveLeagueResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyLeaveLeagueResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyLeaveLeagueResponse_EResult CMsgDOTAFantasyLeaveLeagueResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyLeaveLeagueResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyLeaveLeagueResponse::_internal_set_result(::CMsgDOTAFantasyLeaveLeagueResponse_EResult value) {
  assert(::CMsgDOTAFantasyLeaveLeagueResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyLeaveLeagueResponse::set_result(::CMsgDOTAFantasyLeaveLeagueResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyLeaveLeagueResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerScoreDetailsRequest

// optional uint32 fantasy_league_id = 1;
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_has_fantasy_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_fantasy_league_id() const {
  return _internal_has_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_fantasy_league_id() const {
  return fantasy_league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.fantasy_league_id)
  return _internal_fantasy_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  fantasy_league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_fantasy_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fantasy_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.fantasy_league_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_has_player_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_player_account_id() const {
  return _internal_has_player_account_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_player_account_id() const {
  return player_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.player_account_id)
  return _internal_player_account_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  player_account_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_player_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_player_account_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.player_account_id)
}

// optional uint32 start_time = 3;
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_start_time() {
  start_time_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.start_time)
  return _internal_start_time();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_start_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.start_time)
}

// optional uint32 end_time = 4;
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::clear_end_time() {
  end_time_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsRequest.end_time)
  return _internal_end_time();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  end_time_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsRequest::set_end_time(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsRequest.end_time)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData

// optional uint64 match_id = 1;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_match_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_match_id() const {
  return _internal_has_match_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_match_id() const {
  return match_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::match_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.match_id)
  return _internal_match_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  match_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_match_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_match_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.match_id)
}

// optional uint32 series_id = 2;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_series_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_id() const {
  return _internal_has_series_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_id() {
  series_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_series_id() const {
  return series_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_id)
  return _internal_series_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  series_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_id)
}

// optional uint32 series_num = 3;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_series_num() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_num() const {
  return _internal_has_series_num();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_num() {
  series_num_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_series_num() const {
  return series_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_num() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_num)
  return _internal_series_num();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_series_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  series_num_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_num(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_num(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_num)
}

// optional uint32 series_type = 4;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_series_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_series_type() const {
  return _internal_has_series_type();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_series_type() {
  series_type_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_series_type() const {
  return series_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::series_type() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_type)
  return _internal_series_type();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  series_type_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_series_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_series_type(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.series_type)
}

// optional uint32 league_tier = 5;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_league_tier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_league_tier() const {
  return _internal_has_league_tier();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_league_tier() {
  league_tier_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_league_tier() const {
  return league_tier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::league_tier() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_tier)
  return _internal_league_tier();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_league_tier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  league_tier_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_league_tier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_tier(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_tier)
}

// optional uint32 league_id = 6;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  league_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.league_id)
}

// optional uint32 opposing_team_id = 7;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_opposing_team_id() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_id() const {
  return _internal_has_opposing_team_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_id() {
  opposing_team_id_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_opposing_team_id() const {
  return opposing_team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_id)
  return _internal_opposing_team_id();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_opposing_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  opposing_team_id_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_opposing_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_id)
}

// optional uint64 opposing_team_logo = 8;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_opposing_team_logo() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_logo() const {
  return _internal_has_opposing_team_logo();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_logo() {
  opposing_team_logo_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_opposing_team_logo() const {
  return opposing_team_logo_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_logo() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_logo)
  return _internal_opposing_team_logo();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_opposing_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  opposing_team_logo_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_logo(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_opposing_team_logo(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_logo)
}

// optional string opposing_team_name = 9;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_opposing_team_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_opposing_team_name() const {
  return _internal_has_opposing_team_name();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_opposing_team_name() {
  opposing_team_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::opposing_team_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  return _internal_opposing_team_name();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const std::string& value) {
  _internal_set_opposing_team_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
inline std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::mutable_opposing_team_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  return _internal_mutable_opposing_team_name();
}
inline const std::string& CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_opposing_team_name() const {
  return opposing_team_name_.Get();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_opposing_team_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opposing_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  opposing_team_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  opposing_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_opposing_team_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  opposing_team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}
inline std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_mutable_opposing_team_name() {
  _has_bits_[0] |= 0x00000001u;
  return opposing_team_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::release_opposing_team_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
  if (!_internal_has_opposing_team_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opposing_team_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_allocated_opposing_team_name(std::string* opposing_team_name) {
  if (opposing_team_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opposing_team_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opposing_team_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.opposing_team_name)
}

// optional uint32 owned_by = 11;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_owned_by() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_owned_by() const {
  return _internal_has_owned_by();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_owned_by() {
  owned_by_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_owned_by() const {
  return owned_by_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::owned_by() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.owned_by)
  return _internal_owned_by();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_owned_by(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  owned_by_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_owned_by(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_owned_by(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.owned_by)
}

// optional bool benched = 12;
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_has_benched() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::has_benched() const {
  return _internal_has_benched();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::clear_benched() {
  benched_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_benched() const {
  return benched_;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::benched() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.benched)
  return _internal_benched();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::_internal_set_benched(bool value) {
  _has_bits_[0] |= 0x00000400u;
  benched_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData::set_benched(bool value) {
  _internal_set_benched(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData.benched)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyPlayerScoreDetailsResponse

// optional .CMsgDOTAFantasyPlayerScoreDetailsResponse.EResult result = 1 [default = SUCCESS];
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyPlayerScoreDetailsResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::_internal_result() const {
  return static_cast< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult >(result_);
}
inline ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult CMsgDOTAFantasyPlayerScoreDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.result)
  return _internal_result();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse::_internal_set_result(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult value) {
  assert(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse::set_result(::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyPlayerScoreDetailsResponse.result)
}

// repeated .CMsgDOTAFantasyPlayerScoreDetailsResponse.PlayerMatchData data = 2;
inline int CMsgDOTAFantasyPlayerScoreDetailsResponse::_internal_data_size() const {
  return data_.size();
}
inline int CMsgDOTAFantasyPlayerScoreDetailsResponse::data_size() const {
  return _internal_data_size();
}
inline void CMsgDOTAFantasyPlayerScoreDetailsResponse::clear_data() {
  data_.Clear();
}
inline ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >*
CMsgDOTAFantasyPlayerScoreDetailsResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return &data_;
}
inline const ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData& CMsgDOTAFantasyPlayerScoreDetailsResponse::data(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return _internal_data(index);
}
inline ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::_internal_add_data() {
  return data_.Add();
}
inline ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData* CMsgDOTAFantasyPlayerScoreDetailsResponse::add_data() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return _internal_add_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_PlayerMatchData >&
CMsgDOTAFantasyPlayerScoreDetailsResponse::data() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyPlayerScoreDetailsResponse.data)
  return data_;
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVoteTeamGuess

// optional uint32 league_id = 1;
inline bool CMsgDOTAPassportVoteTeamGuess::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteTeamGuess::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteTeamGuess::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteTeamGuess::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  league_id_ = value;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.league_id)
}

// optional uint32 winner_id = 2;
inline bool CMsgDOTAPassportVoteTeamGuess::_internal_has_winner_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteTeamGuess::has_winner_id() const {
  return _internal_has_winner_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_winner_id() {
  winner_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteTeamGuess::_internal_winner_id() const {
  return winner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteTeamGuess::winner_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.winner_id)
  return _internal_winner_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::_internal_set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  winner_id_ = value;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_winner_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_winner_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.winner_id)
}

// optional uint32 runnerup_id = 3;
inline bool CMsgDOTAPassportVoteTeamGuess::_internal_has_runnerup_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteTeamGuess::has_runnerup_id() const {
  return _internal_has_runnerup_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::clear_runnerup_id() {
  runnerup_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteTeamGuess::_internal_runnerup_id() const {
  return runnerup_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteTeamGuess::runnerup_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
  return _internal_runnerup_id();
}
inline void CMsgDOTAPassportVoteTeamGuess::_internal_set_runnerup_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  runnerup_id_ = value;
}
inline void CMsgDOTAPassportVoteTeamGuess::set_runnerup_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_runnerup_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteTeamGuess.runnerup_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVoteGenericSelection

// optional .DOTA_2013PassportSelectionIndices selection_index = 1 [default = PP13_SEL_ALLSTAR_PLAYER_0];
inline bool CMsgDOTAPassportVoteGenericSelection::_internal_has_selection_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteGenericSelection::has_selection_index() const {
  return _internal_has_selection_index();
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_selection_index() {
  selection_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::_internal_selection_index() const {
  return static_cast< ::DOTA_2013PassportSelectionIndices >(selection_index_);
}
inline ::DOTA_2013PassportSelectionIndices CMsgDOTAPassportVoteGenericSelection::selection_index() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection_index)
  return _internal_selection_index();
}
inline void CMsgDOTAPassportVoteGenericSelection::_internal_set_selection_index(::DOTA_2013PassportSelectionIndices value) {
  assert(::DOTA_2013PassportSelectionIndices_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  selection_index_ = value;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_selection_index(::DOTA_2013PassportSelectionIndices value) {
  _internal_set_selection_index(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection_index)
}

// optional uint32 selection = 2;
inline bool CMsgDOTAPassportVoteGenericSelection::_internal_has_selection() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPassportVoteGenericSelection::has_selection() const {
  return _internal_has_selection();
}
inline void CMsgDOTAPassportVoteGenericSelection::clear_selection() {
  selection_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteGenericSelection::_internal_selection() const {
  return selection_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportVoteGenericSelection::selection() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVoteGenericSelection.selection)
  return _internal_selection();
}
inline void CMsgDOTAPassportVoteGenericSelection::_internal_set_selection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  selection_ = value;
}
inline void CMsgDOTAPassportVoteGenericSelection::set_selection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_selection(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportVoteGenericSelection.selection)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportStampedPlayer

// optional uint64 steam_id = 1;
inline bool CMsgDOTAPassportStampedPlayer::_internal_has_steam_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportStampedPlayer::has_steam_id() const {
  return _internal_has_steam_id();
}
inline void CMsgDOTAPassportStampedPlayer::clear_steam_id() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAPassportStampedPlayer::_internal_steam_id() const {
  return steam_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgDOTAPassportStampedPlayer::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.steam_id)
  return _internal_steam_id();
}
inline void CMsgDOTAPassportStampedPlayer::_internal_set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  steam_id_ = value;
}
inline void CMsgDOTAPassportStampedPlayer::set_steam_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steam_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.steam_id)
}

// optional uint32 stamp_level = 2;
inline bool CMsgDOTAPassportStampedPlayer::_internal_has_stamp_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAPassportStampedPlayer::has_stamp_level() const {
  return _internal_has_stamp_level();
}
inline void CMsgDOTAPassportStampedPlayer::clear_stamp_level() {
  stamp_level_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportStampedPlayer::_internal_stamp_level() const {
  return stamp_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportStampedPlayer::stamp_level() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportStampedPlayer.stamp_level)
  return _internal_stamp_level();
}
inline void CMsgDOTAPassportStampedPlayer::_internal_set_stamp_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stamp_level_ = value;
}
inline void CMsgDOTAPassportStampedPlayer::set_stamp_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stamp_level(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportStampedPlayer.stamp_level)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportPlayerCardChallenge

// optional uint32 challenge_id = 1;
inline bool CMsgDOTAPassportPlayerCardChallenge::_internal_has_challenge_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAPassportPlayerCardChallenge::has_challenge_id() const {
  return _internal_has_challenge_id();
}
inline void CMsgDOTAPassportPlayerCardChallenge::clear_challenge_id() {
  challenge_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportPlayerCardChallenge::_internal_challenge_id() const {
  return challenge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAPassportPlayerCardChallenge::challenge_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
  return _internal_challenge_id();
}
inline void CMsgDOTAPassportPlayerCardChallenge::_internal_set_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  challenge_id_ = value;
}
inline void CMsgDOTAPassportPlayerCardChallenge::set_challenge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_challenge_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAPassportPlayerCardChallenge.challenge_id)
}

// -------------------------------------------------------------------

// CMsgDOTAPassportVote

// repeated .CMsgDOTAPassportVoteTeamGuess team_votes = 1;
inline int CMsgDOTAPassportVote::_internal_team_votes_size() const {
  return team_votes_.size();
}
inline int CMsgDOTAPassportVote::team_votes_size() const {
  return _internal_team_votes_size();
}
inline void CMsgDOTAPassportVote::clear_team_votes() {
  team_votes_.Clear();
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::mutable_team_votes(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.team_votes)
  return team_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >*
CMsgDOTAPassportVote::mutable_team_votes() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.team_votes)
  return &team_votes_;
}
inline const ::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::_internal_team_votes(int index) const {
  return team_votes_.Get(index);
}
inline const ::CMsgDOTAPassportVoteTeamGuess& CMsgDOTAPassportVote::team_votes(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.team_votes)
  return _internal_team_votes(index);
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::_internal_add_team_votes() {
  return team_votes_.Add();
}
inline ::CMsgDOTAPassportVoteTeamGuess* CMsgDOTAPassportVote::add_team_votes() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.team_votes)
  return _internal_add_team_votes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteTeamGuess >&
CMsgDOTAPassportVote::team_votes() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.team_votes)
  return team_votes_;
}

// repeated .CMsgDOTAPassportVoteGenericSelection generic_selections = 2;
inline int CMsgDOTAPassportVote::_internal_generic_selections_size() const {
  return generic_selections_.size();
}
inline int CMsgDOTAPassportVote::generic_selections_size() const {
  return _internal_generic_selections_size();
}
inline void CMsgDOTAPassportVote::clear_generic_selections() {
  generic_selections_.Clear();
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::mutable_generic_selections(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >*
CMsgDOTAPassportVote::mutable_generic_selections() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.generic_selections)
  return &generic_selections_;
}
inline const ::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::_internal_generic_selections(int index) const {
  return generic_selections_.Get(index);
}
inline const ::CMsgDOTAPassportVoteGenericSelection& CMsgDOTAPassportVote::generic_selections(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.generic_selections)
  return _internal_generic_selections(index);
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::_internal_add_generic_selections() {
  return generic_selections_.Add();
}
inline ::CMsgDOTAPassportVoteGenericSelection* CMsgDOTAPassportVote::add_generic_selections() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.generic_selections)
  return _internal_add_generic_selections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportVoteGenericSelection >&
CMsgDOTAPassportVote::generic_selections() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.generic_selections)
  return generic_selections_;
}

// repeated .CMsgDOTAPassportStampedPlayer stamped_players = 3;
inline int CMsgDOTAPassportVote::_internal_stamped_players_size() const {
  return stamped_players_.size();
}
inline int CMsgDOTAPassportVote::stamped_players_size() const {
  return _internal_stamped_players_size();
}
inline void CMsgDOTAPassportVote::clear_stamped_players() {
  stamped_players_.Clear();
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::mutable_stamped_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >*
CMsgDOTAPassportVote::mutable_stamped_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.stamped_players)
  return &stamped_players_;
}
inline const ::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::_internal_stamped_players(int index) const {
  return stamped_players_.Get(index);
}
inline const ::CMsgDOTAPassportStampedPlayer& CMsgDOTAPassportVote::stamped_players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.stamped_players)
  return _internal_stamped_players(index);
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::_internal_add_stamped_players() {
  return stamped_players_.Add();
}
inline ::CMsgDOTAPassportStampedPlayer* CMsgDOTAPassportVote::add_stamped_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.stamped_players)
  return _internal_add_stamped_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportStampedPlayer >&
CMsgDOTAPassportVote::stamped_players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.stamped_players)
  return stamped_players_;
}

// repeated .CMsgDOTAPassportPlayerCardChallenge player_card_challenges = 4;
inline int CMsgDOTAPassportVote::_internal_player_card_challenges_size() const {
  return player_card_challenges_.size();
}
inline int CMsgDOTAPassportVote::player_card_challenges_size() const {
  return _internal_player_card_challenges_size();
}
inline void CMsgDOTAPassportVote::clear_player_card_challenges() {
  player_card_challenges_.Clear();
}
inline ::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::mutable_player_card_challenges(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >*
CMsgDOTAPassportVote::mutable_player_card_challenges() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAPassportVote.player_card_challenges)
  return &player_card_challenges_;
}
inline const ::CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportVote::_internal_player_card_challenges(int index) const {
  return player_card_challenges_.Get(index);
}
inline const ::CMsgDOTAPassportPlayerCardChallenge& CMsgDOTAPassportVote::player_card_challenges(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAPassportVote.player_card_challenges)
  return _internal_player_card_challenges(index);
}
inline ::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::_internal_add_player_card_challenges() {
  return player_card_challenges_.Add();
}
inline ::CMsgDOTAPassportPlayerCardChallenge* CMsgDOTAPassportVote::add_player_card_challenges() {
  // @@protoc_insertion_point(field_add:CMsgDOTAPassportVote.player_card_challenges)
  return _internal_add_player_card_challenges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAPassportPlayerCardChallenge >&
CMsgDOTAPassportVote::player_card_challenges() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAPassportVote.player_card_challenges)
  return player_card_challenges_;
}

// -------------------------------------------------------------------

// CMsgClientToGCGetPlayerCardRosterRequest

// optional uint32 league_id = 1;
inline bool CMsgClientToGCGetPlayerCardRosterRequest::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterRequest::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCGetPlayerCardRosterRequest::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCGetPlayerCardRosterRequest::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterRequest.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  league_id_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterRequest.league_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgClientToGCGetPlayerCardRosterRequest::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCGetPlayerCardRosterRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCGetPlayerCardRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterRequest.timestamp)
  return _internal_timestamp();
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterRequest.timestamp)
}

// -------------------------------------------------------------------

// CMsgClientToGCGetPlayerCardRosterResponse

// optional .CMsgClientToGCGetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::_internal_result() const {
  return static_cast< ::CMsgClientToGCGetPlayerCardRosterResponse_Result >(result_);
}
inline ::CMsgClientToGCGetPlayerCardRosterResponse_Result CMsgClientToGCGetPlayerCardRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.result)
  return _internal_result();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value) {
  assert(::CMsgClientToGCGetPlayerCardRosterResponse_Result_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_result(::CMsgClientToGCGetPlayerCardRosterResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.result)
}

// repeated uint64 player_card_item_id = 2;
inline int CMsgClientToGCGetPlayerCardRosterResponse::_internal_player_card_item_id_size() const {
  return player_card_item_id_.size();
}
inline int CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id_size() const {
  return _internal_player_card_item_id_size();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_player_card_item_id() {
  player_card_item_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientToGCGetPlayerCardRosterResponse::_internal_player_card_item_id(int index) const {
  return player_card_item_id_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id(int index) const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return _internal_player_card_item_id(index);
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_player_card_item_id(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  player_card_item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  player_card_item_id_.Add(value);
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::add_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_player_card_item_id(value);
  // @@protoc_insertion_point(field_add:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgClientToGCGetPlayerCardRosterResponse::_internal_player_card_item_id() const {
  return player_card_item_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CMsgClientToGCGetPlayerCardRosterResponse::player_card_item_id() const {
  // @@protoc_insertion_point(field_list:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return _internal_player_card_item_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgClientToGCGetPlayerCardRosterResponse::_internal_mutable_player_card_item_id() {
  return &player_card_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CMsgClientToGCGetPlayerCardRosterResponse::mutable_player_card_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CMsgClientToGCGetPlayerCardRosterResponse.player_card_item_id)
  return _internal_mutable_player_card_item_id();
}

// optional float score = 3;
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_score() const {
  return _internal_has_score();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_score() {
  score_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::_internal_score() const {
  return score_;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::score() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.score)
  return _internal_score();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_score(float value) {
  _has_bits_[0] |= 0x00000002u;
  score_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.score)
}

// optional bool finalized = 4;
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_finalized() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_finalized() const {
  return _internal_has_finalized();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_finalized() {
  finalized_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_finalized() const {
  return finalized_;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::finalized() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.finalized)
  return _internal_finalized();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_finalized(bool value) {
  _has_bits_[0] |= 0x00000004u;
  finalized_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_finalized(bool value) {
  _internal_set_finalized(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.finalized)
}

// optional float percentile = 5;
inline bool CMsgClientToGCGetPlayerCardRosterResponse::_internal_has_percentile() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCGetPlayerCardRosterResponse::has_percentile() const {
  return _internal_has_percentile();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::clear_percentile() {
  percentile_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::_internal_percentile() const {
  return percentile_;
}
inline float CMsgClientToGCGetPlayerCardRosterResponse::percentile() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCGetPlayerCardRosterResponse.percentile)
  return _internal_percentile();
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::_internal_set_percentile(float value) {
  _has_bits_[0] |= 0x00000008u;
  percentile_ = value;
}
inline void CMsgClientToGCGetPlayerCardRosterResponse::set_percentile(float value) {
  _internal_set_percentile(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCGetPlayerCardRosterResponse.percentile)
}

// -------------------------------------------------------------------

// CMsgClientToGCSetPlayerCardRosterRequest

// optional uint32 league_id = 1;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.league_id)
  return _internal_league_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  league_id_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.league_id)
}

// optional uint32 timestamp = 2;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.timestamp)
  return _internal_timestamp();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.timestamp)
}

// optional uint32 slot = 3;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_slot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_slot() const {
  return _internal_has_slot();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_slot() {
  slot_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::_internal_slot() const {
  return slot_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::slot() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.slot)
  return _internal_slot();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  slot_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_slot(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_slot(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.slot)
}

// optional uint64 player_card_item_id = 4;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_player_card_item_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_player_card_item_id() const {
  return _internal_has_player_card_item_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_player_card_item_id() {
  player_card_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientToGCSetPlayerCardRosterRequest::_internal_player_card_item_id() const {
  return player_card_item_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgClientToGCSetPlayerCardRosterRequest::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
  return _internal_player_card_item_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  player_card_item_id_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_player_card_item_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_player_card_item_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.player_card_item_id)
}

// optional uint32 event_id = 5;
inline bool CMsgClientToGCSetPlayerCardRosterRequest::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterRequest::has_event_id() const {
  return _internal_has_event_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::clear_event_id() {
  event_id_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgClientToGCSetPlayerCardRosterRequest::event_id() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterRequest.event_id)
  return _internal_event_id();
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  event_id_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterRequest::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterRequest.event_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCSetPlayerCardRosterResponse

// optional .CMsgClientToGCSetPlayerCardRosterResponse.Result result = 1 [default = SUCCESS];
inline bool CMsgClientToGCSetPlayerCardRosterResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgClientToGCSetPlayerCardRosterResponse::has_result() const {
  return _internal_has_result();
}
inline void CMsgClientToGCSetPlayerCardRosterResponse::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::_internal_result() const {
  return static_cast< ::CMsgClientToGCSetPlayerCardRosterResponse_Result >(result_);
}
inline ::CMsgClientToGCSetPlayerCardRosterResponse_Result CMsgClientToGCSetPlayerCardRosterResponse::result() const {
  // @@protoc_insertion_point(field_get:CMsgClientToGCSetPlayerCardRosterResponse.result)
  return _internal_result();
}
inline void CMsgClientToGCSetPlayerCardRosterResponse::_internal_set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value) {
  assert(::CMsgClientToGCSetPlayerCardRosterResponse_Result_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  result_ = value;
}
inline void CMsgClientToGCSetPlayerCardRosterResponse::set_result(::CMsgClientToGCSetPlayerCardRosterResponse_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:CMsgClientToGCSetPlayerCardRosterResponse.result)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo

// optional uint32 league_id = 1;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_league_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_league_id() const {
  return _internal_has_league_id();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_league_id() {
  league_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_league_id() const {
  return league_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::league_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_id)
  return _internal_league_id();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  league_id_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_league_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_id)
}

// optional string league_name = 2;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_league_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_league_name() const {
  return _internal_has_league_name();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_league_name() {
  league_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::league_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
  return _internal_league_name();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_name(const std::string& value) {
  _internal_set_league_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}
inline std::string* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::mutable_league_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
  return _internal_mutable_league_name();
}
inline const std::string& CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_league_name() const {
  return league_name_.Get();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_league_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_league_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  league_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}
inline std::string* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_mutable_league_name() {
  _has_bits_[0] |= 0x00000001u;
  return league_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::release_league_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
  if (!_internal_has_league_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return league_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_allocated_league_name(std::string* league_name) {
  if (league_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  league_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), league_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.league_name)
}

// optional uint32 start_timestamp = 3;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_start_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_start_timestamp() const {
  return _internal_has_start_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_start_timestamp() {
  start_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_start_timestamp() const {
  return start_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::start_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.start_timestamp)
  return _internal_start_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  start_timestamp_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_start_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.start_timestamp)
}

// optional uint32 end_timestamp = 4;
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_end_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_end_timestamp() const {
  return _internal_has_end_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_end_timestamp() {
  end_timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_end_timestamp() const {
  return end_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::end_timestamp() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.end_timestamp)
  return _internal_end_timestamp();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  end_timestamp_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_end_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.end_timestamp)
}

// repeated uint32 day_timestamps = 5;
inline int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_day_timestamps_size() const {
  return day_timestamps_.size();
}
inline int CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::day_timestamps_size() const {
  return _internal_day_timestamps_size();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_day_timestamps() {
  day_timestamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_day_timestamps(int index) const {
  return day_timestamps_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::day_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
  return _internal_day_timestamps(index);
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_day_timestamps(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  day_timestamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_add_day_timestamps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  day_timestamps_.Add(value);
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::add_day_timestamps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_day_timestamps(value);
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_day_timestamps() const {
  return day_timestamps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::day_timestamps() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
  return _internal_day_timestamps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_mutable_day_timestamps() {
  return &day_timestamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::mutable_day_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.day_timestamps)
  return _internal_mutable_day_timestamps();
}

// optional .CMsgDOTAFantasyDPCLeagueStatus.ERosterStatus status = 8 [default = UNSET];
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::has_status() const {
  return _internal_has_status();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_status() const {
  return static_cast< ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus >(status_);
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::status() const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status)
  return _internal_status();
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::_internal_set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value) {
  assert(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo::set_status(::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo.status)
}

// -------------------------------------------------------------------

// CMsgDOTAFantasyDPCLeagueStatus

// repeated .CMsgDOTAFantasyDPCLeagueStatus.LeagueInfo league_infos = 1;
inline int CMsgDOTAFantasyDPCLeagueStatus::_internal_league_infos_size() const {
  return league_infos_.size();
}
inline int CMsgDOTAFantasyDPCLeagueStatus::league_infos_size() const {
  return _internal_league_infos_size();
}
inline void CMsgDOTAFantasyDPCLeagueStatus::clear_league_infos() {
  league_infos_.Clear();
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* CMsgDOTAFantasyDPCLeagueStatus::mutable_league_infos(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return league_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >*
CMsgDOTAFantasyDPCLeagueStatus::mutable_league_infos() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return &league_infos_;
}
inline const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& CMsgDOTAFantasyDPCLeagueStatus::_internal_league_infos(int index) const {
  return league_infos_.Get(index);
}
inline const ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo& CMsgDOTAFantasyDPCLeagueStatus::league_infos(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return _internal_league_infos(index);
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* CMsgDOTAFantasyDPCLeagueStatus::_internal_add_league_infos() {
  return league_infos_.Add();
}
inline ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo* CMsgDOTAFantasyDPCLeagueStatus::add_league_infos() {
  // @@protoc_insertion_point(field_add:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return _internal_add_league_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTAFantasyDPCLeagueStatus_LeagueInfo >&
CMsgDOTAFantasyDPCLeagueStatus::league_infos() const {
  // @@protoc_insertion_point(field_list:CMsgDOTAFantasyDPCLeagueStatus.league_infos)
  return league_infos_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults_Player

// optional uint32 id = 1;
inline bool CMsgDOTADPCSearchResults_Player::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Player::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTADPCSearchResults_Player::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCSearchResults_Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCSearchResults_Player::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Player.id)
  return _internal_id();
}
inline void CMsgDOTADPCSearchResults_Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgDOTADPCSearchResults_Player::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Player.id)
}

// optional string name = 2;
inline bool CMsgDOTADPCSearchResults_Player::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Player::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTADPCSearchResults_Player::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTADPCSearchResults_Player::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Player.name)
  return _internal_name();
}
inline void CMsgDOTADPCSearchResults_Player::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Player.name)
}
inline std::string* CMsgDOTADPCSearchResults_Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Player.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgDOTADPCSearchResults_Player::_internal_name() const {
  return name_.Get();
}
inline void CMsgDOTADPCSearchResults_Player::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTADPCSearchResults_Player::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTADPCSearchResults.Player.name)
}
inline void CMsgDOTADPCSearchResults_Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTADPCSearchResults.Player.name)
}
inline void CMsgDOTADPCSearchResults_Player::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTADPCSearchResults.Player.name)
}
inline std::string* CMsgDOTADPCSearchResults_Player::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTADPCSearchResults_Player::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Player.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTADPCSearchResults_Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Player.name)
}

// optional string real_name = 3;
inline bool CMsgDOTADPCSearchResults_Player::_internal_has_real_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Player::has_real_name() const {
  return _internal_has_real_name();
}
inline void CMsgDOTADPCSearchResults_Player::clear_real_name() {
  real_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTADPCSearchResults_Player::real_name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Player.real_name)
  return _internal_real_name();
}
inline void CMsgDOTADPCSearchResults_Player::set_real_name(const std::string& value) {
  _internal_set_real_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Player.real_name)
}
inline std::string* CMsgDOTADPCSearchResults_Player::mutable_real_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Player.real_name)
  return _internal_mutable_real_name();
}
inline const std::string& CMsgDOTADPCSearchResults_Player::_internal_real_name() const {
  return real_name_.Get();
}
inline void CMsgDOTADPCSearchResults_Player::_internal_set_real_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTADPCSearchResults_Player::set_real_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  real_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTADPCSearchResults.Player.real_name)
}
inline void CMsgDOTADPCSearchResults_Player::set_real_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTADPCSearchResults.Player.real_name)
}
inline void CMsgDOTADPCSearchResults_Player::set_real_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTADPCSearchResults.Player.real_name)
}
inline std::string* CMsgDOTADPCSearchResults_Player::_internal_mutable_real_name() {
  _has_bits_[0] |= 0x00000002u;
  return real_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTADPCSearchResults_Player::release_real_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Player.real_name)
  if (!_internal_has_real_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return real_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTADPCSearchResults_Player::set_allocated_real_name(std::string* real_name) {
  if (real_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  real_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), real_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Player.real_name)
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults_Team

// optional uint32 id = 1;
inline bool CMsgDOTADPCSearchResults_Team::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Team::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTADPCSearchResults_Team::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCSearchResults_Team::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCSearchResults_Team::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Team.id)
  return _internal_id();
}
inline void CMsgDOTADPCSearchResults_Team::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void CMsgDOTADPCSearchResults_Team::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Team.id)
}

// optional string name = 2;
inline bool CMsgDOTADPCSearchResults_Team::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Team::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTADPCSearchResults_Team::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTADPCSearchResults_Team::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Team.name)
  return _internal_name();
}
inline void CMsgDOTADPCSearchResults_Team::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Team.name)
}
inline std::string* CMsgDOTADPCSearchResults_Team::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Team.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgDOTADPCSearchResults_Team::_internal_name() const {
  return name_.Get();
}
inline void CMsgDOTADPCSearchResults_Team::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTADPCSearchResults_Team::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTADPCSearchResults.Team.name)
}
inline void CMsgDOTADPCSearchResults_Team::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTADPCSearchResults.Team.name)
}
inline void CMsgDOTADPCSearchResults_Team::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTADPCSearchResults.Team.name)
}
inline std::string* CMsgDOTADPCSearchResults_Team::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTADPCSearchResults_Team::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Team.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTADPCSearchResults_Team::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Team.name)
}

// optional string url = 3;
inline bool CMsgDOTADPCSearchResults_Team::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_Team::has_url() const {
  return _internal_has_url();
}
inline void CMsgDOTADPCSearchResults_Team::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgDOTADPCSearchResults_Team::url() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.Team.url)
  return _internal_url();
}
inline void CMsgDOTADPCSearchResults_Team::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.Team.url)
}
inline std::string* CMsgDOTADPCSearchResults_Team::mutable_url() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.Team.url)
  return _internal_mutable_url();
}
inline const std::string& CMsgDOTADPCSearchResults_Team::_internal_url() const {
  return url_.Get();
}
inline void CMsgDOTADPCSearchResults_Team::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTADPCSearchResults_Team::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTADPCSearchResults.Team.url)
}
inline void CMsgDOTADPCSearchResults_Team::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTADPCSearchResults.Team.url)
}
inline void CMsgDOTADPCSearchResults_Team::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTADPCSearchResults.Team.url)
}
inline std::string* CMsgDOTADPCSearchResults_Team::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTADPCSearchResults_Team::release_url() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.Team.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTADPCSearchResults_Team::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.Team.url)
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults_League

// optional uint32 id = 1;
inline bool CMsgDOTADPCSearchResults_League::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_League::has_id() const {
  return _internal_has_id();
}
inline void CMsgDOTADPCSearchResults_League::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCSearchResults_League::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCSearchResults_League::id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.League.id)
  return _internal_id();
}
inline void CMsgDOTADPCSearchResults_League::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CMsgDOTADPCSearchResults_League::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.League.id)
}

// optional string name = 2;
inline bool CMsgDOTADPCSearchResults_League::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCSearchResults_League::has_name() const {
  return _internal_has_name();
}
inline void CMsgDOTADPCSearchResults_League::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgDOTADPCSearchResults_League::name() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.League.name)
  return _internal_name();
}
inline void CMsgDOTADPCSearchResults_League::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCSearchResults.League.name)
}
inline std::string* CMsgDOTADPCSearchResults_League::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.League.name)
  return _internal_mutable_name();
}
inline const std::string& CMsgDOTADPCSearchResults_League::_internal_name() const {
  return name_.Get();
}
inline void CMsgDOTADPCSearchResults_League::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CMsgDOTADPCSearchResults_League::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CMsgDOTADPCSearchResults.League.name)
}
inline void CMsgDOTADPCSearchResults_League::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CMsgDOTADPCSearchResults.League.name)
}
inline void CMsgDOTADPCSearchResults_League::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CMsgDOTADPCSearchResults.League.name)
}
inline std::string* CMsgDOTADPCSearchResults_League::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CMsgDOTADPCSearchResults_League::release_name() {
  // @@protoc_insertion_point(field_release:CMsgDOTADPCSearchResults.League.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CMsgDOTADPCSearchResults_League::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CMsgDOTADPCSearchResults.League.name)
}

// -------------------------------------------------------------------

// CMsgDOTADPCSearchResults

// repeated .CMsgDOTADPCSearchResults.Player players = 1;
inline int CMsgDOTADPCSearchResults::_internal_players_size() const {
  return players_.size();
}
inline int CMsgDOTADPCSearchResults::players_size() const {
  return _internal_players_size();
}
inline void CMsgDOTADPCSearchResults::clear_players() {
  players_.Clear();
}
inline ::CMsgDOTADPCSearchResults_Player* CMsgDOTADPCSearchResults::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >*
CMsgDOTADPCSearchResults::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCSearchResults.players)
  return &players_;
}
inline const ::CMsgDOTADPCSearchResults_Player& CMsgDOTADPCSearchResults::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::CMsgDOTADPCSearchResults_Player& CMsgDOTADPCSearchResults::players(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.players)
  return _internal_players(index);
}
inline ::CMsgDOTADPCSearchResults_Player* CMsgDOTADPCSearchResults::_internal_add_players() {
  return players_.Add();
}
inline ::CMsgDOTADPCSearchResults_Player* CMsgDOTADPCSearchResults::add_players() {
  // @@protoc_insertion_point(field_add:CMsgDOTADPCSearchResults.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Player >&
CMsgDOTADPCSearchResults::players() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCSearchResults.players)
  return players_;
}

// repeated .CMsgDOTADPCSearchResults.Team teams = 2;
inline int CMsgDOTADPCSearchResults::_internal_teams_size() const {
  return teams_.size();
}
inline int CMsgDOTADPCSearchResults::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTADPCSearchResults::clear_teams() {
  teams_.Clear();
}
inline ::CMsgDOTADPCSearchResults_Team* CMsgDOTADPCSearchResults::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >*
CMsgDOTADPCSearchResults::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCSearchResults.teams)
  return &teams_;
}
inline const ::CMsgDOTADPCSearchResults_Team& CMsgDOTADPCSearchResults::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CMsgDOTADPCSearchResults_Team& CMsgDOTADPCSearchResults::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTADPCSearchResults_Team* CMsgDOTADPCSearchResults::_internal_add_teams() {
  return teams_.Add();
}
inline ::CMsgDOTADPCSearchResults_Team* CMsgDOTADPCSearchResults::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTADPCSearchResults.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_Team >&
CMsgDOTADPCSearchResults::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCSearchResults.teams)
  return teams_;
}

// repeated .CMsgDOTADPCSearchResults.League leagues = 3;
inline int CMsgDOTADPCSearchResults::_internal_leagues_size() const {
  return leagues_.size();
}
inline int CMsgDOTADPCSearchResults::leagues_size() const {
  return _internal_leagues_size();
}
inline void CMsgDOTADPCSearchResults::clear_leagues() {
  leagues_.Clear();
}
inline ::CMsgDOTADPCSearchResults_League* CMsgDOTADPCSearchResults::mutable_leagues(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCSearchResults.leagues)
  return leagues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >*
CMsgDOTADPCSearchResults::mutable_leagues() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCSearchResults.leagues)
  return &leagues_;
}
inline const ::CMsgDOTADPCSearchResults_League& CMsgDOTADPCSearchResults::_internal_leagues(int index) const {
  return leagues_.Get(index);
}
inline const ::CMsgDOTADPCSearchResults_League& CMsgDOTADPCSearchResults::leagues(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCSearchResults.leagues)
  return _internal_leagues(index);
}
inline ::CMsgDOTADPCSearchResults_League* CMsgDOTADPCSearchResults::_internal_add_leagues() {
  return leagues_.Add();
}
inline ::CMsgDOTADPCSearchResults_League* CMsgDOTADPCSearchResults::add_leagues() {
  // @@protoc_insertion_point(field_add:CMsgDOTADPCSearchResults.leagues)
  return _internal_add_leagues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCSearchResults_League >&
CMsgDOTADPCSearchResults::leagues() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCSearchResults.leagues)
  return leagues_;
}

// -------------------------------------------------------------------

// CMsgDOTADPCTeamFavoriteRankings_Team

// optional uint32 team_id = 1;
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::_internal_has_team_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::has_team_id() const {
  return _internal_has_team_id();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::clear_team_id() {
  team_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCTeamFavoriteRankings_Team::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCTeamFavoriteRankings_Team::team_id() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCTeamFavoriteRankings.Team.team_id)
  return _internal_team_id();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  team_id_ = value;
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::set_team_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCTeamFavoriteRankings.Team.team_id)
}

// optional uint32 favorites = 2;
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::_internal_has_favorites() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CMsgDOTADPCTeamFavoriteRankings_Team::has_favorites() const {
  return _internal_has_favorites();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::clear_favorites() {
  favorites_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCTeamFavoriteRankings_Team::_internal_favorites() const {
  return favorites_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgDOTADPCTeamFavoriteRankings_Team::favorites() const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCTeamFavoriteRankings.Team.favorites)
  return _internal_favorites();
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::_internal_set_favorites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  favorites_ = value;
}
inline void CMsgDOTADPCTeamFavoriteRankings_Team::set_favorites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_favorites(value);
  // @@protoc_insertion_point(field_set:CMsgDOTADPCTeamFavoriteRankings.Team.favorites)
}

// -------------------------------------------------------------------

// CMsgDOTADPCTeamFavoriteRankings

// repeated .CMsgDOTADPCTeamFavoriteRankings.Team teams = 1;
inline int CMsgDOTADPCTeamFavoriteRankings::_internal_teams_size() const {
  return teams_.size();
}
inline int CMsgDOTADPCTeamFavoriteRankings::teams_size() const {
  return _internal_teams_size();
}
inline void CMsgDOTADPCTeamFavoriteRankings::clear_teams() {
  teams_.Clear();
}
inline ::CMsgDOTADPCTeamFavoriteRankings_Team* CMsgDOTADPCTeamFavoriteRankings::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:CMsgDOTADPCTeamFavoriteRankings.teams)
  return teams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >*
CMsgDOTADPCTeamFavoriteRankings::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:CMsgDOTADPCTeamFavoriteRankings.teams)
  return &teams_;
}
inline const ::CMsgDOTADPCTeamFavoriteRankings_Team& CMsgDOTADPCTeamFavoriteRankings::_internal_teams(int index) const {
  return teams_.Get(index);
}
inline const ::CMsgDOTADPCTeamFavoriteRankings_Team& CMsgDOTADPCTeamFavoriteRankings::teams(int index) const {
  // @@protoc_insertion_point(field_get:CMsgDOTADPCTeamFavoriteRankings.teams)
  return _internal_teams(index);
}
inline ::CMsgDOTADPCTeamFavoriteRankings_Team* CMsgDOTADPCTeamFavoriteRankings::_internal_add_teams() {
  return teams_.Add();
}
inline ::CMsgDOTADPCTeamFavoriteRankings_Team* CMsgDOTADPCTeamFavoriteRankings::add_teams() {
  // @@protoc_insertion_point(field_add:CMsgDOTADPCTeamFavoriteRankings.teams)
  return _internal_add_teams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CMsgDOTADPCTeamFavoriteRankings_Team >&
CMsgDOTADPCTeamFavoriteRankings::teams() const {
  // @@protoc_insertion_point(field_list:CMsgDOTADPCTeamFavoriteRankings.teams)
  return teams_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgDOTACreateFantasyLeagueResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTACreateFantasyLeagueResponse_EResult>() {
  return ::CMsgDOTACreateFantasyLeagueResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueEditInfoResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueFindResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueFindResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueFindResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueInfoResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueInfoResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueInfoResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueMatchupsResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAEditFantasyTeamResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAEditFantasyTeamResponse_EResult>() {
  return ::CMsgDOTAEditFantasyTeamResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamScoreResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamScoreResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamScoreResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamStandingsResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamStandingsResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamStandingsResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyPlayerScoreResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyPlayerScoreResponse_EResult>() {
  return ::CMsgDOTAFantasyPlayerScoreResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyPlayerStandingsResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyPlayerStandingsResponse_EResult>() {
  return ::CMsgDOTAFantasyPlayerStandingsResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueCreateResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueCreateResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueCreateResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamCreateResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamCreateResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamCreateResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueEditInvitesResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult>() {
  return ::CMsgDOTAFantasyLeagueDraftPlayerResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamRosterSwapResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamRosterAddDropResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamTradesResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamTradesResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamTradesResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamTradeCancelResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyTeamRosterResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyTeamRosterResponse_EResult>() {
  return ::CMsgDOTAFantasyTeamRosterResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult>() {
  return ::CMsgDOTAFantasyPlayerHisoricalStatsResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyMessagesResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyMessagesResponse_EResult>() {
  return ::CMsgDOTAFantasyMessagesResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyRemoveOwnerResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyRemoveOwnerResponse_EResult>() {
  return ::CMsgDOTAFantasyRemoveOwnerResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyScheduledMatchesResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyScheduledMatchesResponse_EResult>() {
  return ::CMsgDOTAFantasyScheduledMatchesResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyLeaveLeagueResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyLeaveLeagueResponse_EResult>() {
  return ::CMsgDOTAFantasyLeaveLeagueResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult>() {
  return ::CMsgDOTAFantasyPlayerScoreDetailsResponse_EResult_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCGetPlayerCardRosterResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCGetPlayerCardRosterResponse_Result>() {
  return ::CMsgClientToGCGetPlayerCardRosterResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgClientToGCSetPlayerCardRosterResponse_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgClientToGCSetPlayerCardRosterResponse_Result>() {
  return ::CMsgClientToGCSetPlayerCardRosterResponse_Result_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus>() {
  return ::CMsgDOTAFantasyDPCLeagueStatus_ERosterStatus_descriptor();
}
template <> struct is_proto_enum< ::CMsgDOTADPCSearchResults_ESearchResultsDesired> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgDOTADPCSearchResults_ESearchResultsDesired>() {
  return ::CMsgDOTADPCSearchResults_ESearchResultsDesired_descriptor();
}
template <> struct is_proto_enum< ::DOTA_2013PassportSelectionIndices> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DOTA_2013PassportSelectionIndices>() {
  return ::DOTA_2013PassportSelectionIndices_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fgcmessages_5fclient_5ffantasy_2eproto
