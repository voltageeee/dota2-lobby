// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_clientserver_login.proto

#include "steammessages_clientserver_login.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgClientHeartBeat::CMsgClientHeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientHeartBeatDefaultTypeInternal {
  constexpr CMsgClientHeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientHeartBeatDefaultTypeInternal() {}
  union {
    CMsgClientHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientHeartBeatDefaultTypeInternal _CMsgClientHeartBeat_default_instance_;
constexpr CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_request_timestamp_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientServerTimestampRequestDefaultTypeInternal {
  constexpr CMsgClientServerTimestampRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServerTimestampRequestDefaultTypeInternal() {}
  union {
    CMsgClientServerTimestampRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServerTimestampRequestDefaultTypeInternal _CMsgClientServerTimestampRequest_default_instance_;
constexpr CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_request_timestamp_(PROTOBUF_ULONGLONG(0))
  , server_timestamp_ms_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientServerTimestampResponseDefaultTypeInternal {
  constexpr CMsgClientServerTimestampResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientServerTimestampResponseDefaultTypeInternal() {}
  union {
    CMsgClientServerTimestampResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientServerTimestampResponseDefaultTypeInternal _CMsgClientServerTimestampResponse_default_instance_;
constexpr CMsgClientSecret::CMsgClientSecret(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hmac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(0u)
  , appid_(0u)
  , nonce_(PROTOBUF_ULONGLONG(0))
  , deviceid_(0u){}
struct CMsgClientSecretDefaultTypeInternal {
  constexpr CMsgClientSecretDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientSecretDefaultTypeInternal() {}
  union {
    CMsgClientSecret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientSecretDefaultTypeInternal _CMsgClientSecret_default_instance_;
constexpr CMsgClientLogon::CMsgClientLogon(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_language_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , wine_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam2_auth_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , email_address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , game_server_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , login_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , anon_user_target_account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_sentryfile_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , otp_identifier_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sony_psn_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sony_psn_service_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sony_psn_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , machine_name_userchosen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_override_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , two_factor_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , web_logon_nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , obfuscated_private_ip_(nullptr)
  , public_ip_(nullptr)
  , embedded_client_secret_(nullptr)
  , protocol_version_(0u)
  , deprecated_obfustucated_private_ip_(0u)
  , cell_id_(0u)
  , last_session_id_(0u)
  , client_package_version_(0u)
  , client_os_type_(0u)
  , deprecated_10_(0u)
  , deprecated_public_ip_(0u)
  , client_supplied_steam_id_(PROTOBUF_ULONGLONG(0))
  , qos_level_(0u)
  , launcher_type_(0u)
  , ui_mode_(0u)
  , chat_mode_(0u)
  , rtime32_account_creation_(0u)
  , should_remember_password_(false)
  , was_converted_deprecated_msg_(false)
  , steam2_ticket_request_(false)
  , create_new_psn_linked_account_if_needed_(false)
  , resolved_user_steam_id_(PROTOBUF_ULONGLONG(0))
  , eresult_sentryfile_(0)
  , otp_type_(0)
  , otp_value_(0u)
  , game_server_app_id_(0)
  , client_instance_id_(PROTOBUF_ULONGLONG(0))
  , steamguard_dont_remember_computer_(false)
  , is_steam_box_(false)
  , supports_rate_limit_response_(false)
  , priority_reason_(0){}
struct CMsgClientLogonDefaultTypeInternal {
  constexpr CMsgClientLogonDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLogonDefaultTypeInternal() {}
  union {
    CMsgClientLogon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLogonDefaultTypeInternal _CMsgClientLogon_default_instance_;
constexpr CMsgClientLogonResponse::CMsgClientLogonResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : email_domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam2_ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , webapi_authenticate_user_nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , vanity_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parental_settings_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parental_setting_signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , public_ip_(nullptr)
  , out_of_game_heartbeat_seconds_(0)
  , in_game_heartbeat_seconds_(0)
  , deprecated_public_ip_(0u)
  , rtime32_server_time_(0u)
  , account_flags_(0u)
  , cell_id_(0u)
  , eresult_extended_(0)
  , cell_id_ping_threshold_(0u)
  , client_supplied_steamid_(PROTOBUF_ULONGLONG(0))
  , use_pics_(false)
  , force_client_update_check_(false)
  , count_loginfailures_to_migrate_(0)
  , count_disconnects_to_migrate_(0)
  , ogs_data_report_time_window_(0)
  , client_instance_id_(PROTOBUF_ULONGLONG(0))
  , eresult_(2){}
struct CMsgClientLogonResponseDefaultTypeInternal {
  constexpr CMsgClientLogonResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLogonResponseDefaultTypeInternal() {}
  union {
    CMsgClientLogonResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLogonResponseDefaultTypeInternal _CMsgClientLogonResponse_default_instance_;
constexpr CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_type_(-1){}
struct CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal {
  constexpr CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal() {}
  union {
    CMsgClientRequestWebAPIAuthenticateUserNonce _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestWebAPIAuthenticateUserNonceDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_;
constexpr CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : webapi_authenticate_user_nonce_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2)
  , token_type_(-1){}
struct CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal {
  constexpr CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal() {}
  union {
    CMsgClientRequestWebAPIAuthenticateUserNonceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientRequestWebAPIAuthenticateUserNonceResponseDefaultTypeInternal _CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_;
constexpr CMsgClientLogOff::CMsgClientLogOff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientLogOffDefaultTypeInternal {
  constexpr CMsgClientLogOffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLogOffDefaultTypeInternal() {}
  union {
    CMsgClientLogOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLogOffDefaultTypeInternal _CMsgClientLogOff_default_instance_;
constexpr CMsgClientLoggedOff::CMsgClientLoggedOff(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgClientLoggedOffDefaultTypeInternal {
  constexpr CMsgClientLoggedOffDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientLoggedOffDefaultTypeInternal() {}
  union {
    CMsgClientLoggedOff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientLoggedOffDefaultTypeInternal _CMsgClientLoggedOff_default_instance_;
constexpr CMsgClientNewLoginKey::CMsgClientNewLoginKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : login_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_id_(0u){}
struct CMsgClientNewLoginKeyDefaultTypeInternal {
  constexpr CMsgClientNewLoginKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientNewLoginKeyDefaultTypeInternal() {}
  union {
    CMsgClientNewLoginKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientNewLoginKeyDefaultTypeInternal _CMsgClientNewLoginKey_default_instance_;
constexpr CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unique_id_(0u){}
struct CMsgClientNewLoginKeyAcceptedDefaultTypeInternal {
  constexpr CMsgClientNewLoginKeyAcceptedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientNewLoginKeyAcceptedDefaultTypeInternal() {}
  union {
    CMsgClientNewLoginKeyAccepted _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientNewLoginKeyAcceptedDefaultTypeInternal _CMsgClientNewLoginKeyAccepted_default_instance_;
constexpr CMsgClientAccountInfo::CMsgClientAccountInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , facebook_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamguard_machine_name_user_chosen_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , count_authed_computers_(0)
  , account_flags_(0u)
  , facebook_id_(PROTOBUF_ULONGLONG(0))
  , steamguard_notify_newmachines_(false)
  , is_phone_verified_(false)
  , is_phone_identifying_(false)
  , is_phone_needing_reverify_(false)
  , two_factor_state_(0u){}
struct CMsgClientAccountInfoDefaultTypeInternal {
  constexpr CMsgClientAccountInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientAccountInfoDefaultTypeInternal() {}
  union {
    CMsgClientAccountInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientAccountInfoDefaultTypeInternal _CMsgClientAccountInfo_default_instance_;
constexpr CMsgClientChallengeRequest::CMsgClientChallengeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientChallengeRequestDefaultTypeInternal {
  constexpr CMsgClientChallengeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChallengeRequestDefaultTypeInternal() {}
  union {
    CMsgClientChallengeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChallengeRequestDefaultTypeInternal _CMsgClientChallengeRequest_default_instance_;
constexpr CMsgClientChallengeResponse::CMsgClientChallengeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : challenge_(PROTOBUF_ULONGLONG(0)){}
struct CMsgClientChallengeResponseDefaultTypeInternal {
  constexpr CMsgClientChallengeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientChallengeResponseDefaultTypeInternal() {}
  union {
    CMsgClientChallengeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientChallengeResponseDefaultTypeInternal _CMsgClientChallengeResponse_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fclientserver_5flogin_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fclientserver_5flogin_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fclientserver_5flogin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fclientserver_5flogin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampRequest, client_request_timestamp_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, client_request_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientServerTimestampResponse, server_timestamp_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, deviceid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientSecret, hmac_),
  1,
  2,
  4,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, deprecated_obfustucated_private_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, last_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, client_package_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, client_language_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, client_os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, should_remember_password_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, wine_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, deprecated_10_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, obfuscated_private_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, qos_level_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, client_supplied_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, machine_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, launcher_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, ui_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, chat_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, steam2_auth_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, email_address_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, rtime32_account_creation_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, password_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, game_server_token_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, login_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, was_converted_deprecated_msg_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, anon_user_target_account_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, resolved_user_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, eresult_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, sha_sentryfile_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, auth_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, otp_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, otp_value_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, otp_identifier_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, steam2_ticket_request_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, sony_psn_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, sony_psn_service_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, create_new_psn_linked_account_if_needed_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, sony_psn_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, game_server_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, steamguard_dont_remember_computer_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, machine_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, machine_name_userchosen_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, country_override_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, is_steam_box_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, two_factor_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, supports_rate_limit_response_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, web_logon_nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, priority_reason_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogon, embedded_client_secret_),
  24,
  25,
  26,
  27,
  28,
  0,
  29,
  38,
  1,
  30,
  21,
  31,
  33,
  32,
  22,
  2,
  34,
  35,
  36,
  3,
  4,
  37,
  5,
  6,
  7,
  8,
  39,
  9,
  42,
  43,
  10,
  11,
  44,
  45,
  12,
  40,
  13,
  14,
  41,
  15,
  46,
  48,
  16,
  17,
  18,
  49,
  47,
  19,
  50,
  20,
  51,
  23,
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, out_of_game_heartbeat_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, in_game_heartbeat_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, deprecated_public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, rtime32_server_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, account_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, cell_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, email_domain_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, steam2_ticket_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, eresult_extended_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, webapi_authenticate_user_nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, cell_id_ping_threshold_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, use_pics_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, vanity_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, public_ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, client_supplied_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, ip_country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, parental_settings_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, parental_setting_signature_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, count_loginfailures_to_migrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, count_disconnects_to_migrate_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, ogs_data_report_time_window_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, client_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogonResponse, force_client_update_check_),
  23,
  8,
  9,
  10,
  11,
  12,
  13,
  0,
  1,
  14,
  2,
  15,
  17,
  3,
  7,
  16,
  4,
  5,
  6,
  19,
  20,
  21,
  22,
  18,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonce, token_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, webapi_authenticate_user_nonce_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse, token_type_),
  1,
  0,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLogOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLoggedOff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientLoggedOff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientLoggedOff, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, unique_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKey, login_key_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKeyAccepted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKeyAccepted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientNewLoginKeyAccepted, unique_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, ip_country_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, count_authed_computers_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, account_flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, facebook_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, facebook_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, steamguard_notify_newmachines_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, steamguard_machine_name_user_chosen_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, is_phone_verified_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, two_factor_state_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, is_phone_identifying_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientAccountInfo, is_phone_needing_reverify_),
  0,
  1,
  4,
  5,
  6,
  2,
  7,
  3,
  8,
  11,
  9,
  10,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeRequest, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientChallengeResponse, challenge_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CMsgClientHeartBeat)},
  { 5, 11, sizeof(::CMsgClientServerTimestampRequest)},
  { 12, 19, sizeof(::CMsgClientServerTimestampResponse)},
  { 21, 31, sizeof(::CMsgClientSecret)},
  { 36, 93, sizeof(::CMsgClientLogon)},
  { 145, 174, sizeof(::CMsgClientLogonResponse)},
  { 198, 204, sizeof(::CMsgClientRequestWebAPIAuthenticateUserNonce)},
  { 205, 213, sizeof(::CMsgClientRequestWebAPIAuthenticateUserNonceResponse)},
  { 216, -1, sizeof(::CMsgClientLogOff)},
  { 221, 227, sizeof(::CMsgClientLoggedOff)},
  { 228, 235, sizeof(::CMsgClientNewLoginKey)},
  { 237, 243, sizeof(::CMsgClientNewLoginKeyAccepted)},
  { 244, 261, sizeof(::CMsgClientAccountInfo)},
  { 273, 279, sizeof(::CMsgClientChallengeRequest)},
  { 280, 286, sizeof(::CMsgClientChallengeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServerTimestampRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientServerTimestampResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientSecret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLogon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLogonResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestWebAPIAuthenticateUserNonce_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientRequestWebAPIAuthenticateUserNonceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLogOff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientLoggedOff_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientNewLoginKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientNewLoginKeyAccepted_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientAccountInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChallengeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientChallengeResponse_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fclientserver_5flogin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&steammessages_clientserver_login.proto"
  "\032\030steammessages_base.proto\"\025\n\023CMsgClient"
  "HeartBeat\"D\n CMsgClientServerTimestampRe"
  "quest\022 \n\030client_request_timestamp\030\001 \001(\004\""
  "b\n!CMsgClientServerTimestampResponse\022 \n\030"
  "client_request_timestamp\030\001 \001(\004\022\033\n\023server"
  "_timestamp_ms\030\002 \001(\004\"a\n\020CMsgClientSecret\022"
  "\017\n\007version\030\001 \001(\r\022\r\n\005appid\030\002 \001(\r\022\020\n\010devic"
  "eid\030\003 \001(\r\022\r\n\005nonce\030\004 \001(\006\022\014\n\004hmac\030\005 \001(\014\"\332"
  "\013\n\017CMsgClientLogon\022\030\n\020protocol_version\030\001"
  " \001(\r\022*\n\"deprecated_obfustucated_private_"
  "ip\030\002 \001(\r\022\017\n\007cell_id\030\003 \001(\r\022\027\n\017last_sessio"
  "n_id\030\004 \001(\r\022\036\n\026client_package_version\030\005 \001"
  "(\r\022\027\n\017client_language\030\006 \001(\t\022\026\n\016client_os"
  "_type\030\007 \001(\r\022\'\n\030should_remember_password\030"
  "\010 \001(\010:\005false\022\024\n\014wine_version\030\t \001(\t\022\025\n\rde"
  "precated_10\030\n \001(\r\022-\n\025obfuscated_private_"
  "ip\030\013 \001(\0132\016.CMsgIPAddress\022\034\n\024deprecated_p"
  "ublic_ip\030\024 \001(\r\022\021\n\tqos_level\030\025 \001(\r\022 \n\030cli"
  "ent_supplied_steam_id\030\026 \001(\006\022!\n\tpublic_ip"
  "\030\027 \001(\0132\016.CMsgIPAddress\022\022\n\nmachine_id\030\036 \001"
  "(\014\022\030\n\rlauncher_type\030\037 \001(\r:\0010\022\022\n\007ui_mode\030"
  "  \001(\r:\0010\022\024\n\tchat_mode\030! \001(\r:\0010\022\032\n\022steam2"
  "_auth_ticket\030) \001(\014\022\025\n\remail_address\030* \001("
  "\t\022 \n\030rtime32_account_creation\030+ \001(\007\022\024\n\014a"
  "ccount_name\0302 \001(\t\022\020\n\010password\0303 \001(\t\022\031\n\021g"
  "ame_server_token\0304 \001(\t\022\021\n\tlogin_key\030< \001("
  "\t\022+\n\034was_converted_deprecated_msg\030F \001(\010:"
  "\005false\022%\n\035anon_user_target_account_name\030"
  "P \001(\t\022\036\n\026resolved_user_steam_id\030Q \001(\006\022\032\n"
  "\022eresult_sentryfile\030R \001(\005\022\026\n\016sha_sentryf"
  "ile\030S \001(\014\022\021\n\tauth_code\030T \001(\t\022\020\n\010otp_type"
  "\030U \001(\005\022\021\n\totp_value\030V \001(\r\022\026\n\016otp_identif"
  "ier\030W \001(\t\022\035\n\025steam2_ticket_request\030X \001(\010"
  "\022\027\n\017sony_psn_ticket\030Z \001(\014\022\033\n\023sony_psn_se"
  "rvice_id\030[ \001(\t\0226\n\'create_new_psn_linked_"
  "account_if_needed\030\\ \001(\010:\005false\022\025\n\rsony_p"
  "sn_name\030] \001(\t\022\032\n\022game_server_app_id\030^ \001("
  "\005\022)\n!steamguard_dont_remember_computer\030_"
  " \001(\010\022\024\n\014machine_name\030` \001(\t\022\037\n\027machine_na"
  "me_userchosen\030a \001(\t\022\030\n\020country_override\030"
  "b \001(\t\022\024\n\014is_steam_box\030c \001(\010\022\032\n\022client_in"
  "stance_id\030d \001(\004\022\027\n\017two_factor_code\030e \001(\t"
  "\022$\n\034supports_rate_limit_response\030f \001(\010\022\027"
  "\n\017web_logon_nonce\030g \001(\t\022\027\n\017priority_reas"
  "on\030h \001(\005\0221\n\026embedded_client_secret\030i \001(\013"
  "2\021.CMsgClientSecret\"\335\005\n\027CMsgClientLogonR"
  "esponse\022\022\n\007eresult\030\001 \001(\005:\0012\022%\n\035out_of_ga"
  "me_heartbeat_seconds\030\002 \001(\005\022!\n\031in_game_he"
  "artbeat_seconds\030\003 \001(\005\022\034\n\024deprecated_publ"
  "ic_ip\030\004 \001(\r\022\033\n\023rtime32_server_time\030\005 \001(\007"
  "\022\025\n\raccount_flags\030\006 \001(\r\022\017\n\007cell_id\030\007 \001(\r"
  "\022\024\n\014email_domain\030\010 \001(\t\022\025\n\rsteam2_ticket\030"
  "\t \001(\014\022\030\n\020eresult_extended\030\n \001(\005\022&\n\036webap"
  "i_authenticate_user_nonce\030\013 \001(\t\022\036\n\026cell_"
  "id_ping_threshold\030\014 \001(\r\022\020\n\010use_pics\030\r \001("
  "\010\022\022\n\nvanity_url\030\016 \001(\t\022!\n\tpublic_ip\030\017 \001(\013"
  "2\016.CMsgIPAddress\022\037\n\027client_supplied_stea"
  "mid\030\024 \001(\006\022\027\n\017ip_country_code\030\025 \001(\t\022\031\n\021pa"
  "rental_settings\030\026 \001(\014\022\"\n\032parental_settin"
  "g_signature\030\027 \001(\014\022&\n\036count_loginfailures"
  "_to_migrate\030\030 \001(\005\022$\n\034count_disconnects_t"
  "o_migrate\030\031 \001(\005\022#\n\033ogs_data_report_time_"
  "window\030\032 \001(\005\022\032\n\022client_instance_id\030\033 \001(\004"
  "\022!\n\031force_client_update_check\030\034 \001(\010\"F\n,C"
  "MsgClientRequestWebAPIAuthenticateUserNo"
  "nce\022\026\n\ntoken_type\030\001 \001(\005:\002-1\"\212\001\n4CMsgClie"
  "ntRequestWebAPIAuthenticateUserNonceResp"
  "onse\022\022\n\007eresult\030\001 \001(\005:\0012\022&\n\036webapi_authe"
  "nticate_user_nonce\030\013 \001(\t\022\026\n\ntoken_type\030\003"
  " \001(\005:\002-1\"\022\n\020CMsgClientLogOff\")\n\023CMsgClie"
  "ntLoggedOff\022\022\n\007eresult\030\001 \001(\005:\0012\"=\n\025CMsgC"
  "lientNewLoginKey\022\021\n\tunique_id\030\001 \001(\r\022\021\n\tl"
  "ogin_key\030\002 \001(\t\"2\n\035CMsgClientNewLoginKeyA"
  "ccepted\022\021\n\tunique_id\030\001 \001(\r\"\356\002\n\025CMsgClien"
  "tAccountInfo\022\024\n\014persona_name\030\001 \001(\t\022\022\n\nip"
  "_country\030\002 \001(\t\022\036\n\026count_authed_computers"
  "\030\005 \001(\005\022\025\n\raccount_flags\030\007 \001(\r\022\023\n\013faceboo"
  "k_id\030\010 \001(\004\022\025\n\rfacebook_name\030\t \001(\t\022%\n\035ste"
  "amguard_notify_newmachines\030\016 \001(\010\022+\n#stea"
  "mguard_machine_name_user_chosen\030\017 \001(\t\022\031\n"
  "\021is_phone_verified\030\020 \001(\010\022\030\n\020two_factor_s"
  "tate\030\021 \001(\r\022\034\n\024is_phone_identifying\030\022 \001(\010"
  "\022!\n\031is_phone_needing_reverify\030\023 \001(\010\"-\n\032C"
  "MsgClientChallengeRequest\022\017\n\007steamid\030\001 \001"
  "(\006\"0\n\033CMsgClientChallengeResponse\022\021\n\tcha"
  "llenge\030\001 \001(\006B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fclientserver_5flogin_2eproto_deps[1] = {
  &::descriptor_table_steammessages_5fbase_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fclientserver_5flogin_2eproto = {
  false, false, 3459, descriptor_table_protodef_steammessages_5fclientserver_5flogin_2eproto, "steammessages_clientserver_login.proto", 
  &descriptor_table_steammessages_5fclientserver_5flogin_2eproto_once, descriptor_table_steammessages_5fclientserver_5flogin_2eproto_deps, 1, 15,
  schemas, file_default_instances, TableStruct_steammessages_5fclientserver_5flogin_2eproto::offsets,
  file_level_metadata_steammessages_5fclientserver_5flogin_2eproto, file_level_enum_descriptors_steammessages_5fclientserver_5flogin_2eproto, file_level_service_descriptors_steammessages_5fclientserver_5flogin_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fclientserver_5flogin_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fclientserver_5flogin_2eproto);
  return descriptor_table_steammessages_5fclientserver_5flogin_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fclientserver_5flogin_2eproto(&descriptor_table_steammessages_5fclientserver_5flogin_2eproto);

// ===================================================================

class CMsgClientHeartBeat::_Internal {
 public:
};

CMsgClientHeartBeat::CMsgClientHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientHeartBeat)
}
CMsgClientHeartBeat::CMsgClientHeartBeat(const CMsgClientHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientHeartBeat)
}

void CMsgClientHeartBeat::SharedCtor() {
}

CMsgClientHeartBeat::~CMsgClientHeartBeat() {
  // @@protoc_insertion_point(destructor:CMsgClientHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientHeartBeat::ArenaDtor(void* object) {
  CMsgClientHeartBeat* _this = reinterpret_cast< CMsgClientHeartBeat* >(object);
  (void)_this;
}
void CMsgClientHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientHeartBeat)
  return target;
}

size_t CMsgClientHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientHeartBeat)
    MergeFrom(*source);
  }
}

void CMsgClientHeartBeat::MergeFrom(const CMsgClientHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHeartBeat::CopyFrom(const CMsgClientHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHeartBeat::IsInitialized() const {
  return true;
}

void CMsgClientHeartBeat::InternalSwap(CMsgClientHeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientHeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientServerTimestampRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServerTimestampRequest>()._has_bits_);
  static void set_has_client_request_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServerTimestampRequest)
}
CMsgClientServerTimestampRequest::CMsgClientServerTimestampRequest(const CMsgClientServerTimestampRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_request_timestamp_ = from.client_request_timestamp_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientServerTimestampRequest)
}

void CMsgClientServerTimestampRequest::SharedCtor() {
client_request_timestamp_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientServerTimestampRequest::~CMsgClientServerTimestampRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientServerTimestampRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientServerTimestampRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientServerTimestampRequest::ArenaDtor(void* object) {
  CMsgClientServerTimestampRequest* _this = reinterpret_cast< CMsgClientServerTimestampRequest* >(object);
  (void)_this;
}
void CMsgClientServerTimestampRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServerTimestampRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServerTimestampRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServerTimestampRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_request_timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServerTimestampRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 client_request_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_request_timestamp(&has_bits);
          client_request_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientServerTimestampRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServerTimestampRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_request_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServerTimestampRequest)
  return target;
}

size_t CMsgClientServerTimestampRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServerTimestampRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 client_request_timestamp = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_client_request_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServerTimestampRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerTimestampRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientServerTimestampRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientServerTimestampRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientServerTimestampRequest)
    MergeFrom(*source);
  }
}

void CMsgClientServerTimestampRequest::MergeFrom(const CMsgClientServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServerTimestampRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_request_timestamp()) {
    _internal_set_client_request_timestamp(from._internal_client_request_timestamp());
  }
}

void CMsgClientServerTimestampRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerTimestampRequest::CopyFrom(const CMsgClientServerTimestampRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServerTimestampRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampRequest::IsInitialized() const {
  return true;
}

void CMsgClientServerTimestampRequest::InternalSwap(CMsgClientServerTimestampRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_request_timestamp_, other->client_request_timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServerTimestampRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientServerTimestampResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientServerTimestampResponse>()._has_bits_);
  static void set_has_client_request_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_server_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientServerTimestampResponse)
}
CMsgClientServerTimestampResponse::CMsgClientServerTimestampResponse(const CMsgClientServerTimestampResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&client_request_timestamp_, &from.client_request_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_timestamp_ms_) -
    reinterpret_cast<char*>(&client_request_timestamp_)) + sizeof(server_timestamp_ms_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientServerTimestampResponse)
}

void CMsgClientServerTimestampResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_request_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_timestamp_ms_) -
    reinterpret_cast<char*>(&client_request_timestamp_)) + sizeof(server_timestamp_ms_));
}

CMsgClientServerTimestampResponse::~CMsgClientServerTimestampResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientServerTimestampResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientServerTimestampResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientServerTimestampResponse::ArenaDtor(void* object) {
  CMsgClientServerTimestampResponse* _this = reinterpret_cast< CMsgClientServerTimestampResponse* >(object);
  (void)_this;
}
void CMsgClientServerTimestampResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientServerTimestampResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientServerTimestampResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientServerTimestampResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_request_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_timestamp_ms_) -
        reinterpret_cast<char*>(&client_request_timestamp_)) + sizeof(server_timestamp_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientServerTimestampResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 client_request_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_client_request_timestamp(&has_bits);
          client_request_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 server_timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_server_timestamp_ms(&has_bits);
          server_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientServerTimestampResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientServerTimestampResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 client_request_timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_request_timestamp(), target);
  }

  // optional uint64 server_timestamp_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_server_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientServerTimestampResponse)
  return target;
}

size_t CMsgClientServerTimestampResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientServerTimestampResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_request_timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_request_timestamp());
    }

    // optional uint64 server_timestamp_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_server_timestamp_ms());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientServerTimestampResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientServerTimestampResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientServerTimestampResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientServerTimestampResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientServerTimestampResponse)
    MergeFrom(*source);
  }
}

void CMsgClientServerTimestampResponse::MergeFrom(const CMsgClientServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientServerTimestampResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_request_timestamp_ = from.client_request_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_timestamp_ms_ = from.server_timestamp_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientServerTimestampResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientServerTimestampResponse::CopyFrom(const CMsgClientServerTimestampResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientServerTimestampResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientServerTimestampResponse::IsInitialized() const {
  return true;
}

void CMsgClientServerTimestampResponse::InternalSwap(CMsgClientServerTimestampResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientServerTimestampResponse, server_timestamp_ms_)
      + sizeof(CMsgClientServerTimestampResponse::server_timestamp_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientServerTimestampResponse, client_request_timestamp_)>(
          reinterpret_cast<char*>(&client_request_timestamp_),
          reinterpret_cast<char*>(&other->client_request_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientServerTimestampResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientSecret::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientSecret>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hmac(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientSecret::CMsgClientSecret(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientSecret)
}
CMsgClientSecret::CMsgClientSecret(const CMsgClientSecret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hmac()) {
    hmac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hmac(), 
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&version_)) + sizeof(deviceid_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientSecret)
}

void CMsgClientSecret::SharedCtor() {
hmac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&version_)) + sizeof(deviceid_));
}

CMsgClientSecret::~CMsgClientSecret() {
  // @@protoc_insertion_point(destructor:CMsgClientSecret)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientSecret::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hmac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientSecret::ArenaDtor(void* object) {
  CMsgClientSecret* _this = reinterpret_cast< CMsgClientSecret* >(object);
  (void)_this;
}
void CMsgClientSecret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientSecret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientSecret::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientSecret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hmac_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deviceid_) -
        reinterpret_cast<char*>(&version_)) + sizeof(deviceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientSecret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deviceid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_nonce(&has_bits);
          nonce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes hmac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hmac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientSecret::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientSecret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional uint32 deviceid = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_deviceid(), target);
  }

  // optional fixed64 nonce = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_nonce(), target);
  }

  // optional bytes hmac = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_hmac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientSecret)
  return target;
}

size_t CMsgClientSecret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientSecret)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes hmac = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_hmac());
    }

    // optional uint32 version = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_version());
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional fixed64 nonce = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 deviceid = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deviceid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientSecret::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientSecret)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientSecret* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientSecret>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientSecret)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientSecret)
    MergeFrom(*source);
  }
}

void CMsgClientSecret::MergeFrom(const CMsgClientSecret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientSecret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hmac(from._internal_hmac());
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00000008u) {
      nonce_ = from.nonce_;
    }
    if (cached_has_bits & 0x00000010u) {
      deviceid_ = from.deviceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientSecret::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientSecret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientSecret::CopyFrom(const CMsgClientSecret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientSecret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientSecret::IsInitialized() const {
  return true;
}

void CMsgClientSecret::InternalSwap(CMsgClientSecret* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  hmac_.Swap(&other->hmac_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientSecret, deviceid_)
      + sizeof(CMsgClientSecret::deviceid_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientSecret, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientSecret::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLogon::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLogon>()._has_bits_);
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_deprecated_obfustucated_private_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_last_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_client_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_client_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_should_remember_password(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_wine_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deprecated_10(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::CMsgIPAddress& obfuscated_private_ip(const CMsgClientLogon* msg);
  static void set_has_obfuscated_private_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_qos_level(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_client_supplied_steam_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgClientLogon* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_machine_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_launcher_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ui_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_chat_mode(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_steam2_auth_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_email_address(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rtime32_account_creation(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_password(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_game_server_token(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_login_key(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_was_converted_deprecated_msg(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_anon_user_target_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_resolved_user_steam_id(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_eresult_sentryfile(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_sha_sentryfile(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_auth_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_otp_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_otp_value(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_otp_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_steam2_ticket_request(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_sony_psn_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_sony_psn_service_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_create_new_psn_linked_account_if_needed(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_sony_psn_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_game_server_app_id(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_steamguard_dont_remember_computer(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_machine_name(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_machine_name_userchosen(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_country_override(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_is_steam_box(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_two_factor_code(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_supports_rate_limit_response(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_web_logon_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_priority_reason(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::CMsgClientSecret& embedded_client_secret(const CMsgClientLogon* msg);
  static void set_has_embedded_client_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::CMsgIPAddress&
CMsgClientLogon::_Internal::obfuscated_private_ip(const CMsgClientLogon* msg) {
  return *msg->obfuscated_private_ip_;
}
const ::CMsgIPAddress&
CMsgClientLogon::_Internal::public_ip(const CMsgClientLogon* msg) {
  return *msg->public_ip_;
}
const ::CMsgClientSecret&
CMsgClientLogon::_Internal::embedded_client_secret(const CMsgClientLogon* msg) {
  return *msg->embedded_client_secret_;
}
void CMsgClientLogon::clear_obfuscated_private_ip() {
  if (obfuscated_private_ip_ != nullptr) obfuscated_private_ip_->Clear();
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgClientLogon::clear_public_ip() {
  if (public_ip_ != nullptr) public_ip_->Clear();
  _has_bits_[0] &= ~0x00400000u;
}
CMsgClientLogon::CMsgClientLogon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLogon)
}
CMsgClientLogon::CMsgClientLogon(const CMsgClientLogon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_language()) {
    client_language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_language(), 
      GetArena());
  }
  wine_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_wine_version()) {
    wine_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_wine_version(), 
      GetArena());
  }
  machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_machine_id()) {
    machine_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_id(), 
      GetArena());
  }
  steam2_auth_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_steam2_auth_ticket()) {
    steam2_auth_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steam2_auth_ticket(), 
      GetArena());
  }
  email_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email_address()) {
    email_address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_address(), 
      GetArena());
  }
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_password()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  game_server_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_game_server_token()) {
    game_server_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_game_server_token(), 
      GetArena());
  }
  login_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_login_key()) {
    login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_key(), 
      GetArena());
  }
  anon_user_target_account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_anon_user_target_account_name()) {
    anon_user_target_account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_anon_user_target_account_name(), 
      GetArena());
  }
  sha_sentryfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sha_sentryfile()) {
    sha_sentryfile_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha_sentryfile(), 
      GetArena());
  }
  auth_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auth_code()) {
    auth_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_code(), 
      GetArena());
  }
  otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_otp_identifier()) {
    otp_identifier_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_otp_identifier(), 
      GetArena());
  }
  sony_psn_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sony_psn_ticket()) {
    sony_psn_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sony_psn_ticket(), 
      GetArena());
  }
  sony_psn_service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sony_psn_service_id()) {
    sony_psn_service_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sony_psn_service_id(), 
      GetArena());
  }
  sony_psn_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sony_psn_name()) {
    sony_psn_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sony_psn_name(), 
      GetArena());
  }
  machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_machine_name()) {
    machine_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name(), 
      GetArena());
  }
  machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_machine_name_userchosen()) {
    machine_name_userchosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_machine_name_userchosen(), 
      GetArena());
  }
  country_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_override()) {
    country_override_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_override(), 
      GetArena());
  }
  two_factor_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_two_factor_code()) {
    two_factor_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_two_factor_code(), 
      GetArena());
  }
  web_logon_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_web_logon_nonce()) {
    web_logon_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_web_logon_nonce(), 
      GetArena());
  }
  if (from._internal_has_obfuscated_private_ip()) {
    obfuscated_private_ip_ = new ::CMsgIPAddress(*from.obfuscated_private_ip_);
  } else {
    obfuscated_private_ip_ = nullptr;
  }
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::CMsgIPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  if (from._internal_has_embedded_client_secret()) {
    embedded_client_secret_ = new ::CMsgClientSecret(*from.embedded_client_secret_);
  } else {
    embedded_client_secret_ = nullptr;
  }
  ::memcpy(&protocol_version_, &from.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_reason_) -
    reinterpret_cast<char*>(&protocol_version_)) + sizeof(priority_reason_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLogon)
}

void CMsgClientLogon::SharedCtor() {
client_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
wine_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
machine_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steam2_auth_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
email_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
game_server_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
login_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
anon_user_target_account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_sentryfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auth_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
otp_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sony_psn_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sony_psn_service_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sony_psn_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
machine_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
machine_name_userchosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_override_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
two_factor_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
web_logon_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obfuscated_private_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_reason_) -
    reinterpret_cast<char*>(&obfuscated_private_ip_)) + sizeof(priority_reason_));
}

CMsgClientLogon::~CMsgClientLogon() {
  // @@protoc_insertion_point(destructor:CMsgClientLogon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLogon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  client_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  wine_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steam2_auth_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  game_server_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  login_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anon_user_target_account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_sentryfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  otp_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sony_psn_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sony_psn_service_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sony_psn_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  machine_name_userchosen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_override_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  two_factor_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  web_logon_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete obfuscated_private_ip_;
  if (this != internal_default_instance()) delete public_ip_;
  if (this != internal_default_instance()) delete embedded_client_secret_;
}

void CMsgClientLogon::ArenaDtor(void* object) {
  CMsgClientLogon* _this = reinterpret_cast< CMsgClientLogon* >(object);
  (void)_this;
}
void CMsgClientLogon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLogon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLogon::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLogon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      client_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      wine_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      machine_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      steam2_auth_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      email_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      game_server_token_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      login_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      anon_user_target_account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      sha_sentryfile_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      auth_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      otp_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      sony_psn_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      sony_psn_service_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      sony_psn_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      machine_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      machine_name_userchosen_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      country_override_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      two_factor_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      web_logon_nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(obfuscated_private_ip_ != nullptr);
      obfuscated_private_ip_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(public_ip_ != nullptr);
      public_ip_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(embedded_client_secret_ != nullptr);
      embedded_client_secret_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deprecated_public_ip_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(deprecated_public_ip_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&client_supplied_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&was_converted_deprecated_msg_) -
        reinterpret_cast<char*>(&client_supplied_steam_id_)) + sizeof(was_converted_deprecated_msg_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&steam2_ticket_request_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_instance_id_) -
        reinterpret_cast<char*>(&steam2_ticket_request_)) + sizeof(client_instance_id_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&steamguard_dont_remember_computer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&priority_reason_) -
        reinterpret_cast<char*>(&steamguard_dont_remember_computer_)) + sizeof(priority_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLogon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_protocol_version(&_has_bits_);
          protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_obfustucated_private_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deprecated_obfustucated_private_ip(&_has_bits_);
          deprecated_obfustucated_private_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cell_id(&_has_bits_);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 last_session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_last_session_id(&_has_bits_);
          last_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_package_version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_client_package_version(&_has_bits_);
          client_package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string client_language = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_client_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.client_language");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_os_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_client_os_type(&_has_bits_);
          client_os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool should_remember_password = 8 [default = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_should_remember_password(&_has_bits_);
          should_remember_password_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string wine_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_wine_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.wine_version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_10 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_deprecated_10(&_has_bits_);
          deprecated_10_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress obfuscated_private_ip = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_obfuscated_private_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_deprecated_public_ip(&_has_bits_);
          deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 qos_level = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_qos_level(&_has_bits_);
          qos_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 client_supplied_steam_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_client_supplied_steam_id(&_has_bits_);
          client_supplied_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes machine_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_machine_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 launcher_type = 31 [default = 0];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_launcher_type(&_has_bits_);
          launcher_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ui_mode = 32 [default = 0];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ui_mode(&_has_bits_);
          ui_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 chat_mode = 33 [default = 0];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_chat_mode(&_has_bits_);
          chat_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes steam2_auth_ticket = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_steam2_auth_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string email_address = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_email_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.email_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 rtime32_account_creation = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_rtime32_account_creation(&_has_bits_);
          rtime32_account_creation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string account_name = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string password = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.password");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string game_server_token = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_game_server_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.game_server_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string login_key = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_login_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.login_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool was_converted_deprecated_msg = 70 [default = false];
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_was_converted_deprecated_msg(&_has_bits_);
          was_converted_deprecated_msg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string anon_user_target_account_name = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_anon_user_target_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.anon_user_target_account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 resolved_user_steam_id = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_resolved_user_steam_id(&_has_bits_);
          resolved_user_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult_sentryfile = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_eresult_sentryfile(&_has_bits_);
          eresult_sentryfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sha_sentryfile = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_sha_sentryfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string auth_code = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_auth_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.auth_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 otp_type = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_otp_type(&_has_bits_);
          otp_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 otp_value = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_otp_value(&_has_bits_);
          otp_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string otp_identifier = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_otp_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.otp_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steam2_ticket_request = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_steam2_ticket_request(&_has_bits_);
          steam2_ticket_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes sony_psn_ticket = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_sony_psn_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sony_psn_service_id = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_sony_psn_service_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.sony_psn_service_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_create_new_psn_linked_account_if_needed(&_has_bits_);
          create_new_psn_linked_account_if_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sony_psn_name = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_sony_psn_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.sony_psn_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_server_app_id = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_game_server_app_id(&_has_bits_);
          game_server_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamguard_dont_remember_computer = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_steamguard_dont_remember_computer(&_has_bits_);
          steamguard_dont_remember_computer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_machine_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.machine_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string machine_name_userchosen = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_machine_name_userchosen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.machine_name_userchosen");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_override = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_country_override();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.country_override");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_steam_box = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_steam_box(&_has_bits_);
          is_steam_box_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 client_instance_id = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_client_instance_id(&_has_bits_);
          client_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string two_factor_code = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_two_factor_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.two_factor_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool supports_rate_limit_response = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_supports_rate_limit_response(&_has_bits_);
          supports_rate_limit_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string web_logon_nonce = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_web_logon_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogon.web_logon_nonce");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 priority_reason = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_priority_reason(&_has_bits_);
          priority_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgClientSecret embedded_client_secret = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_embedded_client_secret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLogon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLogon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 protocol_version = 1;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_protocol_version(), target);
  }

  // optional uint32 deprecated_obfustucated_private_ip = 2;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deprecated_obfustucated_private_ip(), target);
  }

  // optional uint32 cell_id = 3;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cell_id(), target);
  }

  // optional uint32 last_session_id = 4;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_session_id(), target);
  }

  // optional uint32 client_package_version = 5;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_client_package_version(), target);
  }

  // optional string client_language = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_language().data(), static_cast<int>(this->_internal_client_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.client_language");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_client_language(), target);
  }

  // optional uint32 client_os_type = 7;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_client_os_type(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool should_remember_password = 8 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_should_remember_password(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string wine_version = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_wine_version().data(), static_cast<int>(this->_internal_wine_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.wine_version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_wine_version(), target);
  }

  // optional uint32 deprecated_10 = 10;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_deprecated_10(), target);
  }

  // optional .CMsgIPAddress obfuscated_private_ip = 11;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::obfuscated_private_ip(this), target, stream);
  }

  // optional uint32 deprecated_public_ip = 20;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_deprecated_public_ip(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 qos_level = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_qos_level(), target);
  }

  // optional fixed64 client_supplied_steam_id = 22;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(22, this->_internal_client_supplied_steam_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgIPAddress public_ip = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::public_ip(this), target, stream);
  }

  // optional bytes machine_id = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        30, this->_internal_machine_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 launcher_type = 31 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_launcher_type(), target);
  }

  // optional uint32 ui_mode = 32 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_ui_mode(), target);
  }

  // optional uint32 chat_mode = 33 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_chat_mode(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes steam2_auth_ticket = 41;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        41, this->_internal_steam2_auth_ticket(), target);
  }

  // optional string email_address = 42;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email_address().data(), static_cast<int>(this->_internal_email_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.email_address");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_email_address(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 rtime32_account_creation = 43;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(43, this->_internal_rtime32_account_creation(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 50;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.account_name");
    target = stream->WriteStringMaybeAliased(
        50, this->_internal_account_name(), target);
  }

  // optional string password = 51;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.password");
    target = stream->WriteStringMaybeAliased(
        51, this->_internal_password(), target);
  }

  // optional string game_server_token = 52;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_game_server_token().data(), static_cast<int>(this->_internal_game_server_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.game_server_token");
    target = stream->WriteStringMaybeAliased(
        52, this->_internal_game_server_token(), target);
  }

  // optional string login_key = 60;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_login_key().data(), static_cast<int>(this->_internal_login_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.login_key");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_login_key(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool was_converted_deprecated_msg = 70 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(70, this->_internal_was_converted_deprecated_msg(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string anon_user_target_account_name = 80;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_anon_user_target_account_name().data(), static_cast<int>(this->_internal_anon_user_target_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.anon_user_target_account_name");
    target = stream->WriteStringMaybeAliased(
        80, this->_internal_anon_user_target_account_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed64 resolved_user_steam_id = 81;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(81, this->_internal_resolved_user_steam_id(), target);
  }

  // optional int32 eresult_sentryfile = 82;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(82, this->_internal_eresult_sentryfile(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sha_sentryfile = 83;
  if (cached_has_bits & 0x00000400u) {
    target = stream->WriteBytesMaybeAliased(
        83, this->_internal_sha_sentryfile(), target);
  }

  // optional string auth_code = 84;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_auth_code().data(), static_cast<int>(this->_internal_auth_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.auth_code");
    target = stream->WriteStringMaybeAliased(
        84, this->_internal_auth_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 otp_type = 85;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(85, this->_internal_otp_type(), target);
  }

  // optional uint32 otp_value = 86;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(86, this->_internal_otp_value(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string otp_identifier = 87;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_otp_identifier().data(), static_cast<int>(this->_internal_otp_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.otp_identifier");
    target = stream->WriteStringMaybeAliased(
        87, this->_internal_otp_identifier(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool steam2_ticket_request = 88;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(88, this->_internal_steam2_ticket_request(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes sony_psn_ticket = 90;
  if (cached_has_bits & 0x00002000u) {
    target = stream->WriteBytesMaybeAliased(
        90, this->_internal_sony_psn_ticket(), target);
  }

  // optional string sony_psn_service_id = 91;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sony_psn_service_id().data(), static_cast<int>(this->_internal_sony_psn_service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.sony_psn_service_id");
    target = stream->WriteStringMaybeAliased(
        91, this->_internal_sony_psn_service_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(92, this->_internal_create_new_psn_linked_account_if_needed(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string sony_psn_name = 93;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sony_psn_name().data(), static_cast<int>(this->_internal_sony_psn_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.sony_psn_name");
    target = stream->WriteStringMaybeAliased(
        93, this->_internal_sony_psn_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 game_server_app_id = 94;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(94, this->_internal_game_server_app_id(), target);
  }

  // optional bool steamguard_dont_remember_computer = 95;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(95, this->_internal_steamguard_dont_remember_computer(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string machine_name = 96;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name().data(), static_cast<int>(this->_internal_machine_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.machine_name");
    target = stream->WriteStringMaybeAliased(
        96, this->_internal_machine_name(), target);
  }

  // optional string machine_name_userchosen = 97;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_machine_name_userchosen().data(), static_cast<int>(this->_internal_machine_name_userchosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.machine_name_userchosen");
    target = stream->WriteStringMaybeAliased(
        97, this->_internal_machine_name_userchosen(), target);
  }

  // optional string country_override = 98;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_override().data(), static_cast<int>(this->_internal_country_override().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.country_override");
    target = stream->WriteStringMaybeAliased(
        98, this->_internal_country_override(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_steam_box = 99;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(99, this->_internal_is_steam_box(), target);
  }

  // optional uint64 client_instance_id = 100;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(100, this->_internal_client_instance_id(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string two_factor_code = 101;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_two_factor_code().data(), static_cast<int>(this->_internal_two_factor_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.two_factor_code");
    target = stream->WriteStringMaybeAliased(
        101, this->_internal_two_factor_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool supports_rate_limit_response = 102;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(102, this->_internal_supports_rate_limit_response(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string web_logon_nonce = 103;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_web_logon_nonce().data(), static_cast<int>(this->_internal_web_logon_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogon.web_logon_nonce");
    target = stream->WriteStringMaybeAliased(
        103, this->_internal_web_logon_nonce(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 priority_reason = 104;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(104, this->_internal_priority_reason(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgClientSecret embedded_client_secret = 105;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        105, _Internal::embedded_client_secret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLogon)
  return target;
}

size_t CMsgClientLogon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLogon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string client_language = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_language());
    }

    // optional string wine_version = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wine_version());
    }

    // optional bytes machine_id = 30;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_machine_id());
    }

    // optional bytes steam2_auth_ticket = 41;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_steam2_auth_ticket());
    }

    // optional string email_address = 42;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_address());
    }

    // optional string account_name = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string password = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_password());
    }

    // optional string game_server_token = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_game_server_token());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string login_key = 60;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_key());
    }

    // optional string anon_user_target_account_name = 80;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_anon_user_target_account_name());
    }

    // optional bytes sha_sentryfile = 83;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sha_sentryfile());
    }

    // optional string auth_code = 84;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_auth_code());
    }

    // optional string otp_identifier = 87;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_otp_identifier());
    }

    // optional bytes sony_psn_ticket = 90;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_sony_psn_ticket());
    }

    // optional string sony_psn_service_id = 91;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sony_psn_service_id());
    }

    // optional string sony_psn_name = 93;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sony_psn_name());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string machine_name = 96;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name());
    }

    // optional string machine_name_userchosen = 97;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_machine_name_userchosen());
    }

    // optional string country_override = 98;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_override());
    }

    // optional string two_factor_code = 101;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_two_factor_code());
    }

    // optional string web_logon_nonce = 103;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_web_logon_nonce());
    }

    // optional .CMsgIPAddress obfuscated_private_ip = 11;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obfuscated_private_ip_);
    }

    // optional .CMsgIPAddress public_ip = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_ip_);
    }

    // optional .CMsgClientSecret embedded_client_secret = 105;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *embedded_client_secret_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 protocol_version = 1;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_protocol_version());
    }

    // optional uint32 deprecated_obfustucated_private_ip = 2;
    if (cached_has_bits & 0x02000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_obfustucated_private_ip());
    }

    // optional uint32 cell_id = 3;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

    // optional uint32 last_session_id = 4;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_last_session_id());
    }

    // optional uint32 client_package_version = 5;
    if (cached_has_bits & 0x10000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_package_version());
    }

    // optional uint32 client_os_type = 7;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_os_type());
    }

    // optional uint32 deprecated_10 = 10;
    if (cached_has_bits & 0x40000000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_10());
    }

    // optional uint32 deprecated_public_ip = 20;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_public_ip());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 client_supplied_steam_id = 22;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional uint32 qos_level = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_qos_level());
    }

    // optional uint32 launcher_type = 31 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_launcher_type());
    }

    // optional uint32 ui_mode = 32 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ui_mode());
    }

    // optional uint32 chat_mode = 33 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_chat_mode());
    }

    // optional fixed32 rtime32_account_creation = 43;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional bool should_remember_password = 8 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool was_converted_deprecated_msg = 70 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool steam2_ticket_request = 88;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool create_new_psn_linked_account_if_needed = 92 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional fixed64 resolved_user_steam_id = 81;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 8;
    }

    // optional int32 eresult_sentryfile = 82;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult_sentryfile());
    }

    // optional int32 otp_type = 85;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_otp_type());
    }

    // optional uint32 otp_value = 86;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_otp_value());
    }

    // optional int32 game_server_app_id = 94;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_server_app_id());
    }

    // optional uint64 client_instance_id = 100;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_instance_id());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional bool steamguard_dont_remember_computer = 95;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_steam_box = 99;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool supports_rate_limit_response = 102;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 priority_reason = 104;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_priority_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLogon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLogon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLogon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLogon)
    MergeFrom(*source);
  }
}

void CMsgClientLogon::MergeFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLogon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_language(from._internal_client_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_wine_version(from._internal_wine_version());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_machine_id(from._internal_machine_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_steam2_auth_ticket(from._internal_steam2_auth_ticket());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_email_address(from._internal_email_address());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_password(from._internal_password());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_game_server_token(from._internal_game_server_token());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_login_key(from._internal_login_key());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_anon_user_target_account_name(from._internal_anon_user_target_account_name());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_sha_sentryfile(from._internal_sha_sentryfile());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_auth_code(from._internal_auth_code());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_otp_identifier(from._internal_otp_identifier());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_sony_psn_ticket(from._internal_sony_psn_ticket());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_sony_psn_service_id(from._internal_sony_psn_service_id());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_sony_psn_name(from._internal_sony_psn_name());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_machine_name(from._internal_machine_name());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_machine_name_userchosen(from._internal_machine_name_userchosen());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_country_override(from._internal_country_override());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_two_factor_code(from._internal_two_factor_code());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_web_logon_nonce(from._internal_web_logon_nonce());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_mutable_obfuscated_private_ip()->::CMsgIPAddress::MergeFrom(from._internal_obfuscated_private_ip());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(from._internal_public_ip());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_mutable_embedded_client_secret()->::CMsgClientSecret::MergeFrom(from._internal_embedded_client_secret());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      deprecated_obfustucated_private_ip_ = from.deprecated_obfustucated_private_ip_;
    }
    if (cached_has_bits & 0x04000000u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      last_session_id_ = from.last_session_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      client_package_version_ = from.client_package_version_;
    }
    if (cached_has_bits & 0x20000000u) {
      client_os_type_ = from.client_os_type_;
    }
    if (cached_has_bits & 0x40000000u) {
      deprecated_10_ = from.deprecated_10_;
    }
    if (cached_has_bits & 0x80000000u) {
      deprecated_public_ip_ = from.deprecated_public_ip_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      client_supplied_steam_id_ = from.client_supplied_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      qos_level_ = from.qos_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      launcher_type_ = from.launcher_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      ui_mode_ = from.ui_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      chat_mode_ = from.chat_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      rtime32_account_creation_ = from.rtime32_account_creation_;
    }
    if (cached_has_bits & 0x00000040u) {
      should_remember_password_ = from.should_remember_password_;
    }
    if (cached_has_bits & 0x00000080u) {
      was_converted_deprecated_msg_ = from.was_converted_deprecated_msg_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      steam2_ticket_request_ = from.steam2_ticket_request_;
    }
    if (cached_has_bits & 0x00000200u) {
      create_new_psn_linked_account_if_needed_ = from.create_new_psn_linked_account_if_needed_;
    }
    if (cached_has_bits & 0x00000400u) {
      resolved_user_steam_id_ = from.resolved_user_steam_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      eresult_sentryfile_ = from.eresult_sentryfile_;
    }
    if (cached_has_bits & 0x00001000u) {
      otp_type_ = from.otp_type_;
    }
    if (cached_has_bits & 0x00002000u) {
      otp_value_ = from.otp_value_;
    }
    if (cached_has_bits & 0x00004000u) {
      game_server_app_id_ = from.game_server_app_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      client_instance_id_ = from.client_instance_id_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      steamguard_dont_remember_computer_ = from.steamguard_dont_remember_computer_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_steam_box_ = from.is_steam_box_;
    }
    if (cached_has_bits & 0x00040000u) {
      supports_rate_limit_response_ = from.supports_rate_limit_response_;
    }
    if (cached_has_bits & 0x00080000u) {
      priority_reason_ = from.priority_reason_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgClientLogon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogon::CopyFrom(const CMsgClientLogon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLogon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogon::IsInitialized() const {
  return true;
}

void CMsgClientLogon::InternalSwap(CMsgClientLogon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  client_language_.Swap(&other->client_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  wine_version_.Swap(&other->wine_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machine_id_.Swap(&other->machine_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  steam2_auth_ticket_.Swap(&other->steam2_auth_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_address_.Swap(&other->email_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  game_server_token_.Swap(&other->game_server_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  login_key_.Swap(&other->login_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  anon_user_target_account_name_.Swap(&other->anon_user_target_account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sha_sentryfile_.Swap(&other->sha_sentryfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_code_.Swap(&other->auth_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  otp_identifier_.Swap(&other->otp_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sony_psn_ticket_.Swap(&other->sony_psn_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sony_psn_service_id_.Swap(&other->sony_psn_service_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sony_psn_name_.Swap(&other->sony_psn_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machine_name_.Swap(&other->machine_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  machine_name_userchosen_.Swap(&other->machine_name_userchosen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_override_.Swap(&other->country_override_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  two_factor_code_.Swap(&other->two_factor_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  web_logon_nonce_.Swap(&other->web_logon_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLogon, priority_reason_)
      + sizeof(CMsgClientLogon::priority_reason_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLogon, obfuscated_private_ip_)>(
          reinterpret_cast<char*>(&obfuscated_private_ip_),
          reinterpret_cast<char*>(&other->obfuscated_private_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLogon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLogonResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLogonResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_out_of_game_heartbeat_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_in_game_heartbeat_seconds(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_deprecated_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rtime32_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_email_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steam2_ticket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult_extended(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_webapi_authenticate_user_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_id_ping_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_use_pics(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_vanity_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgIPAddress& public_ip(const CMsgClientLogonResponse* msg);
  static void set_has_public_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_client_supplied_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ip_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_parental_settings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_parental_setting_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_count_loginfailures_to_migrate(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_count_disconnects_to_migrate(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ogs_data_report_time_window(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_client_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_force_client_update_check(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
};

const ::CMsgIPAddress&
CMsgClientLogonResponse::_Internal::public_ip(const CMsgClientLogonResponse* msg) {
  return *msg->public_ip_;
}
void CMsgClientLogonResponse::clear_public_ip() {
  if (public_ip_ != nullptr) public_ip_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
CMsgClientLogonResponse::CMsgClientLogonResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLogonResponse)
}
CMsgClientLogonResponse::CMsgClientLogonResponse(const CMsgClientLogonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  email_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_email_domain()) {
    email_domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_email_domain(), 
      GetArena());
  }
  steam2_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_steam2_ticket()) {
    steam2_ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steam2_ticket(), 
      GetArena());
  }
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_webapi_authenticate_user_nonce()) {
    webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webapi_authenticate_user_nonce(), 
      GetArena());
  }
  vanity_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vanity_url()) {
    vanity_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_vanity_url(), 
      GetArena());
  }
  ip_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip_country_code()) {
    ip_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_country_code(), 
      GetArena());
  }
  parental_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parental_settings()) {
    parental_settings_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parental_settings(), 
      GetArena());
  }
  parental_setting_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parental_setting_signature()) {
    parental_setting_signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parental_setting_signature(), 
      GetArena());
  }
  if (from._internal_has_public_ip()) {
    public_ip_ = new ::CMsgIPAddress(*from.public_ip_);
  } else {
    public_ip_ = nullptr;
  }
  ::memcpy(&out_of_game_heartbeat_seconds_, &from.out_of_game_heartbeat_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&out_of_game_heartbeat_seconds_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientLogonResponse)
}

void CMsgClientLogonResponse::SharedCtor() {
email_domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steam2_ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
webapi_authenticate_user_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
vanity_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parental_settings_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parental_setting_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_instance_id_) -
    reinterpret_cast<char*>(&public_ip_)) + sizeof(client_instance_id_));
eresult_ = 2;
}

CMsgClientLogonResponse::~CMsgClientLogonResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientLogonResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLogonResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  email_domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steam2_ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  webapi_authenticate_user_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vanity_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parental_settings_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parental_setting_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete public_ip_;
}

void CMsgClientLogonResponse::ArenaDtor(void* object) {
  CMsgClientLogonResponse* _this = reinterpret_cast< CMsgClientLogonResponse* >(object);
  (void)_this;
}
void CMsgClientLogonResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLogonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLogonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLogonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      email_domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      steam2_ticket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      webapi_authenticate_user_nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      vanity_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ip_country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      parental_settings_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      parental_setting_signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(public_ip_ != nullptr);
      public_ip_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&out_of_game_heartbeat_seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cell_id_ping_threshold_) -
        reinterpret_cast<char*>(&out_of_game_heartbeat_seconds_)) + sizeof(cell_id_ping_threshold_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&client_supplied_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_instance_id_) -
        reinterpret_cast<char*>(&client_supplied_steamid_)) + sizeof(client_instance_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLogonResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 out_of_game_heartbeat_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_out_of_game_heartbeat_seconds(&has_bits);
          out_of_game_heartbeat_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 in_game_heartbeat_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_in_game_heartbeat_seconds(&has_bits);
          in_game_heartbeat_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deprecated_public_ip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deprecated_public_ip(&has_bits);
          deprecated_public_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 rtime32_server_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rtime32_server_time(&has_bits);
          rtime32_server_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_account_flags(&has_bits);
          account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string email_domain = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_email_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogonResponse.email_domain");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes steam2_ticket = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_steam2_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eresult_extended = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_eresult_extended(&has_bits);
          eresult_extended_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string webapi_authenticate_user_nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_webapi_authenticate_user_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogonResponse.webapi_authenticate_user_nonce");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id_ping_threshold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cell_id_ping_threshold(&has_bits);
          cell_id_ping_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_pics = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_use_pics(&has_bits);
          use_pics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string vanity_url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_vanity_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogonResponse.vanity_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgIPAddress public_ip = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 client_supplied_steamid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_client_supplied_steamid(&has_bits);
          client_supplied_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional string ip_country_code = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_ip_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientLogonResponse.ip_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes parental_settings = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_parental_settings();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes parental_setting_signature = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_parental_setting_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_loginfailures_to_migrate = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_count_loginfailures_to_migrate(&has_bits);
          count_loginfailures_to_migrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_disconnects_to_migrate = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_count_disconnects_to_migrate(&has_bits);
          count_disconnects_to_migrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ogs_data_report_time_window = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_ogs_data_report_time_window(&has_bits);
          ogs_data_report_time_window_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 client_instance_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_client_instance_id(&has_bits);
          client_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool force_client_update_check = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_force_client_update_check(&has_bits);
          force_client_update_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLogonResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLogonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 out_of_game_heartbeat_seconds = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_out_of_game_heartbeat_seconds(), target);
  }

  // optional int32 in_game_heartbeat_seconds = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_in_game_heartbeat_seconds(), target);
  }

  // optional uint32 deprecated_public_ip = 4;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deprecated_public_ip(), target);
  }

  // optional fixed32 rtime32_server_time = 5;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(5, this->_internal_rtime32_server_time(), target);
  }

  // optional uint32 account_flags = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_account_flags(), target);
  }

  // optional uint32 cell_id = 7;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cell_id(), target);
  }

  // optional string email_domain = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_email_domain().data(), static_cast<int>(this->_internal_email_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.email_domain");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_email_domain(), target);
  }

  // optional bytes steam2_ticket = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_steam2_ticket(), target);
  }

  // optional int32 eresult_extended = 10;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_eresult_extended(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webapi_authenticate_user_nonce().data(), static_cast<int>(this->_internal_webapi_authenticate_user_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.webapi_authenticate_user_nonce");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_webapi_authenticate_user_nonce(), target);
  }

  // optional uint32 cell_id_ping_threshold = 12;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cell_id_ping_threshold(), target);
  }

  // optional bool use_pics = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_use_pics(), target);
  }

  // optional string vanity_url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vanity_url().data(), static_cast<int>(this->_internal_vanity_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.vanity_url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_vanity_url(), target);
  }

  // optional .CMsgIPAddress public_ip = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::public_ip(this), target, stream);
  }

  // optional fixed64 client_supplied_steamid = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(20, this->_internal_client_supplied_steamid(), target);
  }

  // optional string ip_country_code = 21;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_country_code().data(), static_cast<int>(this->_internal_ip_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientLogonResponse.ip_country_code");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ip_country_code(), target);
  }

  // optional bytes parental_settings = 22;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        22, this->_internal_parental_settings(), target);
  }

  // optional bytes parental_setting_signature = 23;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteBytesMaybeAliased(
        23, this->_internal_parental_setting_signature(), target);
  }

  // optional int32 count_loginfailures_to_migrate = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(24, this->_internal_count_loginfailures_to_migrate(), target);
  }

  // optional int32 count_disconnects_to_migrate = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(25, this->_internal_count_disconnects_to_migrate(), target);
  }

  // optional int32 ogs_data_report_time_window = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_ogs_data_report_time_window(), target);
  }

  // optional uint64 client_instance_id = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_client_instance_id(), target);
  }

  // optional bool force_client_update_check = 28;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_force_client_update_check(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLogonResponse)
  return target;
}

size_t CMsgClientLogonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLogonResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string email_domain = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_email_domain());
    }

    // optional bytes steam2_ticket = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_steam2_ticket());
    }

    // optional string webapi_authenticate_user_nonce = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webapi_authenticate_user_nonce());
    }

    // optional string vanity_url = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_vanity_url());
    }

    // optional string ip_country_code = 21;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_country_code());
    }

    // optional bytes parental_settings = 22;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_parental_settings());
    }

    // optional bytes parental_setting_signature = 23;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_parental_setting_signature());
    }

    // optional .CMsgIPAddress public_ip = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *public_ip_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 out_of_game_heartbeat_seconds = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_out_of_game_heartbeat_seconds());
    }

    // optional int32 in_game_heartbeat_seconds = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_in_game_heartbeat_seconds());
    }

    // optional uint32 deprecated_public_ip = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deprecated_public_ip());
    }

    // optional fixed32 rtime32_server_time = 5;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 account_flags = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_flags());
    }

    // optional uint32 cell_id = 7;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

    // optional int32 eresult_extended = 10;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult_extended());
    }

    // optional uint32 cell_id_ping_threshold = 12;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id_ping_threshold());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional fixed64 client_supplied_steamid = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 8;
    }

    // optional bool use_pics = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool force_client_update_check = 28;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 count_loginfailures_to_migrate = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count_loginfailures_to_migrate());
    }

    // optional int32 count_disconnects_to_migrate = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count_disconnects_to_migrate());
    }

    // optional int32 ogs_data_report_time_window = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ogs_data_report_time_window());
    }

    // optional uint64 client_instance_id = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_client_instance_id());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLogonResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogonResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLogonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLogonResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLogonResponse)
    MergeFrom(*source);
  }
}

void CMsgClientLogonResponse::MergeFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLogonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_email_domain(from._internal_email_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_steam2_ticket(from._internal_steam2_ticket());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_webapi_authenticate_user_nonce(from._internal_webapi_authenticate_user_nonce());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_vanity_url(from._internal_vanity_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ip_country_code(from._internal_ip_country_code());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_parental_settings(from._internal_parental_settings());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_parental_setting_signature(from._internal_parental_setting_signature());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_public_ip()->::CMsgIPAddress::MergeFrom(from._internal_public_ip());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      out_of_game_heartbeat_seconds_ = from.out_of_game_heartbeat_seconds_;
    }
    if (cached_has_bits & 0x00000200u) {
      in_game_heartbeat_seconds_ = from.in_game_heartbeat_seconds_;
    }
    if (cached_has_bits & 0x00000400u) {
      deprecated_public_ip_ = from.deprecated_public_ip_;
    }
    if (cached_has_bits & 0x00000800u) {
      rtime32_server_time_ = from.rtime32_server_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00002000u) {
      cell_id_ = from.cell_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      eresult_extended_ = from.eresult_extended_;
    }
    if (cached_has_bits & 0x00008000u) {
      cell_id_ping_threshold_ = from.cell_id_ping_threshold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      client_supplied_steamid_ = from.client_supplied_steamid_;
    }
    if (cached_has_bits & 0x00020000u) {
      use_pics_ = from.use_pics_;
    }
    if (cached_has_bits & 0x00040000u) {
      force_client_update_check_ = from.force_client_update_check_;
    }
    if (cached_has_bits & 0x00080000u) {
      count_loginfailures_to_migrate_ = from.count_loginfailures_to_migrate_;
    }
    if (cached_has_bits & 0x00100000u) {
      count_disconnects_to_migrate_ = from.count_disconnects_to_migrate_;
    }
    if (cached_has_bits & 0x00200000u) {
      ogs_data_report_time_window_ = from.ogs_data_report_time_window_;
    }
    if (cached_has_bits & 0x00400000u) {
      client_instance_id_ = from.client_instance_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientLogonResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogonResponse::CopyFrom(const CMsgClientLogonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLogonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogonResponse::IsInitialized() const {
  return true;
}

void CMsgClientLogonResponse::InternalSwap(CMsgClientLogonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_domain_.Swap(&other->email_domain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  steam2_ticket_.Swap(&other->steam2_ticket_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  webapi_authenticate_user_nonce_.Swap(&other->webapi_authenticate_user_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vanity_url_.Swap(&other->vanity_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_country_code_.Swap(&other->ip_country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parental_settings_.Swap(&other->parental_settings_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  parental_setting_signature_.Swap(&other->parental_setting_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientLogonResponse, client_instance_id_)
      + sizeof(CMsgClientLogonResponse::client_instance_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientLogonResponse, public_ip_)>(
          reinterpret_cast<char*>(&public_ip_),
          reinterpret_cast<char*>(&other->public_ip_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLogonResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientRequestWebAPIAuthenticateUserNonce::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestWebAPIAuthenticateUserNonce>()._has_bits_);
  static void set_has_token_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestWebAPIAuthenticateUserNonce)
}
CMsgClientRequestWebAPIAuthenticateUserNonce::CMsgClientRequestWebAPIAuthenticateUserNonce(const CMsgClientRequestWebAPIAuthenticateUserNonce& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_type_ = from.token_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestWebAPIAuthenticateUserNonce)
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedCtor() {
token_type_ = -1;
}

CMsgClientRequestWebAPIAuthenticateUserNonce::~CMsgClientRequestWebAPIAuthenticateUserNonce() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestWebAPIAuthenticateUserNonce)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::ArenaDtor(void* object) {
  CMsgClientRequestWebAPIAuthenticateUserNonce* _this = reinterpret_cast< CMsgClientRequestWebAPIAuthenticateUserNonce* >(object);
  (void)_this;
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestWebAPIAuthenticateUserNonce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_type_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestWebAPIAuthenticateUserNonce::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 token_type = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_token_type(&has_bits);
          token_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRequestWebAPIAuthenticateUserNonce::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 token_type = 1 [default = -1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_token_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestWebAPIAuthenticateUserNonce)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 token_type = 1 [default = -1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_token_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonce* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRequestWebAPIAuthenticateUserNonce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRequestWebAPIAuthenticateUserNonce)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRequestWebAPIAuthenticateUserNonce)
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_token_type()) {
    _internal_set_token_type(from._internal_token_type());
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestWebAPIAuthenticateUserNonce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonce::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonce::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonce* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(token_type_, other->token_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestWebAPIAuthenticateUserNonce::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_webapi_authenticate_user_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}
CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CMsgClientRequestWebAPIAuthenticateUserNonceResponse(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  webapi_authenticate_user_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_webapi_authenticate_user_nonce()) {
    webapi_authenticate_user_nonce_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webapi_authenticate_user_nonce(), 
      GetArena());
  }
  ::memcpy(&eresult_, &from.eresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&token_type_) -
    reinterpret_cast<char*>(&eresult_)) + sizeof(token_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedCtor() {
webapi_authenticate_user_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eresult_ = 2;
token_type_ = -1;
}

CMsgClientRequestWebAPIAuthenticateUserNonceResponse::~CMsgClientRequestWebAPIAuthenticateUserNonceResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  webapi_authenticate_user_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ArenaDtor(void* object) {
  CMsgClientRequestWebAPIAuthenticateUserNonceResponse* _this = reinterpret_cast< CMsgClientRequestWebAPIAuthenticateUserNonceResponse* >(object);
  (void)_this;
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      webapi_authenticate_user_nonce_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2;
    token_type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 token_type = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_token_type(&has_bits);
          token_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string webapi_authenticate_user_nonce = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_webapi_authenticate_user_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientRequestWebAPIAuthenticateUserNonceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 token_type = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_token_type(), target);
  }

  // optional string webapi_authenticate_user_nonce = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webapi_authenticate_user_nonce().data(), static_cast<int>(this->_internal_webapi_authenticate_user_nonce().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientRequestWebAPIAuthenticateUserNonceResponse.webapi_authenticate_user_nonce");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_webapi_authenticate_user_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  return target;
}

size_t CMsgClientRequestWebAPIAuthenticateUserNonceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string webapi_authenticate_user_nonce = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webapi_authenticate_user_nonce());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eresult());
    }

    // optional int32 token_type = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_token_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientRequestWebAPIAuthenticateUserNonceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientRequestWebAPIAuthenticateUserNonceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
    MergeFrom(*source);
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::MergeFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_webapi_authenticate_user_nonce(from._internal_webapi_authenticate_user_nonce());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000004u) {
      token_type_ = from.token_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::CopyFrom(const CMsgClientRequestWebAPIAuthenticateUserNonceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientRequestWebAPIAuthenticateUserNonceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientRequestWebAPIAuthenticateUserNonceResponse::IsInitialized() const {
  return true;
}

void CMsgClientRequestWebAPIAuthenticateUserNonceResponse::InternalSwap(CMsgClientRequestWebAPIAuthenticateUserNonceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  webapi_authenticate_user_nonce_.Swap(&other->webapi_authenticate_user_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eresult_, other->eresult_);
  swap(token_type_, other->token_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientRequestWebAPIAuthenticateUserNonceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLogOff::_Internal {
 public:
};

CMsgClientLogOff::CMsgClientLogOff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLogOff)
}
CMsgClientLogOff::CMsgClientLogOff(const CMsgClientLogOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientLogOff)
}

void CMsgClientLogOff::SharedCtor() {
}

CMsgClientLogOff::~CMsgClientLogOff() {
  // @@protoc_insertion_point(destructor:CMsgClientLogOff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLogOff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientLogOff::ArenaDtor(void* object) {
  CMsgClientLogOff* _this = reinterpret_cast< CMsgClientLogOff* >(object);
  (void)_this;
}
void CMsgClientLogOff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLogOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLogOff::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLogOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLogOff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLogOff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLogOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLogOff)
  return target;
}

size_t CMsgClientLogOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLogOff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLogOff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLogOff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLogOff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLogOff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLogOff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLogOff)
    MergeFrom(*source);
  }
}

void CMsgClientLogOff::MergeFrom(const CMsgClientLogOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLogOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientLogOff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLogOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLogOff::CopyFrom(const CMsgClientLogOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLogOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLogOff::IsInitialized() const {
  return true;
}

void CMsgClientLogOff::InternalSwap(CMsgClientLogOff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLogOff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientLoggedOff::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientLoggedOff>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientLoggedOff::CMsgClientLoggedOff(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientLoggedOff)
}
CMsgClientLoggedOff::CMsgClientLoggedOff(const CMsgClientLoggedOff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientLoggedOff)
}

void CMsgClientLoggedOff::SharedCtor() {
eresult_ = 2;
}

CMsgClientLoggedOff::~CMsgClientLoggedOff() {
  // @@protoc_insertion_point(destructor:CMsgClientLoggedOff)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientLoggedOff::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientLoggedOff::ArenaDtor(void* object) {
  CMsgClientLoggedOff* _this = reinterpret_cast< CMsgClientLoggedOff* >(object);
  (void)_this;
}
void CMsgClientLoggedOff::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientLoggedOff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientLoggedOff::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientLoggedOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientLoggedOff::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientLoggedOff::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientLoggedOff)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientLoggedOff)
  return target;
}

size_t CMsgClientLoggedOff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientLoggedOff)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientLoggedOff::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientLoggedOff* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientLoggedOff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientLoggedOff)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientLoggedOff)
    MergeFrom(*source);
  }
}

void CMsgClientLoggedOff::MergeFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientLoggedOff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CMsgClientLoggedOff::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientLoggedOff::CopyFrom(const CMsgClientLoggedOff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientLoggedOff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientLoggedOff::IsInitialized() const {
  return true;
}

void CMsgClientLoggedOff::InternalSwap(CMsgClientLoggedOff* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientLoggedOff::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientNewLoginKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNewLoginKey>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_login_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientNewLoginKey::CMsgClientNewLoginKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNewLoginKey)
}
CMsgClientNewLoginKey::CMsgClientNewLoginKey(const CMsgClientNewLoginKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  login_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_login_key()) {
    login_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_login_key(), 
      GetArena());
  }
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNewLoginKey)
}

void CMsgClientNewLoginKey::SharedCtor() {
login_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unique_id_ = 0u;
}

CMsgClientNewLoginKey::~CMsgClientNewLoginKey() {
  // @@protoc_insertion_point(destructor:CMsgClientNewLoginKey)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientNewLoginKey::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  login_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientNewLoginKey::ArenaDtor(void* object) {
  CMsgClientNewLoginKey* _this = reinterpret_cast< CMsgClientNewLoginKey* >(object);
  (void)_this;
}
void CMsgClientNewLoginKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientNewLoginKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientNewLoginKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNewLoginKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    login_key_.ClearNonDefaultToEmpty();
  }
  unique_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNewLoginKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unique_id(&has_bits);
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string login_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_login_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientNewLoginKey.login_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientNewLoginKey::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNewLoginKey)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unique_id(), target);
  }

  // optional string login_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_login_key().data(), static_cast<int>(this->_internal_login_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientNewLoginKey.login_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_login_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNewLoginKey)
  return target;
}

size_t CMsgClientNewLoginKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNewLoginKey)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string login_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_login_key());
    }

    // optional uint32 unique_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_unique_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNewLoginKey::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNewLoginKey* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientNewLoginKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientNewLoginKey)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientNewLoginKey)
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKey::MergeFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNewLoginKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_login_key(from._internal_login_key());
    }
    if (cached_has_bits & 0x00000002u) {
      unique_id_ = from.unique_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientNewLoginKey::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKey::CopyFrom(const CMsgClientNewLoginKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNewLoginKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKey::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKey::InternalSwap(CMsgClientNewLoginKey* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  login_key_.Swap(&other->login_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(unique_id_, other->unique_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNewLoginKey::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientNewLoginKeyAccepted::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientNewLoginKeyAccepted>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientNewLoginKeyAccepted)
}
CMsgClientNewLoginKeyAccepted::CMsgClientNewLoginKeyAccepted(const CMsgClientNewLoginKeyAccepted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unique_id_ = from.unique_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientNewLoginKeyAccepted)
}

void CMsgClientNewLoginKeyAccepted::SharedCtor() {
unique_id_ = 0u;
}

CMsgClientNewLoginKeyAccepted::~CMsgClientNewLoginKeyAccepted() {
  // @@protoc_insertion_point(destructor:CMsgClientNewLoginKeyAccepted)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientNewLoginKeyAccepted::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientNewLoginKeyAccepted::ArenaDtor(void* object) {
  CMsgClientNewLoginKeyAccepted* _this = reinterpret_cast< CMsgClientNewLoginKeyAccepted* >(object);
  (void)_this;
}
void CMsgClientNewLoginKeyAccepted::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientNewLoginKeyAccepted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientNewLoginKeyAccepted::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientNewLoginKeyAccepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unique_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientNewLoginKeyAccepted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unique_id(&has_bits);
          unique_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientNewLoginKeyAccepted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientNewLoginKeyAccepted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unique_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientNewLoginKeyAccepted)
  return target;
}

size_t CMsgClientNewLoginKeyAccepted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientNewLoginKeyAccepted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 unique_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unique_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientNewLoginKeyAccepted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientNewLoginKeyAccepted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientNewLoginKeyAccepted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientNewLoginKeyAccepted)
    MergeFrom(*source);
  }
}

void CMsgClientNewLoginKeyAccepted::MergeFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientNewLoginKeyAccepted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unique_id()) {
    _internal_set_unique_id(from._internal_unique_id());
  }
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientNewLoginKeyAccepted::CopyFrom(const CMsgClientNewLoginKeyAccepted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientNewLoginKeyAccepted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientNewLoginKeyAccepted::IsInitialized() const {
  return true;
}

void CMsgClientNewLoginKeyAccepted::InternalSwap(CMsgClientNewLoginKeyAccepted* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unique_id_, other->unique_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientNewLoginKeyAccepted::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientAccountInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientAccountInfo>()._has_bits_);
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ip_country(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count_authed_computers(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_facebook_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_facebook_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamguard_notify_newmachines(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_steamguard_machine_name_user_chosen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_phone_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_two_factor_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_is_phone_identifying(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_phone_needing_reverify(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgClientAccountInfo::CMsgClientAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientAccountInfo)
}
CMsgClientAccountInfo::CMsgClientAccountInfo(const CMsgClientAccountInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArena());
  }
  ip_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip_country()) {
    ip_country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_country(), 
      GetArena());
  }
  facebook_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_facebook_name()) {
    facebook_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_facebook_name(), 
      GetArena());
  }
  steamguard_machine_name_user_chosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_steamguard_machine_name_user_chosen()) {
    steamguard_machine_name_user_chosen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_steamguard_machine_name_user_chosen(), 
      GetArena());
  }
  ::memcpy(&count_authed_computers_, &from.count_authed_computers_,
    static_cast<size_t>(reinterpret_cast<char*>(&two_factor_state_) -
    reinterpret_cast<char*>(&count_authed_computers_)) + sizeof(two_factor_state_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientAccountInfo)
}

void CMsgClientAccountInfo::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
facebook_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
steamguard_machine_name_user_chosen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&count_authed_computers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&two_factor_state_) -
    reinterpret_cast<char*>(&count_authed_computers_)) + sizeof(two_factor_state_));
}

CMsgClientAccountInfo::~CMsgClientAccountInfo() {
  // @@protoc_insertion_point(destructor:CMsgClientAccountInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientAccountInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  facebook_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steamguard_machine_name_user_chosen_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientAccountInfo::ArenaDtor(void* object) {
  CMsgClientAccountInfo* _this = reinterpret_cast< CMsgClientAccountInfo* >(object);
  (void)_this;
}
void CMsgClientAccountInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientAccountInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientAccountInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ip_country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      facebook_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      steamguard_machine_name_user_chosen_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&count_authed_computers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamguard_notify_newmachines_) -
        reinterpret_cast<char*>(&count_authed_computers_)) + sizeof(steamguard_notify_newmachines_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&is_phone_verified_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&two_factor_state_) -
        reinterpret_cast<char*>(&is_phone_verified_)) + sizeof(two_factor_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientAccountInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string persona_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAccountInfo.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip_country = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAccountInfo.ip_country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 count_authed_computers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count_authed_computers(&has_bits);
          count_authed_computers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_account_flags(&has_bits);
          account_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 facebook_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_facebook_id(&has_bits);
          facebook_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string facebook_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_facebook_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAccountInfo.facebook_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool steamguard_notify_newmachines = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_steamguard_notify_newmachines(&has_bits);
          steamguard_notify_newmachines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string steamguard_machine_name_user_chosen = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_steamguard_machine_name_user_chosen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_phone_verified = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_is_phone_verified(&has_bits);
          is_phone_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 two_factor_state = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_two_factor_state(&has_bits);
          two_factor_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_phone_identifying = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_is_phone_identifying(&has_bits);
          is_phone_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_phone_needing_reverify = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_is_phone_needing_reverify(&has_bits);
          is_phone_needing_reverify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientAccountInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientAccountInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string persona_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.persona_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_persona_name(), target);
  }

  // optional string ip_country = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ip_country().data(), static_cast<int>(this->_internal_ip_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.ip_country");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip_country(), target);
  }

  // optional int32 count_authed_computers = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_count_authed_computers(), target);
  }

  // optional uint32 account_flags = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_account_flags(), target);
  }

  // optional uint64 facebook_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_facebook_id(), target);
  }

  // optional string facebook_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_facebook_name().data(), static_cast<int>(this->_internal_facebook_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.facebook_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_facebook_name(), target);
  }

  // optional bool steamguard_notify_newmachines = 14;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_steamguard_notify_newmachines(), target);
  }

  // optional string steamguard_machine_name_user_chosen = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_steamguard_machine_name_user_chosen().data(), static_cast<int>(this->_internal_steamguard_machine_name_user_chosen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientAccountInfo.steamguard_machine_name_user_chosen");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_steamguard_machine_name_user_chosen(), target);
  }

  // optional bool is_phone_verified = 16;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_phone_verified(), target);
  }

  // optional uint32 two_factor_state = 17;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_two_factor_state(), target);
  }

  // optional bool is_phone_identifying = 18;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_phone_identifying(), target);
  }

  // optional bool is_phone_needing_reverify = 19;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_is_phone_needing_reverify(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientAccountInfo)
  return target;
}

size_t CMsgClientAccountInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientAccountInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string ip_country = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip_country());
    }

    // optional string facebook_name = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_facebook_name());
    }

    // optional string steamguard_machine_name_user_chosen = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_steamguard_machine_name_user_chosen());
    }

    // optional int32 count_authed_computers = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_count_authed_computers());
    }

    // optional uint32 account_flags = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_flags());
    }

    // optional uint64 facebook_id = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_facebook_id());
    }

    // optional bool steamguard_notify_newmachines = 14;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional bool is_phone_verified = 16;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_identifying = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_needing_reverify = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_state = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_two_factor_state());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientAccountInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientAccountInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientAccountInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientAccountInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientAccountInfo)
    MergeFrom(*source);
  }
}

void CMsgClientAccountInfo::MergeFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientAccountInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_ip_country(from._internal_ip_country());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_facebook_name(from._internal_facebook_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_steamguard_machine_name_user_chosen(from._internal_steamguard_machine_name_user_chosen());
    }
    if (cached_has_bits & 0x00000010u) {
      count_authed_computers_ = from.count_authed_computers_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      facebook_id_ = from.facebook_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      steamguard_notify_newmachines_ = from.steamguard_notify_newmachines_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_phone_identifying_ = from.is_phone_identifying_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_phone_needing_reverify_ = from.is_phone_needing_reverify_;
    }
    if (cached_has_bits & 0x00000800u) {
      two_factor_state_ = from.two_factor_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientAccountInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientAccountInfo::CopyFrom(const CMsgClientAccountInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientAccountInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientAccountInfo::IsInitialized() const {
  return true;
}

void CMsgClientAccountInfo::InternalSwap(CMsgClientAccountInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_country_.Swap(&other->ip_country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  facebook_name_.Swap(&other->facebook_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  steamguard_machine_name_user_chosen_.Swap(&other->steamguard_machine_name_user_chosen_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientAccountInfo, two_factor_state_)
      + sizeof(CMsgClientAccountInfo::two_factor_state_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientAccountInfo, count_authed_computers_)>(
          reinterpret_cast<char*>(&count_authed_computers_),
          reinterpret_cast<char*>(&other->count_authed_computers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientAccountInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientChallengeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChallengeRequest>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientChallengeRequest::CMsgClientChallengeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientChallengeRequest)
}
CMsgClientChallengeRequest::CMsgClientChallengeRequest(const CMsgClientChallengeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientChallengeRequest)
}

void CMsgClientChallengeRequest::SharedCtor() {
steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientChallengeRequest::~CMsgClientChallengeRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientChallengeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientChallengeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientChallengeRequest::ArenaDtor(void* object) {
  CMsgClientChallengeRequest* _this = reinterpret_cast< CMsgClientChallengeRequest* >(object);
  (void)_this;
}
void CMsgClientChallengeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChallengeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientChallengeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChallengeRequest)
  return target;
}

size_t CMsgClientChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChallengeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientChallengeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChallengeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientChallengeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientChallengeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientChallengeRequest)
    MergeFrom(*source);
  }
}

void CMsgClientChallengeRequest::MergeFrom(const CMsgClientChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
}

void CMsgClientChallengeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChallengeRequest::CopyFrom(const CMsgClientChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChallengeRequest::IsInitialized() const {
  return true;
}

void CMsgClientChallengeRequest::InternalSwap(CMsgClientChallengeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChallengeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientChallengeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientChallengeResponse>()._has_bits_);
  static void set_has_challenge(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClientChallengeResponse::CMsgClientChallengeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientChallengeResponse)
}
CMsgClientChallengeResponse::CMsgClientChallengeResponse(const CMsgClientChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  challenge_ = from.challenge_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientChallengeResponse)
}

void CMsgClientChallengeResponse::SharedCtor() {
challenge_ = PROTOBUF_ULONGLONG(0);
}

CMsgClientChallengeResponse::~CMsgClientChallengeResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientChallengeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientChallengeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientChallengeResponse::ArenaDtor(void* object) {
  CMsgClientChallengeResponse* _this = reinterpret_cast< CMsgClientChallengeResponse* >(object);
  (void)_this;
}
void CMsgClientChallengeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientChallengeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 challenge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_challenge(&has_bits);
          challenge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientChallengeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_challenge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientChallengeResponse)
  return target;
}

size_t CMsgClientChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientChallengeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 challenge = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientChallengeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientChallengeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientChallengeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgClientChallengeResponse::MergeFrom(const CMsgClientChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_challenge()) {
    _internal_set_challenge(from._internal_challenge());
  }
}

void CMsgClientChallengeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientChallengeResponse::CopyFrom(const CMsgClientChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgClientChallengeResponse::InternalSwap(CMsgClientChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(challenge_, other->challenge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientChallengeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgClientHeartBeat* Arena::CreateMaybeMessage< ::CMsgClientHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServerTimestampRequest* Arena::CreateMaybeMessage< ::CMsgClientServerTimestampRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServerTimestampRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientServerTimestampResponse* Arena::CreateMaybeMessage< ::CMsgClientServerTimestampResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientServerTimestampResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientSecret* Arena::CreateMaybeMessage< ::CMsgClientSecret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientSecret >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLogon* Arena::CreateMaybeMessage< ::CMsgClientLogon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLogon >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLogonResponse* Arena::CreateMaybeMessage< ::CMsgClientLogonResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLogonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestWebAPIAuthenticateUserNonce* Arena::CreateMaybeMessage< ::CMsgClientRequestWebAPIAuthenticateUserNonce >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestWebAPIAuthenticateUserNonce >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse* Arena::CreateMaybeMessage< ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientRequestWebAPIAuthenticateUserNonceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLogOff* Arena::CreateMaybeMessage< ::CMsgClientLogOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLogOff >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientLoggedOff* Arena::CreateMaybeMessage< ::CMsgClientLoggedOff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientLoggedOff >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNewLoginKey* Arena::CreateMaybeMessage< ::CMsgClientNewLoginKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNewLoginKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientNewLoginKeyAccepted* Arena::CreateMaybeMessage< ::CMsgClientNewLoginKeyAccepted >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientNewLoginKeyAccepted >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientAccountInfo* Arena::CreateMaybeMessage< ::CMsgClientAccountInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientAccountInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChallengeRequest* Arena::CreateMaybeMessage< ::CMsgClientChallengeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChallengeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientChallengeResponse* Arena::CreateMaybeMessage< ::CMsgClientChallengeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientChallengeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
