// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_gamenetworkingui.proto

#include "steammessages_gamenetworkingui.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGameNetworkingUI_GlobalStateDefaultTypeInternal {
  constexpr CGameNetworkingUI_GlobalStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNetworkingUI_GlobalStateDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_GlobalState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNetworkingUI_GlobalStateDefaultTypeInternal _CGameNetworkingUI_GlobalState_default_instance_;
constexpr CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_local_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , identity_remote_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , close_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_loc_token_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdrpopid_local_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sdrpopid_remote_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_remote_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , p2p_routing_(nullptr)
  , e2e_quality_local_(nullptr)
  , e2e_quality_remote_(nullptr)
  , front_quality_local_(nullptr)
  , front_quality_remote_(nullptr)
  , appid_(0u)
  , connection_id_local_(0u)
  , connection_state_(0u)
  , start_time_(0u)
  , close_time_(0u)
  , close_reason_(0u)
  , transport_kind_(0u)
  , ping_interior_(0u)
  , ping_remote_front_(0u)
  , ping_default_internet_route_(0u)
  , e2e_quality_remote_instantaneous_time_(PROTOBUF_ULONGLONG(0))
  , e2e_quality_remote_lifetime_time_(PROTOBUF_ULONGLONG(0))
  , front_quality_remote_instantaneous_time_(PROTOBUF_ULONGLONG(0))
  , front_quality_remote_lifetime_time_(PROTOBUF_ULONGLONG(0)){}
struct CGameNetworkingUI_ConnectionStateDefaultTypeInternal {
  constexpr CGameNetworkingUI_ConnectionStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNetworkingUI_ConnectionStateDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_ConnectionState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNetworkingUI_ConnectionStateDefaultTypeInternal _CGameNetworkingUI_ConnectionState_default_instance_;
constexpr CGameNetworkingUI_Message::CGameNetworkingUI_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_state_(){}
struct CGameNetworkingUI_MessageDefaultTypeInternal {
  constexpr CGameNetworkingUI_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGameNetworkingUI_MessageDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGameNetworkingUI_MessageDefaultTypeInternal _CGameNetworkingUI_Message_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_5fgamenetworkingui_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_steammessages_5fgamenetworkingui_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_5fgamenetworkingui_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steammessages_5fgamenetworkingui_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_GlobalState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, connection_key_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, appid_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, connection_id_local_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, identity_local_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, identity_remote_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, connection_state_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, start_time_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, close_time_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, close_reason_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, close_message_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, status_loc_token_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, transport_kind_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, sdrpopid_local_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, sdrpopid_remote_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, address_remote_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, p2p_routing_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, ping_interior_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, ping_remote_front_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, ping_default_internet_route_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, e2e_quality_local_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, e2e_quality_remote_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, e2e_quality_remote_instantaneous_time_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, e2e_quality_remote_lifetime_time_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, front_quality_local_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, front_quality_remote_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, front_quality_remote_instantaneous_time_),
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, front_quality_remote_lifetime_time_),
  0,
  13,
  14,
  1,
  2,
  15,
  16,
  17,
  18,
  3,
  4,
  19,
  5,
  6,
  7,
  8,
  20,
  21,
  22,
  9,
  10,
  23,
  24,
  11,
  12,
  25,
  26,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_Message, connection_state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::CGameNetworkingUI_GlobalState)},
  { 5, 37, sizeof(::CGameNetworkingUI_ConnectionState)},
  { 64, -1, sizeof(::CGameNetworkingUI_Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNetworkingUI_GlobalState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNetworkingUI_ConnectionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGameNetworkingUI_Message_default_instance_),
};

const char descriptor_table_protodef_steammessages_5fgamenetworkingui_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$steammessages_gamenetworkingui.proto\032%"
  "steamnetworkingsockets_messages.proto\032 s"
  "teamdatagram_messages_sdr.proto\"\037\n\035CGame"
  "NetworkingUI_GlobalState\"\317\007\n!CGameNetwor"
  "kingUI_ConnectionState\022\026\n\016connection_key"
  "\030\001 \001(\t\022\r\n\005appid\030\002 \001(\r\022\033\n\023connection_id_l"
  "ocal\030\003 \001(\007\022\026\n\016identity_local\030\004 \001(\t\022\027\n\017id"
  "entity_remote\030\005 \001(\t\022\030\n\020connection_state\030"
  "\n \001(\r\022\022\n\nstart_time\030\014 \001(\r\022\022\n\nclose_time\030"
  "\r \001(\r\022\024\n\014close_reason\030\016 \001(\r\022\025\n\rclose_mes"
  "sage\030\017 \001(\t\022\030\n\020status_loc_token\030\020 \001(\t\022\026\n\016"
  "transport_kind\030\024 \001(\r\022\026\n\016sdrpopid_local\030\025"
  " \001(\t\022\027\n\017sdrpopid_remote\030\026 \001(\t\022\026\n\016address"
  "_remote\030\027 \001(\t\0228\n\013p2p_routing\030\030 \001(\0132#.CMs"
  "gSteamDatagramP2PRoutingSummary\022\025\n\rping_"
  "interior\030\031 \001(\r\022\031\n\021ping_remote_front\030\032 \001("
  "\r\022#\n\033ping_default_internet_route\030\033 \001(\r\022>"
  "\n\021e2e_quality_local\030\036 \001(\0132#.CMsgSteamDat"
  "agramConnectionQuality\022\?\n\022e2e_quality_re"
  "mote\030\037 \001(\0132#.CMsgSteamDatagramConnection"
  "Quality\022-\n%e2e_quality_remote_instantane"
  "ous_time\030  \001(\004\022(\n e2e_quality_remote_lif"
  "etime_time\030! \001(\004\022@\n\023front_quality_local\030"
  "( \001(\0132#.CMsgSteamDatagramConnectionQuali"
  "ty\022A\n\024front_quality_remote\030) \001(\0132#.CMsgS"
  "teamDatagramConnectionQuality\022/\n\'front_q"
  "uality_remote_instantaneous_time\030* \001(\004\022*"
  "\n\"front_quality_remote_lifetime_time\030+ \001"
  "(\004\"Y\n\031CGameNetworkingUI_Message\022<\n\020conne"
  "ction_state\030\001 \003(\0132\".CGameNetworkingUI_Co"
  "nnectionStateB\005H\001\200\001\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_5fgamenetworkingui_2eproto_deps[2] = {
  &::descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
  &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_5fgamenetworkingui_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fgamenetworkingui_2eproto = {
  false, false, 1220, descriptor_table_protodef_steammessages_5fgamenetworkingui_2eproto, "steammessages_gamenetworkingui.proto", 
  &descriptor_table_steammessages_5fgamenetworkingui_2eproto_once, descriptor_table_steammessages_5fgamenetworkingui_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_steammessages_5fgamenetworkingui_2eproto::offsets,
  file_level_metadata_steammessages_5fgamenetworkingui_2eproto, file_level_enum_descriptors_steammessages_5fgamenetworkingui_2eproto, file_level_service_descriptors_steammessages_5fgamenetworkingui_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_steammessages_5fgamenetworkingui_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_5fgamenetworkingui_2eproto);
  return descriptor_table_steammessages_5fgamenetworkingui_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_5fgamenetworkingui_2eproto(&descriptor_table_steammessages_5fgamenetworkingui_2eproto);

// ===================================================================

class CGameNetworkingUI_GlobalState::_Internal {
 public:
};

CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_GlobalState)
}
CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(const CGameNetworkingUI_GlobalState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_GlobalState)
}

void CGameNetworkingUI_GlobalState::SharedCtor() {
}

CGameNetworkingUI_GlobalState::~CGameNetworkingUI_GlobalState() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_GlobalState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameNetworkingUI_GlobalState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameNetworkingUI_GlobalState::ArenaDtor(void* object) {
  CGameNetworkingUI_GlobalState* _this = reinterpret_cast< CGameNetworkingUI_GlobalState* >(object);
  (void)_this;
}
void CGameNetworkingUI_GlobalState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNetworkingUI_GlobalState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNetworkingUI_GlobalState::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_GlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNetworkingUI_GlobalState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameNetworkingUI_GlobalState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_GlobalState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_GlobalState)
  return target;
}

size_t CGameNetworkingUI_GlobalState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_GlobalState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNetworkingUI_GlobalState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNetworkingUI_GlobalState)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNetworkingUI_GlobalState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameNetworkingUI_GlobalState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNetworkingUI_GlobalState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNetworkingUI_GlobalState)
    MergeFrom(*source);
  }
}

void CGameNetworkingUI_GlobalState::MergeFrom(const CGameNetworkingUI_GlobalState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_GlobalState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CGameNetworkingUI_GlobalState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNetworkingUI_GlobalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNetworkingUI_GlobalState::CopyFrom(const CGameNetworkingUI_GlobalState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_GlobalState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNetworkingUI_GlobalState::IsInitialized() const {
  return true;
}

void CGameNetworkingUI_GlobalState::InternalSwap(CGameNetworkingUI_GlobalState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNetworkingUI_GlobalState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameNetworkingUI_ConnectionState::_Internal {
 public:
  using HasBits = decltype(std::declval<CGameNetworkingUI_ConnectionState>()._has_bits_);
  static void set_has_connection_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_connection_id_local(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_identity_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_identity_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_connection_state(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_close_time(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_close_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_close_message(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status_loc_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transport_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_sdrpopid_local(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sdrpopid_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_address_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_p2p_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ping_interior(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ping_remote_front(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ping_default_internet_route(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& e2e_quality_local(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_e2e_quality_local(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& e2e_quality_remote(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_e2e_quality_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_e2e_quality_remote_instantaneous_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_e2e_quality_remote_lifetime_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& front_quality_local(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_front_quality_local(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::CMsgSteamDatagramConnectionQuality& front_quality_remote(const CGameNetworkingUI_ConnectionState* msg);
  static void set_has_front_quality_remote(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_front_quality_remote_instantaneous_time(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_front_quality_remote_lifetime_time(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
};

const ::CMsgSteamDatagramP2PRoutingSummary&
CGameNetworkingUI_ConnectionState::_Internal::p2p_routing(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->p2p_routing_;
}
const ::CMsgSteamDatagramConnectionQuality&
CGameNetworkingUI_ConnectionState::_Internal::e2e_quality_local(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->e2e_quality_local_;
}
const ::CMsgSteamDatagramConnectionQuality&
CGameNetworkingUI_ConnectionState::_Internal::e2e_quality_remote(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->e2e_quality_remote_;
}
const ::CMsgSteamDatagramConnectionQuality&
CGameNetworkingUI_ConnectionState::_Internal::front_quality_local(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->front_quality_local_;
}
const ::CMsgSteamDatagramConnectionQuality&
CGameNetworkingUI_ConnectionState::_Internal::front_quality_remote(const CGameNetworkingUI_ConnectionState* msg) {
  return *msg->front_quality_remote_;
}
void CGameNetworkingUI_ConnectionState::clear_p2p_routing() {
  if (p2p_routing_ != nullptr) p2p_routing_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void CGameNetworkingUI_ConnectionState::clear_e2e_quality_local() {
  if (e2e_quality_local_ != nullptr) e2e_quality_local_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote() {
  if (e2e_quality_remote_ != nullptr) e2e_quality_remote_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
void CGameNetworkingUI_ConnectionState::clear_front_quality_local() {
  if (front_quality_local_ != nullptr) front_quality_local_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
void CGameNetworkingUI_ConnectionState::clear_front_quality_remote() {
  if (front_quality_remote_ != nullptr) front_quality_remote_->Clear();
  _has_bits_[0] &= ~0x00001000u;
}
CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_ConnectionState)
}
CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(const CGameNetworkingUI_ConnectionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connection_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_connection_key()) {
    connection_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_connection_key(), 
      GetArena());
  }
  identity_local_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identity_local()) {
    identity_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity_local(), 
      GetArena());
  }
  identity_remote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_identity_remote()) {
    identity_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_identity_remote(), 
      GetArena());
  }
  close_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_close_message()) {
    close_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_close_message(), 
      GetArena());
  }
  status_loc_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_status_loc_token()) {
    status_loc_token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status_loc_token(), 
      GetArena());
  }
  sdrpopid_local_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdrpopid_local()) {
    sdrpopid_local_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdrpopid_local(), 
      GetArena());
  }
  sdrpopid_remote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sdrpopid_remote()) {
    sdrpopid_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sdrpopid_remote(), 
      GetArena());
  }
  address_remote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_address_remote()) {
    address_remote_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address_remote(), 
      GetArena());
  }
  if (from._internal_has_p2p_routing()) {
    p2p_routing_ = new ::CMsgSteamDatagramP2PRoutingSummary(*from.p2p_routing_);
  } else {
    p2p_routing_ = nullptr;
  }
  if (from._internal_has_e2e_quality_local()) {
    e2e_quality_local_ = new ::CMsgSteamDatagramConnectionQuality(*from.e2e_quality_local_);
  } else {
    e2e_quality_local_ = nullptr;
  }
  if (from._internal_has_e2e_quality_remote()) {
    e2e_quality_remote_ = new ::CMsgSteamDatagramConnectionQuality(*from.e2e_quality_remote_);
  } else {
    e2e_quality_remote_ = nullptr;
  }
  if (from._internal_has_front_quality_local()) {
    front_quality_local_ = new ::CMsgSteamDatagramConnectionQuality(*from.front_quality_local_);
  } else {
    front_quality_local_ = nullptr;
  }
  if (from._internal_has_front_quality_remote()) {
    front_quality_remote_ = new ::CMsgSteamDatagramConnectionQuality(*from.front_quality_remote_);
  } else {
    front_quality_remote_ = nullptr;
  }
  ::memcpy(&appid_, &from.appid_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_quality_remote_lifetime_time_) -
    reinterpret_cast<char*>(&appid_)) + sizeof(front_quality_remote_lifetime_time_));
  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_ConnectionState)
}

void CGameNetworkingUI_ConnectionState::SharedCtor() {
connection_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
identity_local_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
identity_remote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
close_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_loc_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdrpopid_local_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sdrpopid_remote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
address_remote_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&p2p_routing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&front_quality_remote_lifetime_time_) -
    reinterpret_cast<char*>(&p2p_routing_)) + sizeof(front_quality_remote_lifetime_time_));
}

CGameNetworkingUI_ConnectionState::~CGameNetworkingUI_ConnectionState() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_ConnectionState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameNetworkingUI_ConnectionState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  connection_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_local_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  identity_remote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_loc_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdrpopid_local_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sdrpopid_remote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_remote_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete p2p_routing_;
  if (this != internal_default_instance()) delete e2e_quality_local_;
  if (this != internal_default_instance()) delete e2e_quality_remote_;
  if (this != internal_default_instance()) delete front_quality_local_;
  if (this != internal_default_instance()) delete front_quality_remote_;
}

void CGameNetworkingUI_ConnectionState::ArenaDtor(void* object) {
  CGameNetworkingUI_ConnectionState* _this = reinterpret_cast< CGameNetworkingUI_ConnectionState* >(object);
  (void)_this;
}
void CGameNetworkingUI_ConnectionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNetworkingUI_ConnectionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNetworkingUI_ConnectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_ConnectionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      connection_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      identity_local_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      identity_remote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      close_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      status_loc_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      sdrpopid_local_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      sdrpopid_remote_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      address_remote_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(p2p_routing_ != nullptr);
      p2p_routing_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(e2e_quality_local_ != nullptr);
      e2e_quality_local_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(e2e_quality_remote_ != nullptr);
      e2e_quality_remote_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(front_quality_local_ != nullptr);
      front_quality_local_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(front_quality_remote_ != nullptr);
      front_quality_remote_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&appid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connection_state_) -
        reinterpret_cast<char*>(&appid_)) + sizeof(connection_state_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e2e_quality_remote_instantaneous_time_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(e2e_quality_remote_instantaneous_time_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&e2e_quality_remote_lifetime_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_quality_remote_lifetime_time_) -
        reinterpret_cast<char*>(&e2e_quality_remote_lifetime_time_)) + sizeof(front_quality_remote_lifetime_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNetworkingUI_ConnectionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string connection_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connection_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.connection_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 connection_id_local = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_connection_id_local(&has_bits);
          connection_id_local_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional string identity_local = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_identity_local();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.identity_local");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string identity_remote = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_identity_remote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.identity_remote");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 connection_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_connection_state(&has_bits);
          connection_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 close_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_close_time(&has_bits);
          close_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 close_reason = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_close_reason(&has_bits);
          close_reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string close_message = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_close_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.close_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string status_loc_token = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_status_loc_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.status_loc_token");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transport_kind = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_transport_kind(&has_bits);
          transport_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sdrpopid_local = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_sdrpopid_local();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.sdrpopid_local");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string sdrpopid_remote = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_sdrpopid_remote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.sdrpopid_remote");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string address_remote = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_address_remote();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGameNetworkingUI_ConnectionState.address_remote");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_p2p_routing(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_interior = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ping_interior(&has_bits);
          ping_interior_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_remote_front = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_ping_remote_front(&has_bits);
          ping_remote_front_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ping_default_internet_route = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ping_default_internet_route(&has_bits);
          ping_default_internet_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2e_quality_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_e2e_quality_remote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 e2e_quality_remote_instantaneous_time = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_e2e_quality_remote_instantaneous_time(&has_bits);
          e2e_quality_remote_instantaneous_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 e2e_quality_remote_lifetime_time = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_e2e_quality_remote_lifetime_time(&has_bits);
          e2e_quality_remote_lifetime_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_quality_local(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_quality_remote(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 front_quality_remote_instantaneous_time = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_front_quality_remote_instantaneous_time(&has_bits);
          front_quality_remote_instantaneous_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 front_quality_remote_lifetime_time = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_front_quality_remote_lifetime_time(&has_bits);
          front_quality_remote_lifetime_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameNetworkingUI_ConnectionState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_ConnectionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string connection_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_connection_key().data(), static_cast<int>(this->_internal_connection_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.connection_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_key(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional fixed32 connection_id_local = 3;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_connection_id_local(), target);
  }

  // optional string identity_local = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_local().data(), static_cast<int>(this->_internal_identity_local().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.identity_local");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_identity_local(), target);
  }

  // optional string identity_remote = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identity_remote().data(), static_cast<int>(this->_internal_identity_remote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.identity_remote");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_identity_remote(), target);
  }

  // optional uint32 connection_state = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_connection_state(), target);
  }

  // optional uint32 start_time = 12;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_start_time(), target);
  }

  // optional uint32 close_time = 13;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_close_time(), target);
  }

  // optional uint32 close_reason = 14;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_close_reason(), target);
  }

  // optional string close_message = 15;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_close_message().data(), static_cast<int>(this->_internal_close_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.close_message");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_close_message(), target);
  }

  // optional string status_loc_token = 16;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_status_loc_token().data(), static_cast<int>(this->_internal_status_loc_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.status_loc_token");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_status_loc_token(), target);
  }

  // optional uint32 transport_kind = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_transport_kind(), target);
  }

  // optional string sdrpopid_local = 21;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdrpopid_local().data(), static_cast<int>(this->_internal_sdrpopid_local().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.sdrpopid_local");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_sdrpopid_local(), target);
  }

  // optional string sdrpopid_remote = 22;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sdrpopid_remote().data(), static_cast<int>(this->_internal_sdrpopid_remote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.sdrpopid_remote");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_sdrpopid_remote(), target);
  }

  // optional string address_remote = 23;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_address_remote().data(), static_cast<int>(this->_internal_address_remote().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGameNetworkingUI_ConnectionState.address_remote");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_address_remote(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::p2p_routing(this), target, stream);
  }

  // optional uint32 ping_interior = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_ping_interior(), target);
  }

  // optional uint32 ping_remote_front = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_ping_remote_front(), target);
  }

  // optional uint32 ping_default_internet_route = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_ping_default_internet_route(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::e2e_quality_local(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::e2e_quality_remote(this), target, stream);
  }

  // optional uint64 e2e_quality_remote_instantaneous_time = 32;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(32, this->_internal_e2e_quality_remote_instantaneous_time(), target);
  }

  // optional uint64 e2e_quality_remote_lifetime_time = 33;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(33, this->_internal_e2e_quality_remote_lifetime_time(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::front_quality_local(this), target, stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::front_quality_remote(this), target, stream);
  }

  // optional uint64 front_quality_remote_instantaneous_time = 42;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(42, this->_internal_front_quality_remote_instantaneous_time(), target);
  }

  // optional uint64 front_quality_remote_lifetime_time = 43;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(43, this->_internal_front_quality_remote_lifetime_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_ConnectionState)
  return target;
}

size_t CGameNetworkingUI_ConnectionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_ConnectionState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string connection_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_connection_key());
    }

    // optional string identity_local = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_local());
    }

    // optional string identity_remote = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_identity_remote());
    }

    // optional string close_message = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_close_message());
    }

    // optional string status_loc_token = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_status_loc_token());
    }

    // optional string sdrpopid_local = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdrpopid_local());
    }

    // optional string sdrpopid_remote = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_sdrpopid_remote());
    }

    // optional string address_remote = 23;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_address_remote());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *p2p_routing_);
    }

    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *e2e_quality_local_);
    }

    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *e2e_quality_remote_);
    }

    // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *front_quality_local_);
    }

    // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *front_quality_remote_);
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_appid());
    }

    // optional fixed32 connection_id_local = 3;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional uint32 connection_state = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_connection_state());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 start_time = 12;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_time());
    }

    // optional uint32 close_time = 13;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_close_time());
    }

    // optional uint32 close_reason = 14;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_close_reason());
    }

    // optional uint32 transport_kind = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_transport_kind());
    }

    // optional uint32 ping_interior = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_interior());
    }

    // optional uint32 ping_remote_front = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_remote_front());
    }

    // optional uint32 ping_default_internet_route = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ping_default_internet_route());
    }

    // optional uint64 e2e_quality_remote_instantaneous_time = 32;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_e2e_quality_remote_instantaneous_time());
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_e2e_quality_remote_lifetime_time());
    }

    // optional uint64 front_quality_remote_instantaneous_time = 42;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_front_quality_remote_instantaneous_time());
    }

    // optional uint64 front_quality_remote_lifetime_time = 43;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_front_quality_remote_lifetime_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNetworkingUI_ConnectionState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNetworkingUI_ConnectionState)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNetworkingUI_ConnectionState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameNetworkingUI_ConnectionState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNetworkingUI_ConnectionState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNetworkingUI_ConnectionState)
    MergeFrom(*source);
  }
}

void CGameNetworkingUI_ConnectionState::MergeFrom(const CGameNetworkingUI_ConnectionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_ConnectionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_connection_key(from._internal_connection_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_identity_local(from._internal_identity_local());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_identity_remote(from._internal_identity_remote());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_close_message(from._internal_close_message());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_status_loc_token(from._internal_status_loc_token());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_sdrpopid_local(from._internal_sdrpopid_local());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_sdrpopid_remote(from._internal_sdrpopid_remote());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_address_remote(from._internal_address_remote());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_p2p_routing()->::CMsgSteamDatagramP2PRoutingSummary::MergeFrom(from._internal_p2p_routing());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_e2e_quality_local()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_e2e_quality_local());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_e2e_quality_remote()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_e2e_quality_remote());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_front_quality_local()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_front_quality_local());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_mutable_front_quality_remote()->::CMsgSteamDatagramConnectionQuality::MergeFrom(from._internal_front_quality_remote());
    }
    if (cached_has_bits & 0x00002000u) {
      appid_ = from.appid_;
    }
    if (cached_has_bits & 0x00004000u) {
      connection_id_local_ = from.connection_id_local_;
    }
    if (cached_has_bits & 0x00008000u) {
      connection_state_ = from.connection_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      close_time_ = from.close_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      close_reason_ = from.close_reason_;
    }
    if (cached_has_bits & 0x00080000u) {
      transport_kind_ = from.transport_kind_;
    }
    if (cached_has_bits & 0x00100000u) {
      ping_interior_ = from.ping_interior_;
    }
    if (cached_has_bits & 0x00200000u) {
      ping_remote_front_ = from.ping_remote_front_;
    }
    if (cached_has_bits & 0x00400000u) {
      ping_default_internet_route_ = from.ping_default_internet_route_;
    }
    if (cached_has_bits & 0x00800000u) {
      e2e_quality_remote_instantaneous_time_ = from.e2e_quality_remote_instantaneous_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      e2e_quality_remote_lifetime_time_ = from.e2e_quality_remote_lifetime_time_;
    }
    if (cached_has_bits & 0x02000000u) {
      front_quality_remote_instantaneous_time_ = from.front_quality_remote_instantaneous_time_;
    }
    if (cached_has_bits & 0x04000000u) {
      front_quality_remote_lifetime_time_ = from.front_quality_remote_lifetime_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGameNetworkingUI_ConnectionState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNetworkingUI_ConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNetworkingUI_ConnectionState::CopyFrom(const CGameNetworkingUI_ConnectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_ConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNetworkingUI_ConnectionState::IsInitialized() const {
  return true;
}

void CGameNetworkingUI_ConnectionState::InternalSwap(CGameNetworkingUI_ConnectionState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  connection_key_.Swap(&other->connection_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identity_local_.Swap(&other->identity_local_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  identity_remote_.Swap(&other->identity_remote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  close_message_.Swap(&other->close_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_loc_token_.Swap(&other->status_loc_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdrpopid_local_.Swap(&other->sdrpopid_local_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sdrpopid_remote_.Swap(&other->sdrpopid_remote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  address_remote_.Swap(&other->address_remote_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, front_quality_remote_lifetime_time_)
      + sizeof(CGameNetworkingUI_ConnectionState::front_quality_remote_lifetime_time_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, p2p_routing_)>(
          reinterpret_cast<char*>(&p2p_routing_),
          reinterpret_cast<char*>(&other->p2p_routing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNetworkingUI_ConnectionState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CGameNetworkingUI_Message::_Internal {
 public:
};

CGameNetworkingUI_Message::CGameNetworkingUI_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  connection_state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_Message)
}
CGameNetworkingUI_Message::CGameNetworkingUI_Message(const CGameNetworkingUI_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connection_state_(from.connection_state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_Message)
}

void CGameNetworkingUI_Message::SharedCtor() {
}

CGameNetworkingUI_Message::~CGameNetworkingUI_Message() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CGameNetworkingUI_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CGameNetworkingUI_Message::ArenaDtor(void* object) {
  CGameNetworkingUI_Message* _this = reinterpret_cast< CGameNetworkingUI_Message* >(object);
  (void)_this;
}
void CGameNetworkingUI_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGameNetworkingUI_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGameNetworkingUI_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_state_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGameNetworkingUI_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connection_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CGameNetworkingUI_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connection_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_connection_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_Message)
  return target;
}

size_t CGameNetworkingUI_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  total_size += 1UL * this->_internal_connection_state_size();
  for (const auto& msg : this->connection_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGameNetworkingUI_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CGameNetworkingUI_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CGameNetworkingUI_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CGameNetworkingUI_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CGameNetworkingUI_Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CGameNetworkingUI_Message)
    MergeFrom(*source);
  }
}

void CGameNetworkingUI_Message::MergeFrom(const CGameNetworkingUI_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connection_state_.MergeFrom(from.connection_state_);
}

void CGameNetworkingUI_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CGameNetworkingUI_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameNetworkingUI_Message::CopyFrom(const CGameNetworkingUI_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameNetworkingUI_Message::IsInitialized() const {
  return true;
}

void CGameNetworkingUI_Message::InternalSwap(CGameNetworkingUI_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  connection_state_.InternalSwap(&other->connection_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGameNetworkingUI_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CGameNetworkingUI_GlobalState* Arena::CreateMaybeMessage< ::CGameNetworkingUI_GlobalState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNetworkingUI_GlobalState >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameNetworkingUI_ConnectionState* Arena::CreateMaybeMessage< ::CGameNetworkingUI_ConnectionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNetworkingUI_ConnectionState >(arena);
}
template<> PROTOBUF_NOINLINE ::CGameNetworkingUI_Message* Arena::CreateMaybeMessage< ::CGameNetworkingUI_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGameNetworkingUI_Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
