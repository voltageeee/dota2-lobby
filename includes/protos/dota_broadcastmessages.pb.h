// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_broadcastmessages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dota_5fbroadcastmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dota_5fbroadcastmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fbroadcastmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fbroadcastmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fbroadcastmessages_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_dota_5fbroadcastmessages_2eproto_metadata_getter(int index);
class CDOTABroadcastMsg;
struct CDOTABroadcastMsgDefaultTypeInternal;
extern CDOTABroadcastMsgDefaultTypeInternal _CDOTABroadcastMsg_default_instance_;
class CDOTABroadcastMsg_LANLobbyReply;
struct CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal;
extern CDOTABroadcastMsg_LANLobbyReplyDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyReply_default_instance_;
class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember;
struct CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal;
extern CDOTABroadcastMsg_LANLobbyReply_CLobbyMemberDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_;
class CDOTABroadcastMsg_LANLobbyRequest;
struct CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal;
extern CDOTABroadcastMsg_LANLobbyRequestDefaultTypeInternal _CDOTABroadcastMsg_LANLobbyRequest_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CDOTABroadcastMsg* Arena::CreateMaybeMessage<::CDOTABroadcastMsg>(Arena*);
template<> ::CDOTABroadcastMsg_LANLobbyReply* Arena::CreateMaybeMessage<::CDOTABroadcastMsg_LANLobbyReply>(Arena*);
template<> ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* Arena::CreateMaybeMessage<::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>(Arena*);
template<> ::CDOTABroadcastMsg_LANLobbyRequest* Arena::CreateMaybeMessage<::CDOTABroadcastMsg_LANLobbyRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum EDotaBroadcastMessages : int {
  DOTA_BM_LANLobbyRequest = 1,
  DOTA_BM_LANLobbyReply = 2
};
bool EDotaBroadcastMessages_IsValid(int value);
constexpr EDotaBroadcastMessages EDotaBroadcastMessages_MIN = DOTA_BM_LANLobbyRequest;
constexpr EDotaBroadcastMessages EDotaBroadcastMessages_MAX = DOTA_BM_LANLobbyReply;
constexpr int EDotaBroadcastMessages_ARRAYSIZE = EDotaBroadcastMessages_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EDotaBroadcastMessages_descriptor();
template<typename T>
inline const std::string& EDotaBroadcastMessages_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EDotaBroadcastMessages>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EDotaBroadcastMessages_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EDotaBroadcastMessages_descriptor(), enum_t_value);
}
inline bool EDotaBroadcastMessages_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EDotaBroadcastMessages* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EDotaBroadcastMessages>(
    EDotaBroadcastMessages_descriptor(), name, value);
}
// ===================================================================

class CDOTABroadcastMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTABroadcastMsg) */ {
 public:
  inline CDOTABroadcastMsg() : CDOTABroadcastMsg(nullptr) {}
  virtual ~CDOTABroadcastMsg();
  explicit constexpr CDOTABroadcastMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTABroadcastMsg(const CDOTABroadcastMsg& from);
  CDOTABroadcastMsg(CDOTABroadcastMsg&& from) noexcept
    : CDOTABroadcastMsg() {
    *this = ::std::move(from);
  }

  inline CDOTABroadcastMsg& operator=(const CDOTABroadcastMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTABroadcastMsg& operator=(CDOTABroadcastMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTABroadcastMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTABroadcastMsg* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcastMsg*>(
               &_CDOTABroadcastMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CDOTABroadcastMsg& a, CDOTABroadcastMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTABroadcastMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTABroadcastMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTABroadcastMsg* New() const final {
    return CreateMaybeMessage<CDOTABroadcastMsg>(nullptr);
  }

  CDOTABroadcastMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTABroadcastMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTABroadcastMsg& from);
  void MergeFrom(const CDOTABroadcastMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTABroadcastMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTABroadcastMsg";
  }
  protected:
  explicit CDOTABroadcastMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fbroadcastmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional bytes msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EDotaBroadcastMessages type() const;
  void set_type(::EDotaBroadcastMessages value);
  private:
  ::EDotaBroadcastMessages _internal_type() const;
  void _internal_set_type(::EDotaBroadcastMessages value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int type_;
  friend struct ::TableStruct_dota_5fbroadcastmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTABroadcastMsg_LANLobbyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTABroadcastMsg_LANLobbyRequest) */ {
 public:
  inline CDOTABroadcastMsg_LANLobbyRequest() : CDOTABroadcastMsg_LANLobbyRequest(nullptr) {}
  virtual ~CDOTABroadcastMsg_LANLobbyRequest();
  explicit constexpr CDOTABroadcastMsg_LANLobbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTABroadcastMsg_LANLobbyRequest(const CDOTABroadcastMsg_LANLobbyRequest& from);
  CDOTABroadcastMsg_LANLobbyRequest(CDOTABroadcastMsg_LANLobbyRequest&& from) noexcept
    : CDOTABroadcastMsg_LANLobbyRequest() {
    *this = ::std::move(from);
  }

  inline CDOTABroadcastMsg_LANLobbyRequest& operator=(const CDOTABroadcastMsg_LANLobbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTABroadcastMsg_LANLobbyRequest& operator=(CDOTABroadcastMsg_LANLobbyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTABroadcastMsg_LANLobbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTABroadcastMsg_LANLobbyRequest* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcastMsg_LANLobbyRequest*>(
               &_CDOTABroadcastMsg_LANLobbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CDOTABroadcastMsg_LANLobbyRequest& a, CDOTABroadcastMsg_LANLobbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTABroadcastMsg_LANLobbyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTABroadcastMsg_LANLobbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTABroadcastMsg_LANLobbyRequest* New() const final {
    return CreateMaybeMessage<CDOTABroadcastMsg_LANLobbyRequest>(nullptr);
  }

  CDOTABroadcastMsg_LANLobbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTABroadcastMsg_LANLobbyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTABroadcastMsg_LANLobbyRequest& from);
  void MergeFrom(const CDOTABroadcastMsg_LANLobbyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTABroadcastMsg_LANLobbyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTABroadcastMsg_LANLobbyRequest";
  }
  protected:
  explicit CDOTABroadcastMsg_LANLobbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fbroadcastmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg_LANLobbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dota_5fbroadcastmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTABroadcastMsg_LANLobbyReply_CLobbyMember PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember) */ {
 public:
  inline CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() : CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(nullptr) {}
  virtual ~CDOTABroadcastMsg_LANLobbyReply_CLobbyMember();
  explicit constexpr CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from);
  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember&& from) noexcept
    : CDOTABroadcastMsg_LANLobbyReply_CLobbyMember() {
    *this = ::std::move(from);
  }

  inline CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& operator=(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& operator=(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember*>(
               &_CDOTABroadcastMsg_LANLobbyReply_CLobbyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& a, CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* New() const final {
    return CreateMaybeMessage<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>(nullptr);
  }

  CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTABroadcastMsg_LANLobbyReply_CLobbyMember>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from);
  void MergeFrom(const CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTABroadcastMsg_LANLobbyReply.CLobbyMember";
  }
  protected:
  explicit CDOTABroadcastMsg_LANLobbyReply_CLobbyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fbroadcastmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // optional string player_name = 2;
  bool has_player_name() const;
  private:
  bool _internal_has_player_name() const;
  public:
  void clear_player_name();
  const std::string& player_name() const;
  void set_player_name(const std::string& value);
  void set_player_name(std::string&& value);
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  std::string* mutable_player_name();
  std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  private:
  bool _internal_has_account_id() const;
  public:
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 account_id_;
  friend struct ::TableStruct_dota_5fbroadcastmessages_2eproto;
};
// -------------------------------------------------------------------

class CDOTABroadcastMsg_LANLobbyReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CDOTABroadcastMsg_LANLobbyReply) */ {
 public:
  inline CDOTABroadcastMsg_LANLobbyReply() : CDOTABroadcastMsg_LANLobbyReply(nullptr) {}
  virtual ~CDOTABroadcastMsg_LANLobbyReply();
  explicit constexpr CDOTABroadcastMsg_LANLobbyReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CDOTABroadcastMsg_LANLobbyReply(const CDOTABroadcastMsg_LANLobbyReply& from);
  CDOTABroadcastMsg_LANLobbyReply(CDOTABroadcastMsg_LANLobbyReply&& from) noexcept
    : CDOTABroadcastMsg_LANLobbyReply() {
    *this = ::std::move(from);
  }

  inline CDOTABroadcastMsg_LANLobbyReply& operator=(const CDOTABroadcastMsg_LANLobbyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDOTABroadcastMsg_LANLobbyReply& operator=(CDOTABroadcastMsg_LANLobbyReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CDOTABroadcastMsg_LANLobbyReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDOTABroadcastMsg_LANLobbyReply* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcastMsg_LANLobbyReply*>(
               &_CDOTABroadcastMsg_LANLobbyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CDOTABroadcastMsg_LANLobbyReply& a, CDOTABroadcastMsg_LANLobbyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CDOTABroadcastMsg_LANLobbyReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDOTABroadcastMsg_LANLobbyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CDOTABroadcastMsg_LANLobbyReply* New() const final {
    return CreateMaybeMessage<CDOTABroadcastMsg_LANLobbyReply>(nullptr);
  }

  CDOTABroadcastMsg_LANLobbyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CDOTABroadcastMsg_LANLobbyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CDOTABroadcastMsg_LANLobbyReply& from);
  void MergeFrom(const CDOTABroadcastMsg_LANLobbyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTABroadcastMsg_LANLobbyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CDOTABroadcastMsg_LANLobbyReply";
  }
  protected:
  explicit CDOTABroadcastMsg_LANLobbyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_dota_5fbroadcastmessages_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef CDOTABroadcastMsg_LANLobbyReply_CLobbyMember CLobbyMember;

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 4,
    kNameFieldNumber = 8,
    kIdFieldNumber = 1,
    kTournamentIdFieldNumber = 2,
    kTournamentGameIdFieldNumber = 3,
    kRequiresPassKeyFieldNumber = 5,
    kLeaderAccountIdFieldNumber = 6,
    kGameModeFieldNumber = 7,
    kPlayersFieldNumber = 9,
  };
  // repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >*
      mutable_members();
  private:
  const ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& _internal_members(int index) const;
  ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* _internal_add_members();
  public:
  const ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& members(int index) const;
  ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >&
      members() const;

  // optional string name = 8;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 tournament_id = 2;
  bool has_tournament_id() const;
  private:
  bool _internal_has_tournament_id() const;
  public:
  void clear_tournament_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_id() const;
  void set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tournament_id() const;
  void _internal_set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tournament_game_id = 3;
  bool has_tournament_game_id() const;
  private:
  bool _internal_has_tournament_game_id() const;
  public:
  void clear_tournament_game_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_game_id() const;
  void set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tournament_game_id() const;
  void _internal_set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool requires_pass_key = 5;
  bool has_requires_pass_key() const;
  private:
  bool _internal_has_requires_pass_key() const;
  public:
  void clear_requires_pass_key();
  bool requires_pass_key() const;
  void set_requires_pass_key(bool value);
  private:
  bool _internal_requires_pass_key() const;
  void _internal_set_requires_pass_key(bool value);
  public:

  // optional uint32 leader_account_id = 6;
  bool has_leader_account_id() const;
  private:
  bool _internal_has_leader_account_id() const;
  public:
  void clear_leader_account_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id() const;
  void set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_leader_account_id() const;
  void _internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 game_mode = 7;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode() const;
  void set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_game_mode() const;
  void _internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 players = 9;
  bool has_players() const;
  private:
  bool _internal_has_players() const;
  public:
  void clear_players();
  ::PROTOBUF_NAMESPACE_ID::uint32 players() const;
  void set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_players() const;
  void _internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CDOTABroadcastMsg_LANLobbyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tournament_game_id_;
  bool requires_pass_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 leader_account_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 game_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 players_;
  friend struct ::TableStruct_dota_5fbroadcastmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDOTABroadcastMsg

// required .EDotaBroadcastMessages type = 1 [default = DOTA_BM_LANLobbyRequest];
inline bool CDOTABroadcastMsg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg::has_type() const {
  return _internal_has_type();
}
inline void CDOTABroadcastMsg::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::EDotaBroadcastMessages CDOTABroadcastMsg::_internal_type() const {
  return static_cast< ::EDotaBroadcastMessages >(type_);
}
inline ::EDotaBroadcastMessages CDOTABroadcastMsg::type() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg.type)
  return _internal_type();
}
inline void CDOTABroadcastMsg::_internal_set_type(::EDotaBroadcastMessages value) {
  assert(::EDotaBroadcastMessages_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void CDOTABroadcastMsg::set_type(::EDotaBroadcastMessages value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg.type)
}

// optional bytes msg = 2;
inline bool CDOTABroadcastMsg::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg::has_msg() const {
  return _internal_has_msg();
}
inline void CDOTABroadcastMsg::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTABroadcastMsg::msg() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg.msg)
  return _internal_msg();
}
inline void CDOTABroadcastMsg::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg.msg)
}
inline std::string* CDOTABroadcastMsg::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg.msg)
  return _internal_mutable_msg();
}
inline const std::string& CDOTABroadcastMsg::_internal_msg() const {
  return msg_.Get();
}
inline void CDOTABroadcastMsg::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTABroadcastMsg::set_msg(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTABroadcastMsg.msg)
}
inline void CDOTABroadcastMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTABroadcastMsg.msg)
}
inline void CDOTABroadcastMsg::set_msg(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcastMsg.msg)
}
inline std::string* CDOTABroadcastMsg::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTABroadcastMsg::release_msg() {
  // @@protoc_insertion_point(field_release:CDOTABroadcastMsg.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTABroadcastMsg::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcastMsg.msg)
}

// -------------------------------------------------------------------

// CDOTABroadcastMsg_LANLobbyRequest

// -------------------------------------------------------------------

// CDOTABroadcastMsg_LANLobbyReply_CLobbyMember

// optional uint32 account_id = 1;
inline bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_has_account_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::has_account_id() const {
  return _internal_has_account_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
  return _internal_account_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  account_id_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.account_id)
}

// optional string player_name = 2;
inline bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_has_player_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::has_player_name() const {
  return _internal_has_player_name();
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::clear_player_name() {
  player_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  return _internal_player_name();
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const std::string& value) {
  _internal_set_player_name(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::mutable_player_name() {
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  return _internal_mutable_player_name();
}
inline const std::string& CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_player_name() const {
  return player_name_.Get();
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_set_player_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_player_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  player_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}
inline std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::_internal_mutable_player_name() {
  _has_bits_[0] |= 0x00000001u;
  return player_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::release_player_name() {
  // @@protoc_insertion_point(field_release:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
  if (!_internal_has_player_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return player_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTABroadcastMsg_LANLobbyReply_CLobbyMember::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  player_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcastMsg_LANLobbyReply.CLobbyMember.player_name)
}

// -------------------------------------------------------------------

// CDOTABroadcastMsg_LANLobbyReply

// optional uint64 id = 1;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_id() const {
  return _internal_has_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTABroadcastMsg_LANLobbyReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CDOTABroadcastMsg_LANLobbyReply::id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.id)
  return _internal_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.id)
}

// optional uint32 tournament_id = 2;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_tournament_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_tournament_id() const {
  return _internal_has_tournament_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_tournament_id() {
  tournament_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::_internal_tournament_id() const {
  return tournament_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::tournament_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.tournament_id)
  return _internal_tournament_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tournament_id_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_tournament_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tournament_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.tournament_id)
}

// optional uint32 tournament_game_id = 3;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_tournament_game_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_tournament_game_id() const {
  return _internal_has_tournament_game_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::_internal_tournament_game_id() const {
  return tournament_game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
  return _internal_tournament_game_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tournament_game_id_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_tournament_game_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tournament_game_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.tournament_game_id)
}

// repeated .CDOTABroadcastMsg_LANLobbyReply.CLobbyMember members = 4;
inline int CDOTABroadcastMsg_LANLobbyReply::_internal_members_size() const {
  return members_.size();
}
inline int CDOTABroadcastMsg_LANLobbyReply::members_size() const {
  return _internal_members_size();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_members() {
  members_.Clear();
}
inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg_LANLobbyReply.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >*
CDOTABroadcastMsg_LANLobbyReply::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:CDOTABroadcastMsg_LANLobbyReply.members)
  return &members_;
}
inline const ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember& CDOTABroadcastMsg_LANLobbyReply::members(int index) const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.members)
  return _internal_members(index);
}
inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::_internal_add_members() {
  return members_.Add();
}
inline ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember* CDOTABroadcastMsg_LANLobbyReply::add_members() {
  // @@protoc_insertion_point(field_add:CDOTABroadcastMsg_LANLobbyReply.members)
  return _internal_add_members();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CDOTABroadcastMsg_LANLobbyReply_CLobbyMember >&
CDOTABroadcastMsg_LANLobbyReply::members() const {
  // @@protoc_insertion_point(field_list:CDOTABroadcastMsg_LANLobbyReply.members)
  return members_;
}

// optional bool requires_pass_key = 5;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_requires_pass_key() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_requires_pass_key() const {
  return _internal_has_requires_pass_key();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_requires_pass_key() {
  requires_pass_key_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_requires_pass_key() const {
  return requires_pass_key_;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
  return _internal_requires_pass_key();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_requires_pass_key(bool value) {
  _has_bits_[0] |= 0x00000010u;
  requires_pass_key_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_requires_pass_key(bool value) {
  _internal_set_requires_pass_key(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.requires_pass_key)
}

// optional uint32 leader_account_id = 6;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_leader_account_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_leader_account_id() const {
  return _internal_has_leader_account_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_leader_account_id() {
  leader_account_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::_internal_leader_account_id() const {
  return leader_account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::leader_account_id() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
  return _internal_leader_account_id();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  leader_account_id_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_leader_account_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_leader_account_id(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.leader_account_id)
}

// optional uint32 game_mode = 7;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_game_mode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_game_mode() {
  game_mode_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::_internal_game_mode() const {
  return game_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::game_mode() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.game_mode)
  return _internal_game_mode();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  game_mode_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_game_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_game_mode(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.game_mode)
}

// optional string name = 8;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_name() const {
  return _internal_has_name();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDOTABroadcastMsg_LANLobbyReply::name() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.name)
  return _internal_name();
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline std::string* CDOTABroadcastMsg_LANLobbyReply::mutable_name() {
  // @@protoc_insertion_point(field_mutable:CDOTABroadcastMsg_LANLobbyReply.name)
  return _internal_mutable_name();
}
inline const std::string& CDOTABroadcastMsg_LANLobbyReply::_internal_name() const {
  return name_.Get();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CDOTABroadcastMsg_LANLobbyReply.name)
}
inline std::string* CDOTABroadcastMsg_LANLobbyReply::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CDOTABroadcastMsg_LANLobbyReply::release_name() {
  // @@protoc_insertion_point(field_release:CDOTABroadcastMsg_LANLobbyReply.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CDOTABroadcastMsg_LANLobbyReply.name)
}

// optional uint32 players = 9;
inline bool CDOTABroadcastMsg_LANLobbyReply::_internal_has_players() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CDOTABroadcastMsg_LANLobbyReply::has_players() const {
  return _internal_has_players();
}
inline void CDOTABroadcastMsg_LANLobbyReply::clear_players() {
  players_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::_internal_players() const {
  return players_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CDOTABroadcastMsg_LANLobbyReply::players() const {
  // @@protoc_insertion_point(field_get:CDOTABroadcastMsg_LANLobbyReply.players)
  return _internal_players();
}
inline void CDOTABroadcastMsg_LANLobbyReply::_internal_set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  players_ = value;
}
inline void CDOTABroadcastMsg_LANLobbyReply::set_players(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_players(value);
  // @@protoc_insertion_point(field_set:CDOTABroadcastMsg_LANLobbyReply.players)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EDotaBroadcastMessages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EDotaBroadcastMessages>() {
  return ::EDotaBroadcastMessages_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dota_5fbroadcastmessages_2eproto
