// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_team.proto

#include "dota_gcmessages_client_team.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_ids_()
  , account_id_(0u)
  , profile_team_id_(0u){}
struct CMsgDOTATeamMemberSDODefaultTypeInternal {
  constexpr CMsgDOTATeamMemberSDODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamMemberSDODefaultTypeInternal() {}
  union {
    CMsgDOTATeamMemberSDO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamMemberSDODefaultTypeInternal _CMsgDOTATeamMemberSDO_default_instance_;
constexpr CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_ids_()
  , account_id_(0u){}
struct CMsgDOTATeamAdminSDODefaultTypeInternal {
  constexpr CMsgDOTATeamAdminSDODefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamAdminSDODefaultTypeInternal() {}
  union {
    CMsgDOTATeamAdminSDO _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamAdminSDODefaultTypeInternal _CMsgDOTATeamAdminSDO_default_instance_;
constexpr CMsgDOTATeamMember::CMsgDOTATeamMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , time_joined_(0u){}
struct CMsgDOTATeamMemberDefaultTypeInternal {
  constexpr CMsgDOTATeamMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamMemberDefaultTypeInternal() {}
  union {
    CMsgDOTATeamMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamMemberDefaultTypeInternal _CMsgDOTATeamMember_default_instance_;
constexpr CMsgDOTATeam::CMsgDOTATeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , leagues_()
  , recent_match_ids_()
  , top_match_ids_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(0u)
  , admin_id_(0u)
  , time_created_(0u)
  , wins_(0u)
  , losses_(0u)
  , rank_(0u)
  , logo_(PROTOBUF_ULONGLONG(0))
  , base_logo_(PROTOBUF_ULONGLONG(0))
  , banner_logo_(PROTOBUF_ULONGLONG(0))
  , sponsor_logo_(PROTOBUF_ULONGLONG(0))
  , fullgamesplayed_(0u)
  , disbanded_(false)
  , pickup_team_(false)
  , gamesplayed_(0u)
  , gamesplayedwithcurrentroster_(0u)
  , teammatchmakinggamesplayed_(0u)
  , lastplayedgametime_(0u)
  , lastrenametime_(0u)
  , calibration_games_remaining_(0u){}
struct CMsgDOTATeamDefaultTypeInternal {
  constexpr CMsgDOTATeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamDefaultTypeInternal() {}
  union {
    CMsgDOTATeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamDefaultTypeInternal _CMsgDOTATeam_default_instance_;
constexpr CMsgDOTATeamInfo_HeroStats::CMsgDOTATeamInfo_HeroStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , picks_(0u)
  , wins_(0u)
  , bans_(0u)
  , avg_kills_(0)
  , avg_deaths_(0)
  , avg_assists_(0)
  , avg_gpm_(0)
  , avg_xpm_(0){}
struct CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal {
  constexpr CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_HeroStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfo_HeroStatsDefaultTypeInternal _CMsgDOTATeamInfo_HeroStats_default_instance_;
constexpr CMsgDOTATeamInfo_MemberStats::CMsgDOTATeamInfo_MemberStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : top_heroes_()
  , account_id_(0u)
  , wins_with_team_(0u)
  , losses_with_team_(0u)
  , avg_kills_(0)
  , avg_deaths_(0)
  , avg_assists_(0){}
struct CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal {
  constexpr CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_MemberStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfo_MemberStatsDefaultTypeInternal _CMsgDOTATeamInfo_MemberStats_default_instance_;
constexpr CMsgDOTATeamInfo_TeamStats::CMsgDOTATeamInfo_TeamStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : played_heroes_()
  , farming_(0)
  , fighting_(0)
  , versatility_(0)
  , avg_kills_(0)
  , avg_deaths_(0)
  , avg_duration_(0){}
struct CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal {
  constexpr CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_TeamStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfo_TeamStatsDefaultTypeInternal _CMsgDOTATeamInfo_TeamStats_default_instance_;
constexpr CMsgDOTATeamInfo_DPCResult::CMsgDOTATeamInfo_DPCResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : league_id_(0u)
  , standing_(0u)
  , points_(0u)
  , earnings_(0u)
  , timestamp_(0u){}
struct CMsgDOTATeamInfo_DPCResultDefaultTypeInternal {
  constexpr CMsgDOTATeamInfo_DPCResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_DPCResultDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_DPCResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfo_DPCResultDefaultTypeInternal _CMsgDOTATeamInfo_DPCResult_default_instance_;
constexpr CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pro_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , real_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , time_joined_(0u)
  , admin_(false)
  , role_(0)
{}
struct CMsgDOTATeamInfo_MemberDefaultTypeInternal {
  constexpr CMsgDOTATeamInfo_MemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_MemberDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_Member _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfo_MemberDefaultTypeInternal _CMsgDOTATeamInfo_Member_default_instance_;
constexpr CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : audit_action_(0u)
  , timestamp_(0u)
  , account_id_(0u){}
struct CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal {
  constexpr CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo_AuditEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfo_AuditEntryDefaultTypeInternal _CMsgDOTATeamInfo_AuditEntry_default_instance_;
constexpr CMsgDOTATeamInfo::CMsgDOTATeamInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : members_()
  , registered_member_account_ids_()
  , audit_entries_()
  , member_stats_()
  , dpc_results_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_logo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_primary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_secondary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_stats_(nullptr)
  , team_id_(0u)
  , time_created_(0u)
  , ugc_logo_(PROTOBUF_ULONGLONG(0))
  , pro_(false)
  , pickup_team_(false)
  , wins_(0u)
  , ugc_base_logo_(PROTOBUF_ULONGLONG(0))
  , ugc_banner_logo_(PROTOBUF_ULONGLONG(0))
  , ugc_sponsor_logo_(PROTOBUF_ULONGLONG(0))
  , losses_(0u)
  , games_played_total_(0u)
  , games_played_matchmaking_(0u)
  , region_(0)

  , coach_account_id_(0u)
  , team_captain_(0u){}
struct CMsgDOTATeamInfoDefaultTypeInternal {
  constexpr CMsgDOTATeamInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfoDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfoDefaultTypeInternal _CMsgDOTATeamInfo_default_instance_;
constexpr CMsgDOTATeamInfoRequest::CMsgDOTATeamInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(nullptr){}
struct CMsgDOTATeamInfoRequestDefaultTypeInternal {
  constexpr CMsgDOTATeamInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfoRequestDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfoRequestDefaultTypeInternal _CMsgDOTATeamInfoRequest_default_instance_;
constexpr CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , league_id_(0u){}
struct CMsgDOTATeamsInfoDefaultTypeInternal {
  constexpr CMsgDOTATeamsInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamsInfoDefaultTypeInternal() {}
  union {
    CMsgDOTATeamsInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamsInfoDefaultTypeInternal _CMsgDOTATeamsInfo_default_instance_;
constexpr CMsgDOTATeamInfoList::CMsgDOTATeamInfoList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_(){}
struct CMsgDOTATeamInfoListDefaultTypeInternal {
  constexpr CMsgDOTATeamInfoListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInfoListDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInfoList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInfoListDefaultTypeInternal _CMsgDOTATeamInfoList_default_instance_;
constexpr CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgDOTAMyTeamInfoRequestDefaultTypeInternal {
  constexpr CMsgDOTAMyTeamInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAMyTeamInfoRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAMyTeamInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAMyTeamInfoRequestDefaultTypeInternal _CMsgDOTAMyTeamInfoRequest_default_instance_;
constexpr CMsgDOTACreateTeam::CMsgDOTACreateTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(PROTOBUF_ULONGLONG(0))
  , base_logo_(PROTOBUF_ULONGLONG(0))
  , banner_logo_(PROTOBUF_ULONGLONG(0))
  , sponsor_logo_(PROTOBUF_ULONGLONG(0))
  , pickup_team_(false){}
struct CMsgDOTACreateTeamDefaultTypeInternal {
  constexpr CMsgDOTACreateTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTACreateTeamDefaultTypeInternal() {}
  union {
    CMsgDOTACreateTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTACreateTeamDefaultTypeInternal _CMsgDOTACreateTeam_default_instance_;
constexpr CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u)
  , result_(-1)
{}
struct CMsgDOTACreateTeamResponseDefaultTypeInternal {
  constexpr CMsgDOTACreateTeamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTACreateTeamResponseDefaultTypeInternal() {}
  union {
    CMsgDOTACreateTeamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTACreateTeamResponseDefaultTypeInternal _CMsgDOTACreateTeamResponse_default_instance_;
constexpr CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , abbreviation_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(PROTOBUF_ULONGLONG(0))
  , base_logo_(PROTOBUF_ULONGLONG(0))
  , team_id_(0u)
  , in_use_by_party_(false)
  , banner_logo_(PROTOBUF_ULONGLONG(0))
  , sponsor_logo_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDOTAEditTeamDetailsDefaultTypeInternal {
  constexpr CMsgDOTAEditTeamDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAEditTeamDetailsDefaultTypeInternal() {}
  union {
    CMsgDOTAEditTeamDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAEditTeamDetailsDefaultTypeInternal _CMsgDOTAEditTeamDetails_default_instance_;
constexpr CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal {
  constexpr CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAEditTeamDetailsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAEditTeamDetailsResponseDefaultTypeInternal _CMsgDOTAEditTeamDetailsResponse_default_instance_;
constexpr CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_(nullptr)
  , eresult_(0u){}
struct CMsgDOTATeamProfileResponseDefaultTypeInternal {
  constexpr CMsgDOTATeamProfileResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamProfileResponseDefaultTypeInternal() {}
  union {
    CMsgDOTATeamProfileResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamProfileResponseDefaultTypeInternal _CMsgDOTATeamProfileResponse_default_instance_;
constexpr CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgDOTAProTeamListRequestDefaultTypeInternal {
  constexpr CMsgDOTAProTeamListRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProTeamListRequestDefaultTypeInternal() {}
  union {
    CMsgDOTAProTeamListRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProTeamListRequestDefaultTypeInternal _CMsgDOTAProTeamListRequest_default_instance_;
constexpr CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(0u)
  , time_created_(0u)
  , logo_(PROTOBUF_ULONGLONG(0))
  , member_count_(0u){}
struct CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal {
  constexpr CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal() {}
  union {
    CMsgDOTAProTeamListResponse_TeamEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProTeamListResponse_TeamEntryDefaultTypeInternal _CMsgDOTAProTeamListResponse_TeamEntry_default_instance_;
constexpr CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , eresult_(0u){}
struct CMsgDOTAProTeamListResponseDefaultTypeInternal {
  constexpr CMsgDOTAProTeamListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAProTeamListResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAProTeamListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAProTeamListResponseDefaultTypeInternal _CMsgDOTAProTeamListResponse_default_instance_;
constexpr CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , team_id_(0u){}
struct CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal {
  constexpr CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_InviterToGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInvite_InviterToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviterToGC_default_instance_;
constexpr CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitee_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)

  , required_play_time_(0u){}
struct CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal {
  constexpr CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCImmediateResponseToInviter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInvite_GCImmediateResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_;
constexpr CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , logo_(PROTOBUF_ULONGLONG(0))
  , inviter_account_id_(0u){}
struct CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal {
  constexpr CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCRequestToInvitee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInvite_GCRequestToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_;
constexpr CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal {
  constexpr CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_InviteeResponseToGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInvite_InviteeResponseToGCDefaultTypeInternal _CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_;
constexpr CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : invitee_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal {
  constexpr CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCResponseToInviter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInvite_GCResponseToInviterDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInviter_default_instance_;
constexpr CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)
{}
struct CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal {
  constexpr CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal() {}
  union {
    CMsgDOTATeamInvite_GCResponseToInvitee _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATeamInvite_GCResponseToInviteeDefaultTypeInternal _CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_;
constexpr CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , team_id_(0u){}
struct CMsgDOTAKickTeamMemberDefaultTypeInternal {
  constexpr CMsgDOTAKickTeamMemberDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAKickTeamMemberDefaultTypeInternal() {}
  union {
    CMsgDOTAKickTeamMember _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAKickTeamMemberDefaultTypeInternal _CMsgDOTAKickTeamMember_default_instance_;
constexpr CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTAKickTeamMemberResponseDefaultTypeInternal {
  constexpr CMsgDOTAKickTeamMemberResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTAKickTeamMemberResponseDefaultTypeInternal() {}
  union {
    CMsgDOTAKickTeamMemberResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTAKickTeamMemberResponseDefaultTypeInternal _CMsgDOTAKickTeamMemberResponse_default_instance_;
constexpr CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : new_admin_account_id_(0u)
  , team_id_(0u){}
struct CMsgDOTATransferTeamAdminDefaultTypeInternal {
  constexpr CMsgDOTATransferTeamAdminDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATransferTeamAdminDefaultTypeInternal() {}
  union {
    CMsgDOTATransferTeamAdmin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATransferTeamAdminDefaultTypeInternal _CMsgDOTATransferTeamAdmin_default_instance_;
constexpr CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTATransferTeamAdminResponseDefaultTypeInternal {
  constexpr CMsgDOTATransferTeamAdminResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTATransferTeamAdminResponseDefaultTypeInternal() {}
  union {
    CMsgDOTATransferTeamAdminResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTATransferTeamAdminResponseDefaultTypeInternal _CMsgDOTATransferTeamAdminResponse_default_instance_;
constexpr CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_id_(0u){}
struct CMsgDOTALeaveTeamDefaultTypeInternal {
  constexpr CMsgDOTALeaveTeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeaveTeamDefaultTypeInternal() {}
  union {
    CMsgDOTALeaveTeam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeaveTeamDefaultTypeInternal _CMsgDOTALeaveTeam_default_instance_;
constexpr CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct CMsgDOTALeaveTeamResponseDefaultTypeInternal {
  constexpr CMsgDOTALeaveTeamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTALeaveTeamResponseDefaultTypeInternal() {}
  union {
    CMsgDOTALeaveTeamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTALeaveTeamResponseDefaultTypeInternal _CMsgDOTALeaveTeamResponse_default_instance_;
constexpr CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_rights_(0u){}
struct CMsgDOTABetaParticipationDefaultTypeInternal {
  constexpr CMsgDOTABetaParticipationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTABetaParticipationDefaultTypeInternal() {}
  union {
    CMsgDOTABetaParticipation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTABetaParticipationDefaultTypeInternal _CMsgDOTABetaParticipation_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto[36];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5fteam_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMemberSDO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMemberSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMemberSDO, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMemberSDO, team_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMemberSDO, profile_team_id_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamAdminSDO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamAdminSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamAdminSDO, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamAdminSDO, team_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamMember, time_joined_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, admin_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, disbanded_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, rank_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, calibration_games_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, fullgamesplayed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, leagues_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, gamesplayed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, gamesplayedwithcurrentroster_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, teammatchmakinggamesplayed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, lastplayedgametime_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, lastrenametime_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, recent_match_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, top_match_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeam, pickup_team_),
  ~0u,
  4,
  0,
  1,
  5,
  6,
  15,
  7,
  8,
  9,
  22,
  10,
  11,
  12,
  13,
  2,
  3,
  14,
  ~0u,
  17,
  18,
  19,
  20,
  21,
  ~0u,
  ~0u,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, picks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, bans_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, avg_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, avg_assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, avg_gpm_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_HeroStats, avg_xpm_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, wins_with_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, losses_with_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, top_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, avg_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_MemberStats, avg_assists_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, played_heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, farming_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, fighting_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, versatility_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, avg_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, avg_deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_TeamStats, avg_duration_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, standing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, points_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, earnings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_DPCResult, timestamp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, time_joined_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, admin_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, pro_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, role_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_Member, real_name_),
  2,
  3,
  4,
  0,
  5,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, audit_action_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo_AuditEntry, account_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, members_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, pro_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, pickup_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, ugc_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, ugc_base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, ugc_banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, ugc_sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, wins_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, losses_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, games_played_total_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, games_played_matchmaking_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, url_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, registered_member_account_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, coach_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, audit_entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, region_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, abbreviation_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, member_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, team_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, dpc_results_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, color_primary_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, color_secondary_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfo, team_captain_),
  ~0u,
  9,
  0,
  1,
  10,
  12,
  13,
  11,
  15,
  16,
  17,
  2,
  3,
  14,
  18,
  19,
  20,
  4,
  ~0u,
  22,
  ~0u,
  21,
  5,
  ~0u,
  8,
  ~0u,
  6,
  7,
  23,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoRequest, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamsInfo, teams_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInfoList, teams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAMyTeamInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, pickup_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeam, abbreviation_),
  0,
  1,
  5,
  6,
  7,
  8,
  2,
  3,
  9,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTACreateTeamResponse, team_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, base_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, banner_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, sponsor_logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, in_use_by_party_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetails, abbreviation_),
  7,
  0,
  1,
  5,
  6,
  9,
  10,
  2,
  3,
  8,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetailsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAEditTeamDetailsResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamProfileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamProfileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamProfileResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamProfileResponse, team_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, logo_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse_TeamEntry, member_count_),
  2,
  0,
  3,
  4,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAProTeamListResponse, eresult_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviterToGC, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, invitee_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCImmediateResponseToInviter, required_play_time_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, inviter_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, team_tag_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCRequestToInvitee, logo_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviteeResponseToGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviteeResponseToGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_InviteeResponseToGC, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInviter, invitee_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, result_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATeamInvite_GCResponseToInvitee, team_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMember, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMemberResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMemberResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTAKickTeamMemberResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, new_admin_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdmin, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdminResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdminResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTATransferTeamAdminResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeam, team_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeamResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTALeaveTeamResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABetaParticipation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABetaParticipation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTABetaParticipation, access_rights_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::CMsgDOTATeamMemberSDO)},
  { 11, 18, sizeof(::CMsgDOTATeamAdminSDO)},
  { 20, 27, sizeof(::CMsgDOTATeamMember)},
  { 29, 61, sizeof(::CMsgDOTATeam)},
  { 88, 102, sizeof(::CMsgDOTATeamInfo_HeroStats)},
  { 111, 123, sizeof(::CMsgDOTATeamInfo_MemberStats)},
  { 130, 142, sizeof(::CMsgDOTATeamInfo_TeamStats)},
  { 149, 159, sizeof(::CMsgDOTATeamInfo_DPCResult)},
  { 164, 175, sizeof(::CMsgDOTATeamInfo_Member)},
  { 181, 189, sizeof(::CMsgDOTATeamInfo_AuditEntry)},
  { 192, 226, sizeof(::CMsgDOTATeamInfo)},
  { 255, 261, sizeof(::CMsgDOTATeamInfoRequest)},
  { 262, 269, sizeof(::CMsgDOTATeamsInfo)},
  { 271, -1, sizeof(::CMsgDOTATeamInfoList)},
  { 277, -1, sizeof(::CMsgDOTAMyTeamInfoRequest)},
  { 282, 297, sizeof(::CMsgDOTACreateTeam)},
  { 307, 314, sizeof(::CMsgDOTACreateTeamResponse)},
  { 316, 332, sizeof(::CMsgDOTAEditTeamDetails)},
  { 343, 349, sizeof(::CMsgDOTAEditTeamDetailsResponse)},
  { 350, 357, sizeof(::CMsgDOTATeamProfileResponse)},
  { 359, -1, sizeof(::CMsgDOTAProTeamListRequest)},
  { 364, 375, sizeof(::CMsgDOTAProTeamListResponse_TeamEntry)},
  { 381, 388, sizeof(::CMsgDOTAProTeamListResponse)},
  { 390, 397, sizeof(::CMsgDOTATeamInvite_InviterToGC)},
  { 399, 407, sizeof(::CMsgDOTATeamInvite_GCImmediateResponseToInviter)},
  { 410, 419, sizeof(::CMsgDOTATeamInvite_GCRequestToInvitee)},
  { 423, 429, sizeof(::CMsgDOTATeamInvite_InviteeResponseToGC)},
  { 430, 437, sizeof(::CMsgDOTATeamInvite_GCResponseToInviter)},
  { 439, 446, sizeof(::CMsgDOTATeamInvite_GCResponseToInvitee)},
  { 448, 455, sizeof(::CMsgDOTAKickTeamMember)},
  { 457, 463, sizeof(::CMsgDOTAKickTeamMemberResponse)},
  { 464, 471, sizeof(::CMsgDOTATransferTeamAdmin)},
  { 473, 479, sizeof(::CMsgDOTATransferTeamAdminResponse)},
  { 480, 486, sizeof(::CMsgDOTALeaveTeam)},
  { 487, 493, sizeof(::CMsgDOTALeaveTeamResponse)},
  { 494, 500, sizeof(::CMsgDOTABetaParticipation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamMemberSDO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamAdminSDO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_HeroStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_MemberStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_TeamStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_DPCResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_Member_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_AuditEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamsInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInfoList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAMyTeamInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTACreateTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTACreateTeamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAEditTeamDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAEditTeamDetailsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamProfileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProTeamListRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProTeamListResponse_TeamEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAProTeamListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInvite_InviterToGC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInvite_GCImmediateResponseToInviter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInvite_GCRequestToInvitee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInvite_InviteeResponseToGC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInvite_GCResponseToInviter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATeamInvite_GCResponseToInvitee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAKickTeamMember_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTAKickTeamMemberResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATransferTeamAdmin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTATransferTeamAdminResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeaveTeam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTALeaveTeamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTABetaParticipation_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fteam_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!dota_gcmessages_client_team.proto\032\027dot"
  "a_shared_enums.proto\"V\n\025CMsgDOTATeamMemb"
  "erSDO\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010team_ids\030\002 "
  "\003(\r\022\027\n\017profile_team_id\030\003 \001(\r\"<\n\024CMsgDOTA"
  "TeamAdminSDO\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010team"
  "_ids\030\002 \003(\r\"=\n\022CMsgDOTATeamMember\022\022\n\nacco"
  "unt_id\030\001 \001(\r\022\023\n\013time_joined\030\004 \001(\r\"\336\004\n\014CM"
  "sgDOTATeam\022$\n\007members\030\001 \003(\0132\023.CMsgDOTATe"
  "amMember\022\017\n\007team_id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022"
  "\013\n\003tag\030\004 \001(\t\022\020\n\010admin_id\030\005 \001(\r\022\024\n\014time_c"
  "reated\030\006 \001(\r\022\021\n\tdisbanded\030\007 \001(\010\022\014\n\004wins\030"
  "\010 \001(\r\022\016\n\006losses\030\t \001(\r\022\014\n\004rank\030\n \001(\r\022#\n\033c"
  "alibration_games_remaining\030\030 \001(\r\022\014\n\004logo"
  "\030\013 \001(\004\022\021\n\tbase_logo\030\014 \001(\004\022\023\n\013banner_logo"
  "\030\r \001(\004\022\024\n\014sponsor_logo\030\016 \001(\004\022\024\n\014country_"
  "code\030\017 \001(\t\022\013\n\003url\030\020 \001(\t\022\027\n\017fullgamesplay"
  "ed\030\021 \001(\r\022\017\n\007leagues\030\022 \003(\r\022\023\n\013gamesplayed"
  "\030\023 \001(\r\022$\n\034gamesplayedwithcurrentroster\030\024"
  " \001(\r\022\"\n\032teammatchmakinggamesplayed\030\025 \001(\r"
  "\022\032\n\022lastplayedgametime\030\026 \001(\r\022\026\n\016lastrena"
  "metime\030\027 \001(\r\022\030\n\020recent_match_ids\030\031 \003(\004\022\025"
  "\n\rtop_match_ids\030\032 \003(\004\022\023\n\013pickup_team\030\033 \001"
  "(\010\"\237\r\n\020CMsgDOTATeamInfo\022)\n\007members\030\001 \003(\013"
  "2\030.CMsgDOTATeamInfo.Member\022\017\n\007team_id\030\002 "
  "\001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003tag\030\004 \001(\t\022\024\n\014time_c"
  "reated\030\005 \001(\r\022\013\n\003pro\030\006 \001(\010\022\023\n\013pickup_team"
  "\030\010 \001(\010\022\020\n\010ugc_logo\030\t \001(\004\022\025\n\rugc_base_log"
  "o\030\n \001(\004\022\027\n\017ugc_banner_logo\030\013 \001(\004\022\030\n\020ugc_"
  "sponsor_logo\030\014 \001(\004\022\024\n\014country_code\030\r \001(\t"
  "\022\013\n\003url\030\016 \001(\t\022\014\n\004wins\030\017 \001(\r\022\016\n\006losses\030\020 "
  "\001(\r\022\032\n\022games_played_total\030\023 \001(\r\022 \n\030games"
  "_played_matchmaking\030\024 \001(\r\022\020\n\010url_logo\030\030 "
  "\001(\t\022%\n\035registered_member_account_ids\030\036 \003"
  "(\r\022\030\n\020coach_account_id\030$ \001(\r\0223\n\raudit_en"
  "tries\030\037 \003(\0132\034.CMsgDOTATeamInfo.AuditEntr"
  "y\0223\n\006region\030\035 \001(\0162\016.ELeagueRegion:\023LEAGU"
  "E_REGION_UNSET\022\024\n\014abbreviation\030  \001(\t\0223\n\014"
  "member_stats\030! \003(\0132\035.CMsgDOTATeamInfo.Me"
  "mberStats\022/\n\nteam_stats\030\" \001(\0132\033.CMsgDOTA"
  "TeamInfo.TeamStats\0220\n\013dpc_results\030# \003(\0132"
  "\033.CMsgDOTATeamInfo.DPCResult\022\025\n\rcolor_pr"
  "imary\030% \001(\t\022\027\n\017color_secondary\030& \001(\t\022\024\n\014"
  "team_captain\030\' \001(\r\032\245\001\n\tHeroStats\022\017\n\007hero"
  "_id\030\001 \001(\r\022\r\n\005picks\030\002 \001(\r\022\014\n\004wins\030\003 \001(\r\022\014"
  "\n\004bans\030\004 \001(\r\022\021\n\tavg_kills\030\005 \001(\002\022\022\n\navg_d"
  "eaths\030\006 \001(\002\022\023\n\013avg_assists\030\007 \001(\002\022\017\n\007avg_"
  "gpm\030\010 \001(\002\022\017\n\007avg_xpm\030\t \001(\002\032\300\001\n\013MemberSta"
  "ts\022\022\n\naccount_id\030\001 \001(\r\022\026\n\016wins_with_team"
  "\030\002 \001(\r\022\030\n\020losses_with_team\030\003 \001(\r\022/\n\ntop_"
  "heroes\030\004 \003(\0132\033.CMsgDOTATeamInfo.HeroStat"
  "s\022\021\n\tavg_kills\030\005 \001(\002\022\022\n\navg_deaths\030\006 \001(\002"
  "\022\023\n\013avg_assists\030\007 \001(\002\032\264\001\n\tTeamStats\0222\n\rp"
  "layed_heroes\030\001 \003(\0132\033.CMsgDOTATeamInfo.He"
  "roStats\022\017\n\007farming\030\002 \001(\002\022\020\n\010fighting\030\003 \001"
  "(\002\022\023\n\013versatility\030\004 \001(\002\022\021\n\tavg_kills\030\005 \001"
  "(\002\022\022\n\navg_deaths\030\006 \001(\002\022\024\n\014avg_duration\030\007"
  " \001(\002\032e\n\tDPCResult\022\021\n\tleague_id\030\001 \001(\r\022\020\n\010"
  "standing\030\002 \001(\r\022\016\n\006points\030\003 \001(\r\022\020\n\010earnin"
  "gs\030\004 \001(\r\022\021\n\ttimestamp\030\005 \001(\r\032\233\001\n\006Member\022\022"
  "\n\naccount_id\030\001 \001(\r\022\023\n\013time_joined\030\002 \001(\r\022"
  "\r\n\005admin\030\003 \001(\010\022\020\n\010pro_name\030\006 \001(\t\0224\n\004role"
  "\030\010 \001(\0162\016.Fantasy_Roles:\026FANTASY_ROLE_UND"
  "EFINED\022\021\n\treal_name\030\t \001(\t\032I\n\nAuditEntry\022"
  "\024\n\014audit_action\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r"
  "\022\022\n\naccount_id\030\003 \001(\r\"<\n\027CMsgDOTATeamInfo"
  "Request\022!\n\006result\030\001 \001(\0132\021.CMsgDOTATeamIn"
  "fo\"H\n\021CMsgDOTATeamsInfo\022\021\n\tleague_id\030\001 \001"
  "(\r\022 \n\005teams\030\002 \003(\0132\021.CMsgDOTATeamInfo\"8\n\024"
  "CMsgDOTATeamInfoList\022 \n\005teams\030\001 \003(\0132\021.CM"
  "sgDOTATeamInfo\"\033\n\031CMsgDOTAMyTeamInfoRequ"
  "est\"\311\001\n\022CMsgDOTACreateTeam\022\014\n\004name\030\001 \001(\t"
  "\022\013\n\003tag\030\002 \001(\t\022\014\n\004logo\030\003 \001(\004\022\021\n\tbase_logo"
  "\030\004 \001(\004\022\023\n\013banner_logo\030\005 \001(\004\022\024\n\014sponsor_l"
  "ogo\030\006 \001(\004\022\024\n\014country_code\030\007 \001(\t\022\013\n\003url\030\010"
  " \001(\t\022\023\n\013pickup_team\030\t \001(\010\022\024\n\014abbreviatio"
  "n\030\n \001(\t\"\227\004\n\032CMsgDOTACreateTeamResponse\022;"
  "\n\006result\030\001 \001(\0162\".CMsgDOTACreateTeamRespo"
  "nse.Result:\007INVALID\022\017\n\007team_id\030\002 \001(\r\"\252\003\n"
  "\006Result\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\013\n\007SUCCESS"
  "\020\000\022\016\n\nNAME_EMPTY\020\001\022\027\n\023NAME_BAD_CHARACTER"
  "S\020\002\022\016\n\nNAME_TAKEN\020\003\022\021\n\rNAME_TOO_LONG\020\004\022\r"
  "\n\tTAG_EMPTY\020\005\022\026\n\022TAG_BAD_CHARACTERS\020\006\022\r\n"
  "\tTAG_TAKEN\020\007\022\020\n\014TAG_TOO_LONG\020\010\022\020\n\014CREATO"
  "R_BUSY\020\t\022\025\n\021UNSPECIFIED_ERROR\020\n\022\036\n\032CREAT"
  "OR_TEAM_LIMIT_REACHED\020\013\022\013\n\007NO_LOGO\020\014\022\"\n\036"
  "CREATOR_TEAM_CREATION_COOLDOWN\020\r\022\026\n\022LOGO"
  "_UPLOAD_FAILED\020\016\022\035\n\031NAME_CHANGED_TOO_REC"
  "ENTLY\020\017\022\036\n\032CREATOR_INSUFFICIENT_LEVEL\020\020\022"
  "\030\n\024INVALID_ACCOUNT_TYPE\020\021\"\343\001\n\027CMsgDOTAEd"
  "itTeamDetails\022\017\n\007team_id\030\001 \001(\r\022\014\n\004name\030\002"
  " \001(\t\022\013\n\003tag\030\003 \001(\t\022\014\n\004logo\030\004 \001(\004\022\021\n\tbase_"
  "logo\030\005 \001(\004\022\023\n\013banner_logo\030\006 \001(\004\022\024\n\014spons"
  "or_logo\030\007 \001(\004\022\024\n\014country_code\030\010 \001(\t\022\013\n\003u"
  "rl\030\t \001(\t\022\027\n\017in_use_by_party\030\n \001(\010\022\024\n\014abb"
  "reviation\030\013 \001(\t\"\355\001\n\037CMsgDOTAEditTeamDeta"
  "ilsResponse\022@\n\006result\030\001 \001(\0162\'.CMsgDOTAEd"
  "itTeamDetailsResponse.Result:\007SUCCESS\"\207\001"
  "\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID"
  "_ACCOUNT_TYPE\020\001\022\026\n\022FAILURE_NOT_MEMBER\020\002\022"
  "\027\n\023FAILURE_TEAM_LOCKED\020\003\022\035\n\031FAILURE_UNSP"
  "ECIFIED_ERROR\020\004\"K\n\033CMsgDOTATeamProfileRe"
  "sponse\022\017\n\007eresult\030\001 \001(\r\022\033\n\004team\030\002 \001(\0132\r."
  "CMsgDOTATeam\"\034\n\032CMsgDOTAProTeamListReque"
  "st\"\340\001\n\033CMsgDOTAProTeamListResponse\0225\n\005te"
  "ams\030\001 \003(\0132&.CMsgDOTAProTeamListResponse."
  "TeamEntry\022\017\n\007eresult\030\002 \001(\r\032y\n\tTeamEntry\022"
  "\017\n\007team_id\030\001 \001(\r\022\013\n\003tag\030\002 \001(\t\022\024\n\014time_cr"
  "eated\030\003 \001(\r\022\014\n\004logo\030\004 \001(\004\022\024\n\014country_cod"
  "e\030\005 \001(\t\022\024\n\014member_count\030\006 \001(\r\"E\n\036CMsgDOT"
  "ATeamInvite_InviterToGC\022\022\n\naccount_id\030\001 "
  "\001(\r\022\017\n\007team_id\030\002 \001(\r\"\234\001\n/CMsgDOTATeamInv"
  "ite_GCImmediateResponseToInviter\0227\n\006resu"
  "lt\030\001 \001(\0162\022.ETeamInviteResult:\023TEAM_INVIT"
  "E_SUCCESS\022\024\n\014invitee_name\030\002 \001(\t\022\032\n\022requi"
  "red_play_time\030\003 \001(\r\"v\n%CMsgDOTATeamInvit"
  "e_GCRequestToInvitee\022\032\n\022inviter_account_"
  "id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\020\n\010team_tag\030"
  "\003 \001(\t\022\014\n\004logo\030\004 \001(\004\"a\n&CMsgDOTATeamInvit"
  "e_InviteeResponseToGC\0227\n\006result\030\001 \001(\0162\022."
  "ETeamInviteResult:\023TEAM_INVITE_SUCCESS\"w"
  "\n&CMsgDOTATeamInvite_GCResponseToInviter"
  "\0227\n\006result\030\001 \001(\0162\022.ETeamInviteResult:\023TE"
  "AM_INVITE_SUCCESS\022\024\n\014invitee_name\030\002 \001(\t\""
  "t\n&CMsgDOTATeamInvite_GCResponseToInvite"
  "e\0227\n\006result\030\001 \001(\0162\022.ETeamInviteResult:\023T"
  "EAM_INVITE_SUCCESS\022\021\n\tteam_name\030\002 \001(\t\"=\n"
  "\026CMsgDOTAKickTeamMember\022\022\n\naccount_id\030\001 "
  "\001(\r\022\017\n\007team_id\030\002 \001(\r\"\220\002\n\036CMsgDOTAKickTea"
  "mMemberResponse\022\?\n\006result\030\001 \001(\0162&.CMsgDO"
  "TAKickTeamMemberResponse.Result:\007SUCCESS"
  "\"\254\001\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVA"
  "LID_ACCOUNT_TYPE\020\001\022\034\n\030FAILURE_KICKER_NOT"
  "_ADMIN\020\002\022\035\n\031FAILURE_KICKEE_NOT_MEMBER\020\003\022"
  "\027\n\023FAILURE_TEAM_LOCKED\020\004\022\035\n\031FAILURE_UNSP"
  "ECIFIED_ERROR\020\005\"J\n\031CMsgDOTATransferTeamA"
  "dmin\022\034\n\024new_admin_account_id\030\001 \001(\r\022\017\n\007te"
  "am_id\030\002 \001(\r\"\211\002\n!CMsgDOTATransferTeamAdmi"
  "nResponse\022B\n\006result\030\001 \001(\0162).CMsgDOTATran"
  "sferTeamAdminResponse.Result:\007SUCCESS\"\237\001"
  "\n\006Result\022\013\n\007SUCCESS\020\000\022 \n\034FAILURE_INVALID"
  "_ACCOUNT_TYPE\020\001\022\025\n\021FAILURE_NOT_ADMIN\020\002\022\030"
  "\n\024FAILURE_SAME_ACCOUNT\020\003\022\026\n\022FAILURE_NOT_"
  "MEMBER\020\004\022\035\n\031FAILURE_UNSPECIFIED_ERROR\020\005\""
  "$\n\021CMsgDOTALeaveTeam\022\017\n\007team_id\030\001 \001(\r\"\276\001"
  "\n\031CMsgDOTALeaveTeamResponse\022:\n\006result\030\001 "
  "\001(\0162!.CMsgDOTALeaveTeamResponse.Result:\007"
  "SUCCESS\"e\n\006Result\022\013\n\007SUCCESS\020\000\022\026\n\022FAILUR"
  "E_NOT_MEMBER\020\001\022\027\n\023FAILURE_TEAM_LOCKED\020\002\022"
  "\035\n\031FAILURE_UNSPECIFIED_ERROR\020\003\"2\n\031CMsgDO"
  "TABetaParticipation\022\025\n\raccess_rights\030\001 \001"
  "(\r*\336\004\n\021ETeamInviteResult\022\027\n\023TEAM_INVITE_"
  "SUCCESS\020\000\022\'\n#TEAM_INVITE_FAILURE_INVITE_"
  "REJECTED\020\001\022&\n\"TEAM_INVITE_FAILURE_INVITE"
  "_TIMEOUT\020\002\022*\n&TEAM_INVITE_ERROR_TEAM_AT_"
  "MEMBER_LIMIT\020\003\022!\n\035TEAM_INVITE_ERROR_TEAM"
  "_LOCKED\020\004\022+\n\'TEAM_INVITE_ERROR_INVITEE_N"
  "OT_AVAILABLE\020\005\022\"\n\036TEAM_INVITE_ERROR_INVI"
  "TEE_BUSY\020\006\022,\n(TEAM_INVITE_ERROR_INVITEE_"
  "ALREADY_MEMBER\020\007\022+\n\'TEAM_INVITE_ERROR_IN"
  "VITEE_AT_TEAM_LIMIT\020\010\0224\n0TEAM_INVITE_ERR"
  "OR_INVITEE_INSUFFICIENT_PLAY_TIME\020\t\0222\n.T"
  "EAM_INVITE_ERROR_INVITER_INVALID_ACCOUNT"
  "_TYPE\020\n\022\'\n#TEAM_INVITE_ERROR_INVITER_NOT"
  "_ADMIN\020\013\022.\n*TEAM_INVITE_ERROR_INCORRECT_"
  "USER_RESPONDED\020\014\022!\n\035TEAM_INVITE_ERROR_UN"
  "SPECIFIED\020\rB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_deps[1] = {
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto = {
  false, false, 6618, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fteam_2eproto, "dota_gcmessages_client_team.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_deps, 1, 36,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fteam_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fteam_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fteam_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTACreateTeamResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[0];
}
bool CMsgDOTACreateTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::SUCCESS;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_EMPTY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_BAD_CHARACTERS;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TAKEN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_TOO_LONG;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_EMPTY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_BAD_CHARACTERS;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TAKEN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::TAG_TOO_LONG;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_BUSY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::UNSPECIFIED_ERROR;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_LIMIT_REACHED;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NO_LOGO;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_TEAM_CREATION_COOLDOWN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::LOGO_UPLOAD_FAILED;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::NAME_CHANGED_TOO_RECENTLY;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::CREATOR_INSUFFICIENT_LEVEL;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MIN;
constexpr CMsgDOTACreateTeamResponse_Result CMsgDOTACreateTeamResponse::Result_MAX;
constexpr int CMsgDOTACreateTeamResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAEditTeamDetailsResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[1];
}
bool CMsgDOTAEditTeamDetailsResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::SUCCESS;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_NOT_MEMBER;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_TEAM_LOCKED;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MIN;
constexpr CMsgDOTAEditTeamDetailsResponse_Result CMsgDOTAEditTeamDetailsResponse::Result_MAX;
constexpr int CMsgDOTAEditTeamDetailsResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTAKickTeamMemberResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[2];
}
bool CMsgDOTAKickTeamMemberResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::SUCCESS;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKER_NOT_ADMIN;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_KICKEE_NOT_MEMBER;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_TEAM_LOCKED;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MIN;
constexpr CMsgDOTAKickTeamMemberResponse_Result CMsgDOTAKickTeamMemberResponse::Result_MAX;
constexpr int CMsgDOTAKickTeamMemberResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTATransferTeamAdminResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[3];
}
bool CMsgDOTATransferTeamAdminResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::SUCCESS;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_INVALID_ACCOUNT_TYPE;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_ADMIN;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_SAME_ACCOUNT;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_NOT_MEMBER;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MIN;
constexpr CMsgDOTATransferTeamAdminResponse_Result CMsgDOTATransferTeamAdminResponse::Result_MAX;
constexpr int CMsgDOTATransferTeamAdminResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDOTALeaveTeamResponse_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[4];
}
bool CMsgDOTALeaveTeamResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::SUCCESS;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_NOT_MEMBER;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_TEAM_LOCKED;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::FAILURE_UNSPECIFIED_ERROR;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MIN;
constexpr CMsgDOTALeaveTeamResponse_Result CMsgDOTALeaveTeamResponse::Result_MAX;
constexpr int CMsgDOTALeaveTeamResponse::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ETeamInviteResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fteam_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fteam_2eproto[5];
}
bool ETeamInviteResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgDOTATeamMemberSDO::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamMemberSDO>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_profile_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamMemberSDO)
}
CMsgDOTATeamMemberSDO::CMsgDOTATeamMemberSDO(const CMsgDOTATeamMemberSDO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      team_ids_(from.team_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&profile_team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(profile_team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamMemberSDO)
}

void CMsgDOTATeamMemberSDO::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&profile_team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(profile_team_id_));
}

CMsgDOTATeamMemberSDO::~CMsgDOTATeamMemberSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamMemberSDO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamMemberSDO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamMemberSDO::ArenaDtor(void* object) {
  CMsgDOTATeamMemberSDO* _this = reinterpret_cast< CMsgDOTATeamMemberSDO* >(object);
  (void)_this;
}
void CMsgDOTATeamMemberSDO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamMemberSDO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamMemberSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamMemberSDO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&profile_team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(profile_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamMemberSDO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 team_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_team_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_team_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 profile_team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_profile_team_id(&has_bits);
          profile_team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamMemberSDO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamMemberSDO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->_internal_team_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_ids(i), target);
  }

  // optional uint32 profile_team_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_profile_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamMemberSDO)
  return target;
}

size_t CMsgDOTATeamMemberSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamMemberSDO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 profile_team_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_profile_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamMemberSDO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamMemberSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamMemberSDO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamMemberSDO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamMemberSDO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamMemberSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMemberSDO::MergeFrom(const CMsgDOTATeamMemberSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamMemberSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      profile_team_id_ = from.profile_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamMemberSDO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamMemberSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMemberSDO::CopyFrom(const CMsgDOTATeamMemberSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamMemberSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMemberSDO::IsInitialized() const {
  return true;
}

void CMsgDOTATeamMemberSDO::InternalSwap(CMsgDOTATeamMemberSDO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_ids_.InternalSwap(&other->team_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamMemberSDO, profile_team_id_)
      + sizeof(CMsgDOTATeamMemberSDO::profile_team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamMemberSDO, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamMemberSDO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamAdminSDO::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamAdminSDO>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  team_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamAdminSDO)
}
CMsgDOTATeamAdminSDO::CMsgDOTATeamAdminSDO(const CMsgDOTATeamAdminSDO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      team_ids_(from.team_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamAdminSDO)
}

void CMsgDOTATeamAdminSDO::SharedCtor() {
account_id_ = 0u;
}

CMsgDOTATeamAdminSDO::~CMsgDOTATeamAdminSDO() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamAdminSDO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamAdminSDO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamAdminSDO::ArenaDtor(void* object) {
  CMsgDOTATeamAdminSDO* _this = reinterpret_cast< CMsgDOTATeamAdminSDO* >(object);
  (void)_this;
}
void CMsgDOTATeamAdminSDO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamAdminSDO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamAdminSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamAdminSDO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamAdminSDO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 team_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_team_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_team_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamAdminSDO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamAdminSDO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 team_ids = 2;
  for (int i = 0, n = this->_internal_team_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamAdminSDO)
  return target;
}

size_t CMsgDOTATeamAdminSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamAdminSDO)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 team_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->team_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_team_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_account_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamAdminSDO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamAdminSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamAdminSDO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamAdminSDO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamAdminSDO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamAdminSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamAdminSDO::MergeFrom(const CMsgDOTATeamAdminSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamAdminSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_ids_.MergeFrom(from.team_ids_);
  if (from._internal_has_account_id()) {
    _internal_set_account_id(from._internal_account_id());
  }
}

void CMsgDOTATeamAdminSDO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamAdminSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamAdminSDO::CopyFrom(const CMsgDOTATeamAdminSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamAdminSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamAdminSDO::IsInitialized() const {
  return true;
}

void CMsgDOTATeamAdminSDO::InternalSwap(CMsgDOTATeamAdminSDO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_ids_.InternalSwap(&other->team_ids_);
  swap(account_id_, other->account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamAdminSDO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamMember>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATeamMember::CMsgDOTATeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamMember)
}
CMsgDOTATeamMember::CMsgDOTATeamMember(const CMsgDOTATeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_joined_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_joined_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamMember)
}

void CMsgDOTATeamMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_joined_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_joined_));
}

CMsgDOTATeamMember::~CMsgDOTATeamMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamMember::ArenaDtor(void* object) {
  CMsgDOTATeamMember* _this = reinterpret_cast< CMsgDOTATeamMember* >(object);
  (void)_this;
}
void CMsgDOTATeamMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_joined_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_joined_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_joined = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_joined(&has_bits);
          time_joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 time_joined = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_joined(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamMember)
  return target;
}

size_t CMsgDOTATeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 time_joined = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_joined());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamMember)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamMember::MergeFrom(const CMsgDOTATeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamMember::CopyFrom(const CMsgDOTATeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTATeamMember::InternalSwap(CMsgDOTATeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamMember, time_joined_)
      + sizeof(CMsgDOTATeamMember::time_joined_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamMember, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeam>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_admin_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_disbanded(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_calibration_games_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_fullgamesplayed(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_gamesplayed(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_gamesplayedwithcurrentroster(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_teammatchmakinggamesplayed(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_lastplayedgametime(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lastrenametime(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_pickup_team(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CMsgDOTATeam::CMsgDOTATeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena),
  leagues_(arena),
  recent_match_ids_(arena),
  top_match_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeam)
}
CMsgDOTATeam::CMsgDOTATeam(const CMsgDOTATeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      leagues_(from.leagues_),
      recent_match_ids_(from.recent_match_ids_),
      top_match_ids_(from.top_match_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&calibration_games_remaining_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(calibration_games_remaining_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeam)
}

void CMsgDOTATeam::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&calibration_games_remaining_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(calibration_games_remaining_));
}

CMsgDOTATeam::~CMsgDOTATeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeam::ArenaDtor(void* object) {
  CMsgDOTATeam* _this = reinterpret_cast< CMsgDOTATeam* >(object);
  (void)_this;
}
void CMsgDOTATeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  leagues_.Clear();
  recent_match_ids_.Clear();
  top_match_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wins_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(wins_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&losses_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&disbanded_) -
        reinterpret_cast<char*>(&losses_)) + sizeof(disbanded_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&pickup_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&calibration_games_remaining_) -
        reinterpret_cast<char*>(&pickup_team_)) + sizeof(calibration_games_remaining_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamMember members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeam.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 admin_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_admin_id(&has_bits);
          admin_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_created = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool disbanded = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_disbanded(&has_bits);
          disbanded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rank = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_rank(&has_bits);
          rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 base_logo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_base_logo(&has_bits);
          base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 banner_logo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_banner_logo(&has_bits);
          banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sponsor_logo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_sponsor_logo(&has_bits);
          sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeam.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeam.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 fullgamesplayed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_fullgamesplayed(&has_bits);
          fullgamesplayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 leagues = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_leagues(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_leagues(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gamesplayed = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_gamesplayed(&has_bits);
          gamesplayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gamesplayedwithcurrentroster = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_gamesplayedwithcurrentroster(&has_bits);
          gamesplayedwithcurrentroster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teammatchmakinggamesplayed = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_teammatchmakinggamesplayed(&has_bits);
          teammatchmakinggamesplayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastplayedgametime = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_lastplayedgametime(&has_bits);
          lastplayedgametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastrenametime = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_lastrenametime(&has_bits);
          lastrenametime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 calibration_games_remaining = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_calibration_games_remaining(&has_bits);
          calibration_games_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 recent_match_ids = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_recent_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<200>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_recent_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 top_match_ids = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_top_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<208>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_top_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pickup_team = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_pickup_team(&has_bits);
          pickup_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamMember members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeam.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeam.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  // optional uint32 admin_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_admin_id(), target);
  }

  // optional uint32 time_created = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_created(), target);
  }

  // optional bool disbanded = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_disbanded(), target);
  }

  // optional uint32 wins = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_wins(), target);
  }

  // optional uint32 losses = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_losses(), target);
  }

  // optional uint32 rank = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_rank(), target);
  }

  // optional uint64 logo = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_logo(), target);
  }

  // optional uint64 base_logo = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_base_logo(), target);
  }

  // optional uint64 banner_logo = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_sponsor_logo(), target);
  }

  // optional string country_code = 15;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeam.country_code");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_country_code(), target);
  }

  // optional string url = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeam.url");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_url(), target);
  }

  // optional uint32 fullgamesplayed = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_fullgamesplayed(), target);
  }

  // repeated uint32 leagues = 18;
  for (int i = 0, n = this->_internal_leagues_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_leagues(i), target);
  }

  // optional uint32 gamesplayed = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_gamesplayed(), target);
  }

  // optional uint32 gamesplayedwithcurrentroster = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_gamesplayedwithcurrentroster(), target);
  }

  // optional uint32 teammatchmakinggamesplayed = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_teammatchmakinggamesplayed(), target);
  }

  // optional uint32 lastplayedgametime = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_lastplayedgametime(), target);
  }

  // optional uint32 lastrenametime = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_lastrenametime(), target);
  }

  // optional uint32 calibration_games_remaining = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_calibration_games_remaining(), target);
  }

  // repeated uint64 recent_match_ids = 25;
  for (int i = 0, n = this->_internal_recent_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(25, this->_internal_recent_match_ids(i), target);
  }

  // repeated uint64 top_match_ids = 26;
  for (int i = 0, n = this->_internal_top_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(26, this->_internal_top_match_ids(i), target);
  }

  // optional bool pickup_team = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_pickup_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeam)
  return target;
}

size_t CMsgDOTATeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamMember members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 leagues = 18;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->leagues_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_leagues_size());
    total_size += data_size;
  }

  // repeated uint64 recent_match_ids = 25;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->recent_match_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_recent_match_ids_size());
    total_size += data_size;
  }

  // repeated uint64 top_match_ids = 26;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->top_match_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_top_match_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 15;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 admin_id = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_admin_id());
    }

    // optional uint32 time_created = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

    // optional uint32 wins = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 losses = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

    // optional uint32 rank = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rank());
    }

    // optional uint64 logo = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint64 base_logo = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_base_logo());
    }

    // optional uint64 banner_logo = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_banner_logo());
    }

    // optional uint64 sponsor_logo = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sponsor_logo());
    }

    // optional uint32 fullgamesplayed = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_fullgamesplayed());
    }

    // optional bool disbanded = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool pickup_team = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional uint32 gamesplayed = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gamesplayed());
    }

    // optional uint32 gamesplayedwithcurrentroster = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gamesplayedwithcurrentroster());
    }

    // optional uint32 teammatchmakinggamesplayed = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teammatchmakinggamesplayed());
    }

    // optional uint32 lastplayedgametime = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastplayedgametime());
    }

    // optional uint32 lastrenametime = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lastrenametime());
    }

    // optional uint32 calibration_games_remaining = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_calibration_games_remaining());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeam)
    MergeFrom(*source);
  }
}

void CMsgDOTATeam::MergeFrom(const CMsgDOTATeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  leagues_.MergeFrom(from.leagues_);
  recent_match_ids_.MergeFrom(from.recent_match_ids_);
  top_match_ids_.MergeFrom(from.top_match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      admin_id_ = from.admin_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000080u) {
      wins_ = from.wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000200u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00000400u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00002000u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      fullgamesplayed_ = from.fullgamesplayed_;
    }
    if (cached_has_bits & 0x00008000u) {
      disbanded_ = from.disbanded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      pickup_team_ = from.pickup_team_;
    }
    if (cached_has_bits & 0x00020000u) {
      gamesplayed_ = from.gamesplayed_;
    }
    if (cached_has_bits & 0x00040000u) {
      gamesplayedwithcurrentroster_ = from.gamesplayedwithcurrentroster_;
    }
    if (cached_has_bits & 0x00080000u) {
      teammatchmakinggamesplayed_ = from.teammatchmakinggamesplayed_;
    }
    if (cached_has_bits & 0x00100000u) {
      lastplayedgametime_ = from.lastplayedgametime_;
    }
    if (cached_has_bits & 0x00200000u) {
      lastrenametime_ = from.lastrenametime_;
    }
    if (cached_has_bits & 0x00400000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeam::CopyFrom(const CMsgDOTATeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeam::IsInitialized() const {
  return true;
}

void CMsgDOTATeam::InternalSwap(CMsgDOTATeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  leagues_.InternalSwap(&other->leagues_);
  recent_match_ids_.InternalSwap(&other->recent_match_ids_);
  top_match_ids_.InternalSwap(&other->top_match_ids_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeam, calibration_games_remaining_)
      + sizeof(CMsgDOTATeam::calibration_games_remaining_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeam, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo_HeroStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_HeroStats>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_picks(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bans(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_avg_gpm(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_avg_xpm(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CMsgDOTATeamInfo_HeroStats::CMsgDOTATeamInfo_HeroStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.HeroStats)
}
CMsgDOTATeamInfo_HeroStats::CMsgDOTATeamInfo_HeroStats(const CMsgDOTATeamInfo_HeroStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_xpm_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(avg_xpm_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.HeroStats)
}

void CMsgDOTATeamInfo_HeroStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&avg_xpm_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(avg_xpm_));
}

CMsgDOTATeamInfo_HeroStats::~CMsgDOTATeamInfo_HeroStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.HeroStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo_HeroStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInfo_HeroStats::ArenaDtor(void* object) {
  CMsgDOTATeamInfo_HeroStats* _this = reinterpret_cast< CMsgDOTATeamInfo_HeroStats* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo_HeroStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo_HeroStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo_HeroStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.HeroStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_gpm_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(avg_gpm_));
  }
  avg_xpm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_HeroStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 picks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_picks(&has_bits);
          picks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bans = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_bans(&has_bits);
          bans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_avg_kills(&has_bits);
          avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_avg_deaths(&has_bits);
          avg_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_avg_assists(&has_bits);
          avg_assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_gpm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_avg_gpm(&has_bits);
          avg_gpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_xpm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_avg_xpm(&has_bits);
          avg_xpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo_HeroStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.HeroStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 picks = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_picks(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wins(), target);
  }

  // optional uint32 bans = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bans(), target);
  }

  // optional float avg_kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_avg_kills(), target);
  }

  // optional float avg_deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_deaths(), target);
  }

  // optional float avg_assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_assists(), target);
  }

  // optional float avg_gpm = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_avg_gpm(), target);
  }

  // optional float avg_xpm = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_avg_xpm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.HeroStats)
  return target;
}

size_t CMsgDOTATeamInfo_HeroStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.HeroStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 picks = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_picks());
    }

    // optional uint32 wins = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint32 bans = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bans());
    }

    // optional float avg_kills = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_deaths = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float avg_assists = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float avg_gpm = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional float avg_xpm = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_HeroStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo.HeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_HeroStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo_HeroStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo.HeroStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo.HeroStats)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_HeroStats::MergeFrom(const CMsgDOTATeamInfo_HeroStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.HeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      picks_ = from.picks_;
    }
    if (cached_has_bits & 0x00000004u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000008u) {
      bans_ = from.bans_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_kills_ = from.avg_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_deaths_ = from.avg_deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_assists_ = from.avg_assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      avg_gpm_ = from.avg_gpm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_avg_xpm(from._internal_avg_xpm());
  }
}

void CMsgDOTATeamInfo_HeroStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo.HeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_HeroStats::CopyFrom(const CMsgDOTATeamInfo_HeroStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.HeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_HeroStats::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_HeroStats::InternalSwap(CMsgDOTATeamInfo_HeroStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_HeroStats, avg_xpm_)
      + sizeof(CMsgDOTATeamInfo_HeroStats::avg_xpm_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_HeroStats, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_HeroStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo_MemberStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_MemberStats>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wins_with_team(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_losses_with_team(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATeamInfo_MemberStats::CMsgDOTATeamInfo_MemberStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  top_heroes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.MemberStats)
}
CMsgDOTATeamInfo_MemberStats::CMsgDOTATeamInfo_MemberStats(const CMsgDOTATeamInfo_MemberStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      top_heroes_(from.top_heroes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_assists_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(avg_assists_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.MemberStats)
}

void CMsgDOTATeamInfo_MemberStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&avg_assists_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(avg_assists_));
}

CMsgDOTATeamInfo_MemberStats::~CMsgDOTATeamInfo_MemberStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.MemberStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo_MemberStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInfo_MemberStats::ArenaDtor(void* object) {
  CMsgDOTATeamInfo_MemberStats* _this = reinterpret_cast< CMsgDOTATeamInfo_MemberStats* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo_MemberStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo_MemberStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo_MemberStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.MemberStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  top_heroes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_assists_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(avg_assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_MemberStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins_with_team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wins_with_team(&has_bits);
          wins_with_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses_with_team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_losses_with_team(&has_bits);
          losses_with_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.HeroStats top_heroes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_avg_kills(&has_bits);
          avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_avg_deaths(&has_bits);
          avg_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_assists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_avg_assists(&has_bits);
          avg_assists_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo_MemberStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.MemberStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 wins_with_team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wins_with_team(), target);
  }

  // optional uint32 losses_with_team = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_losses_with_team(), target);
  }

  // repeated .CMsgDOTATeamInfo.HeroStats top_heroes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_top_heroes(i), target, stream);
  }

  // optional float avg_kills = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_avg_kills(), target);
  }

  // optional float avg_deaths = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_deaths(), target);
  }

  // optional float avg_assists = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_assists(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.MemberStats)
  return target;
}

size_t CMsgDOTATeamInfo_MemberStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.MemberStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.HeroStats top_heroes = 4;
  total_size += 1UL * this->_internal_top_heroes_size();
  for (const auto& msg : this->top_heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 wins_with_team = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins_with_team());
    }

    // optional uint32 losses_with_team = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses_with_team());
    }

    // optional float avg_kills = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float avg_deaths = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_assists = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_MemberStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo.MemberStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_MemberStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo_MemberStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo.MemberStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo.MemberStats)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_MemberStats::MergeFrom(const CMsgDOTATeamInfo_MemberStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.MemberStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_heroes_.MergeFrom(from.top_heroes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wins_with_team_ = from.wins_with_team_;
    }
    if (cached_has_bits & 0x00000004u) {
      losses_with_team_ = from.losses_with_team_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_kills_ = from.avg_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_deaths_ = from.avg_deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_assists_ = from.avg_assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_MemberStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo.MemberStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_MemberStats::CopyFrom(const CMsgDOTATeamInfo_MemberStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.MemberStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_MemberStats::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_MemberStats::InternalSwap(CMsgDOTATeamInfo_MemberStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  top_heroes_.InternalSwap(&other->top_heroes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_MemberStats, avg_assists_)
      + sizeof(CMsgDOTATeamInfo_MemberStats::avg_assists_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_MemberStats, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_MemberStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo_TeamStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_TeamStats>()._has_bits_);
  static void set_has_farming(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fighting(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_versatility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTATeamInfo_TeamStats::CMsgDOTATeamInfo_TeamStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  played_heroes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.TeamStats)
}
CMsgDOTATeamInfo_TeamStats::CMsgDOTATeamInfo_TeamStats(const CMsgDOTATeamInfo_TeamStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      played_heroes_(from.played_heroes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&farming_, &from.farming_,
    static_cast<size_t>(reinterpret_cast<char*>(&avg_duration_) -
    reinterpret_cast<char*>(&farming_)) + sizeof(avg_duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.TeamStats)
}

void CMsgDOTATeamInfo_TeamStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&farming_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&avg_duration_) -
    reinterpret_cast<char*>(&farming_)) + sizeof(avg_duration_));
}

CMsgDOTATeamInfo_TeamStats::~CMsgDOTATeamInfo_TeamStats() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.TeamStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo_TeamStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInfo_TeamStats::ArenaDtor(void* object) {
  CMsgDOTATeamInfo_TeamStats* _this = reinterpret_cast< CMsgDOTATeamInfo_TeamStats* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo_TeamStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo_TeamStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo_TeamStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.TeamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  played_heroes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&farming_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_duration_) -
        reinterpret_cast<char*>(&farming_)) + sizeof(avg_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_TeamStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamInfo.HeroStats played_heroes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_played_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional float farming = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_farming(&has_bits);
          farming_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float fighting = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_fighting(&has_bits);
          fighting_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float versatility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_versatility(&has_bits);
          versatility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_avg_kills(&has_bits);
          avg_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_deaths = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_avg_deaths(&has_bits);
          avg_deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float avg_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_avg_duration(&has_bits);
          avg_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo_TeamStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.TeamStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.HeroStats played_heroes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_played_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_played_heroes(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional float farming = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_farming(), target);
  }

  // optional float fighting = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fighting(), target);
  }

  // optional float versatility = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_versatility(), target);
  }

  // optional float avg_kills = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_avg_kills(), target);
  }

  // optional float avg_deaths = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_avg_deaths(), target);
  }

  // optional float avg_duration = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_avg_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.TeamStats)
  return target;
}

size_t CMsgDOTATeamInfo_TeamStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.TeamStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.HeroStats played_heroes = 1;
  total_size += 1UL * this->_internal_played_heroes_size();
  for (const auto& msg : this->played_heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float farming = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float fighting = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float versatility = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float avg_kills = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float avg_deaths = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float avg_duration = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_TeamStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo.TeamStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_TeamStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo_TeamStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo.TeamStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo.TeamStats)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_TeamStats::MergeFrom(const CMsgDOTATeamInfo_TeamStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.TeamStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  played_heroes_.MergeFrom(from.played_heroes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      farming_ = from.farming_;
    }
    if (cached_has_bits & 0x00000002u) {
      fighting_ = from.fighting_;
    }
    if (cached_has_bits & 0x00000004u) {
      versatility_ = from.versatility_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_kills_ = from.avg_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_deaths_ = from.avg_deaths_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_duration_ = from.avg_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_TeamStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_TeamStats::CopyFrom(const CMsgDOTATeamInfo_TeamStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.TeamStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_TeamStats::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_TeamStats::InternalSwap(CMsgDOTATeamInfo_TeamStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  played_heroes_.InternalSwap(&other->played_heroes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_TeamStats, avg_duration_)
      + sizeof(CMsgDOTATeamInfo_TeamStats::avg_duration_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_TeamStats, farming_)>(
          reinterpret_cast<char*>(&farming_),
          reinterpret_cast<char*>(&other->farming_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_TeamStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo_DPCResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_DPCResult>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_standing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_earnings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTATeamInfo_DPCResult::CMsgDOTATeamInfo_DPCResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.DPCResult)
}
CMsgDOTATeamInfo_DPCResult::CMsgDOTATeamInfo_DPCResult(const CMsgDOTATeamInfo_DPCResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.DPCResult)
}

void CMsgDOTATeamInfo_DPCResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
}

CMsgDOTATeamInfo_DPCResult::~CMsgDOTATeamInfo_DPCResult() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.DPCResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo_DPCResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInfo_DPCResult::ArenaDtor(void* object) {
  CMsgDOTATeamInfo_DPCResult* _this = reinterpret_cast< CMsgDOTATeamInfo_DPCResult* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo_DPCResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo_DPCResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo_DPCResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.DPCResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_DPCResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 standing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_standing(&has_bits);
          standing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 earnings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_earnings(&has_bits);
          earnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo_DPCResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.DPCResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // optional uint32 standing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_standing(), target);
  }

  // optional uint32 points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_points(), target);
  }

  // optional uint32 earnings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_earnings(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.DPCResult)
  return target;
}

size_t CMsgDOTATeamInfo_DPCResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.DPCResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 standing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_standing());
    }

    // optional uint32 points = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points());
    }

    // optional uint32 earnings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_earnings());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_DPCResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo.DPCResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_DPCResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo_DPCResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo.DPCResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo.DPCResult)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_DPCResult::MergeFrom(const CMsgDOTATeamInfo_DPCResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.DPCResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      standing_ = from.standing_;
    }
    if (cached_has_bits & 0x00000004u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000008u) {
      earnings_ = from.earnings_;
    }
    if (cached_has_bits & 0x00000010u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_DPCResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo.DPCResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_DPCResult::CopyFrom(const CMsgDOTATeamInfo_DPCResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.DPCResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_DPCResult::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_DPCResult::InternalSwap(CMsgDOTATeamInfo_DPCResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_DPCResult, timestamp_)
      + sizeof(CMsgDOTATeamInfo_DPCResult::timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_DPCResult, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_DPCResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo_Member::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_Member>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_joined(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_admin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pro_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_role(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_real_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.Member)
}
CMsgDOTATeamInfo_Member::CMsgDOTATeamInfo_Member(const CMsgDOTATeamInfo_Member& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pro_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pro_name()) {
    pro_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pro_name(), 
      GetArena());
  }
  real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_real_name()) {
    real_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_real_name(), 
      GetArena());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.Member)
}

void CMsgDOTATeamInfo_Member::SharedCtor() {
pro_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
real_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(role_));
}

CMsgDOTATeamInfo_Member::~CMsgDOTATeamInfo_Member() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.Member)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo_Member::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  pro_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  real_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInfo_Member::ArenaDtor(void* object) {
  CMsgDOTATeamInfo_Member* _this = reinterpret_cast< CMsgDOTATeamInfo_Member* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo_Member::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pro_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      real_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&role_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_Member::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_joined = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time_joined(&has_bits);
          time_joined_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool admin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_admin(&has_bits);
          admin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string pro_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pro_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.Member.pro_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Fantasy_Roles role = 8 [default = FANTASY_ROLE_UNDEFINED];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Fantasy_Roles_IsValid(val))) {
            _internal_set_role(static_cast<::Fantasy_Roles>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string real_name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_real_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.Member.real_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo_Member::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.Member)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_joined(), target);
  }

  // optional bool admin = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_admin(), target);
  }

  // optional string pro_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pro_name().data(), static_cast<int>(this->_internal_pro_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.Member.pro_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pro_name(), target);
  }

  // optional .Fantasy_Roles role = 8 [default = FANTASY_ROLE_UNDEFINED];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_role(), target);
  }

  // optional string real_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_real_name().data(), static_cast<int>(this->_internal_real_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.Member.real_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_real_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.Member)
  return target;
}

size_t CMsgDOTATeamInfo_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.Member)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string pro_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pro_name());
    }

    // optional string real_name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_real_name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 time_joined = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_joined());
    }

    // optional bool admin = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional .Fantasy_Roles role = 8 [default = FANTASY_ROLE_UNDEFINED];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_Member::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_Member* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo.Member)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_Member::MergeFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pro_name(from._internal_pro_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_real_name(from._internal_real_name());
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000010u) {
      admin_ = from.admin_;
    }
    if (cached_has_bits & 0x00000020u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_Member::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_Member::CopyFrom(const CMsgDOTATeamInfo_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_Member::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_Member::InternalSwap(CMsgDOTATeamInfo_Member* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pro_name_.Swap(&other->pro_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  real_name_.Swap(&other->real_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_Member, role_)
      + sizeof(CMsgDOTATeamInfo_Member::role_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_Member, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_Member::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo_AuditEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo_AuditEntry>()._has_bits_);
  static void set_has_audit_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo.AuditEntry)
}
CMsgDOTATeamInfo_AuditEntry::CMsgDOTATeamInfo_AuditEntry(const CMsgDOTATeamInfo_AuditEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&audit_action_, &from.audit_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&audit_action_)) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo.AuditEntry)
}

void CMsgDOTATeamInfo_AuditEntry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&audit_action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&audit_action_)) + sizeof(account_id_));
}

CMsgDOTATeamInfo_AuditEntry::~CMsgDOTATeamInfo_AuditEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo.AuditEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo_AuditEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInfo_AuditEntry::ArenaDtor(void* object) {
  CMsgDOTATeamInfo_AuditEntry* _this = reinterpret_cast< CMsgDOTATeamInfo_AuditEntry* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo_AuditEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo_AuditEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo_AuditEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo.AuditEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&audit_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_id_) -
        reinterpret_cast<char*>(&audit_action_)) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo_AuditEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 audit_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_audit_action(&has_bits);
          audit_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo_AuditEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo.AuditEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 audit_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_audit_action(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timestamp(), target);
  }

  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_account_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo.AuditEntry)
  return target;
}

size_t CMsgDOTATeamInfo_AuditEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo.AuditEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 audit_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit_action());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

    // optional uint32 account_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo_AuditEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo_AuditEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo_AuditEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo.AuditEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo.AuditEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo_AuditEntry::MergeFrom(const CMsgDOTATeamInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo.AuditEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      audit_action_ = from.audit_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo_AuditEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo_AuditEntry::CopyFrom(const CMsgDOTATeamInfo_AuditEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo.AuditEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo_AuditEntry::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo_AuditEntry::InternalSwap(CMsgDOTATeamInfo_AuditEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_AuditEntry, account_id_)
      + sizeof(CMsgDOTATeamInfo_AuditEntry::account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo_AuditEntry, audit_action_)>(
          reinterpret_cast<char*>(&audit_action_),
          reinterpret_cast<char*>(&other->audit_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo_AuditEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfo>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pro(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pickup_team(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ugc_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ugc_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ugc_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ugc_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_games_played_total(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_games_played_matchmaking(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_url_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_coach_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgDOTATeamInfo_TeamStats& team_stats(const CMsgDOTATeamInfo* msg);
  static void set_has_team_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_color_primary(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_color_secondary(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_team_captain(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
};

const ::CMsgDOTATeamInfo_TeamStats&
CMsgDOTATeamInfo::_Internal::team_stats(const CMsgDOTATeamInfo* msg) {
  return *msg->team_stats_;
}
CMsgDOTATeamInfo::CMsgDOTATeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  members_(arena),
  registered_member_account_ids_(arena),
  audit_entries_(arena),
  member_stats_(arena),
  dpc_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfo)
}
CMsgDOTATeamInfo::CMsgDOTATeamInfo(const CMsgDOTATeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      members_(from.members_),
      registered_member_account_ids_(from.registered_member_account_ids_),
      audit_entries_(from.audit_entries_),
      member_stats_(from.member_stats_),
      dpc_results_(from.dpc_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  url_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url_logo()) {
    url_logo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url_logo(), 
      GetArena());
  }
  abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_abbreviation()) {
    abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abbreviation(), 
      GetArena());
  }
  color_primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_color_primary()) {
    color_primary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color_primary(), 
      GetArena());
  }
  color_secondary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_color_secondary()) {
    color_secondary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color_secondary(), 
      GetArena());
  }
  if (from._internal_has_team_stats()) {
    team_stats_ = new ::CMsgDOTATeamInfo_TeamStats(*from.team_stats_);
  } else {
    team_stats_ = nullptr;
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_captain_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(team_captain_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfo)
}

void CMsgDOTATeamInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_logo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_primary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
color_secondary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_captain_) -
    reinterpret_cast<char*>(&team_stats_)) + sizeof(team_captain_));
}

CMsgDOTATeamInfo::~CMsgDOTATeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_logo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_primary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_secondary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete team_stats_;
}

void CMsgDOTATeamInfo::ArenaDtor(void* object) {
  CMsgDOTATeamInfo* _this = reinterpret_cast< CMsgDOTATeamInfo* >(object);
  (void)_this;
}
void CMsgDOTATeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  registered_member_account_ids_.Clear();
  audit_entries_.Clear();
  member_stats_.Clear();
  dpc_results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      url_logo_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      abbreviation_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      color_primary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      color_secondary_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(team_stats_ != nullptr);
    team_stats_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ugc_base_logo_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(ugc_base_logo_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&ugc_banner_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_captain_) -
        reinterpret_cast<char*>(&ugc_banner_logo_)) + sizeof(team_captain_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamInfo.Member members = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_created = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pro = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pro(&has_bits);
          pro_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pickup_team = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pickup_team(&has_bits);
          pickup_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ugc_logo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_ugc_logo(&has_bits);
          ugc_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ugc_base_logo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ugc_base_logo(&has_bits);
          ugc_base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ugc_banner_logo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ugc_banner_logo(&has_bits);
          ugc_banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ugc_sponsor_logo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_ugc_sponsor_logo(&has_bits);
          ugc_sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wins = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_wins(&has_bits);
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 losses = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_losses(&has_bits);
          losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 games_played_total = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_games_played_total(&has_bits);
          games_played_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 games_played_matchmaking = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_games_played_matchmaking(&has_bits);
          games_played_matchmaking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url_logo = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_url_logo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.url_logo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ELeagueRegion_IsValid(val))) {
            _internal_set_region(static_cast<::ELeagueRegion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(29, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 registered_member_account_ids = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_registered_member_account_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<240>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_registered_member_account_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_audit_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string abbreviation = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.MemberStats member_stats = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_member_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTATeamInfo.TeamStats team_stats = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo.DPCResult dpc_results = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dpc_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 coach_account_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_coach_account_id(&has_bits);
          coach_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string color_primary = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_color_primary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.color_primary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string color_secondary = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_color_secondary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInfo.color_secondary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_captain = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_team_captain(&has_bits);
          team_captain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.Member members = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_members_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_members(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // optional string tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.tag");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_tag(), target);
  }

  // optional uint32 time_created = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_created(), target);
  }

  // optional bool pro = 6;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_pro(), target);
  }

  // optional bool pickup_team = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_pickup_team(), target);
  }

  // optional uint64 ugc_logo = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_ugc_logo(), target);
  }

  // optional uint64 ugc_base_logo = 10;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_ugc_base_logo(), target);
  }

  // optional uint64 ugc_banner_logo = 11;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_ugc_banner_logo(), target);
  }

  // optional uint64 ugc_sponsor_logo = 12;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_ugc_sponsor_logo(), target);
  }

  // optional string country_code = 13;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.country_code");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_country_code(), target);
  }

  // optional string url = 14;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.url");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_url(), target);
  }

  // optional uint32 wins = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_wins(), target);
  }

  // optional uint32 losses = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_losses(), target);
  }

  // optional uint32 games_played_total = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_games_played_total(), target);
  }

  // optional uint32 games_played_matchmaking = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_games_played_matchmaking(), target);
  }

  // optional string url_logo = 24;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url_logo().data(), static_cast<int>(this->_internal_url_logo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.url_logo");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_url_logo(), target);
  }

  // optional .ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_region(), target);
  }

  // repeated uint32 registered_member_account_ids = 30;
  for (int i = 0, n = this->_internal_registered_member_account_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_registered_member_account_ids(i), target);
  }

  // repeated .CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_audit_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_audit_entries(i), target, stream);
  }

  // optional string abbreviation = 32;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviation().data(), static_cast<int>(this->_internal_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.abbreviation");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_abbreviation(), target);
  }

  // repeated .CMsgDOTATeamInfo.MemberStats member_stats = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_member_stats(i), target, stream);
  }

  // optional .CMsgDOTATeamInfo.TeamStats team_stats = 34;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::team_stats(this), target, stream);
  }

  // repeated .CMsgDOTATeamInfo.DPCResult dpc_results = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dpc_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_dpc_results(i), target, stream);
  }

  // optional uint32 coach_account_id = 36;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_coach_account_id(), target);
  }

  // optional string color_primary = 37;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color_primary().data(), static_cast<int>(this->_internal_color_primary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.color_primary");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_color_primary(), target);
  }

  // optional string color_secondary = 38;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_color_secondary().data(), static_cast<int>(this->_internal_color_secondary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInfo.color_secondary");
    target = stream->WriteStringMaybeAliased(
        38, this->_internal_color_secondary(), target);
  }

  // optional uint32 team_captain = 39;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_team_captain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfo)
  return target;
}

size_t CMsgDOTATeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo.Member members = 1;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 registered_member_account_ids = 30;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->registered_member_account_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_registered_member_account_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTATeamInfo.AuditEntry audit_entries = 31;
  total_size += 2UL * this->_internal_audit_entries_size();
  for (const auto& msg : this->audit_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATeamInfo.MemberStats member_stats = 33;
  total_size += 2UL * this->_internal_member_stats_size();
  for (const auto& msg : this->member_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDOTATeamInfo.DPCResult dpc_results = 35;
  total_size += 2UL * this->_internal_dpc_results_size();
  for (const auto& msg : this->dpc_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string url_logo = 24;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_logo());
    }

    // optional string abbreviation = 32;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviation());
    }

    // optional string color_primary = 37;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color_primary());
    }

    // optional string color_secondary = 38;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_color_secondary());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .CMsgDOTATeamInfo.TeamStats team_stats = 34;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_stats_);
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 time_created = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

    // optional uint64 ugc_logo = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ugc_logo());
    }

    // optional bool pro = 6;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool pickup_team = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 wins = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wins());
    }

    // optional uint64 ugc_base_logo = 10;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ugc_base_logo());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 ugc_banner_logo = 11;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ugc_banner_logo());
    }

    // optional uint64 ugc_sponsor_logo = 12;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ugc_sponsor_logo());
    }

    // optional uint32 losses = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_losses());
    }

    // optional uint32 games_played_total = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_games_played_total());
    }

    // optional uint32 games_played_matchmaking = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_games_played_matchmaking());
    }

    // optional .ELeagueRegion region = 29 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_region());
    }

    // optional uint32 coach_account_id = 36;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_coach_account_id());
    }

    // optional uint32 team_captain = 39;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_captain());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfo::MergeFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  registered_member_account_ids_.MergeFrom(from.registered_member_account_ids_);
  audit_entries_.MergeFrom(from.audit_entries_);
  member_stats_.MergeFrom(from.member_stats_);
  dpc_results_.MergeFrom(from.dpc_results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_url_logo(from._internal_url_logo());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_abbreviation(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_color_primary(from._internal_color_primary());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_color_secondary(from._internal_color_secondary());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_team_stats()->::CMsgDOTATeamInfo_TeamStats::MergeFrom(from._internal_team_stats());
    }
    if (cached_has_bits & 0x00000200u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000800u) {
      ugc_logo_ = from.ugc_logo_;
    }
    if (cached_has_bits & 0x00001000u) {
      pro_ = from.pro_;
    }
    if (cached_has_bits & 0x00002000u) {
      pickup_team_ = from.pickup_team_;
    }
    if (cached_has_bits & 0x00004000u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00008000u) {
      ugc_base_logo_ = from.ugc_base_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ugc_banner_logo_ = from.ugc_banner_logo_;
    }
    if (cached_has_bits & 0x00020000u) {
      ugc_sponsor_logo_ = from.ugc_sponsor_logo_;
    }
    if (cached_has_bits & 0x00040000u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00080000u) {
      games_played_total_ = from.games_played_total_;
    }
    if (cached_has_bits & 0x00100000u) {
      games_played_matchmaking_ = from.games_played_matchmaking_;
    }
    if (cached_has_bits & 0x00200000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00400000u) {
      coach_account_id_ = from.coach_account_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      team_captain_ = from.team_captain_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfo::CopyFrom(const CMsgDOTATeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfo::InternalSwap(CMsgDOTATeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  registered_member_account_ids_.InternalSwap(&other->registered_member_account_ids_);
  audit_entries_.InternalSwap(&other->audit_entries_);
  member_stats_.InternalSwap(&other->member_stats_);
  dpc_results_.InternalSwap(&other->dpc_results_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_logo_.Swap(&other->url_logo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  abbreviation_.Swap(&other->abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_primary_.Swap(&other->color_primary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_secondary_.Swap(&other->color_secondary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo, team_captain_)
      + sizeof(CMsgDOTATeamInfo::team_captain_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInfo, team_stats_)>(
          reinterpret_cast<char*>(&team_stats_),
          reinterpret_cast<char*>(&other->team_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInfoRequest>()._has_bits_);
  static const ::CMsgDOTATeamInfo& result(const CMsgDOTATeamInfoRequest* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTATeamInfo&
CMsgDOTATeamInfoRequest::_Internal::result(const CMsgDOTATeamInfoRequest* msg) {
  return *msg->result_;
}
CMsgDOTATeamInfoRequest::CMsgDOTATeamInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfoRequest)
}
CMsgDOTATeamInfoRequest::CMsgDOTATeamInfoRequest(const CMsgDOTATeamInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::CMsgDOTATeamInfo(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfoRequest)
}

void CMsgDOTATeamInfoRequest::SharedCtor() {
result_ = nullptr;
}

CMsgDOTATeamInfoRequest::~CMsgDOTATeamInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void CMsgDOTATeamInfoRequest::ArenaDtor(void* object) {
  CMsgDOTATeamInfoRequest* _this = reinterpret_cast< CMsgDOTATeamInfoRequest* >(object);
  (void)_this;
}
void CMsgDOTATeamInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != nullptr);
    result_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTATeamInfo result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTATeamInfo result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfoRequest)
  return target;
}

size_t CMsgDOTATeamInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTATeamInfo result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfoRequest::MergeFrom(const CMsgDOTATeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::CMsgDOTATeamInfo::MergeFrom(from._internal_result());
  }
}

void CMsgDOTATeamInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfoRequest::CopyFrom(const CMsgDOTATeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfoRequest::InternalSwap(CMsgDOTATeamInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamsInfo>()._has_bits_);
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamsInfo)
}
CMsgDOTATeamsInfo::CMsgDOTATeamsInfo(const CMsgDOTATeamsInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamsInfo)
}

void CMsgDOTATeamsInfo::SharedCtor() {
league_id_ = 0u;
}

CMsgDOTATeamsInfo::~CMsgDOTATeamsInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamsInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamsInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamsInfo::ArenaDtor(void* object) {
  CMsgDOTATeamsInfo* _this = reinterpret_cast< CMsgDOTATeamsInfo* >(object);
  (void)_this;
}
void CMsgDOTATeamsInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamsInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamsInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTATeamInfo teams = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamsInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamsInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_league_id(), target);
  }

  // repeated .CMsgDOTATeamInfo teams = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_teams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamsInfo)
  return target;
}

size_t CMsgDOTATeamsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamsInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo teams = 2;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_league_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamsInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamsInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamsInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamsInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamsInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamsInfo::MergeFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from._internal_has_league_id()) {
    _internal_set_league_id(from._internal_league_id());
  }
}

void CMsgDOTATeamsInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamsInfo::CopyFrom(const CMsgDOTATeamsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamsInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATeamsInfo::InternalSwap(CMsgDOTATeamsInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  swap(league_id_, other->league_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamsInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInfoList::_Internal {
 public:
};

CMsgDOTATeamInfoList::CMsgDOTATeamInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInfoList)
}
CMsgDOTATeamInfoList::CMsgDOTATeamInfoList(const CMsgDOTATeamInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInfoList)
}

void CMsgDOTATeamInfoList::SharedCtor() {
}

CMsgDOTATeamInfoList::~CMsgDOTATeamInfoList() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInfoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInfoList::ArenaDtor(void* object) {
  CMsgDOTATeamInfoList* _this = reinterpret_cast< CMsgDOTATeamInfoList* >(object);
  (void)_this;
}
void CMsgDOTATeamInfoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTATeamInfo teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInfoList)
  return target;
}

size_t CMsgDOTATeamInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTATeamInfo teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInfoList)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInfoList::MergeFrom(const CMsgDOTATeamInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
}

void CMsgDOTATeamInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInfoList::CopyFrom(const CMsgDOTATeamInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInfoList::InternalSwap(CMsgDOTATeamInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAMyTeamInfoRequest::_Internal {
 public:
};

CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAMyTeamInfoRequest)
}
CMsgDOTAMyTeamInfoRequest::CMsgDOTAMyTeamInfoRequest(const CMsgDOTAMyTeamInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAMyTeamInfoRequest)
}

void CMsgDOTAMyTeamInfoRequest::SharedCtor() {
}

CMsgDOTAMyTeamInfoRequest::~CMsgDOTAMyTeamInfoRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAMyTeamInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAMyTeamInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAMyTeamInfoRequest::ArenaDtor(void* object) {
  CMsgDOTAMyTeamInfoRequest* _this = reinterpret_cast< CMsgDOTAMyTeamInfoRequest* >(object);
  (void)_this;
}
void CMsgDOTAMyTeamInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAMyTeamInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAMyTeamInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAMyTeamInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAMyTeamInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAMyTeamInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAMyTeamInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAMyTeamInfoRequest)
  return target;
}

size_t CMsgDOTAMyTeamInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAMyTeamInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAMyTeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMyTeamInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAMyTeamInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAMyTeamInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAMyTeamInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAMyTeamInfoRequest::MergeFrom(const CMsgDOTAMyTeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAMyTeamInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAMyTeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMyTeamInfoRequest::CopyFrom(const CMsgDOTAMyTeamInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAMyTeamInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMyTeamInfoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAMyTeamInfoRequest::InternalSwap(CMsgDOTAMyTeamInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAMyTeamInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTACreateTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTACreateTeam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pickup_team(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTACreateTeam::CMsgDOTACreateTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACreateTeam)
}
CMsgDOTACreateTeam::CMsgDOTACreateTeam(const CMsgDOTACreateTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_abbreviation()) {
    abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abbreviation(), 
      GetArena());
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickup_team_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(pickup_team_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateTeam)
}

void CMsgDOTACreateTeam::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pickup_team_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(pickup_team_));
}

CMsgDOTACreateTeam::~CMsgDOTACreateTeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTACreateTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTACreateTeam::ArenaDtor(void* object) {
  CMsgDOTACreateTeam* _this = reinterpret_cast< CMsgDOTACreateTeam* >(object);
  (void)_this;
}
void CMsgDOTACreateTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTACreateTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTACreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACreateTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&banner_logo_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(banner_logo_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&sponsor_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pickup_team_) -
        reinterpret_cast<char*>(&sponsor_logo_)) + sizeof(pickup_team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACreateTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTACreateTeam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTACreateTeam.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 base_logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_base_logo(&has_bits);
          base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 banner_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_banner_logo(&has_bits);
          banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sponsor_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_sponsor_logo(&has_bits);
          sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTACreateTeam.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTACreateTeam.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool pickup_team = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pickup_team(&has_bits);
          pickup_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string abbreviation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTACreateTeam.abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTACreateTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sponsor_logo(), target);
  }

  // optional string country_code = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.country_code");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_country_code(), target);
  }

  // optional string url = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_url(), target);
  }

  // optional bool pickup_team = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_pickup_team(), target);
  }

  // optional string abbreviation = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviation().data(), static_cast<int>(this->_internal_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTACreateTeam.abbreviation");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateTeam)
  return target;
}

size_t CMsgDOTACreateTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACreateTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string abbreviation = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviation());
    }

    // optional uint64 logo = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint64 base_logo = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_banner_logo());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 sponsor_logo = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sponsor_logo());
    }

    // optional bool pickup_team = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTACreateTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTACreateTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTACreateTeam)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeam::MergeFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACreateTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_abbreviation(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00000020u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      banner_logo_ = from.banner_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      pickup_team_ = from.pickup_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeam::CopyFrom(const CMsgDOTACreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeam::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeam::InternalSwap(CMsgDOTACreateTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  abbreviation_.Swap(&other->abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTACreateTeam, pickup_team_)
      + sizeof(CMsgDOTACreateTeam::pickup_team_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTACreateTeam, logo_)>(
          reinterpret_cast<char*>(&logo_),
          reinterpret_cast<char*>(&other->logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACreateTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTACreateTeamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTACreateTeamResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTACreateTeamResponse)
}
CMsgDOTACreateTeamResponse::CMsgDOTACreateTeamResponse(const CMsgDOTACreateTeamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTACreateTeamResponse)
}

void CMsgDOTACreateTeamResponse::SharedCtor() {
team_id_ = 0u;
result_ = -1;
}

CMsgDOTACreateTeamResponse::~CMsgDOTACreateTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTACreateTeamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTACreateTeamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTACreateTeamResponse::ArenaDtor(void* object) {
  CMsgDOTACreateTeamResponse* _this = reinterpret_cast< CMsgDOTACreateTeamResponse* >(object);
  (void)_this;
}
void CMsgDOTACreateTeamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTACreateTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTACreateTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTACreateTeamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    team_id_ = 0u;
    result_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTACreateTeamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTACreateTeamResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTACreateTeamResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTACreateTeamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTACreateTeamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTACreateTeamResponse)
  return target;
}

size_t CMsgDOTACreateTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTACreateTeamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional .CMsgDOTACreateTeamResponse.Result result = 1 [default = INVALID];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTACreateTeamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACreateTeamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTACreateTeamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTACreateTeamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTACreateTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTACreateTeamResponse::MergeFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTACreateTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTACreateTeamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACreateTeamResponse::CopyFrom(const CMsgDOTACreateTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTACreateTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACreateTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTACreateTeamResponse::InternalSwap(CMsgDOTACreateTeamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTACreateTeamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAEditTeamDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAEditTeamDetails>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_banner_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_sponsor_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_in_use_by_party(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_abbreviation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAEditTeamDetails)
}
CMsgDOTAEditTeamDetails::CMsgDOTAEditTeamDetails(const CMsgDOTAEditTeamDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArena());
  }
  abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_abbreviation()) {
    abbreviation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_abbreviation(), 
      GetArena());
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&sponsor_logo_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(sponsor_logo_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditTeamDetails)
}

void CMsgDOTAEditTeamDetails::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
abbreviation_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sponsor_logo_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(sponsor_logo_));
}

CMsgDOTAEditTeamDetails::~CMsgDOTAEditTeamDetails() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditTeamDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAEditTeamDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  abbreviation_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAEditTeamDetails::ArenaDtor(void* object) {
  CMsgDOTAEditTeamDetails* _this = reinterpret_cast< CMsgDOTAEditTeamDetails* >(object);
  (void)_this;
}
void CMsgDOTAEditTeamDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAEditTeamDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAEditTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAEditTeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      abbreviation_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(team_id_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&in_use_by_party_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sponsor_logo_) -
        reinterpret_cast<char*>(&in_use_by_party_)) + sizeof(sponsor_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAEditTeamDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 base_logo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_base_logo(&has_bits);
          base_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 banner_logo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_banner_logo(&has_bits);
          banner_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sponsor_logo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sponsor_logo(&has_bits);
          sponsor_logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool in_use_by_party = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_in_use_by_party(&has_bits);
          in_use_by_party_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string abbreviation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_abbreviation();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAEditTeamDetails.abbreviation");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAEditTeamDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditTeamDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_logo(), target);
  }

  // optional uint64 base_logo = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_base_logo(), target);
  }

  // optional uint64 banner_logo = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_banner_logo(), target);
  }

  // optional uint64 sponsor_logo = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_sponsor_logo(), target);
  }

  // optional string country_code = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.country_code");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country_code(), target);
  }

  // optional string url = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_url(), target);
  }

  // optional bool in_use_by_party = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_in_use_by_party(), target);
  }

  // optional string abbreviation = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_abbreviation().data(), static_cast<int>(this->_internal_abbreviation().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAEditTeamDetails.abbreviation");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_abbreviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditTeamDetails)
  return target;
}

size_t CMsgDOTAEditTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAEditTeamDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string url = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string abbreviation = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_abbreviation());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint64 base_logo = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_base_logo());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bool in_use_by_party = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional uint64 banner_logo = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_banner_logo());
    }

    // optional uint64 sponsor_logo = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sponsor_logo());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditTeamDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAEditTeamDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAEditTeamDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAEditTeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetails::MergeFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAEditTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_abbreviation(from._internal_abbreviation());
    }
    if (cached_has_bits & 0x00000020u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      in_use_by_party_ = from.in_use_by_party_;
    }
    if (cached_has_bits & 0x00000200u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00000400u) {
      sponsor_logo_ = from.sponsor_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAEditTeamDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetails::CopyFrom(const CMsgDOTAEditTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAEditTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetails::InternalSwap(CMsgDOTAEditTeamDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  abbreviation_.Swap(&other->abbreviation_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAEditTeamDetails, sponsor_logo_)
      + sizeof(CMsgDOTAEditTeamDetails::sponsor_logo_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAEditTeamDetails, logo_)>(
          reinterpret_cast<char*>(&logo_),
          reinterpret_cast<char*>(&other->logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAEditTeamDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAEditTeamDetailsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAEditTeamDetailsResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAEditTeamDetailsResponse)
}
CMsgDOTAEditTeamDetailsResponse::CMsgDOTAEditTeamDetailsResponse(const CMsgDOTAEditTeamDetailsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAEditTeamDetailsResponse)
}

void CMsgDOTAEditTeamDetailsResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAEditTeamDetailsResponse::~CMsgDOTAEditTeamDetailsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAEditTeamDetailsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAEditTeamDetailsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAEditTeamDetailsResponse::ArenaDtor(void* object) {
  CMsgDOTAEditTeamDetailsResponse* _this = reinterpret_cast< CMsgDOTAEditTeamDetailsResponse* >(object);
  (void)_this;
}
void CMsgDOTAEditTeamDetailsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAEditTeamDetailsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAEditTeamDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAEditTeamDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAEditTeamDetailsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAEditTeamDetailsResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAEditTeamDetailsResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAEditTeamDetailsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAEditTeamDetailsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAEditTeamDetailsResponse)
  return target;
}

size_t CMsgDOTAEditTeamDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAEditTeamDetailsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAEditTeamDetailsResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAEditTeamDetailsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAEditTeamDetailsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAEditTeamDetailsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAEditTeamDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAEditTeamDetailsResponse::MergeFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAEditTeamDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAEditTeamDetailsResponse::CopyFrom(const CMsgDOTAEditTeamDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAEditTeamDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAEditTeamDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAEditTeamDetailsResponse::InternalSwap(CMsgDOTAEditTeamDetailsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAEditTeamDetailsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamProfileResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamProfileResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTATeam& team(const CMsgDOTATeamProfileResponse* msg);
  static void set_has_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDOTATeam&
CMsgDOTATeamProfileResponse::_Internal::team(const CMsgDOTATeamProfileResponse* msg) {
  return *msg->team_;
}
CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamProfileResponse)
}
CMsgDOTATeamProfileResponse::CMsgDOTATeamProfileResponse(const CMsgDOTATeamProfileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team()) {
    team_ = new ::CMsgDOTATeam(*from.team_);
  } else {
    team_ = nullptr;
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamProfileResponse)
}

void CMsgDOTATeamProfileResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&team_)) + sizeof(eresult_));
}

CMsgDOTATeamProfileResponse::~CMsgDOTATeamProfileResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamProfileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamProfileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete team_;
}

void CMsgDOTATeamProfileResponse::ArenaDtor(void* object) {
  CMsgDOTATeamProfileResponse* _this = reinterpret_cast< CMsgDOTATeamProfileResponse* >(object);
  (void)_this;
}
void CMsgDOTATeamProfileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamProfileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamProfileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(team_ != nullptr);
    team_->Clear();
  }
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamProfileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 eresult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTATeam team = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamProfileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamProfileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional .CMsgDOTATeam team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::team(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamProfileResponse)
  return target;
}

size_t CMsgDOTATeamProfileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamProfileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTATeam team = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_);
    }

    // optional uint32 eresult = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eresult());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamProfileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamProfileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamProfileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamProfileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamProfileResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamProfileResponse::MergeFrom(const CMsgDOTATeamProfileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamProfileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_team()->::CMsgDOTATeam::MergeFrom(from._internal_team());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamProfileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamProfileResponse::CopyFrom(const CMsgDOTATeamProfileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamProfileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamProfileResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATeamProfileResponse::InternalSwap(CMsgDOTATeamProfileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamProfileResponse, eresult_)
      + sizeof(CMsgDOTATeamProfileResponse::eresult_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamProfileResponse, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamProfileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProTeamListRequest::_Internal {
 public:
};

CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProTeamListRequest)
}
CMsgDOTAProTeamListRequest::CMsgDOTAProTeamListRequest(const CMsgDOTAProTeamListRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProTeamListRequest)
}

void CMsgDOTAProTeamListRequest::SharedCtor() {
}

CMsgDOTAProTeamListRequest::~CMsgDOTAProTeamListRequest() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProTeamListRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProTeamListRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProTeamListRequest::ArenaDtor(void* object) {
  CMsgDOTAProTeamListRequest* _this = reinterpret_cast< CMsgDOTAProTeamListRequest* >(object);
  (void)_this;
}
void CMsgDOTAProTeamListRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProTeamListRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProTeamListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProTeamListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProTeamListRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProTeamListRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProTeamListRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProTeamListRequest)
  return target;
}

size_t CMsgDOTAProTeamListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProTeamListRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProTeamListRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProTeamListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProTeamListRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProTeamListRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProTeamListRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListRequest::MergeFrom(const CMsgDOTAProTeamListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProTeamListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAProTeamListRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProTeamListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListRequest::CopyFrom(const CMsgDOTAProTeamListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProTeamListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListRequest::InternalSwap(CMsgDOTAProTeamListRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProTeamListRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProTeamListResponse_TeamEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProTeamListResponse_TeamEntry>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_member_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProTeamListResponse.TeamEntry)
}
CMsgDOTAProTeamListResponse_TeamEntry::CMsgDOTAProTeamListResponse_TeamEntry(const CMsgDOTAProTeamListResponse_TeamEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tag()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArena());
  }
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArena());
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProTeamListResponse.TeamEntry)
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(member_count_));
}

CMsgDOTAProTeamListResponse_TeamEntry::~CMsgDOTAProTeamListResponse_TeamEntry() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProTeamListResponse.TeamEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProTeamListResponse_TeamEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProTeamListResponse_TeamEntry::ArenaDtor(void* object) {
  CMsgDOTAProTeamListResponse_TeamEntry* _this = reinterpret_cast< CMsgDOTAProTeamListResponse_TeamEntry* >(object);
  (void)_this;
}
void CMsgDOTAProTeamListResponse_TeamEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProTeamListResponse_TeamEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProTeamListResponse_TeamEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProTeamListResponse.TeamEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      country_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProTeamListResponse_TeamEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAProTeamListResponse.TeamEntry.tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_created = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string country_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTAProTeamListResponse.TeamEntry.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 member_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_member_count(&has_bits);
          member_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProTeamListResponse_TeamEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProTeamListResponse.TeamEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAProTeamListResponse.TeamEntry.tag");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_created(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_logo(), target);
  }

  // optional string country_code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTAProTeamListResponse.TeamEntry.country_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_country_code(), target);
  }

  // optional uint32 member_count = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_member_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProTeamListResponse.TeamEntry)
  return target;
}

size_t CMsgDOTAProTeamListResponse_TeamEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProTeamListResponse.TeamEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tag = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string country_code = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 time_created = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_created());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint32 member_count = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_member_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProTeamListResponse.TeamEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse_TeamEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProTeamListResponse_TeamEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProTeamListResponse.TeamEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProTeamListResponse.TeamEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::MergeFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProTeamListResponse.TeamEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000010u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProTeamListResponse.TeamEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse_TeamEntry::CopyFrom(const CMsgDOTAProTeamListResponse_TeamEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProTeamListResponse.TeamEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse_TeamEntry::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListResponse_TeamEntry::InternalSwap(CMsgDOTAProTeamListResponse_TeamEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tag_.Swap(&other->tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_code_.Swap(&other->country_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, member_count_)
      + sizeof(CMsgDOTAProTeamListResponse_TeamEntry::member_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAProTeamListResponse_TeamEntry, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProTeamListResponse_TeamEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAProTeamListResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAProTeamListResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAProTeamListResponse)
}
CMsgDOTAProTeamListResponse::CMsgDOTAProTeamListResponse(const CMsgDOTAProTeamListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAProTeamListResponse)
}

void CMsgDOTAProTeamListResponse::SharedCtor() {
eresult_ = 0u;
}

CMsgDOTAProTeamListResponse::~CMsgDOTAProTeamListResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAProTeamListResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAProTeamListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAProTeamListResponse::ArenaDtor(void* object) {
  CMsgDOTAProTeamListResponse* _this = reinterpret_cast< CMsgDOTAProTeamListResponse* >(object);
  (void)_this;
}
void CMsgDOTAProTeamListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAProTeamListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAProTeamListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAProTeamListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  eresult_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAProTeamListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 eresult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAProTeamListResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAProTeamListResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAProTeamListResponse)
  return target;
}

size_t CMsgDOTAProTeamListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAProTeamListResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAProTeamListResponse.TeamEntry teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 eresult = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_eresult());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAProTeamListResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAProTeamListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProTeamListResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAProTeamListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAProTeamListResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAProTeamListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAProTeamListResponse::MergeFrom(const CMsgDOTAProTeamListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAProTeamListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
}

void CMsgDOTAProTeamListResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAProTeamListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProTeamListResponse::CopyFrom(const CMsgDOTAProTeamListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAProTeamListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProTeamListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAProTeamListResponse::InternalSwap(CMsgDOTAProTeamListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAProTeamListResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInvite_InviterToGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_InviterToGC>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_InviterToGC)
}
CMsgDOTATeamInvite_InviterToGC::CMsgDOTATeamInvite_InviterToGC(const CMsgDOTATeamInvite_InviterToGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_InviterToGC)
}

void CMsgDOTATeamInvite_InviterToGC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
}

CMsgDOTATeamInvite_InviterToGC::~CMsgDOTATeamInvite_InviterToGC() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_InviterToGC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInvite_InviterToGC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInvite_InviterToGC::ArenaDtor(void* object) {
  CMsgDOTATeamInvite_InviterToGC* _this = reinterpret_cast< CMsgDOTATeamInvite_InviterToGC* >(object);
  (void)_this;
}
void CMsgDOTATeamInvite_InviterToGC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInvite_InviterToGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInvite_InviterToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_InviterToGC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_InviterToGC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInvite_InviterToGC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_InviterToGC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_InviterToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviterToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_InviterToGC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviterToGC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInvite_InviterToGC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInvite_InviterToGC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInvite_InviterToGC)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviterToGC::MergeFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_InviterToGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviterToGC::CopyFrom(const CMsgDOTATeamInvite_InviterToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_InviterToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviterToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviterToGC::InternalSwap(CMsgDOTATeamInvite_InviterToGC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, team_id_)
      + sizeof(CMsgDOTATeamInvite_InviterToGC::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_InviterToGC, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_InviterToGC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInvite_GCImmediateResponseToInviter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCImmediateResponseToInviter>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitee_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required_play_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}
CMsgDOTATeamInvite_GCImmediateResponseToInviter::CMsgDOTATeamInvite_GCImmediateResponseToInviter(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitee_name()) {
    invitee_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitee_name(), 
      GetArena());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&required_play_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(required_play_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedCtor() {
invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&required_play_time_) -
    reinterpret_cast<char*>(&result_)) + sizeof(required_play_time_));
}

CMsgDOTATeamInvite_GCImmediateResponseToInviter::~CMsgDOTATeamInvite_GCImmediateResponseToInviter() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitee_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::ArenaDtor(void* object) {
  CMsgDOTATeamInvite_GCImmediateResponseToInviter* _this = reinterpret_cast< CMsgDOTATeamInvite_GCImmediateResponseToInviter* >(object);
  (void)_this;
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInvite_GCImmediateResponseToInviter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitee_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_play_time_) -
        reinterpret_cast<char*>(&result_)) + sizeof(required_play_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCImmediateResponseToInviter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string invitee_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invitee_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_play_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required_play_time(&has_bits);
          required_play_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInvite_GCImmediateResponseToInviter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitee_name().data(), static_cast<int>(this->_internal_invitee_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCImmediateResponseToInviter.invitee_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitee_name(), target);
  }

  // optional uint32 required_play_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_play_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCImmediateResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string invitee_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitee_name());
    }

    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional uint32 required_play_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_play_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCImmediateResponseToInviter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInvite_GCImmediateResponseToInviter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invitee_name(from._internal_invitee_name());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_play_time_ = from.required_play_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCImmediateResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCImmediateResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCImmediateResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCImmediateResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCImmediateResponseToInviter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitee_name_.Swap(&other->invitee_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, required_play_time_)
      + sizeof(CMsgDOTATeamInvite_GCImmediateResponseToInviter::required_play_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCImmediateResponseToInviter, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCImmediateResponseToInviter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInvite_GCRequestToInvitee::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCRequestToInvitee>()._has_bits_);
  static void set_has_inviter_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCRequestToInvitee)
}
CMsgDOTATeamInvite_GCRequestToInvitee::CMsgDOTATeamInvite_GCRequestToInvitee(const CMsgDOTATeamInvite_GCRequestToInvitee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_tag()) {
    team_tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_tag(), 
      GetArena());
  }
  ::memcpy(&logo_, &from.logo_,
    static_cast<size_t>(reinterpret_cast<char*>(&inviter_account_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(inviter_account_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCRequestToInvitee)
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&logo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&inviter_account_id_) -
    reinterpret_cast<char*>(&logo_)) + sizeof(inviter_account_id_));
}

CMsgDOTATeamInvite_GCRequestToInvitee::~CMsgDOTATeamInvite_GCRequestToInvitee() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCRequestToInvitee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInvite_GCRequestToInvitee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCRequestToInvitee::ArenaDtor(void* object) {
  CMsgDOTATeamInvite_GCRequestToInvitee* _this = reinterpret_cast< CMsgDOTATeamInvite_GCRequestToInvitee* >(object);
  (void)_this;
}
void CMsgDOTATeamInvite_GCRequestToInvitee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInvite_GCRequestToInvitee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inviter_account_id_) -
        reinterpret_cast<char*>(&logo_)) + sizeof(inviter_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCRequestToInvitee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 inviter_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_inviter_account_id(&has_bits);
          inviter_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_tag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 logo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_logo(&has_bits);
          logo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInvite_GCRequestToInvitee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 inviter_account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_inviter_account_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCRequestToInvitee.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_tag().data(), static_cast<int>(this->_internal_team_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCRequestToInvitee.team_tag");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_tag(), target);
  }

  // optional uint64 logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_logo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCRequestToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCRequestToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_tag());
    }

    // optional uint64 logo = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_logo());
    }

    // optional uint32 inviter_account_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inviter_account_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCRequestToInvitee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInvite_GCRequestToInvitee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInvite_GCRequestToInvitee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInvite_GCRequestToInvitee)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_tag(from._internal_team_tag());
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      inviter_account_id_ = from.inviter_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCRequestToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCRequestToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCRequestToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCRequestToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCRequestToInvitee::InternalSwap(CMsgDOTATeamInvite_GCRequestToInvitee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_tag_.Swap(&other->team_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, inviter_account_id_)
      + sizeof(CMsgDOTATeamInvite_GCRequestToInvitee::inviter_account_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATeamInvite_GCRequestToInvitee, logo_)>(
          reinterpret_cast<char*>(&logo_),
          reinterpret_cast<char*>(&other->logo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCRequestToInvitee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInvite_InviteeResponseToGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_InviteeResponseToGC>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_InviteeResponseToGC)
}
CMsgDOTATeamInvite_InviteeResponseToGC::CMsgDOTATeamInvite_InviteeResponseToGC(const CMsgDOTATeamInvite_InviteeResponseToGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_InviteeResponseToGC)
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedCtor() {
result_ = 0;
}

CMsgDOTATeamInvite_InviteeResponseToGC::~CMsgDOTATeamInvite_InviteeResponseToGC() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_InviteeResponseToGC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInvite_InviteeResponseToGC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::ArenaDtor(void* object) {
  CMsgDOTATeamInvite_InviteeResponseToGC* _this = reinterpret_cast< CMsgDOTATeamInvite_InviteeResponseToGC* >(object);
  (void)_this;
}
void CMsgDOTATeamInvite_InviteeResponseToGC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInvite_InviteeResponseToGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_InviteeResponseToGC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInvite_InviteeResponseToGC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_InviteeResponseToGC)
  return target;
}

size_t CMsgDOTATeamInvite_InviteeResponseToGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_InviteeResponseToGC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInvite_InviteeResponseToGC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInvite_InviteeResponseToGC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInvite_InviteeResponseToGC)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::MergeFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_InviteeResponseToGC::CopyFrom(const CMsgDOTATeamInvite_InviteeResponseToGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_InviteeResponseToGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_InviteeResponseToGC::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_InviteeResponseToGC::InternalSwap(CMsgDOTATeamInvite_InviteeResponseToGC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_InviteeResponseToGC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInvite_GCResponseToInviter::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCResponseToInviter>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invitee_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCResponseToInviter)
}
CMsgDOTATeamInvite_GCResponseToInviter::CMsgDOTATeamInvite_GCResponseToInviter(const CMsgDOTATeamInvite_GCResponseToInviter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invitee_name()) {
    invitee_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invitee_name(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCResponseToInviter)
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedCtor() {
invitee_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CMsgDOTATeamInvite_GCResponseToInviter::~CMsgDOTATeamInvite_GCResponseToInviter() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCResponseToInviter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInvite_GCResponseToInviter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  invitee_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCResponseToInviter::ArenaDtor(void* object) {
  CMsgDOTATeamInvite_GCResponseToInviter* _this = reinterpret_cast< CMsgDOTATeamInvite_GCResponseToInviter* >(object);
  (void)_this;
}
void CMsgDOTATeamInvite_GCResponseToInviter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInvite_GCResponseToInviter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCResponseToInviter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCResponseToInviter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    invitee_name_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCResponseToInviter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string invitee_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_invitee_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInvite_GCResponseToInviter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCResponseToInviter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string invitee_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invitee_name().data(), static_cast<int>(this->_internal_invitee_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCResponseToInviter.invitee_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_invitee_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCResponseToInviter)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInviter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCResponseToInviter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string invitee_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invitee_name());
    }

    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInviter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInvite_GCResponseToInviter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInvite_GCResponseToInviter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInvite_GCResponseToInviter)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCResponseToInviter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_invitee_name(from._internal_invitee_name());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInviter::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInviter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCResponseToInviter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInviter::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInviter::InternalSwap(CMsgDOTATeamInvite_GCResponseToInviter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  invitee_name_.Swap(&other->invitee_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCResponseToInviter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATeamInvite_GCResponseToInvitee::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATeamInvite_GCResponseToInvitee>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATeamInvite_GCResponseToInvitee)
}
CMsgDOTATeamInvite_GCResponseToInvitee::CMsgDOTATeamInvite_GCResponseToInvitee(const CMsgDOTATeamInvite_GCResponseToInvitee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATeamInvite_GCResponseToInvitee)
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
result_ = 0;
}

CMsgDOTATeamInvite_GCResponseToInvitee::~CMsgDOTATeamInvite_GCResponseToInvitee() {
  // @@protoc_insertion_point(destructor:CMsgDOTATeamInvite_GCResponseToInvitee)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATeamInvite_GCResponseToInvitee::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATeamInvite_GCResponseToInvitee::ArenaDtor(void* object) {
  CMsgDOTATeamInvite_GCResponseToInvitee* _this = reinterpret_cast< CMsgDOTATeamInvite_GCResponseToInvitee* >(object);
  (void)_this;
}
void CMsgDOTATeamInvite_GCResponseToInvitee::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATeamInvite_GCResponseToInvitee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmpty();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATeamInvite_GCResponseToInvitee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ETeamInviteResult_IsValid(val))) {
            _internal_set_result(static_cast<::ETeamInviteResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATeamInvite_GCResponseToInvitee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTATeamInvite_GCResponseToInvitee.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATeamInvite_GCResponseToInvitee)
  return target;
}

size_t CMsgDOTATeamInvite_GCResponseToInvitee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional .ETeamInviteResult result = 1 [default = TEAM_INVITE_SUCCESS];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATeamInvite_GCResponseToInvitee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATeamInvite_GCResponseToInvitee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATeamInvite_GCResponseToInvitee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATeamInvite_GCResponseToInvitee)
    MergeFrom(*source);
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::MergeFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATeamInvite_GCResponseToInvitee::CopyFrom(const CMsgDOTATeamInvite_GCResponseToInvitee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATeamInvite_GCResponseToInvitee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATeamInvite_GCResponseToInvitee::IsInitialized() const {
  return true;
}

void CMsgDOTATeamInvite_GCResponseToInvitee::InternalSwap(CMsgDOTATeamInvite_GCResponseToInvitee* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATeamInvite_GCResponseToInvitee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAKickTeamMember::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAKickTeamMember>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAKickTeamMember)
}
CMsgDOTAKickTeamMember::CMsgDOTAKickTeamMember(const CMsgDOTAKickTeamMember& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAKickTeamMember)
}

void CMsgDOTAKickTeamMember::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
}

CMsgDOTAKickTeamMember::~CMsgDOTAKickTeamMember() {
  // @@protoc_insertion_point(destructor:CMsgDOTAKickTeamMember)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAKickTeamMember::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAKickTeamMember::ArenaDtor(void* object) {
  CMsgDOTAKickTeamMember* _this = reinterpret_cast< CMsgDOTAKickTeamMember* >(object);
  (void)_this;
}
void CMsgDOTAKickTeamMember::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAKickTeamMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAKickTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAKickTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAKickTeamMember::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAKickTeamMember::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAKickTeamMember)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAKickTeamMember)
  return target;
}

size_t CMsgDOTAKickTeamMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAKickTeamMember)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAKickTeamMember::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAKickTeamMember* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAKickTeamMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAKickTeamMember)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAKickTeamMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMember::MergeFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAKickTeamMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAKickTeamMember::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMember::CopyFrom(const CMsgDOTAKickTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAKickTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMember::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMember::InternalSwap(CMsgDOTAKickTeamMember* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTAKickTeamMember, team_id_)
      + sizeof(CMsgDOTAKickTeamMember::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTAKickTeamMember, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAKickTeamMember::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTAKickTeamMemberResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTAKickTeamMemberResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTAKickTeamMemberResponse)
}
CMsgDOTAKickTeamMemberResponse::CMsgDOTAKickTeamMemberResponse(const CMsgDOTAKickTeamMemberResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTAKickTeamMemberResponse)
}

void CMsgDOTAKickTeamMemberResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTAKickTeamMemberResponse::~CMsgDOTAKickTeamMemberResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTAKickTeamMemberResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTAKickTeamMemberResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTAKickTeamMemberResponse::ArenaDtor(void* object) {
  CMsgDOTAKickTeamMemberResponse* _this = reinterpret_cast< CMsgDOTAKickTeamMemberResponse* >(object);
  (void)_this;
}
void CMsgDOTAKickTeamMemberResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTAKickTeamMemberResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTAKickTeamMemberResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTAKickTeamMemberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTAKickTeamMemberResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTAKickTeamMemberResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTAKickTeamMemberResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTAKickTeamMemberResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTAKickTeamMemberResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTAKickTeamMemberResponse)
  return target;
}

size_t CMsgDOTAKickTeamMemberResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTAKickTeamMemberResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTAKickTeamMemberResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAKickTeamMemberResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTAKickTeamMemberResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTAKickTeamMemberResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTAKickTeamMemberResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAKickTeamMemberResponse::MergeFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTAKickTeamMemberResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAKickTeamMemberResponse::CopyFrom(const CMsgDOTAKickTeamMemberResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTAKickTeamMemberResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAKickTeamMemberResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAKickTeamMemberResponse::InternalSwap(CMsgDOTAKickTeamMemberResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTAKickTeamMemberResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATransferTeamAdmin::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATransferTeamAdmin>()._has_bits_);
  static void set_has_new_admin_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATransferTeamAdmin)
}
CMsgDOTATransferTeamAdmin::CMsgDOTATransferTeamAdmin(const CMsgDOTATransferTeamAdmin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&new_admin_account_id_, &from.new_admin_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&new_admin_account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATransferTeamAdmin)
}

void CMsgDOTATransferTeamAdmin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&new_admin_account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&new_admin_account_id_)) + sizeof(team_id_));
}

CMsgDOTATransferTeamAdmin::~CMsgDOTATransferTeamAdmin() {
  // @@protoc_insertion_point(destructor:CMsgDOTATransferTeamAdmin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATransferTeamAdmin::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATransferTeamAdmin::ArenaDtor(void* object) {
  CMsgDOTATransferTeamAdmin* _this = reinterpret_cast< CMsgDOTATransferTeamAdmin* >(object);
  (void)_this;
}
void CMsgDOTATransferTeamAdmin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATransferTeamAdmin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATransferTeamAdmin::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATransferTeamAdmin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_admin_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&new_admin_account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATransferTeamAdmin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 new_admin_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_new_admin_account_id(&has_bits);
          new_admin_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATransferTeamAdmin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATransferTeamAdmin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_admin_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_new_admin_account_id(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATransferTeamAdmin)
  return target;
}

size_t CMsgDOTATransferTeamAdmin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATransferTeamAdmin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_admin_account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_new_admin_account_id());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdmin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATransferTeamAdmin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATransferTeamAdmin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATransferTeamAdmin)
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdmin::MergeFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATransferTeamAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_admin_account_id_ = from.new_admin_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdmin::CopyFrom(const CMsgDOTATransferTeamAdmin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATransferTeamAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdmin::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdmin::InternalSwap(CMsgDOTATransferTeamAdmin* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, team_id_)
      + sizeof(CMsgDOTATransferTeamAdmin::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTATransferTeamAdmin, new_admin_account_id_)>(
          reinterpret_cast<char*>(&new_admin_account_id_),
          reinterpret_cast<char*>(&other->new_admin_account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATransferTeamAdmin::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTATransferTeamAdminResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTATransferTeamAdminResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTATransferTeamAdminResponse)
}
CMsgDOTATransferTeamAdminResponse::CMsgDOTATransferTeamAdminResponse(const CMsgDOTATransferTeamAdminResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTATransferTeamAdminResponse)
}

void CMsgDOTATransferTeamAdminResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTATransferTeamAdminResponse::~CMsgDOTATransferTeamAdminResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTATransferTeamAdminResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTATransferTeamAdminResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTATransferTeamAdminResponse::ArenaDtor(void* object) {
  CMsgDOTATransferTeamAdminResponse* _this = reinterpret_cast< CMsgDOTATransferTeamAdminResponse* >(object);
  (void)_this;
}
void CMsgDOTATransferTeamAdminResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTATransferTeamAdminResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTATransferTeamAdminResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTATransferTeamAdminResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTATransferTeamAdminResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTATransferTeamAdminResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTATransferTeamAdminResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTATransferTeamAdminResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTATransferTeamAdminResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTATransferTeamAdminResponse)
  return target;
}

size_t CMsgDOTATransferTeamAdminResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTATransferTeamAdminResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTATransferTeamAdminResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATransferTeamAdminResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTATransferTeamAdminResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTATransferTeamAdminResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTATransferTeamAdminResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATransferTeamAdminResponse::MergeFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTATransferTeamAdminResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATransferTeamAdminResponse::CopyFrom(const CMsgDOTATransferTeamAdminResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTATransferTeamAdminResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATransferTeamAdminResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATransferTeamAdminResponse::InternalSwap(CMsgDOTATransferTeamAdminResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTATransferTeamAdminResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeaveTeam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaveTeam>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaveTeam)
}
CMsgDOTALeaveTeam::CMsgDOTALeaveTeam(const CMsgDOTALeaveTeam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveTeam)
}

void CMsgDOTALeaveTeam::SharedCtor() {
team_id_ = 0u;
}

CMsgDOTALeaveTeam::~CMsgDOTALeaveTeam() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveTeam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeaveTeam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeaveTeam::ArenaDtor(void* object) {
  CMsgDOTALeaveTeam* _this = reinterpret_cast< CMsgDOTALeaveTeam* >(object);
  (void)_this;
}
void CMsgDOTALeaveTeam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeaveTeam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaveTeam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeaveTeam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveTeam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveTeam)
  return target;
}

size_t CMsgDOTALeaveTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaveTeam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 team_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_team_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaveTeam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveTeam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeaveTeam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeaveTeam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeaveTeam)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeam::MergeFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaveTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_team_id()) {
    _internal_set_team_id(from._internal_team_id());
  }
}

void CMsgDOTALeaveTeam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeam::CopyFrom(const CMsgDOTALeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeam::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeam::InternalSwap(CMsgDOTALeaveTeam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_id_, other->team_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaveTeam::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTALeaveTeamResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTALeaveTeamResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTALeaveTeamResponse)
}
CMsgDOTALeaveTeamResponse::CMsgDOTALeaveTeamResponse(const CMsgDOTALeaveTeamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTALeaveTeamResponse)
}

void CMsgDOTALeaveTeamResponse::SharedCtor() {
result_ = 0;
}

CMsgDOTALeaveTeamResponse::~CMsgDOTALeaveTeamResponse() {
  // @@protoc_insertion_point(destructor:CMsgDOTALeaveTeamResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTALeaveTeamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTALeaveTeamResponse::ArenaDtor(void* object) {
  CMsgDOTALeaveTeamResponse* _this = reinterpret_cast< CMsgDOTALeaveTeamResponse* >(object);
  (void)_this;
}
void CMsgDOTALeaveTeamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTALeaveTeamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTALeaveTeamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTALeaveTeamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTALeaveTeamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDOTALeaveTeamResponse_Result_IsValid(val))) {
            _internal_set_result(static_cast<::CMsgDOTALeaveTeamResponse_Result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTALeaveTeamResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTALeaveTeamResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTALeaveTeamResponse)
  return target;
}

size_t CMsgDOTALeaveTeamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTALeaveTeamResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CMsgDOTALeaveTeamResponse.Result result = 1 [default = SUCCESS];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveTeamResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTALeaveTeamResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTALeaveTeamResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTALeaveTeamResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveTeamResponse::MergeFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTALeaveTeamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveTeamResponse::CopyFrom(const CMsgDOTALeaveTeamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTALeaveTeamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveTeamResponse::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveTeamResponse::InternalSwap(CMsgDOTALeaveTeamResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTALeaveTeamResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTABetaParticipation::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTABetaParticipation>()._has_bits_);
  static void set_has_access_rights(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTABetaParticipation)
}
CMsgDOTABetaParticipation::CMsgDOTABetaParticipation(const CMsgDOTABetaParticipation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  access_rights_ = from.access_rights_;
  // @@protoc_insertion_point(copy_constructor:CMsgDOTABetaParticipation)
}

void CMsgDOTABetaParticipation::SharedCtor() {
access_rights_ = 0u;
}

CMsgDOTABetaParticipation::~CMsgDOTABetaParticipation() {
  // @@protoc_insertion_point(destructor:CMsgDOTABetaParticipation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTABetaParticipation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDOTABetaParticipation::ArenaDtor(void* object) {
  CMsgDOTABetaParticipation* _this = reinterpret_cast< CMsgDOTABetaParticipation* >(object);
  (void)_this;
}
void CMsgDOTABetaParticipation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTABetaParticipation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTABetaParticipation::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTABetaParticipation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_rights_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTABetaParticipation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 access_rights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_access_rights(&has_bits);
          access_rights_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTABetaParticipation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTABetaParticipation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 access_rights = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_access_rights(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTABetaParticipation)
  return target;
}

size_t CMsgDOTABetaParticipation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTABetaParticipation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 access_rights = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_access_rights());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTABetaParticipation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABetaParticipation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTABetaParticipation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTABetaParticipation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTABetaParticipation)
    MergeFrom(*source);
  }
}

void CMsgDOTABetaParticipation::MergeFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTABetaParticipation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_access_rights()) {
    _internal_set_access_rights(from._internal_access_rights());
  }
}

void CMsgDOTABetaParticipation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABetaParticipation::CopyFrom(const CMsgDOTABetaParticipation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTABetaParticipation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABetaParticipation::IsInitialized() const {
  return true;
}

void CMsgDOTABetaParticipation::InternalSwap(CMsgDOTABetaParticipation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(access_rights_, other->access_rights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTABetaParticipation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamMemberSDO* Arena::CreateMaybeMessage< ::CMsgDOTATeamMemberSDO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamMemberSDO >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamAdminSDO* Arena::CreateMaybeMessage< ::CMsgDOTATeamAdminSDO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamAdminSDO >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamMember* Arena::CreateMaybeMessage< ::CMsgDOTATeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeam* Arena::CreateMaybeMessage< ::CMsgDOTATeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_HeroStats* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_HeroStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_HeroStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_MemberStats* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_MemberStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_MemberStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_TeamStats* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_TeamStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_TeamStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_DPCResult* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_DPCResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_DPCResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_Member* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_Member >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo_AuditEntry* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo_AuditEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo_AuditEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfo* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfoRequest* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamsInfo* Arena::CreateMaybeMessage< ::CMsgDOTATeamsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInfoList* Arena::CreateMaybeMessage< ::CMsgDOTATeamInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAMyTeamInfoRequest* Arena::CreateMaybeMessage< ::CMsgDOTAMyTeamInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAMyTeamInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACreateTeam* Arena::CreateMaybeMessage< ::CMsgDOTACreateTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACreateTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTACreateTeamResponse* Arena::CreateMaybeMessage< ::CMsgDOTACreateTeamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTACreateTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAEditTeamDetails* Arena::CreateMaybeMessage< ::CMsgDOTAEditTeamDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAEditTeamDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAEditTeamDetailsResponse* Arena::CreateMaybeMessage< ::CMsgDOTAEditTeamDetailsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAEditTeamDetailsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamProfileResponse* Arena::CreateMaybeMessage< ::CMsgDOTATeamProfileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamProfileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProTeamListRequest* Arena::CreateMaybeMessage< ::CMsgDOTAProTeamListRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProTeamListRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProTeamListResponse_TeamEntry* Arena::CreateMaybeMessage< ::CMsgDOTAProTeamListResponse_TeamEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProTeamListResponse_TeamEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAProTeamListResponse* Arena::CreateMaybeMessage< ::CMsgDOTAProTeamListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAProTeamListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_InviterToGC* Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_InviterToGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_InviterToGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCImmediateResponseToInviter* Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCImmediateResponseToInviter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCRequestToInvitee* Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCRequestToInvitee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCRequestToInvitee >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_InviteeResponseToGC* Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_InviteeResponseToGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_InviteeResponseToGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCResponseToInviter* Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCResponseToInviter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCResponseToInviter >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATeamInvite_GCResponseToInvitee* Arena::CreateMaybeMessage< ::CMsgDOTATeamInvite_GCResponseToInvitee >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATeamInvite_GCResponseToInvitee >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAKickTeamMember* Arena::CreateMaybeMessage< ::CMsgDOTAKickTeamMember >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAKickTeamMember >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTAKickTeamMemberResponse* Arena::CreateMaybeMessage< ::CMsgDOTAKickTeamMemberResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTAKickTeamMemberResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATransferTeamAdmin* Arena::CreateMaybeMessage< ::CMsgDOTATransferTeamAdmin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATransferTeamAdmin >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTATransferTeamAdminResponse* Arena::CreateMaybeMessage< ::CMsgDOTATransferTeamAdminResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTATransferTeamAdminResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaveTeam* Arena::CreateMaybeMessage< ::CMsgDOTALeaveTeam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaveTeam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTALeaveTeamResponse* Arena::CreateMaybeMessage< ::CMsgDOTALeaveTeamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTALeaveTeamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTABetaParticipation* Arena::CreateMaybeMessage< ::CMsgDOTABetaParticipation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTABetaParticipation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
