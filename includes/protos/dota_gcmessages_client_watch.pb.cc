// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#include "dota_gcmessages_client_watch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , hero_id_(0u){}
struct CSourceTVGameSmall_PlayerDefaultTypeInternal {
  constexpr CSourceTVGameSmall_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSourceTVGameSmall_PlayerDefaultTypeInternal() {}
  union {
    CSourceTVGameSmall_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSourceTVGameSmall_PlayerDefaultTypeInternal _CSourceTVGameSmall_Player_default_instance_;
constexpr CSourceTVGameSmall::CSourceTVGameSmall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , team_name_radiant_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_name_dire_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , activate_time_(0u)
  , deactivate_time_(0u)
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , league_id_(0u)
  , lobby_type_(0u)
  , game_time_(0)
  , delay_(0u)
  , spectators_(0u)
  , game_mode_(0u)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , average_mmr_(0u)
  , series_id_(0u)
  , sort_score_(0u)
  , last_update_time_(0)
  , radiant_lead_(0)
  , radiant_score_(0u)
  , dire_score_(0u)
  , building_state_(0u)
  , team_logo_radiant_(PROTOBUF_ULONGLONG(0))
  , team_logo_dire_(PROTOBUF_ULONGLONG(0))
  , weekend_tourney_tournament_id_(0u)
  , weekend_tourney_division_(0u)
  , weekend_tourney_skill_level_(0u)
  , weekend_tourney_bracket_round_(0u)
  , team_id_radiant_(0u)
  , team_id_dire_(0u)
  , custom_game_difficulty_(0u){}
struct CSourceTVGameSmallDefaultTypeInternal {
  constexpr CSourceTVGameSmallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CSourceTVGameSmallDefaultTypeInternal() {}
  union {
    CSourceTVGameSmall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CSourceTVGameSmallDefaultTypeInternal _CSourceTVGameSmall_default_instance_;
constexpr CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lobby_ids_()
  , search_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , league_id_(0u)
  , hero_id_(0u)
  , start_game_(0u)
  , game_list_index_(0u){}
struct CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal {
  constexpr CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal() {}
  union {
    CMsgClientToGCFindTopSourceTVGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal _CMsgClientToGCFindTopSourceTVGames_default_instance_;
constexpr CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_list_()
  , search_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bot_game_(nullptr)
  , league_id_(0u)
  , hero_id_(0u)
  , start_game_(0u)
  , num_games_(0u)
  , game_list_index_(0u)
  , specific_games_(false){}
struct CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal {
  constexpr CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientFindTopSourceTVGamesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
constexpr CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : live_games_(){}
struct CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal {
  constexpr CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal() {}
  union {
    CMsgGCToClientTopWeekendTourneyGames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
constexpr CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , player_account_id_(0u)
  , team_id_(0u){}
struct CMsgClientToGCTopMatchesRequestDefaultTypeInternal {
  constexpr CMsgClientToGCTopMatchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCTopMatchesRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCTopMatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCTopMatchesRequestDefaultTypeInternal _CMsgClientToGCTopMatchesRequest_default_instance_;
constexpr CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal {
  constexpr CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCTopLeagueMatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
constexpr CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal {
  constexpr CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCTopFriendMatchesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
constexpr CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_ids_(){}
struct CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal {
  constexpr CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal() {}
  union {
    CMsgClientToGCMatchesMinimalRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal _CMsgClientToGCMatchesMinimalRequest_default_instance_;
constexpr CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matches_()
  , last_match_(false){}
struct CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal {
  constexpr CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal() {}
  union {
    CMsgClientToGCMatchesMinimalResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal _CMsgClientToGCMatchesMinimalResponse_default_instance_;
constexpr CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matches_(){}
struct CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal {
  constexpr CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientTopLeagueMatchesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
constexpr CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : matches_(){}
struct CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal {
  constexpr CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientTopFriendMatchesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
constexpr CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_game_(0u)
  , league_id_(0u)
  , hero_id_(0u)
  , friend_id_(0u)
  , friend_list_(false)
  , league_list_(false){}
struct CMsgClientToGCFindTopMatchesDefaultTypeInternal {
  constexpr CMsgClientToGCFindTopMatchesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClientToGCFindTopMatchesDefaultTypeInternal() {}
  union {
    CMsgClientToGCFindTopMatches _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClientToGCFindTopMatchesDefaultTypeInternal _CMsgClientToGCFindTopMatches_default_instance_;
constexpr CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_ids_()
  , matches_()
  , start_game_(0u)
  , league_id_(0u)
  , hero_id_(0u){}
struct CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal {
  constexpr CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal() {}
  union {
    CMsgGCToClientFindTopLeagueMatchesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_;
constexpr CMsgSpectateFriendGame::CMsgSpectateFriendGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(PROTOBUF_ULONGLONG(0))
  , live_(false){}
struct CMsgSpectateFriendGameDefaultTypeInternal {
  constexpr CMsgSpectateFriendGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectateFriendGameDefaultTypeInternal() {}
  union {
    CMsgSpectateFriendGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectateFriendGameDefaultTypeInternal _CMsgSpectateFriendGame_default_instance_;
constexpr CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : watch_live_result_(0)

  , server_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSpectateFriendGameResponseDefaultTypeInternal {
  constexpr CMsgSpectateFriendGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSpectateFriendGameResponseDefaultTypeInternal() {}
  union {
    CMsgSpectateFriendGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSpectateFriendGameResponseDefaultTypeInternal _CMsgSpectateFriendGameResponse_default_instance_;
constexpr CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(0u){}
struct CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal {
  constexpr CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal() {}
  union {
    CDOTAReplayDownloadInfo_Highlight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal _CDOTAReplayDownloadInfo_Highlight_default_instance_;
constexpr CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_()
  , title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , match_(nullptr)
  , size_(0u)
  , exists_on_disk_(false){}
struct CDOTAReplayDownloadInfoDefaultTypeInternal {
  constexpr CDOTAReplayDownloadInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAReplayDownloadInfoDefaultTypeInternal() {}
  union {
    CDOTAReplayDownloadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAReplayDownloadInfoDefaultTypeInternal _CDOTAReplayDownloadInfo_default_instance_;
constexpr CMsgWatchGame::CMsgWatchGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : regions_()
  , server_steamid_(PROTOBUF_ULONGLONG(0))
  , watch_server_steamid_(PROTOBUF_ULONGLONG(0))
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , client_version_(0u){}
struct CMsgWatchGameDefaultTypeInternal {
  constexpr CMsgWatchGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWatchGameDefaultTypeInternal() {}
  union {
    CMsgWatchGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWatchGameDefaultTypeInternal _CMsgWatchGame_default_instance_;
constexpr CMsgCancelWatchGame::CMsgCancelWatchGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CMsgCancelWatchGameDefaultTypeInternal {
  constexpr CMsgCancelWatchGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgCancelWatchGameDefaultTypeInternal() {}
  union {
    CMsgCancelWatchGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgCancelWatchGameDefaultTypeInternal _CMsgCancelWatchGame_default_instance_;
constexpr CMsgWatchGameResponse::CMsgWatchGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : watch_game_result_(0)

  , source_tv_public_addr_(0u)
  , source_tv_private_addr_(0u)
  , source_tv_port_(0u)
  , game_server_steamid_(PROTOBUF_ULONGLONG(0))
  , watch_server_steamid_(PROTOBUF_ULONGLONG(0))
  , watch_tv_unique_secret_code_(PROTOBUF_ULONGLONG(0)){}
struct CMsgWatchGameResponseDefaultTypeInternal {
  constexpr CMsgWatchGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWatchGameResponseDefaultTypeInternal() {}
  union {
    CMsgWatchGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWatchGameResponseDefaultTypeInternal _CMsgWatchGameResponse_default_instance_;
constexpr CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_server_steamid_(PROTOBUF_ULONGLONG(0)){}
struct CMsgPartyLeaderWatchGamePromptDefaultTypeInternal {
  constexpr CMsgPartyLeaderWatchGamePromptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPartyLeaderWatchGamePromptDefaultTypeInternal() {}
  union {
    CMsgPartyLeaderWatchGamePrompt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPartyLeaderWatchGamePromptDefaultTypeInternal _CMsgPartyLeaderWatchGamePrompt_default_instance_;
constexpr CDOTABroadcasterInfo::CDOTABroadcasterInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_radiant_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_name_dire_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , account_id_(0u)
  , live_(false)
  , allow_live_video_(false)
  , series_game_(0u)
  , upcoming_broadcast_timestamp_(0u)
  , node_type_(0u){}
struct CDOTABroadcasterInfoDefaultTypeInternal {
  constexpr CDOTABroadcasterInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTABroadcasterInfoDefaultTypeInternal() {}
  union {
    CDOTABroadcasterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTABroadcasterInfoDefaultTypeInternal _CDOTABroadcasterInfo_default_instance_;
constexpr CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_logo_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(0u)
  , wager_count_(0u){}
struct CMsgDOTASeries_TeamInfoDefaultTypeInternal {
  constexpr CMsgDOTASeries_TeamInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeries_TeamInfoDefaultTypeInternal() {}
  union {
    CMsgDOTASeries_TeamInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeries_TeamInfoDefaultTypeInternal _CMsgDOTASeries_TeamInfo_default_instance_;
constexpr CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_radiant_(nullptr)
  , team_dire_(nullptr)
  , server_steam_id_(PROTOBUF_ULONGLONG(0))
  , team_radiant_score_(0u)
  , team_dire_score_(0u){}
struct CMsgDOTASeries_LiveGameDefaultTypeInternal {
  constexpr CMsgDOTASeries_LiveGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeries_LiveGameDefaultTypeInternal() {}
  union {
    CMsgDOTASeries_LiveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeries_LiveGameDefaultTypeInternal _CMsgDOTASeries_LiveGame_default_instance_;
constexpr CMsgDOTASeries::CMsgDOTASeries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_minimal_()
  , team_1_(nullptr)
  , team_2_(nullptr)
  , live_game_(nullptr)
  , series_id_(0u)
  , series_type_(0u){}
struct CMsgDOTASeriesDefaultTypeInternal {
  constexpr CMsgDOTASeriesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTASeriesDefaultTypeInternal() {}
  union {
    CMsgDOTASeries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTASeriesDefaultTypeInternal _CMsgDOTASeries_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[26];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall_Player, hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, activate_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, deactivate_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, league_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, game_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, delay_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, spectators_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, average_mmr_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, match_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, series_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, team_name_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, team_name_dire_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, team_logo_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, team_logo_dire_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, team_id_radiant_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, team_id_dire_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, sort_score_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, last_update_time_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, radiant_lead_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, radiant_score_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, dire_score_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, players_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, building_state_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, weekend_tourney_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, weekend_tourney_division_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, weekend_tourney_bracket_round_),
  PROTOBUF_FIELD_OFFSET(::CSourceTVGameSmall, custom_game_difficulty_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  0,
  1,
  21,
  22,
  27,
  28,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  20,
  23,
  24,
  25,
  26,
  29,
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, start_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, game_list_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopSourceTVGames, lobby_ids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, search_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, start_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, num_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, game_list_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, game_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, specific_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopSourceTVGamesResponse, bot_game_),
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopWeekendTourneyGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopWeekendTourneyGames, live_games_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopMatchesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopMatchesRequest, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopMatchesRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopMatchesRequest, team_id_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopLeagueMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCTopFriendMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalRequest, match_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCMatchesMinimalResponse, last_match_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopLeagueMatchesResponse, matches_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopFriendMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientTopFriendMatchesResponse, matches_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, start_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, friend_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, friend_list_),
  PROTOBUF_FIELD_OFFSET(::CMsgClientToGCFindTopMatches, league_list_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, start_game_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, league_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, match_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCToClientFindTopLeagueMatchesResponse, matches_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGame, live_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSpectateFriendGameResponse, watch_live_result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo_Highlight, description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, match_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, title_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, description_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, size_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, tags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAReplayDownloadInfo, exists_on_disk_),
  2,
  0,
  1,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, client_version_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, watch_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGame, regions_),
  0,
  3,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgCancelWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, watch_game_result_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, source_tv_public_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, source_tv_private_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, source_tv_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, game_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, watch_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgWatchGameResponse, watch_tv_unique_secret_code_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgPartyLeaderWatchGamePrompt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPartyLeaderWatchGamePrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPartyLeaderWatchGamePrompt, game_server_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, live_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, team_name_radiant_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, team_name_dire_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, series_game_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, upcoming_broadcast_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, allow_live_video_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, node_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTABroadcasterInfo, node_name_),
  4,
  3,
  5,
  0,
  1,
  7,
  8,
  6,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, team_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_TeamInfo, wager_count_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, team_radiant_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, team_dire_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, team_radiant_score_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries_LiveGame, team_dire_score_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, series_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, series_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, team_1_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, team_2_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, match_minimal_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTASeries, live_game_),
  3,
  4,
  0,
  1,
  ~0u,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CSourceTVGameSmall_Player)},
  { 9, 45, sizeof(::CSourceTVGameSmall)},
  { 76, 87, sizeof(::CMsgClientToGCFindTopSourceTVGames)},
  { 93, 107, sizeof(::CMsgGCToClientFindTopSourceTVGamesResponse)},
  { 116, -1, sizeof(::CMsgGCToClientTopWeekendTourneyGames)},
  { 122, 130, sizeof(::CMsgClientToGCTopMatchesRequest)},
  { 133, -1, sizeof(::CMsgClientToGCTopLeagueMatchesRequest)},
  { 138, -1, sizeof(::CMsgClientToGCTopFriendMatchesRequest)},
  { 143, -1, sizeof(::CMsgClientToGCMatchesMinimalRequest)},
  { 149, 156, sizeof(::CMsgClientToGCMatchesMinimalResponse)},
  { 158, -1, sizeof(::CMsgGCToClientTopLeagueMatchesResponse)},
  { 164, -1, sizeof(::CMsgGCToClientTopFriendMatchesResponse)},
  { 170, 181, sizeof(::CMsgClientToGCFindTopMatches)},
  { 187, 197, sizeof(::CMsgGCToClientFindTopLeagueMatchesResponse)},
  { 202, 209, sizeof(::CMsgSpectateFriendGame)},
  { 211, 218, sizeof(::CMsgSpectateFriendGameResponse)},
  { 220, 227, sizeof(::CDOTAReplayDownloadInfo_Highlight)},
  { 229, 240, sizeof(::CDOTAReplayDownloadInfo)},
  { 246, 256, sizeof(::CMsgWatchGame)},
  { 261, -1, sizeof(::CMsgCancelWatchGame)},
  { 266, 278, sizeof(::CMsgWatchGameResponse)},
  { 285, 291, sizeof(::CMsgPartyLeaderWatchGamePrompt)},
  { 292, 307, sizeof(::CDOTABroadcasterInfo)},
  { 317, 326, sizeof(::CMsgDOTASeries_TeamInfo)},
  { 330, 340, sizeof(::CMsgDOTASeries_LiveGame)},
  { 345, 356, sizeof(::CMsgDOTASeries)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSourceTVGameSmall_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CSourceTVGameSmall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCFindTopSourceTVGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientTopWeekendTourneyGames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCTopMatchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCTopLeagueMatchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCTopFriendMatchesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCMatchesMinimalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCMatchesMinimalResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientTopLeagueMatchesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientTopFriendMatchesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClientToGCFindTopMatches_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectateFriendGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSpectateFriendGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAReplayDownloadInfo_Highlight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAReplayDownloadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWatchGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgCancelWatchGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWatchGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPartyLeaderWatchGamePrompt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTABroadcasterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeries_TeamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeries_LiveGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTASeries_default_instance_),
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fwatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dota_gcmessages_client_watch.proto\032\034do"
  "ta_gcmessages_common.proto\"\306\006\n\022CSourceTV"
  "GameSmall\022\025\n\ractivate_time\030\001 \001(\r\022\027\n\017deac"
  "tivate_time\030\002 \001(\r\022\027\n\017server_steam_id\030\003 \001"
  "(\004\022\020\n\010lobby_id\030\004 \001(\004\022\021\n\tleague_id\030\005 \001(\r\022"
  "\022\n\nlobby_type\030\006 \001(\r\022\021\n\tgame_time\030\007 \001(\005\022\r"
  "\n\005delay\030\010 \001(\r\022\022\n\nspectators\030\t \001(\r\022\021\n\tgam"
  "e_mode\030\n \001(\r\022\023\n\013average_mmr\030\013 \001(\r\022\020\n\010mat"
  "ch_id\030\014 \001(\004\022\021\n\tseries_id\030\r \001(\r\022\031\n\021team_n"
  "ame_radiant\030\017 \001(\t\022\026\n\016team_name_dire\030\020 \001("
  "\t\022\031\n\021team_logo_radiant\030\030 \001(\006\022\026\n\016team_log"
  "o_dire\030\031 \001(\006\022\027\n\017team_id_radiant\030\036 \001(\r\022\024\n"
  "\014team_id_dire\030\037 \001(\r\022\022\n\nsort_score\030\021 \001(\r\022"
  "\030\n\020last_update_time\030\022 \001(\002\022\024\n\014radiant_lea"
  "d\030\023 \001(\005\022\025\n\rradiant_score\030\024 \001(\r\022\022\n\ndire_s"
  "core\030\025 \001(\r\022+\n\007players\030\026 \003(\0132\032.CSourceTVG"
  "ameSmall.Player\022\026\n\016building_state\030\027 \001(\007\022"
  "%\n\035weekend_tourney_tournament_id\030\032 \001(\r\022 "
  "\n\030weekend_tourney_division\030\033 \001(\r\022#\n\033week"
  "end_tourney_skill_level\030\034 \001(\r\022%\n\035weekend"
  "_tourney_bracket_round\030\035 \001(\r\022\036\n\026custom_g"
  "ame_difficulty\030  \001(\r\032-\n\006Player\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\"\234\001\n\"CMsgClie"
  "ntToGCFindTopSourceTVGames\022\022\n\nsearch_key"
  "\030\001 \001(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001"
  "(\r\022\022\n\nstart_game\030\004 \001(\r\022\027\n\017game_list_inde"
  "x\030\005 \001(\r\022\021\n\tlobby_ids\030\006 \003(\004\"\213\002\n*CMsgGCToC"
  "lientFindTopSourceTVGamesResponse\022\022\n\nsea"
  "rch_key\030\001 \001(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero"
  "_id\030\003 \001(\r\022\022\n\nstart_game\030\004 \001(\r\022\021\n\tnum_gam"
  "es\030\005 \001(\r\022\027\n\017game_list_index\030\006 \001(\r\022&\n\tgam"
  "e_list\030\007 \003(\0132\023.CSourceTVGameSmall\022\026\n\016spe"
  "cific_games\030\010 \001(\010\022%\n\010bot_game\030\t \001(\0132\023.CS"
  "ourceTVGameSmall\"O\n$CMsgGCToClientTopWee"
  "kendTourneyGames\022\'\n\nlive_games\030\001 \003(\0132\023.C"
  "SourceTVGameSmall\"^\n\037CMsgClientToGCTopMa"
  "tchesRequest\022\017\n\007hero_id\030\001 \001(\r\022\031\n\021player_"
  "account_id\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\"\'\n%CMs"
  "gClientToGCTopLeagueMatchesRequest\"\'\n%CM"
  "sgClientToGCTopFriendMatchesRequest\"8\n#C"
  "MsgClientToGCMatchesMinimalRequest\022\021\n\tma"
  "tch_ids\030\001 \003(\004\"b\n$CMsgClientToGCMatchesMi"
  "nimalResponse\022&\n\007matches\030\001 \003(\0132\025.CMsgDOT"
  "AMatchMinimal\022\022\n\nlast_match\030\002 \001(\010\"P\n&CMs"
  "gGCToClientTopLeagueMatchesResponse\022&\n\007m"
  "atches\030\002 \003(\0132\025.CMsgDOTAMatchMinimal\"P\n&C"
  "MsgGCToClientTopFriendMatchesResponse\022&\n"
  "\007matches\030\001 \003(\0132\025.CMsgDOTAMatchMinimal\"\223\001"
  "\n\034CMsgClientToGCFindTopMatches\022\022\n\nstart_"
  "game\030\001 \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id"
  "\030\003 \001(\r\022\021\n\tfriend_id\030\004 \001(\r\022\023\n\013friend_list"
  "\030\005 \001(\010\022\023\n\013league_list\030\006 \001(\010\"\230\001\n*CMsgGCTo"
  "ClientFindTopLeagueMatchesResponse\022\022\n\nst"
  "art_game\030\001 \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007her"
  "o_id\030\003 \001(\r\022\021\n\tmatch_ids\030\004 \003(\r\022\037\n\007matches"
  "\030\005 \003(\0132\016.CMsgDOTAMatch\"8\n\026CMsgSpectateFr"
  "iendGame\022\020\n\010steam_id\030\001 \001(\006\022\014\n\004live\030\002 \001(\010"
  "\"\270\004\n\036CMsgSpectateFriendGameResponse\022\026\n\016s"
  "erver_steamid\030\004 \001(\006\022T\n\021watch_live_result"
  "\030\005 \001(\01620.CMsgSpectateFriendGameResponse."
  "EWatchLiveResult:\007SUCCESS\"\247\003\n\020EWatchLive"
  "Result\022\013\n\007SUCCESS\020\000\022\021\n\rERROR_GENERIC\020\001\022\021"
  "\n\rERROR_NO_PLUS\020\002\022\025\n\021ERROR_NOT_FRIENDS\020\003"
  "\022\031\n\025ERROR_LOBBY_NOT_FOUND\020\004\022\036\n\032ERROR_SPE"
  "CTATOR_IN_A_LOBBY\020\005\022\026\n\022ERROR_LOBBY_IS_LA"
  "N\020\006\022\032\n\026ERROR_WRONG_LOBBY_TYPE\020\007\022\033\n\027ERROR"
  "_WRONG_LOBBY_STATE\020\010\022\033\n\027ERROR_PLAYER_NOT"
  "_PLAYER\020\t\022\035\n\031ERROR_TOO_MANY_SPECTATORS\020\n"
  "\022\"\n\036ERROR_SPECTATOR_SWITCHED_TEAMS\020\013\022\037\n\033"
  "ERROR_FRIENDS_ON_BOTH_SIDES\020\014\022!\n\035ERROR_S"
  "PECTATOR_IN_THIS_LOBBY\020\r\022\031\n\025ERROR_LOBBY_"
  "IS_LEAGUE\020\016\"\314\001\n\027CDOTAReplayDownloadInfo\022"
  "$\n\005match\030\001 \001(\0132\025.CMsgDOTAMatchMinimal\022\r\n"
  "\005title\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\014\n\004siz"
  "e\030\004 \001(\r\022\014\n\004tags\030\005 \003(\t\022\026\n\016exists_on_disk\030"
  "\006 \001(\010\0323\n\tHighlight\022\021\n\ttimestamp\030\001 \001(\r\022\023\n"
  "\013description\030\002 \001(\t\"\200\001\n\rCMsgWatchGame\022\026\n\016"
  "server_steamid\030\001 \001(\006\022\026\n\016client_version\030\002"
  " \001(\r\022\034\n\024watch_server_steamid\030\003 \001(\006\022\020\n\010lo"
  "bby_id\030\004 \001(\004\022\017\n\007regions\030\005 \003(\r\"\025\n\023CMsgCan"
  "celWatchGame\"\311\003\n\025CMsgWatchGameResponse\022J"
  "\n\021watch_game_result\030\001 \001(\0162&.CMsgWatchGam"
  "eResponse.WatchGameResult:\007PENDING\022\035\n\025so"
  "urce_tv_public_addr\030\002 \001(\r\022\036\n\026source_tv_p"
  "rivate_addr\030\003 \001(\r\022\026\n\016source_tv_port\030\004 \001("
  "\r\022\033\n\023game_server_steamid\030\005 \001(\006\022\034\n\024watch_"
  "server_steamid\030\006 \001(\006\022#\n\033watch_tv_unique_"
  "secret_code\030\007 \001(\006\"\254\001\n\017WatchGameResult\022\013\n"
  "\007PENDING\020\000\022\t\n\005READY\020\001\022\026\n\022GAMESERVERNOTFO"
  "UND\020\002\022\017\n\013UNAVAILABLE\020\003\022\r\n\tCANCELLED\020\004\022\027\n"
  "\023INCOMPATIBLEVERSION\020\005\022\035\n\031MISSINGLEAGUES"
  "UBSCRIPTION\020\006\022\021\n\rLOBBYNOTFOUND\020\007\"=\n\036CMsg"
  "PartyLeaderWatchGamePrompt\022\033\n\023game_serve"
  "r_steamid\030\005 \001(\006\"\377\001\n\024CDOTABroadcasterInfo"
  "\022\022\n\naccount_id\030\001 \001(\r\022\027\n\017server_steam_id\030"
  "\002 \001(\006\022\014\n\004live\030\003 \001(\010\022\031\n\021team_name_radiant"
  "\030\004 \001(\t\022\026\n\016team_name_dire\030\005 \001(\t\022\023\n\013series"
  "_game\030\007 \001(\r\022$\n\034upcoming_broadcast_timest"
  "amp\030\t \001(\r\022\030\n\020allow_live_video\030\n \001(\010\022\021\n\tn"
  "ode_type\030\013 \001(\r\022\021\n\tnode_name\030\014 \001(\t\"\373\003\n\016CM"
  "sgDOTASeries\022\021\n\tseries_id\030\001 \001(\r\022\023\n\013serie"
  "s_type\030\002 \001(\r\022(\n\006team_1\030\003 \001(\0132\030.CMsgDOTAS"
  "eries.TeamInfo\022(\n\006team_2\030\004 \001(\0132\030.CMsgDOT"
  "ASeries.TeamInfo\022,\n\rmatch_minimal\030\005 \003(\0132"
  "\025.CMsgDOTAMatchMinimal\022+\n\tlive_game\030\006 \001("
  "\0132\030.CMsgDOTASeries.LiveGame\032Z\n\010TeamInfo\022"
  "\017\n\007team_id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\025\n\rt"
  "eam_logo_url\030\003 \001(\t\022\023\n\013wager_count\030\004 \001(\r\032"
  "\265\001\n\010LiveGame\022\027\n\017server_steam_id\030\001 \001(\006\022.\n"
  "\014team_radiant\030\002 \001(\0132\030.CMsgDOTASeries.Tea"
  "mInfo\022+\n\tteam_dire\030\003 \001(\0132\030.CMsgDOTASerie"
  "s.TeamInfo\022\032\n\022team_radiant_score\030\004 \001(\r\022\027"
  "\n\017team_dire_score\030\005 \001(\rB\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_deps[1] = {
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto = {
  false, false, 4510, descriptor_table_protodef_dota_5fgcmessages_5fclient_5fwatch_2eproto, "dota_gcmessages_client_watch.proto", 
  &descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_once, descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_deps, 1, 26,
  schemas, file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fgcmessages_5fclient_5fwatch_2eproto(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[0];
}
bool CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::SUCCESS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_GENERIC;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_NO_PLUS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_NOT_FRIENDS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_NOT_FOUND;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_IN_A_LOBBY;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_IS_LAN;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_WRONG_LOBBY_TYPE;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_WRONG_LOBBY_STATE;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_PLAYER_NOT_PLAYER;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_TOO_MANY_SPECTATORS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_SWITCHED_TEAMS;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_FRIENDS_ON_BOTH_SIDES;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_IN_THIS_LOBBY;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_IS_LEAGUE;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::EWatchLiveResult_MIN;
constexpr CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::EWatchLiveResult_MAX;
constexpr int CMsgSpectateFriendGameResponse::EWatchLiveResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[1];
}
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::PENDING;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::READY;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::GAMESERVERNOTFOUND;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::UNAVAILABLE;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::CANCELLED;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::INCOMPATIBLEVERSION;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::MISSINGLEAGUESUBSCRIPTION;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::LOBBYNOTFOUND;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MIN;
constexpr CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MAX;
constexpr int CMsgWatchGameResponse::WatchGameResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class CSourceTVGameSmall_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CSourceTVGameSmall_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSourceTVGameSmall.Player)
}
CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CSourceTVGameSmall.Player)
}

void CSourceTVGameSmall_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
}

CSourceTVGameSmall_Player::~CSourceTVGameSmall_Player() {
  // @@protoc_insertion_point(destructor:CSourceTVGameSmall.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSourceTVGameSmall_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CSourceTVGameSmall_Player::ArenaDtor(void* object) {
  CSourceTVGameSmall_Player* _this = reinterpret_cast< CSourceTVGameSmall_Player* >(object);
  (void)_this;
}
void CSourceTVGameSmall_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSourceTVGameSmall_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSourceTVGameSmall_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CSourceTVGameSmall.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSourceTVGameSmall_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSourceTVGameSmall_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSourceTVGameSmall.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hero_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSourceTVGameSmall.Player)
  return target;
}

size_t CSourceTVGameSmall_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSourceTVGameSmall.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSourceTVGameSmall_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CSourceTVGameSmall_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSourceTVGameSmall_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSourceTVGameSmall.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSourceTVGameSmall.Player)
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall_Player::MergeFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSourceTVGameSmall_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall_Player::CopyFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall_Player::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall_Player::InternalSwap(CSourceTVGameSmall_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall_Player, hero_id_)
      + sizeof(CSourceTVGameSmall_Player::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall_Player, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSourceTVGameSmall_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CSourceTVGameSmall::_Internal {
 public:
  using HasBits = decltype(std::declval<CSourceTVGameSmall>()._has_bits_);
  static void set_has_activate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deactivate_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lobby_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_spectators(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_average_mmr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_team_name_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_name_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_logo_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_team_logo_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_team_id_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_team_id_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_sort_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_radiant_lead(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_radiant_score(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dire_score(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_building_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_weekend_tourney_tournament_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_weekend_tourney_division(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_weekend_tourney_skill_level(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_weekend_tourney_bracket_round(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_custom_game_difficulty(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
};

CSourceTVGameSmall::CSourceTVGameSmall(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSourceTVGameSmall)
}
CSourceTVGameSmall::CSourceTVGameSmall(const CSourceTVGameSmall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_radiant_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name_radiant()) {
    team_name_radiant_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name_radiant(), 
      GetArena());
  }
  team_name_dire_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name_dire()) {
    team_name_dire_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name_dire(), 
      GetArena());
  }
  ::memcpy(&activate_time_, &from.activate_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_difficulty_) -
    reinterpret_cast<char*>(&activate_time_)) + sizeof(custom_game_difficulty_));
  // @@protoc_insertion_point(copy_constructor:CSourceTVGameSmall)
}

void CSourceTVGameSmall::SharedCtor() {
team_name_radiant_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_name_dire_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&activate_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&custom_game_difficulty_) -
    reinterpret_cast<char*>(&activate_time_)) + sizeof(custom_game_difficulty_));
}

CSourceTVGameSmall::~CSourceTVGameSmall() {
  // @@protoc_insertion_point(destructor:CSourceTVGameSmall)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CSourceTVGameSmall::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_radiant_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CSourceTVGameSmall::ArenaDtor(void* object) {
  CSourceTVGameSmall* _this = reinterpret_cast< CSourceTVGameSmall* >(object);
  (void)_this;
}
void CSourceTVGameSmall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CSourceTVGameSmall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CSourceTVGameSmall::Clear() {
// @@protoc_insertion_point(message_clear_start:CSourceTVGameSmall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_radiant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_dire_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&activate_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_type_) -
        reinterpret_cast<char*>(&activate_time_)) + sizeof(lobby_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_score_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(sort_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&last_update_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weekend_tourney_tournament_id_) -
        reinterpret_cast<char*>(&last_update_time_)) + sizeof(weekend_tourney_tournament_id_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&weekend_tourney_division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_difficulty_) -
        reinterpret_cast<char*>(&weekend_tourney_division_)) + sizeof(custom_game_difficulty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CSourceTVGameSmall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 activate_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_activate_time(&has_bits);
          activate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deactivate_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deactivate_time(&has_bits);
          deactivate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 server_steam_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lobby_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_lobby_type(&has_bits);
          lobby_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 spectators = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_spectators(&has_bits);
          spectators_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 average_mmr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_average_mmr(&has_bits);
          average_mmr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 match_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name_radiant = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_team_name_radiant();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSourceTVGameSmall.team_name_radiant");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name_dire = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_team_name_dire();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CSourceTVGameSmall.team_name_dire");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sort_score = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_sort_score(&has_bits);
          sort_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float last_update_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_last_update_time(&has_bits);
          last_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 radiant_lead = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_radiant_lead(&has_bits);
          radiant_lead_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 radiant_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_radiant_score(&has_bits);
          radiant_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dire_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_dire_score(&has_bits);
          dire_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSourceTVGameSmall.Player players = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed32 building_state = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_building_state(&has_bits);
          building_state_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 team_logo_radiant = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_team_logo_radiant(&has_bits);
          team_logo_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 team_logo_dire = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_team_logo_dire(&has_bits);
          team_logo_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_tournament_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_weekend_tourney_tournament_id(&has_bits);
          weekend_tourney_tournament_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_division = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_weekend_tourney_division(&has_bits);
          weekend_tourney_division_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_skill_level = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_weekend_tourney_skill_level(&has_bits);
          weekend_tourney_skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 weekend_tourney_bracket_round = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_weekend_tourney_bracket_round(&has_bits);
          weekend_tourney_bracket_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_radiant = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_team_id_radiant(&has_bits);
          team_id_radiant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id_dire = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_team_id_dire(&has_bits);
          team_id_dire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 custom_game_difficulty = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_custom_game_difficulty(&has_bits);
          custom_game_difficulty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CSourceTVGameSmall::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSourceTVGameSmall)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activate_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_activate_time(), target);
  }

  // optional uint32 deactivate_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deactivate_time(), target);
  }

  // optional uint64 server_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_server_steam_id(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lobby_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_league_id(), target);
  }

  // optional uint32 lobby_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lobby_type(), target);
  }

  // optional int32 game_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_game_time(), target);
  }

  // optional uint32 delay = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_delay(), target);
  }

  // optional uint32 spectators = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_spectators(), target);
  }

  // optional uint32 game_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_game_mode(), target);
  }

  // optional uint32 average_mmr = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_average_mmr(), target);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_match_id(), target);
  }

  // optional uint32 series_id = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_series_id(), target);
  }

  // optional string team_name_radiant = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_radiant().data(), static_cast<int>(this->_internal_team_name_radiant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSourceTVGameSmall.team_name_radiant");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_team_name_radiant(), target);
  }

  // optional string team_name_dire = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_dire().data(), static_cast<int>(this->_internal_team_name_dire().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CSourceTVGameSmall.team_name_dire");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_team_name_dire(), target);
  }

  // optional uint32 sort_score = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_sort_score(), target);
  }

  // optional float last_update_time = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_last_update_time(), target);
  }

  // optional int32 radiant_lead = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_radiant_lead(), target);
  }

  // optional uint32 radiant_score = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_radiant_score(), target);
  }

  // optional uint32 dire_score = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_dire_score(), target);
  }

  // repeated .CSourceTVGameSmall.Player players = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_players(i), target, stream);
  }

  // optional fixed32 building_state = 23;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(23, this->_internal_building_state(), target);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(24, this->_internal_team_logo_radiant(), target);
  }

  // optional fixed64 team_logo_dire = 25;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(25, this->_internal_team_logo_dire(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_weekend_tourney_bracket_round(), target);
  }

  // optional uint32 team_id_radiant = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_team_id_radiant(), target);
  }

  // optional uint32 team_id_dire = 31;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_team_id_dire(), target);
  }

  // optional uint32 custom_game_difficulty = 32;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_custom_game_difficulty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSourceTVGameSmall)
  return target;
}

size_t CSourceTVGameSmall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSourceTVGameSmall)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall.Player players = 22;
  total_size += 2UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name_radiant = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_radiant());
    }

    // optional string team_name_dire = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_dire());
    }

    // optional uint32 activate_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_activate_time());
    }

    // optional uint32 deactivate_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deactivate_time());
    }

    // optional uint64 server_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_server_steam_id());
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 league_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 lobby_type = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lobby_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 game_time = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_time());
    }

    // optional uint32 delay = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delay());
    }

    // optional uint32 spectators = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_spectators());
    }

    // optional uint32 game_mode = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_mode());
    }

    // optional uint64 match_id = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional uint32 average_mmr = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_average_mmr());
    }

    // optional uint32 series_id = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 sort_score = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sort_score());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float last_update_time = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 radiant_lead = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_radiant_lead());
    }

    // optional uint32 radiant_score = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_radiant_score());
    }

    // optional uint32 dire_score = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dire_score());
    }

    // optional fixed32 building_state = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional fixed64 team_logo_radiant = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 team_logo_dire = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional uint32 weekend_tourney_tournament_id = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_tournament_id());
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional uint32 weekend_tourney_division = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_skill_level());
    }

    // optional uint32 weekend_tourney_bracket_round = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_weekend_tourney_bracket_round());
    }

    // optional uint32 team_id_radiant = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_radiant());
    }

    // optional uint32 team_id_dire = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id_dire());
    }

    // optional uint32 custom_game_difficulty = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_custom_game_difficulty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSourceTVGameSmall::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, this);
  const CSourceTVGameSmall* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CSourceTVGameSmall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSourceTVGameSmall)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSourceTVGameSmall)
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall::MergeFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name_radiant(from._internal_team_name_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_name_dire(from._internal_team_name_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      activate_time_ = from.activate_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      deactivate_time_ = from.deactivate_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000400u) {
      spectators_ = from.spectators_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      average_mmr_ = from.average_mmr_;
    }
    if (cached_has_bits & 0x00004000u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      sort_score_ = from.sort_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      last_update_time_ = from.last_update_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      radiant_lead_ = from.radiant_lead_;
    }
    if (cached_has_bits & 0x00040000u) {
      radiant_score_ = from.radiant_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      dire_score_ = from.dire_score_;
    }
    if (cached_has_bits & 0x00100000u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00200000u) {
      team_logo_radiant_ = from.team_logo_radiant_;
    }
    if (cached_has_bits & 0x00400000u) {
      team_logo_dire_ = from.team_logo_dire_;
    }
    if (cached_has_bits & 0x00800000u) {
      weekend_tourney_tournament_id_ = from.weekend_tourney_tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      weekend_tourney_division_ = from.weekend_tourney_division_;
    }
    if (cached_has_bits & 0x02000000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      weekend_tourney_bracket_round_ = from.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x08000000u) {
      team_id_radiant_ = from.team_id_radiant_;
    }
    if (cached_has_bits & 0x10000000u) {
      team_id_dire_ = from.team_id_dire_;
    }
    if (cached_has_bits & 0x20000000u) {
      custom_game_difficulty_ = from.custom_game_difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSourceTVGameSmall::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall::CopyFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall::InternalSwap(CSourceTVGameSmall* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  team_name_radiant_.Swap(&other->team_name_radiant_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_dire_.Swap(&other->team_name_dire_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall, custom_game_difficulty_)
      + sizeof(CSourceTVGameSmall::custom_game_difficulty_)
      - PROTOBUF_FIELD_OFFSET(CSourceTVGameSmall, activate_time_)>(
          reinterpret_cast<char*>(&activate_time_),
          reinterpret_cast<char*>(&other->activate_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CSourceTVGameSmall::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCFindTopSourceTVGames::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFindTopSourceTVGames>()._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_game(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_list_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lobby_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFindTopSourceTVGames)
}
CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lobby_ids_(from.lobby_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search_key()) {
    search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_key(), 
      GetArena());
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_list_index_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(game_list_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFindTopSourceTVGames)
}

void CMsgClientToGCFindTopSourceTVGames::SharedCtor() {
search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&league_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_list_index_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(game_list_index_));
}

CMsgClientToGCFindTopSourceTVGames::~CMsgClientToGCFindTopSourceTVGames() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFindTopSourceTVGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCFindTopSourceTVGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCFindTopSourceTVGames::ArenaDtor(void* object) {
  CMsgClientToGCFindTopSourceTVGames* _this = reinterpret_cast< CMsgClientToGCFindTopSourceTVGames* >(object);
  (void)_this;
}
void CMsgClientToGCFindTopSourceTVGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCFindTopSourceTVGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCFindTopSourceTVGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFindTopSourceTVGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobby_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_key_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_list_index_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(game_list_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFindTopSourceTVGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgClientToGCFindTopSourceTVGames.search_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_game = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_game(&has_bits);
          start_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_list_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_game_list_index(&has_bits);
          game_list_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 lobby_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_lobby_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_lobby_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCFindTopSourceTVGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFindTopSourceTVGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgClientToGCFindTopSourceTVGames.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_game(), target);
  }

  // optional uint32 game_list_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_game_list_index(), target);
  }

  // repeated uint64 lobby_ids = 6;
  for (int i = 0, n = this->_internal_lobby_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_lobby_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFindTopSourceTVGames)
  return target;
}

size_t CMsgClientToGCFindTopSourceTVGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFindTopSourceTVGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 lobby_ids = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->lobby_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_lobby_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 start_game = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_game());
    }

    // optional uint32 game_list_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_list_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCFindTopSourceTVGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCFindTopSourceTVGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCFindTopSourceTVGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCFindTopSourceTVGames)
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobby_ids_.MergeFrom(from.lobby_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_list_index_ = from.game_list_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopSourceTVGames::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopSourceTVGames::InternalSwap(CMsgClientToGCFindTopSourceTVGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_ids_.InternalSwap(&other->lobby_ids_);
  search_key_.Swap(&other->search_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, game_list_index_)
      + sizeof(CMsgClientToGCFindTopSourceTVGames::game_list_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, league_id_)>(
          reinterpret_cast<char*>(&league_id_),
          reinterpret_cast<char*>(&other->league_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFindTopSourceTVGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientFindTopSourceTVGamesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFindTopSourceTVGamesResponse>()._has_bits_);
  static void set_has_search_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_start_game(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_games(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_game_list_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_specific_games(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::CSourceTVGameSmall& bot_game(const CMsgGCToClientFindTopSourceTVGamesResponse* msg);
  static void set_has_bot_game(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CSourceTVGameSmall&
CMsgGCToClientFindTopSourceTVGamesResponse::_Internal::bot_game(const CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
  return *msg->bot_game_;
}
CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  game_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFindTopSourceTVGamesResponse)
}
CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      game_list_(from.game_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_search_key()) {
    search_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_key(), 
      GetArena());
  }
  if (from._internal_has_bot_game()) {
    bot_game_ = new ::CSourceTVGameSmall(*from.bot_game_);
  } else {
    bot_game_ = nullptr;
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&specific_games_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(specific_games_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFindTopSourceTVGamesResponse)
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedCtor() {
search_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bot_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&specific_games_) -
    reinterpret_cast<char*>(&bot_game_)) + sizeof(specific_games_));
}

CMsgGCToClientFindTopSourceTVGamesResponse::~CMsgGCToClientFindTopSourceTVGamesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFindTopSourceTVGamesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  search_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bot_game_;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::ArenaDtor(void* object) {
  CMsgGCToClientFindTopSourceTVGamesResponse* _this = reinterpret_cast< CMsgGCToClientFindTopSourceTVGamesResponse* >(object);
  (void)_this;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientFindTopSourceTVGamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bot_game_ != nullptr);
      bot_game_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&specific_games_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(specific_games_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFindTopSourceTVGamesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_search_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_game = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_start_game(&has_bits);
          start_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_games = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_num_games(&has_bits);
          num_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 game_list_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_game_list_index(&has_bits);
          game_list_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSourceTVGameSmall game_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool specific_games = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_specific_games(&has_bits);
          specific_games_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CSourceTVGameSmall bot_game = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bot_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientFindTopSourceTVGamesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_key().data(), static_cast<int>(this->_internal_search_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_start_game(), target);
  }

  // optional uint32 num_games = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_games(), target);
  }

  // optional uint32 game_list_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_list_index(), target);
  }

  // repeated .CSourceTVGameSmall game_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_game_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_game_list(i), target, stream);
  }

  // optional bool specific_games = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_specific_games(), target);
  }

  // optional .CSourceTVGameSmall bot_game = 9;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::bot_game(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFindTopSourceTVGamesResponse)
  return target;
}

size_t CMsgGCToClientFindTopSourceTVGamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall game_list = 7;
  total_size += 1UL * this->_internal_game_list_size();
  for (const auto& msg : this->game_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_key());
    }

    // optional .CSourceTVGameSmall bot_game = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bot_game_);
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 start_game = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_game());
    }

    // optional uint32 num_games = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_games());
    }

    // optional uint32 game_list_index = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_game_list_index());
    }

    // optional bool specific_games = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientFindTopSourceTVGamesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientFindTopSourceTVGamesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientFindTopSourceTVGamesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientFindTopSourceTVGamesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_list_.MergeFrom(from.game_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_key(from._internal_search_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bot_game()->::CSourceTVGameSmall::MergeFrom(from._internal_bot_game());
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_games_ = from.num_games_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_list_index_ = from.game_list_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      specific_games_ = from.specific_games_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  game_list_.InternalSwap(&other->game_list_);
  search_key_.Swap(&other->search_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, specific_games_)
      + sizeof(CMsgGCToClientFindTopSourceTVGamesResponse::specific_games_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, bot_game_)>(
          reinterpret_cast<char*>(&bot_game_),
          reinterpret_cast<char*>(&other->bot_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFindTopSourceTVGamesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientTopWeekendTourneyGames::_Internal {
 public:
};

CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  live_games_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientTopWeekendTourneyGames)
}
CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      live_games_(from.live_games_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopWeekendTourneyGames)
}

void CMsgGCToClientTopWeekendTourneyGames::SharedCtor() {
}

CMsgGCToClientTopWeekendTourneyGames::~CMsgGCToClientTopWeekendTourneyGames() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopWeekendTourneyGames)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientTopWeekendTourneyGames::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientTopWeekendTourneyGames::ArenaDtor(void* object) {
  CMsgGCToClientTopWeekendTourneyGames* _this = reinterpret_cast< CMsgGCToClientTopWeekendTourneyGames* >(object);
  (void)_this;
}
void CMsgGCToClientTopWeekendTourneyGames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientTopWeekendTourneyGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientTopWeekendTourneyGames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientTopWeekendTourneyGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  live_games_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientTopWeekendTourneyGames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CSourceTVGameSmall live_games = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_live_games(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientTopWeekendTourneyGames::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopWeekendTourneyGames)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall live_games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_live_games_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_live_games(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopWeekendTourneyGames)
  return target;
}

size_t CMsgGCToClientTopWeekendTourneyGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientTopWeekendTourneyGames)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CSourceTVGameSmall live_games = 1;
  total_size += 1UL * this->_internal_live_games_size();
  for (const auto& msg : this->live_games_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopWeekendTourneyGames* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientTopWeekendTourneyGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientTopWeekendTourneyGames)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientTopWeekendTourneyGames)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  live_games_.MergeFrom(from.live_games_);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopWeekendTourneyGames::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopWeekendTourneyGames::InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  live_games_.InternalSwap(&other->live_games_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientTopWeekendTourneyGames::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCTopMatchesRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCTopMatchesRequest>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_player_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCTopMatchesRequest)
}
CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopMatchesRequest)
}

void CMsgClientToGCTopMatchesRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(team_id_));
}

CMsgClientToGCTopMatchesRequest::~CMsgClientToGCTopMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCTopMatchesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCTopMatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCTopMatchesRequest::ArenaDtor(void* object) {
  CMsgClientToGCTopMatchesRequest* _this = reinterpret_cast< CMsgClientToGCTopMatchesRequest* >(object);
  (void)_this;
}
void CMsgClientToGCTopMatchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCTopMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCTopMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCTopMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCTopMatchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_account_id(&has_bits);
          player_account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCTopMatchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCTopMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_account_id(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCTopMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCTopMatchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_account_id());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCTopMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopMatchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCTopMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCTopMatchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCTopMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const CMsgClientToGCTopMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCTopMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCTopMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const CMsgClientToGCTopMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCTopMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopMatchesRequest::InternalSwap(CMsgClientToGCTopMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, team_id_)
      + sizeof(CMsgClientToGCTopMatchesRequest::team_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCTopMatchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCTopLeagueMatchesRequest::_Internal {
 public:
};

CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCTopLeagueMatchesRequest)
}
CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopLeagueMatchesRequest)
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedCtor() {
}

CMsgClientToGCTopLeagueMatchesRequest::~CMsgClientToGCTopLeagueMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCTopLeagueMatchesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCTopLeagueMatchesRequest::ArenaDtor(void* object) {
  CMsgClientToGCTopLeagueMatchesRequest* _this = reinterpret_cast< CMsgClientToGCTopLeagueMatchesRequest* >(object);
  (void)_this;
}
void CMsgClientToGCTopLeagueMatchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCTopLeagueMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCTopLeagueMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCTopLeagueMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCTopLeagueMatchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCTopLeagueMatchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCTopLeagueMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCTopLeagueMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopLeagueMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCTopLeagueMatchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCTopLeagueMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopLeagueMatchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCTopLeagueMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCTopLeagueMatchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCTopLeagueMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCTopLeagueMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCTopLeagueMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCTopLeagueMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopLeagueMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopLeagueMatchesRequest::InternalSwap(CMsgClientToGCTopLeagueMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCTopLeagueMatchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCTopFriendMatchesRequest::_Internal {
 public:
};

CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCTopFriendMatchesRequest)
}
CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCTopFriendMatchesRequest)
}

void CMsgClientToGCTopFriendMatchesRequest::SharedCtor() {
}

CMsgClientToGCTopFriendMatchesRequest::~CMsgClientToGCTopFriendMatchesRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCTopFriendMatchesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCTopFriendMatchesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCTopFriendMatchesRequest::ArenaDtor(void* object) {
  CMsgClientToGCTopFriendMatchesRequest* _this = reinterpret_cast< CMsgClientToGCTopFriendMatchesRequest* >(object);
  (void)_this;
}
void CMsgClientToGCTopFriendMatchesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCTopFriendMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCTopFriendMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCTopFriendMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCTopFriendMatchesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCTopFriendMatchesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCTopFriendMatchesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCTopFriendMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopFriendMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCTopFriendMatchesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCTopFriendMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopFriendMatchesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCTopFriendMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCTopFriendMatchesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCTopFriendMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCTopFriendMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCTopFriendMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCTopFriendMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopFriendMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopFriendMatchesRequest::InternalSwap(CMsgClientToGCTopFriendMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCTopFriendMatchesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCMatchesMinimalRequest::_Internal {
 public:
};

CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCMatchesMinimalRequest)
}
CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMatchesMinimalRequest)
}

void CMsgClientToGCMatchesMinimalRequest::SharedCtor() {
}

CMsgClientToGCMatchesMinimalRequest::~CMsgClientToGCMatchesMinimalRequest() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMatchesMinimalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCMatchesMinimalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCMatchesMinimalRequest::ArenaDtor(void* object) {
  CMsgClientToGCMatchesMinimalRequest* _this = reinterpret_cast< CMsgClientToGCMatchesMinimalRequest* >(object);
  (void)_this;
}
void CMsgClientToGCMatchesMinimalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCMatchesMinimalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCMatchesMinimalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCMatchesMinimalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCMatchesMinimalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 match_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCMatchesMinimalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMatchesMinimalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  for (int i = 0, n = this->_internal_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMatchesMinimalRequest)
  return target;
}

size_t CMsgClientToGCMatchesMinimalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCMatchesMinimalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_match_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCMatchesMinimalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCMatchesMinimalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCMatchesMinimalRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalRequest::InternalSwap(CMsgClientToGCMatchesMinimalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  match_ids_.InternalSwap(&other->match_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCMatchesMinimalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCMatchesMinimalResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCMatchesMinimalResponse>()._has_bits_);
  static void set_has_last_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void CMsgClientToGCMatchesMinimalResponse::clear_matches() {
  matches_.Clear();
}
CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCMatchesMinimalResponse)
}
CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_match_ = from.last_match_;
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCMatchesMinimalResponse)
}

void CMsgClientToGCMatchesMinimalResponse::SharedCtor() {
last_match_ = false;
}

CMsgClientToGCMatchesMinimalResponse::~CMsgClientToGCMatchesMinimalResponse() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCMatchesMinimalResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCMatchesMinimalResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCMatchesMinimalResponse::ArenaDtor(void* object) {
  CMsgClientToGCMatchesMinimalResponse* _this = reinterpret_cast< CMsgClientToGCMatchesMinimalResponse* >(object);
  (void)_this;
}
void CMsgClientToGCMatchesMinimalResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCMatchesMinimalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCMatchesMinimalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCMatchesMinimalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  last_match_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCMatchesMinimalResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAMatchMinimal matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool last_match = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_last_match(&has_bits);
          last_match_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCMatchesMinimalResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCMatchesMinimalResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matches(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool last_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_last_match(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCMatchesMinimalResponse)
  return target;
}

size_t CMsgClientToGCMatchesMinimalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCMatchesMinimalResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool last_match = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCMatchesMinimalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCMatchesMinimalResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCMatchesMinimalResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  if (from._internal_has_last_match()) {
    _internal_set_last_match(from._internal_last_match());
  }
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalResponse::InternalSwap(CMsgClientToGCMatchesMinimalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  matches_.InternalSwap(&other->matches_);
  swap(last_match_, other->last_match_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCMatchesMinimalResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientTopLeagueMatchesResponse::_Internal {
 public:
};

void CMsgGCToClientTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientTopLeagueMatchesResponse)
}
CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopLeagueMatchesResponse)
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedCtor() {
}

CMsgGCToClientTopLeagueMatchesResponse::~CMsgGCToClientTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopLeagueMatchesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientTopLeagueMatchesResponse::ArenaDtor(void* object) {
  CMsgGCToClientTopLeagueMatchesResponse* _this = reinterpret_cast< CMsgGCToClientTopLeagueMatchesResponse* >(object);
  (void)_this;
}
void CMsgGCToClientTopLeagueMatchesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientTopLeagueMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientTopLeagueMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientTopLeagueMatchesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAMatchMinimal matches = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientTopLeagueMatchesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopLeagueMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientTopLeagueMatchesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 2;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopLeagueMatchesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientTopLeagueMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientTopLeagueMatchesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientTopLeagueMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientTopLeagueMatchesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientTopFriendMatchesResponse::_Internal {
 public:
};

void CMsgGCToClientTopFriendMatchesResponse::clear_matches() {
  matches_.Clear();
}
CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientTopFriendMatchesResponse)
}
CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientTopFriendMatchesResponse)
}

void CMsgGCToClientTopFriendMatchesResponse::SharedCtor() {
}

CMsgGCToClientTopFriendMatchesResponse::~CMsgGCToClientTopFriendMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientTopFriendMatchesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientTopFriendMatchesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientTopFriendMatchesResponse::ArenaDtor(void* object) {
  CMsgGCToClientTopFriendMatchesResponse* _this = reinterpret_cast< CMsgGCToClientTopFriendMatchesResponse* >(object);
  (void)_this;
}
void CMsgGCToClientTopFriendMatchesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientTopFriendMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientTopFriendMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientTopFriendMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientTopFriendMatchesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgDOTAMatchMinimal matches = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientTopFriendMatchesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientTopFriendMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientTopFriendMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopFriendMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientTopFriendMatchesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal matches = 1;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopFriendMatchesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientTopFriendMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientTopFriendMatchesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientTopFriendMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopFriendMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopFriendMatchesResponse::InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  matches_.InternalSwap(&other->matches_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientTopFriendMatchesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClientToGCFindTopMatches::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClientToGCFindTopMatches>()._has_bits_);
  static void set_has_start_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_friend_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friend_list(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_league_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClientToGCFindTopMatches)
}
CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_game_, &from.start_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_list_) -
    reinterpret_cast<char*>(&start_game_)) + sizeof(league_list_));
  // @@protoc_insertion_point(copy_constructor:CMsgClientToGCFindTopMatches)
}

void CMsgClientToGCFindTopMatches::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&league_list_) -
    reinterpret_cast<char*>(&start_game_)) + sizeof(league_list_));
}

CMsgClientToGCFindTopMatches::~CMsgClientToGCFindTopMatches() {
  // @@protoc_insertion_point(destructor:CMsgClientToGCFindTopMatches)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClientToGCFindTopMatches::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClientToGCFindTopMatches::ArenaDtor(void* object) {
  CMsgClientToGCFindTopMatches* _this = reinterpret_cast< CMsgClientToGCFindTopMatches* >(object);
  (void)_this;
}
void CMsgClientToGCFindTopMatches::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClientToGCFindTopMatches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClientToGCFindTopMatches::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClientToGCFindTopMatches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&start_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_list_) -
        reinterpret_cast<char*>(&start_game_)) + sizeof(league_list_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClientToGCFindTopMatches::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_game(&has_bits);
          start_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 friend_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_friend_id(&has_bits);
          friend_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool friend_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_friend_list(&has_bits);
          friend_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool league_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_league_list(&has_bits);
          league_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClientToGCFindTopMatches::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClientToGCFindTopMatches)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // optional uint32 friend_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_friend_id(), target);
  }

  // optional bool friend_list = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_friend_list(), target);
  }

  // optional bool league_list = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_league_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClientToGCFindTopMatches)
  return target;
}

size_t CMsgClientToGCFindTopMatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClientToGCFindTopMatches)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 start_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_game());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 friend_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_friend_id());
    }

    // optional bool friend_list = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool league_list = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCFindTopMatches::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClientToGCFindTopMatches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCFindTopMatches* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClientToGCFindTopMatches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClientToGCFindTopMatches)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClientToGCFindTopMatches)
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopMatches::MergeFrom(const CMsgClientToGCFindTopMatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClientToGCFindTopMatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      friend_id_ = from.friend_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      friend_list_ = from.friend_list_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_list_ = from.league_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCFindTopMatches::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClientToGCFindTopMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopMatches::CopyFrom(const CMsgClientToGCFindTopMatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClientToGCFindTopMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopMatches::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopMatches::InternalSwap(CMsgClientToGCFindTopMatches* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClientToGCFindTopMatches, league_list_)
      + sizeof(CMsgClientToGCFindTopMatches::league_list_)
      - PROTOBUF_FIELD_OFFSET(CMsgClientToGCFindTopMatches, start_game_)>(
          reinterpret_cast<char*>(&start_game_),
          reinterpret_cast<char*>(&other->start_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClientToGCFindTopMatches::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgGCToClientFindTopLeagueMatchesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCToClientFindTopLeagueMatchesResponse>()._has_bits_);
  static void set_has_start_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_league_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void CMsgGCToClientFindTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_ids_(arena),
  matches_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgGCToClientFindTopLeagueMatchesResponse)
}
CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&start_game_, &from.start_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&start_game_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCToClientFindTopLeagueMatchesResponse)
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&start_game_)) + sizeof(hero_id_));
}

CMsgGCToClientFindTopLeagueMatchesResponse::~CMsgGCToClientFindTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCToClientFindTopLeagueMatchesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgGCToClientFindTopLeagueMatchesResponse::ArenaDtor(void* object) {
  CMsgGCToClientFindTopLeagueMatchesResponse* _this = reinterpret_cast< CMsgGCToClientFindTopLeagueMatchesResponse* >(object);
  (void)_this;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCToClientFindTopLeagueMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCToClientFindTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  matches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&start_game_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCToClientFindTopLeagueMatchesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 start_game = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start_game(&has_bits);
          start_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 league_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_league_id(&has_bits);
          league_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 match_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_match_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_match_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatch matches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_matches(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgGCToClientFindTopLeagueMatchesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hero_id(), target);
  }

  // repeated uint32 match_ids = 4;
  for (int i = 0, n = this->_internal_match_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_match_ids(i), target);
  }

  // repeated .CMsgDOTAMatch matches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_matches_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_matches(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCToClientFindTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientFindTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 match_ids = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->match_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_match_ids_size());
    total_size += data_size;
  }

  // repeated .CMsgDOTAMatch matches = 5;
  total_size += 1UL * this->_internal_matches_size();
  for (const auto& msg : this->matches_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 start_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_game());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientFindTopLeagueMatchesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgGCToClientFindTopLeagueMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgGCToClientFindTopLeagueMatchesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgGCToClientFindTopLeagueMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  matches_.MergeFrom(from.matches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCToClientFindTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientFindTopLeagueMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
  matches_.InternalSwap(&other->matches_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, hero_id_)
      + sizeof(CMsgGCToClientFindTopLeagueMatchesResponse::hero_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, start_game_)>(
          reinterpret_cast<char*>(&start_game_),
          reinterpret_cast<char*>(&other->start_game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCToClientFindTopLeagueMatchesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectateFriendGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectateFriendGame>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_live(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSpectateFriendGame::CMsgSpectateFriendGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectateFriendGame)
}
CMsgSpectateFriendGame::CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&live_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(live_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectateFriendGame)
}

void CMsgSpectateFriendGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&live_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(live_));
}

CMsgSpectateFriendGame::~CMsgSpectateFriendGame() {
  // @@protoc_insertion_point(destructor:CMsgSpectateFriendGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectateFriendGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSpectateFriendGame::ArenaDtor(void* object) {
  CMsgSpectateFriendGame* _this = reinterpret_cast< CMsgSpectateFriendGame* >(object);
  (void)_this;
}
void CMsgSpectateFriendGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectateFriendGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectateFriendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectateFriendGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&live_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(live_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectateFriendGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool live = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_live(&has_bits);
          live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectateFriendGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectateFriendGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional bool live = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_live(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectateFriendGame)
  return target;
}

size_t CMsgSpectateFriendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectateFriendGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool live = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectateFriendGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectateFriendGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectateFriendGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectateFriendGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectateFriendGame)
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGame::MergeFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      live_ = from.live_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectateFriendGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGame::CopyFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGame::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGame::InternalSwap(CMsgSpectateFriendGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGame, live_)
      + sizeof(CMsgSpectateFriendGame::live_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGame, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectateFriendGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSpectateFriendGameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSpectateFriendGameResponse>()._has_bits_);
  static void set_has_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_watch_live_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSpectateFriendGameResponse)
}
CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&watch_live_result_, &from.watch_live_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_steamid_) -
    reinterpret_cast<char*>(&watch_live_result_)) + sizeof(server_steamid_));
  // @@protoc_insertion_point(copy_constructor:CMsgSpectateFriendGameResponse)
}

void CMsgSpectateFriendGameResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&watch_live_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&server_steamid_) -
    reinterpret_cast<char*>(&watch_live_result_)) + sizeof(server_steamid_));
}

CMsgSpectateFriendGameResponse::~CMsgSpectateFriendGameResponse() {
  // @@protoc_insertion_point(destructor:CMsgSpectateFriendGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSpectateFriendGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSpectateFriendGameResponse::ArenaDtor(void* object) {
  CMsgSpectateFriendGameResponse* _this = reinterpret_cast< CMsgSpectateFriendGameResponse* >(object);
  (void)_this;
}
void CMsgSpectateFriendGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSpectateFriendGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSpectateFriendGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSpectateFriendGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&watch_live_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_steamid_) -
        reinterpret_cast<char*>(&watch_live_result_)) + sizeof(server_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSpectateFriendGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steamid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_server_steamid(&has_bits);
          server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(val))) {
            _internal_set_watch_live_result(static_cast<::CMsgSpectateFriendGameResponse_EWatchLiveResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSpectateFriendGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSpectateFriendGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_server_steamid(), target);
  }

  // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_watch_live_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSpectateFriendGameResponse)
  return target;
}

size_t CMsgSpectateFriendGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSpectateFriendGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_watch_live_result());
    }

    // optional fixed64 server_steamid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectateFriendGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectateFriendGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSpectateFriendGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSpectateFriendGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSpectateFriendGameResponse)
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGameResponse::MergeFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      watch_live_result_ = from.watch_live_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_steamid_ = from.server_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectateFriendGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGameResponse::CopyFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGameResponse::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGameResponse::InternalSwap(CMsgSpectateFriendGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGameResponse, server_steamid_)
      + sizeof(CMsgSpectateFriendGameResponse::server_steamid_)
      - PROTOBUF_FIELD_OFFSET(CMsgSpectateFriendGameResponse, watch_live_result_)>(
          reinterpret_cast<char*>(&watch_live_result_),
          reinterpret_cast<char*>(&other->watch_live_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSpectateFriendGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAReplayDownloadInfo_Highlight::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAReplayDownloadInfo_Highlight>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAReplayDownloadInfo.Highlight)
}
CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:CDOTAReplayDownloadInfo.Highlight)
}

void CDOTAReplayDownloadInfo_Highlight::SharedCtor() {
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_ = 0u;
}

CDOTAReplayDownloadInfo_Highlight::~CDOTAReplayDownloadInfo_Highlight() {
  // @@protoc_insertion_point(destructor:CDOTAReplayDownloadInfo.Highlight)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAReplayDownloadInfo_Highlight::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAReplayDownloadInfo_Highlight::ArenaDtor(void* object) {
  CDOTAReplayDownloadInfo_Highlight* _this = reinterpret_cast< CDOTAReplayDownloadInfo_Highlight* >(object);
  (void)_this;
}
void CDOTAReplayDownloadInfo_Highlight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAReplayDownloadInfo_Highlight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAReplayDownloadInfo_Highlight::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAReplayDownloadInfo.Highlight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmpty();
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAReplayDownloadInfo_Highlight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAReplayDownloadInfo.Highlight.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAReplayDownloadInfo_Highlight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAReplayDownloadInfo.Highlight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_timestamp(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.Highlight.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAReplayDownloadInfo.Highlight)
  return target;
}

size_t CDOTAReplayDownloadInfo_Highlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAReplayDownloadInfo.Highlight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo_Highlight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAReplayDownloadInfo_Highlight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAReplayDownloadInfo.Highlight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAReplayDownloadInfo.Highlight)
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo_Highlight::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo_Highlight::InternalSwap(CDOTAReplayDownloadInfo_Highlight* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAReplayDownloadInfo_Highlight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAReplayDownloadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAReplayDownloadInfo>()._has_bits_);
  static const ::CMsgDOTAMatchMinimal& match(const CDOTAReplayDownloadInfo* msg);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_exists_on_disk(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgDOTAMatchMinimal&
CDOTAReplayDownloadInfo::_Internal::match(const CDOTAReplayDownloadInfo* msg) {
  return *msg->match_;
}
void CDOTAReplayDownloadInfo::clear_match() {
  if (match_ != nullptr) match_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAReplayDownloadInfo)
}
CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_title()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_description()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_match()) {
    match_ = new ::CMsgDOTAMatchMinimal(*from.match_);
  } else {
    match_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exists_on_disk_) -
    reinterpret_cast<char*>(&size_)) + sizeof(exists_on_disk_));
  // @@protoc_insertion_point(copy_constructor:CDOTAReplayDownloadInfo)
}

void CDOTAReplayDownloadInfo::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&exists_on_disk_) -
    reinterpret_cast<char*>(&match_)) + sizeof(exists_on_disk_));
}

CDOTAReplayDownloadInfo::~CDOTAReplayDownloadInfo() {
  // @@protoc_insertion_point(destructor:CDOTAReplayDownloadInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAReplayDownloadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_;
}

void CDOTAReplayDownloadInfo::ArenaDtor(void* object) {
  CDOTAReplayDownloadInfo* _this = reinterpret_cast< CDOTAReplayDownloadInfo* >(object);
  (void)_this;
}
void CDOTAReplayDownloadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAReplayDownloadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAReplayDownloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAReplayDownloadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exists_on_disk_) -
        reinterpret_cast<char*>(&size_)) + sizeof(exists_on_disk_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAReplayDownloadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAMatchMinimal match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAReplayDownloadInfo.title");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAReplayDownloadInfo.description");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAReplayDownloadInfo.tags");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool exists_on_disk = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_exists_on_disk(&has_bits);
          exists_on_disk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAReplayDownloadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAReplayDownloadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAMatchMinimal match = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match(this), target, stream);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_size(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAReplayDownloadInfo.tags");
    target = stream->WriteString(5, s, target);
  }

  // optional bool exists_on_disk = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_exists_on_disk(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAReplayDownloadInfo)
  return target;
}

size_t CDOTAReplayDownloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAReplayDownloadInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tags_.size());
  for (int i = 0, n = tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tags_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional .CMsgDOTAMatchMinimal match = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional uint32 size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

    // optional bool exists_on_disk = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAReplayDownloadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAReplayDownloadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAReplayDownloadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAReplayDownloadInfo)
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo::MergeFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_match()->::CMsgDOTAMatchMinimal::MergeFrom(from._internal_match());
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      exists_on_disk_ = from.exists_on_disk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAReplayDownloadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo::CopyFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo::InternalSwap(CDOTAReplayDownloadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(&other->tags_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAReplayDownloadInfo, exists_on_disk_)
      + sizeof(CDOTAReplayDownloadInfo::exists_on_disk_)
      - PROTOBUF_FIELD_OFFSET(CDOTAReplayDownloadInfo, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAReplayDownloadInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWatchGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWatchGame>()._has_bits_);
  static void set_has_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_watch_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgWatchGame::CMsgWatchGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWatchGame)
}
CMsgWatchGame::CMsgWatchGame(const CMsgWatchGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&server_steamid_, &from.server_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&server_steamid_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:CMsgWatchGame)
}

void CMsgWatchGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&server_steamid_)) + sizeof(client_version_));
}

CMsgWatchGame::~CMsgWatchGame() {
  // @@protoc_insertion_point(destructor:CMsgWatchGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWatchGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgWatchGame::ArenaDtor(void* object) {
  CMsgWatchGame* _this = reinterpret_cast< CMsgWatchGame* >(object);
  (void)_this;
}
void CMsgWatchGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWatchGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWatchGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&server_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&server_steamid_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWatchGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_server_steamid(&has_bits);
          server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint32 client_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_version(&has_bits);
          client_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 watch_server_steamid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_watch_server_steamid(&has_bits);
          watch_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional uint64 lobby_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 regions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_regions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_regions(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWatchGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWatchGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steamid(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_client_version(), target);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_watch_server_steamid(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_lobby_id(), target);
  }

  // repeated uint32 regions = 5;
  for (int i = 0, n = this->_internal_regions_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_regions(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWatchGame)
  return target;
}

size_t CMsgWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWatchGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 regions = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->regions_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_regions_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 server_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_client_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWatchGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWatchGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWatchGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWatchGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWatchGame)
    MergeFrom(*source);
  }
}

void CMsgWatchGame::MergeFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      server_steamid_ = from.server_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      watch_server_steamid_ = from.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWatchGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGame::CopyFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGame::IsInitialized() const {
  return true;
}

void CMsgWatchGame::InternalSwap(CMsgWatchGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  regions_.InternalSwap(&other->regions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWatchGame, client_version_)
      + sizeof(CMsgWatchGame::client_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgWatchGame, server_steamid_)>(
          reinterpret_cast<char*>(&server_steamid_),
          reinterpret_cast<char*>(&other->server_steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWatchGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgCancelWatchGame::_Internal {
 public:
};

CMsgCancelWatchGame::CMsgCancelWatchGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgCancelWatchGame)
}
CMsgCancelWatchGame::CMsgCancelWatchGame(const CMsgCancelWatchGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgCancelWatchGame)
}

void CMsgCancelWatchGame::SharedCtor() {
}

CMsgCancelWatchGame::~CMsgCancelWatchGame() {
  // @@protoc_insertion_point(destructor:CMsgCancelWatchGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgCancelWatchGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgCancelWatchGame::ArenaDtor(void* object) {
  CMsgCancelWatchGame* _this = reinterpret_cast< CMsgCancelWatchGame* >(object);
  (void)_this;
}
void CMsgCancelWatchGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgCancelWatchGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgCancelWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgCancelWatchGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgCancelWatchGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgCancelWatchGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgCancelWatchGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgCancelWatchGame)
  return target;
}

size_t CMsgCancelWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgCancelWatchGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCancelWatchGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgCancelWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCancelWatchGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgCancelWatchGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgCancelWatchGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgCancelWatchGame)
    MergeFrom(*source);
  }
}

void CMsgCancelWatchGame::MergeFrom(const CMsgCancelWatchGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgCancelWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgCancelWatchGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgCancelWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCancelWatchGame::CopyFrom(const CMsgCancelWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgCancelWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCancelWatchGame::IsInitialized() const {
  return true;
}

void CMsgCancelWatchGame::InternalSwap(CMsgCancelWatchGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgCancelWatchGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgWatchGameResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWatchGameResponse>()._has_bits_);
  static void set_has_watch_game_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_tv_public_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_tv_private_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_tv_port(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_game_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_watch_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_watch_tv_unique_secret_code(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CMsgWatchGameResponse::CMsgWatchGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgWatchGameResponse)
}
CMsgWatchGameResponse::CMsgWatchGameResponse(const CMsgWatchGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&watch_game_result_, &from.watch_game_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
    reinterpret_cast<char*>(&watch_game_result_)) + sizeof(watch_tv_unique_secret_code_));
  // @@protoc_insertion_point(copy_constructor:CMsgWatchGameResponse)
}

void CMsgWatchGameResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&watch_game_result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
    reinterpret_cast<char*>(&watch_game_result_)) + sizeof(watch_tv_unique_secret_code_));
}

CMsgWatchGameResponse::~CMsgWatchGameResponse() {
  // @@protoc_insertion_point(destructor:CMsgWatchGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgWatchGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgWatchGameResponse::ArenaDtor(void* object) {
  CMsgWatchGameResponse* _this = reinterpret_cast< CMsgWatchGameResponse* >(object);
  (void)_this;
}
void CMsgWatchGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWatchGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWatchGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWatchGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&watch_game_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
        reinterpret_cast<char*>(&watch_game_result_)) + sizeof(watch_tv_unique_secret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWatchGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgWatchGameResponse_WatchGameResult_IsValid(val))) {
            _internal_set_watch_game_result(static_cast<::CMsgWatchGameResponse_WatchGameResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 source_tv_public_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_tv_public_addr(&has_bits);
          source_tv_public_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_tv_private_addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_tv_private_addr(&has_bits);
          source_tv_private_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 source_tv_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_source_tv_port(&has_bits);
          source_tv_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 game_server_steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_game_server_steamid(&has_bits);
          game_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 watch_server_steamid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_watch_server_steamid(&has_bits);
          watch_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 watch_tv_unique_secret_code = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_watch_tv_unique_secret_code(&has_bits);
          watch_tv_unique_secret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgWatchGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWatchGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_watch_game_result(), target);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_source_tv_port(), target);
  }

  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_game_server_steamid(), target);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(6, this->_internal_watch_server_steamid(), target);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(7, this->_internal_watch_tv_unique_secret_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWatchGameResponse)
  return target;
}

size_t CMsgWatchGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWatchGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_watch_game_result());
    }

    // optional uint32 source_tv_public_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_tv_private_addr());
    }

    // optional uint32 source_tv_port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_tv_port());
    }

    // optional fixed64 game_server_steamid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWatchGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWatchGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgWatchGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgWatchGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgWatchGameResponse)
    MergeFrom(*source);
  }
}

void CMsgWatchGameResponse::MergeFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      watch_game_result_ = from.watch_game_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_tv_public_addr_ = from.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_tv_private_addr_ = from.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_tv_port_ = from.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_steamid_ = from.game_server_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      watch_server_steamid_ = from.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      watch_tv_unique_secret_code_ = from.watch_tv_unique_secret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWatchGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGameResponse::CopyFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGameResponse::IsInitialized() const {
  return true;
}

void CMsgWatchGameResponse::InternalSwap(CMsgWatchGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWatchGameResponse, watch_tv_unique_secret_code_)
      + sizeof(CMsgWatchGameResponse::watch_tv_unique_secret_code_)
      - PROTOBUF_FIELD_OFFSET(CMsgWatchGameResponse, watch_game_result_)>(
          reinterpret_cast<char*>(&watch_game_result_),
          reinterpret_cast<char*>(&other->watch_game_result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWatchGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPartyLeaderWatchGamePrompt::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPartyLeaderWatchGamePrompt>()._has_bits_);
  static void set_has_game_server_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPartyLeaderWatchGamePrompt)
}
CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_server_steamid_ = from.game_server_steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgPartyLeaderWatchGamePrompt)
}

void CMsgPartyLeaderWatchGamePrompt::SharedCtor() {
game_server_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgPartyLeaderWatchGamePrompt::~CMsgPartyLeaderWatchGamePrompt() {
  // @@protoc_insertion_point(destructor:CMsgPartyLeaderWatchGamePrompt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPartyLeaderWatchGamePrompt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgPartyLeaderWatchGamePrompt::ArenaDtor(void* object) {
  CMsgPartyLeaderWatchGamePrompt* _this = reinterpret_cast< CMsgPartyLeaderWatchGamePrompt* >(object);
  (void)_this;
}
void CMsgPartyLeaderWatchGamePrompt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPartyLeaderWatchGamePrompt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPartyLeaderWatchGamePrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPartyLeaderWatchGamePrompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPartyLeaderWatchGamePrompt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_server_steamid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_game_server_steamid(&has_bits);
          game_server_steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPartyLeaderWatchGamePrompt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPartyLeaderWatchGamePrompt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->_internal_game_server_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPartyLeaderWatchGamePrompt)
  return target;
}

size_t CMsgPartyLeaderWatchGamePrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPartyLeaderWatchGamePrompt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 game_server_steamid = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyLeaderWatchGamePrompt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPartyLeaderWatchGamePrompt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPartyLeaderWatchGamePrompt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPartyLeaderWatchGamePrompt)
    MergeFrom(*source);
  }
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_server_steamid()) {
    _internal_set_game_server_steamid(from._internal_game_server_steamid());
  }
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyLeaderWatchGamePrompt::IsInitialized() const {
  return true;
}

void CMsgPartyLeaderWatchGamePrompt::InternalSwap(CMsgPartyLeaderWatchGamePrompt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_server_steamid_, other->game_server_steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPartyLeaderWatchGamePrompt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTABroadcasterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTABroadcasterInfo>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_live(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_team_name_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_name_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_series_game(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_upcoming_broadcast_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_allow_live_video(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_node_type(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_node_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTABroadcasterInfo::CDOTABroadcasterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTABroadcasterInfo)
}
CDOTABroadcasterInfo::CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_radiant_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name_radiant()) {
    team_name_radiant_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name_radiant(), 
      GetArena());
  }
  team_name_dire_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name_dire()) {
    team_name_dire_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name_dire(), 
      GetArena());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_node_name()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArena());
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_type_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(node_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTABroadcasterInfo)
}

void CDOTABroadcasterInfo::SharedCtor() {
team_name_radiant_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_name_dire_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&server_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&node_type_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(node_type_));
}

CDOTABroadcasterInfo::~CDOTABroadcasterInfo() {
  // @@protoc_insertion_point(destructor:CDOTABroadcasterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTABroadcasterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_radiant_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcasterInfo::ArenaDtor(void* object) {
  CDOTABroadcasterInfo* _this = reinterpret_cast< CDOTABroadcasterInfo* >(object);
  (void)_this;
}
void CDOTABroadcasterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTABroadcasterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTABroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTABroadcasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_radiant_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_dire_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      node_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_game_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(series_game_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&upcoming_broadcast_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_type_) -
        reinterpret_cast<char*>(&upcoming_broadcast_timestamp_)) + sizeof(node_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTABroadcasterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool live = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_live(&has_bits);
          live_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name_radiant = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_team_name_radiant();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTABroadcasterInfo.team_name_radiant");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name_dire = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_team_name_dire();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTABroadcasterInfo.team_name_dire");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_game = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_series_game(&has_bits);
          series_game_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 upcoming_broadcast_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_upcoming_broadcast_timestamp(&has_bits);
          upcoming_broadcast_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_live_video = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_allow_live_video(&has_bits);
          allow_live_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 node_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_node_type(&has_bits);
          node_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string node_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTABroadcasterInfo.node_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTABroadcasterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTABroadcasterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_server_steam_id(), target);
  }

  // optional bool live = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_live(), target);
  }

  // optional string team_name_radiant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_radiant().data(), static_cast<int>(this->_internal_team_name_radiant().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcasterInfo.team_name_radiant");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_team_name_radiant(), target);
  }

  // optional string team_name_dire = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name_dire().data(), static_cast<int>(this->_internal_team_name_dire().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcasterInfo.team_name_dire");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_team_name_dire(), target);
  }

  // optional uint32 series_game = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_series_game(), target);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_upcoming_broadcast_timestamp(), target);
  }

  // optional bool allow_live_video = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_allow_live_video(), target);
  }

  // optional uint32 node_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_node_type(), target);
  }

  // optional string node_name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTABroadcasterInfo.node_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_node_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTABroadcasterInfo)
  return target;
}

size_t CDOTABroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTABroadcasterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name_radiant = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_radiant());
    }

    // optional string team_name_dire = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name_dire());
    }

    // optional string node_name = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_node_name());
    }

    // optional fixed64 server_steam_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional bool live = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool allow_live_video = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 series_game = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_game());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 upcoming_broadcast_timestamp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_upcoming_broadcast_timestamp());
    }

    // optional uint32 node_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_node_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcasterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcasterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTABroadcasterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTABroadcasterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTABroadcasterInfo)
    MergeFrom(*source);
  }
}

void CDOTABroadcasterInfo::MergeFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name_radiant(from._internal_team_name_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_name_dire(from._internal_team_name_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_node_name(from._internal_node_name());
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      live_ = from.live_;
    }
    if (cached_has_bits & 0x00000040u) {
      allow_live_video_ = from.allow_live_video_;
    }
    if (cached_has_bits & 0x00000080u) {
      series_game_ = from.series_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      upcoming_broadcast_timestamp_ = from.upcoming_broadcast_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      node_type_ = from.node_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcasterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcasterInfo::CopyFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcasterInfo::IsInitialized() const {
  return true;
}

void CDOTABroadcasterInfo::InternalSwap(CDOTABroadcasterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_radiant_.Swap(&other->team_name_radiant_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_name_dire_.Swap(&other->team_name_dire_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  node_name_.Swap(&other->node_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTABroadcasterInfo, node_type_)
      + sizeof(CDOTABroadcasterInfo::node_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTABroadcasterInfo, server_steam_id_)>(
          reinterpret_cast<char*>(&server_steam_id_),
          reinterpret_cast<char*>(&other->server_steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTABroadcasterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeries_TeamInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeries_TeamInfo>()._has_bits_);
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_logo_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wager_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeries.TeamInfo)
}
CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(const CMsgDOTASeries_TeamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_name()) {
    team_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_name(), 
      GetArena());
  }
  team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_team_logo_url()) {
    team_logo_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_logo_url(), 
      GetArena());
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_count_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(wager_count_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeries.TeamInfo)
}

void CMsgDOTASeries_TeamInfo::SharedCtor() {
team_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_logo_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wager_count_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(wager_count_));
}

CMsgDOTASeries_TeamInfo::~CMsgDOTASeries_TeamInfo() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeries.TeamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeries_TeamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  team_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeries_TeamInfo::ArenaDtor(void* object) {
  CMsgDOTASeries_TeamInfo* _this = reinterpret_cast< CMsgDOTASeries_TeamInfo* >(object);
  (void)_this;
}
void CMsgDOTASeries_TeamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeries_TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeries_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeries.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_url_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_count_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(wager_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeries_TeamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_team_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeries.TeamInfo.team_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string team_logo_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_logo_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDOTASeries.TeamInfo.team_logo_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wager_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_wager_count(&has_bits);
          wager_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeries_TeamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeries.TeamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_name().data(), static_cast<int>(this->_internal_team_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeries.TeamInfo.team_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_team_name(), target);
  }

  // optional string team_logo_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_team_logo_url().data(), static_cast<int>(this->_internal_team_logo_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDOTASeries.TeamInfo.team_logo_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_team_logo_url(), target);
  }

  // optional uint32 wager_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wager_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeries.TeamInfo)
  return target;
}

size_t CMsgDOTASeries_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeries.TeamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_name());
    }

    // optional string team_logo_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_team_logo_url());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_id());
    }

    // optional uint32 wager_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeries_TeamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeries.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeries_TeamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeries_TeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeries.TeamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeries.TeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTASeries_TeamInfo::MergeFrom(const CMsgDOTASeries_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeries.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_team_name(from._internal_team_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_team_logo_url(from._internal_team_logo_url());
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      wager_count_ = from.wager_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeries_TeamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeries.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeries_TeamInfo::CopyFrom(const CMsgDOTASeries_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeries.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries_TeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTASeries_TeamInfo::InternalSwap(CMsgDOTASeries_TeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  team_logo_url_.Swap(&other->team_logo_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_TeamInfo, wager_count_)
      + sizeof(CMsgDOTASeries_TeamInfo::wager_count_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_TeamInfo, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeries_TeamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeries_LiveGame::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeries_LiveGame>()._has_bits_);
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_radiant(const CMsgDOTASeries_LiveGame* msg);
  static void set_has_team_radiant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_dire(const CMsgDOTASeries_LiveGame* msg);
  static void set_has_team_dire(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_radiant_score(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_team_dire_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries_LiveGame::_Internal::team_radiant(const CMsgDOTASeries_LiveGame* msg) {
  return *msg->team_radiant_;
}
const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries_LiveGame::_Internal::team_dire(const CMsgDOTASeries_LiveGame* msg) {
  return *msg->team_dire_;
}
CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeries.LiveGame)
}
CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(const CMsgDOTASeries_LiveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_radiant()) {
    team_radiant_ = new ::CMsgDOTASeries_TeamInfo(*from.team_radiant_);
  } else {
    team_radiant_ = nullptr;
  }
  if (from._internal_has_team_dire()) {
    team_dire_ = new ::CMsgDOTASeries_TeamInfo(*from.team_dire_);
  } else {
    team_dire_ = nullptr;
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_dire_score_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(team_dire_score_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeries.LiveGame)
}

void CMsgDOTASeries_LiveGame::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_radiant_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_dire_score_) -
    reinterpret_cast<char*>(&team_radiant_)) + sizeof(team_dire_score_));
}

CMsgDOTASeries_LiveGame::~CMsgDOTASeries_LiveGame() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeries.LiveGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeries_LiveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete team_radiant_;
  if (this != internal_default_instance()) delete team_dire_;
}

void CMsgDOTASeries_LiveGame::ArenaDtor(void* object) {
  CMsgDOTASeries_LiveGame* _this = reinterpret_cast< CMsgDOTASeries_LiveGame* >(object);
  (void)_this;
}
void CMsgDOTASeries_LiveGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeries_LiveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeries_LiveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeries.LiveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_radiant_ != nullptr);
      team_radiant_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_dire_ != nullptr);
      team_dire_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_dire_score_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(team_dire_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeries_LiveGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_radiant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_dire(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_radiant_score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_team_radiant_score(&has_bits);
          team_radiant_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_dire_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_team_dire_score(&has_bits);
          team_dire_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeries_LiveGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeries.LiveGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_server_steam_id(), target);
  }

  // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::team_radiant(this), target, stream);
  }

  // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::team_dire(this), target, stream);
  }

  // optional uint32 team_radiant_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_team_radiant_score(), target);
  }

  // optional uint32 team_dire_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_team_dire_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeries.LiveGame)
  return target;
}

size_t CMsgDOTASeries_LiveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeries.LiveGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgDOTASeries.TeamInfo team_radiant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_radiant_);
    }

    // optional .CMsgDOTASeries.TeamInfo team_dire = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_dire_);
    }

    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_radiant_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_radiant_score());
    }

    // optional uint32 team_dire_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_dire_score());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeries_LiveGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeries.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeries_LiveGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeries_LiveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeries.LiveGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeries.LiveGame)
    MergeFrom(*source);
  }
}

void CMsgDOTASeries_LiveGame::MergeFrom(const CMsgDOTASeries_LiveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeries.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_team_radiant()->::CMsgDOTASeries_TeamInfo::MergeFrom(from._internal_team_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_team_dire()->::CMsgDOTASeries_TeamInfo::MergeFrom(from._internal_team_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_radiant_score_ = from.team_radiant_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_dire_score_ = from.team_dire_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeries_LiveGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeries.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeries_LiveGame::CopyFrom(const CMsgDOTASeries_LiveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeries.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries_LiveGame::IsInitialized() const {
  return true;
}

void CMsgDOTASeries_LiveGame::InternalSwap(CMsgDOTASeries_LiveGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_LiveGame, team_dire_score_)
      + sizeof(CMsgDOTASeries_LiveGame::team_dire_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeries_LiveGame, team_radiant_)>(
          reinterpret_cast<char*>(&team_radiant_),
          reinterpret_cast<char*>(&other->team_radiant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeries_LiveGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTASeries::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTASeries>()._has_bits_);
  static void set_has_series_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_series_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_1(const CMsgDOTASeries* msg);
  static void set_has_team_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDOTASeries_TeamInfo& team_2(const CMsgDOTASeries* msg);
  static void set_has_team_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDOTASeries_LiveGame& live_game(const CMsgDOTASeries* msg);
  static void set_has_live_game(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries::_Internal::team_1(const CMsgDOTASeries* msg) {
  return *msg->team_1_;
}
const ::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries::_Internal::team_2(const CMsgDOTASeries* msg) {
  return *msg->team_2_;
}
const ::CMsgDOTASeries_LiveGame&
CMsgDOTASeries::_Internal::live_game(const CMsgDOTASeries* msg) {
  return *msg->live_game_;
}
void CMsgDOTASeries::clear_match_minimal() {
  match_minimal_.Clear();
}
CMsgDOTASeries::CMsgDOTASeries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  match_minimal_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTASeries)
}
CMsgDOTASeries::CMsgDOTASeries(const CMsgDOTASeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      match_minimal_(from.match_minimal_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_team_1()) {
    team_1_ = new ::CMsgDOTASeries_TeamInfo(*from.team_1_);
  } else {
    team_1_ = nullptr;
  }
  if (from._internal_has_team_2()) {
    team_2_ = new ::CMsgDOTASeries_TeamInfo(*from.team_2_);
  } else {
    team_2_ = nullptr;
  }
  if (from._internal_has_live_game()) {
    live_game_ = new ::CMsgDOTASeries_LiveGame(*from.live_game_);
  } else {
    live_game_ = nullptr;
  }
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&series_type_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(series_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDOTASeries)
}

void CMsgDOTASeries::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&series_type_) -
    reinterpret_cast<char*>(&team_1_)) + sizeof(series_type_));
}

CMsgDOTASeries::~CMsgDOTASeries() {
  // @@protoc_insertion_point(destructor:CMsgDOTASeries)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTASeries::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete team_1_;
  if (this != internal_default_instance()) delete team_2_;
  if (this != internal_default_instance()) delete live_game_;
}

void CMsgDOTASeries::ArenaDtor(void* object) {
  CMsgDOTASeries* _this = reinterpret_cast< CMsgDOTASeries* >(object);
  (void)_this;
}
void CMsgDOTASeries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTASeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTASeries::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTASeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_minimal_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_1_ != nullptr);
      team_1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_2_ != nullptr);
      team_2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(live_game_ != nullptr);
      live_game_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&series_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_type_) -
        reinterpret_cast<char*>(&series_id_)) + sizeof(series_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTASeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_series_id(&has_bits);
          series_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 series_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_series_type(&has_bits);
          series_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_team_2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_minimal(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgDOTASeries.LiveGame live_game = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_live_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTASeries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTASeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_series_id(), target);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_series_type(), target);
  }

  // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::team_1(this), target, stream);
  }

  // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::team_2(this), target, stream);
  }

  // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_minimal_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_match_minimal(i), target, stream);
  }

  // optional .CMsgDOTASeries.LiveGame live_game = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::live_game(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTASeries)
  return target;
}

size_t CMsgDOTASeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTASeries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDOTAMatchMinimal match_minimal = 5;
  total_size += 1UL * this->_internal_match_minimal_size();
  for (const auto& msg : this->match_minimal_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CMsgDOTASeries.TeamInfo team_1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_1_);
    }

    // optional .CMsgDOTASeries.TeamInfo team_2 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *team_2_);
    }

    // optional .CMsgDOTASeries.LiveGame live_game = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *live_game_);
    }

    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_id());
    }

    // optional uint32 series_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_series_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTASeries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTASeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTASeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTASeries)
    MergeFrom(*source);
  }
}

void CMsgDOTASeries::MergeFrom(const CMsgDOTASeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTASeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_minimal_.MergeFrom(from.match_minimal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_team_1()->::CMsgDOTASeries_TeamInfo::MergeFrom(from._internal_team_1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_team_2()->::CMsgDOTASeries_TeamInfo::MergeFrom(from._internal_team_2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_live_game()->::CMsgDOTASeries_LiveGame::MergeFrom(from._internal_live_game());
    }
    if (cached_has_bits & 0x00000008u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTASeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeries::CopyFrom(const CMsgDOTASeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTASeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries::IsInitialized() const {
  return true;
}

void CMsgDOTASeries::InternalSwap(CMsgDOTASeries* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_minimal_.InternalSwap(&other->match_minimal_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTASeries, series_type_)
      + sizeof(CMsgDOTASeries::series_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTASeries, team_1_)>(
          reinterpret_cast<char*>(&team_1_),
          reinterpret_cast<char*>(&other->team_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTASeries::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CSourceTVGameSmall_Player* Arena::CreateMaybeMessage< ::CSourceTVGameSmall_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSourceTVGameSmall_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CSourceTVGameSmall* Arena::CreateMaybeMessage< ::CSourceTVGameSmall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CSourceTVGameSmall >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFindTopSourceTVGames* Arena::CreateMaybeMessage< ::CMsgClientToGCFindTopSourceTVGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFindTopSourceTVGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFindTopSourceTVGamesResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientFindTopSourceTVGamesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFindTopSourceTVGamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientTopWeekendTourneyGames* Arena::CreateMaybeMessage< ::CMsgGCToClientTopWeekendTourneyGames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientTopWeekendTourneyGames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCTopMatchesRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCTopMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCTopMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCTopLeagueMatchesRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCTopLeagueMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCTopLeagueMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCTopFriendMatchesRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCTopFriendMatchesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCTopFriendMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCMatchesMinimalRequest* Arena::CreateMaybeMessage< ::CMsgClientToGCMatchesMinimalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCMatchesMinimalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCMatchesMinimalResponse* Arena::CreateMaybeMessage< ::CMsgClientToGCMatchesMinimalResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCMatchesMinimalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientTopLeagueMatchesResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientTopLeagueMatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientTopLeagueMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientTopFriendMatchesResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientTopFriendMatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientTopFriendMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClientToGCFindTopMatches* Arena::CreateMaybeMessage< ::CMsgClientToGCFindTopMatches >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClientToGCFindTopMatches >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCToClientFindTopLeagueMatchesResponse* Arena::CreateMaybeMessage< ::CMsgGCToClientFindTopLeagueMatchesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCToClientFindTopLeagueMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectateFriendGame* Arena::CreateMaybeMessage< ::CMsgSpectateFriendGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectateFriendGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSpectateFriendGameResponse* Arena::CreateMaybeMessage< ::CMsgSpectateFriendGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSpectateFriendGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAReplayDownloadInfo_Highlight* Arena::CreateMaybeMessage< ::CDOTAReplayDownloadInfo_Highlight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAReplayDownloadInfo_Highlight >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAReplayDownloadInfo* Arena::CreateMaybeMessage< ::CDOTAReplayDownloadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAReplayDownloadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWatchGame* Arena::CreateMaybeMessage< ::CMsgWatchGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWatchGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgCancelWatchGame* Arena::CreateMaybeMessage< ::CMsgCancelWatchGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgCancelWatchGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWatchGameResponse* Arena::CreateMaybeMessage< ::CMsgWatchGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWatchGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPartyLeaderWatchGamePrompt* Arena::CreateMaybeMessage< ::CMsgPartyLeaderWatchGamePrompt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPartyLeaderWatchGamePrompt >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTABroadcasterInfo* Arena::CreateMaybeMessage< ::CDOTABroadcasterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTABroadcasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeries_TeamInfo* Arena::CreateMaybeMessage< ::CMsgDOTASeries_TeamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeries_TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeries_LiveGame* Arena::CreateMaybeMessage< ::CMsgDOTASeries_LiveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeries_LiveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTASeries* Arena::CreateMaybeMessage< ::CMsgDOTASeries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTASeries >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
