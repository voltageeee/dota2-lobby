// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameevents.proto

#include "gameevents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gamesessionid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clientid_(0){}
struct CMsgVDebugGameSessionIDEventDefaultTypeInternal {
  constexpr CMsgVDebugGameSessionIDEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgVDebugGameSessionIDEventDefaultTypeInternal() {}
  union {
    CMsgVDebugGameSessionIDEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgVDebugGameSessionIDEventDefaultTypeInternal _CMsgVDebugGameSessionIDEvent_default_instance_;
constexpr CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , normal_(nullptr)
  , saxis_(nullptr)
  , decalmaterialindex_(0u)
  , flags_(0u)
  , color_(0u)
  , width_(0)
  , height_(0)
  , depth_(0)
  , entityhandleindex_(0u)
  , skeletoninstancehash_(0u)
  , boneindex_(0)
  , translucenthit_(false)
  , is_adjacent_(false){}
struct CMsgPlaceDecalEventDefaultTypeInternal {
  constexpr CMsgPlaceDecalEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPlaceDecalEventDefaultTypeInternal() {}
  union {
    CMsgPlaceDecalEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPlaceDecalEventDefaultTypeInternal _CMsgPlaceDecalEvent_default_instance_;
constexpr CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flagstoclear_(0u){}
struct CMsgClearWorldDecalsEventDefaultTypeInternal {
  constexpr CMsgClearWorldDecalsEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearWorldDecalsEventDefaultTypeInternal() {}
  union {
    CMsgClearWorldDecalsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearWorldDecalsEventDefaultTypeInternal _CMsgClearWorldDecalsEvent_default_instance_;
constexpr CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flagstoclear_(0u){}
struct CMsgClearEntityDecalsEventDefaultTypeInternal {
  constexpr CMsgClearEntityDecalsEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearEntityDecalsEventDefaultTypeInternal() {}
  union {
    CMsgClearEntityDecalsEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearEntityDecalsEventDefaultTypeInternal _CMsgClearEntityDecalsEvent_default_instance_;
constexpr CMsgClearDecalsForSkeletonInstanceEvent::CMsgClearDecalsForSkeletonInstanceEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flagstoclear_(0u)
  , entityhandleindex_(0u)
  , skeletoninstancehash_(0u){}
struct CMsgClearDecalsForSkeletonInstanceEventDefaultTypeInternal {
  constexpr CMsgClearDecalsForSkeletonInstanceEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgClearDecalsForSkeletonInstanceEventDefaultTypeInternal() {}
  union {
    CMsgClearDecalsForSkeletonInstanceEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgClearDecalsForSkeletonInstanceEventDefaultTypeInternal _CMsgClearDecalsForSkeletonInstanceEvent_default_instance_;
constexpr CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal {
  constexpr CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEventList_key_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSource1LegacyGameEventList_key_tDefaultTypeInternal _CMsgSource1LegacyGameEventList_key_t_default_instance_;
constexpr CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eventid_(0){}
struct CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal {
  constexpr CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEventList_descriptor_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSource1LegacyGameEventList_descriptor_tDefaultTypeInternal _CMsgSource1LegacyGameEventList_descriptor_t_default_instance_;
constexpr CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : descriptors_(){}
struct CMsgSource1LegacyGameEventListDefaultTypeInternal {
  constexpr CMsgSource1LegacyGameEventListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventListDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEventList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSource1LegacyGameEventListDefaultTypeInternal _CMsgSource1LegacyGameEventList_default_instance_;
constexpr CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eventarraybits_()
  , playerslot_(0){}
struct CMsgSource1LegacyListenEventsDefaultTypeInternal {
  constexpr CMsgSource1LegacyListenEventsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSource1LegacyListenEventsDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyListenEvents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSource1LegacyListenEventsDefaultTypeInternal _CMsgSource1LegacyListenEvents_default_instance_;
constexpr CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , val_float_(0)
  , val_long_(0)
  , val_short_(0)
  , val_byte_(0)
  , val_bool_(false)
  , val_uint64_(PROTOBUF_ULONGLONG(0)){}
struct CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal {
  constexpr CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEvent_key_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSource1LegacyGameEvent_key_tDefaultTypeInternal _CMsgSource1LegacyGameEvent_key_t_default_instance_;
constexpr CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_()
  , event_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eventid_(0){}
struct CMsgSource1LegacyGameEventDefaultTypeInternal {
  constexpr CMsgSource1LegacyGameEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSource1LegacyGameEventDefaultTypeInternal() {}
  union {
    CMsgSource1LegacyGameEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSource1LegacyGameEventDefaultTypeInternal _CMsgSource1LegacyGameEvent_default_instance_;
constexpr CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packed_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , soundevent_guid_(0)
  , soundevent_hash_(0u)
  , source_entity_index_(0)
  , seed_(0)
  , start_time_(0){}
struct CMsgSosStartSoundEventDefaultTypeInternal {
  constexpr CMsgSosStartSoundEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSosStartSoundEventDefaultTypeInternal() {}
  union {
    CMsgSosStartSoundEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSosStartSoundEventDefaultTypeInternal _CMsgSosStartSoundEvent_default_instance_;
constexpr CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soundevent_guid_(0){}
struct CMsgSosStopSoundEventDefaultTypeInternal {
  constexpr CMsgSosStopSoundEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSosStopSoundEventDefaultTypeInternal() {}
  union {
    CMsgSosStopSoundEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSosStopSoundEventDefaultTypeInternal _CMsgSosStopSoundEvent_default_instance_;
constexpr CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : soundevent_hash_(0u)
  , source_entity_index_(0){}
struct CMsgSosStopSoundEventHashDefaultTypeInternal {
  constexpr CMsgSosStopSoundEventHashDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSosStopSoundEventHashDefaultTypeInternal() {}
  union {
    CMsgSosStopSoundEventHash _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSosStopSoundEventHashDefaultTypeInternal _CMsgSosStopSoundEventHash_default_instance_;
constexpr CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packed_params_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , soundevent_guid_(0){}
struct CMsgSosSetSoundEventParamsDefaultTypeInternal {
  constexpr CMsgSosSetSoundEventParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSosSetSoundEventParamsDefaultTypeInternal() {}
  union {
    CMsgSosSetSoundEventParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSosSetSoundEventParamsDefaultTypeInternal _CMsgSosSetSoundEventParams_default_instance_;
constexpr CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : packed_fields_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stack_hash_(0u){}
struct CMsgSosSetLibraryStackFieldsDefaultTypeInternal {
  constexpr CMsgSosSetLibraryStackFieldsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgSosSetLibraryStackFieldsDefaultTypeInternal() {}
  union {
    CMsgSosSetLibraryStackFields _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgSosSetLibraryStackFieldsDefaultTypeInternal _CMsgSosSetLibraryStackFields_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_gameevents_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_gameevents_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_gameevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_gameevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, clientid_),
  PROTOBUF_FIELD_OFFSET(::CMsgVDebugGameSessionIDEvent, gamesessionid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, position_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, normal_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, saxis_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, decalmaterialindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, flags_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, color_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, width_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, height_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, depth_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, entityhandleindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, skeletoninstancehash_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, boneindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, translucenthit_),
  PROTOBUF_FIELD_OFFSET(::CMsgPlaceDecalEvent, is_adjacent_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CMsgClearWorldDecalsEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearWorldDecalsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClearWorldDecalsEvent, flagstoclear_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClearEntityDecalsEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearEntityDecalsEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClearEntityDecalsEvent, flagstoclear_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForSkeletonInstanceEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForSkeletonInstanceEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForSkeletonInstanceEvent, flagstoclear_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForSkeletonInstanceEvent, entityhandleindex_),
  PROTOBUF_FIELD_OFFSET(::CMsgClearDecalsForSkeletonInstanceEvent, skeletoninstancehash_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_key_t, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList_descriptor_t, keys_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEventList, descriptors_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, playerslot_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyListenEvents, eventarraybits_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_float_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_long_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_short_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_byte_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_bool_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent_key_t, val_uint64_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, eventid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSource1LegacyGameEvent, keys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, soundevent_guid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, soundevent_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, source_entity_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, seed_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, packed_params_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStartSoundEvent, start_time_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEvent, soundevent_guid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, soundevent_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosStopSoundEventHash, source_entity_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, soundevent_guid_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetSoundEventParams, packed_params_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, stack_hash_),
  PROTOBUF_FIELD_OFFSET(::CMsgSosSetLibraryStackFields, packed_fields_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CMsgVDebugGameSessionIDEvent)},
  { 9, 28, sizeof(::CMsgPlaceDecalEvent)},
  { 42, 48, sizeof(::CMsgClearWorldDecalsEvent)},
  { 49, 55, sizeof(::CMsgClearEntityDecalsEvent)},
  { 56, 64, sizeof(::CMsgClearDecalsForSkeletonInstanceEvent)},
  { 67, 74, sizeof(::CMsgSource1LegacyGameEventList_key_t)},
  { 76, 84, sizeof(::CMsgSource1LegacyGameEventList_descriptor_t)},
  { 87, -1, sizeof(::CMsgSource1LegacyGameEventList)},
  { 93, 100, sizeof(::CMsgSource1LegacyListenEvents)},
  { 102, 115, sizeof(::CMsgSource1LegacyGameEvent_key_t)},
  { 123, 131, sizeof(::CMsgSource1LegacyGameEvent)},
  { 134, 145, sizeof(::CMsgSosStartSoundEvent)},
  { 151, 157, sizeof(::CMsgSosStopSoundEvent)},
  { 158, 165, sizeof(::CMsgSosStopSoundEventHash)},
  { 167, 174, sizeof(::CMsgSosSetSoundEventParams)},
  { 176, 183, sizeof(::CMsgSosSetLibraryStackFields)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgVDebugGameSessionIDEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPlaceDecalEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearWorldDecalsEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearEntityDecalsEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgClearDecalsForSkeletonInstanceEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSource1LegacyGameEventList_key_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSource1LegacyGameEventList_descriptor_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSource1LegacyGameEventList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSource1LegacyListenEvents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSource1LegacyGameEvent_key_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSource1LegacyGameEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSosStartSoundEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSosStopSoundEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSosStopSoundEventHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSosSetSoundEventParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSosSetLibraryStackFields_default_instance_),
};

const char descriptor_table_protodef_gameevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020gameevents.proto\032\026networkbasetypes.pro"
  "to\"G\n\034CMsgVDebugGameSessionIDEvent\022\020\n\010cl"
  "ientid\030\001 \001(\005\022\025\n\rgamesessionid\030\002 \001(\t\"\316\002\n\023"
  "CMsgPlaceDecalEvent\022\035\n\010position\030\001 \001(\0132\013."
  "CMsgVector\022\033\n\006normal\030\002 \001(\0132\013.CMsgVector\022"
  "\032\n\005saxis\030\003 \001(\0132\013.CMsgVector\022\032\n\022decalmate"
  "rialindex\030\004 \001(\r\022\r\n\005flags\030\005 \001(\r\022\r\n\005color\030"
  "\006 \001(\007\022\r\n\005width\030\007 \001(\002\022\016\n\006height\030\010 \001(\002\022\r\n\005"
  "depth\030\t \001(\002\022\031\n\021entityhandleindex\030\n \001(\r\022\034"
  "\n\024skeletoninstancehash\030\013 \001(\007\022\021\n\tboneinde"
  "x\030\014 \001(\005\022\026\n\016translucenthit\030\r \001(\010\022\023\n\013is_ad"
  "jacent\030\016 \001(\010\"1\n\031CMsgClearWorldDecalsEven"
  "t\022\024\n\014flagstoclear\030\001 \001(\r\"2\n\032CMsgClearEnti"
  "tyDecalsEvent\022\024\n\014flagstoclear\030\001 \001(\r\"x\n\'C"
  "MsgClearDecalsForSkeletonInstanceEvent\022\024"
  "\n\014flagstoclear\030\001 \001(\r\022\031\n\021entityhandleinde"
  "x\030\002 \001(\r\022\034\n\024skeletoninstancehash\030\003 \001(\r\"\354\001"
  "\n\036CMsgSource1LegacyGameEventList\022A\n\013desc"
  "riptors\030\001 \003(\0132,.CMsgSource1LegacyGameEve"
  "ntList.descriptor_t\032#\n\005key_t\022\014\n\004type\030\001 \001"
  "(\005\022\014\n\004name\030\002 \001(\t\032b\n\014descriptor_t\022\017\n\007even"
  "tid\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\0223\n\004keys\030\003 \003(\0132%."
  "CMsgSource1LegacyGameEventList.key_t\"K\n\035"
  "CMsgSource1LegacyListenEvents\022\022\n\nplayers"
  "lot\030\001 \001(\005\022\026\n\016eventarraybits\030\002 \003(\r\"\216\002\n\032CM"
  "sgSource1LegacyGameEvent\022\022\n\nevent_name\030\001"
  " \001(\t\022\017\n\007eventid\030\002 \001(\005\022/\n\004keys\030\003 \003(\0132!.CM"
  "sgSource1LegacyGameEvent.key_t\032\231\001\n\005key_t"
  "\022\014\n\004type\030\001 \001(\005\022\022\n\nval_string\030\002 \001(\t\022\021\n\tva"
  "l_float\030\003 \001(\002\022\020\n\010val_long\030\004 \001(\005\022\021\n\tval_s"
  "hort\030\005 \001(\005\022\020\n\010val_byte\030\006 \001(\005\022\020\n\010val_bool"
  "\030\007 \001(\010\022\022\n\nval_uint64\030\010 \001(\004\"\240\001\n\026CMsgSosSt"
  "artSoundEvent\022\027\n\017soundevent_guid\030\001 \001(\005\022\027"
  "\n\017soundevent_hash\030\002 \001(\007\022\033\n\023source_entity"
  "_index\030\003 \001(\005\022\014\n\004seed\030\004 \001(\005\022\025\n\rpacked_par"
  "ams\030\005 \001(\014\022\022\n\nstart_time\030\006 \001(\002\"0\n\025CMsgSos"
  "StopSoundEvent\022\027\n\017soundevent_guid\030\001 \001(\005\""
  "Q\n\031CMsgSosStopSoundEventHash\022\027\n\017soundeve"
  "nt_hash\030\001 \001(\007\022\033\n\023source_entity_index\030\002 \001"
  "(\005\"L\n\032CMsgSosSetSoundEventParams\022\027\n\017soun"
  "devent_guid\030\001 \001(\005\022\025\n\rpacked_params\030\005 \001(\014"
  "\"I\n\034CMsgSosSetLibraryStackFields\022\022\n\nstac"
  "k_hash\030\001 \001(\007\022\025\n\rpacked_fields\030\005 \001(\014*\267\003\n\017"
  "EBaseGameEvents\022 \n\033GE_VDebugGameSessionI"
  "DEvent\020\310\001\022\027\n\022GE_PlaceDecalEvent\020\311\001\022\035\n\030GE"
  "_ClearWorldDecalsEvent\020\312\001\022\036\n\031GE_ClearEnt"
  "ityDecalsEvent\020\313\001\022+\n&GE_ClearDecalsForSk"
  "eletonInstanceEvent\020\314\001\022\"\n\035GE_Source1Lega"
  "cyGameEventList\020\315\001\022!\n\034GE_Source1LegacyLi"
  "stenEvents\020\316\001\022\036\n\031GE_Source1LegacyGameEve"
  "nt\020\317\001\022\032\n\025GE_SosStartSoundEvent\020\320\001\022\031\n\024GE_"
  "SosStopSoundEvent\020\321\001\022\036\n\031GE_SosSetSoundEv"
  "entParams\020\322\001\022 \n\033GE_SosSetLibraryStackFie"
  "lds\020\323\001\022\035\n\030GE_SosStopSoundEventHash\020\324\001B\005H"
  "\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_gameevents_2eproto_deps[1] = {
  &::descriptor_table_networkbasetypes_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_gameevents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gameevents_2eproto = {
  false, false, 2164, descriptor_table_protodef_gameevents_2eproto, "gameevents.proto", 
  &descriptor_table_gameevents_2eproto_once, descriptor_table_gameevents_2eproto_deps, 1, 16,
  schemas, file_default_instances, TableStruct_gameevents_2eproto::offsets,
  file_level_metadata_gameevents_2eproto, file_level_enum_descriptors_gameevents_2eproto, file_level_service_descriptors_gameevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_gameevents_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gameevents_2eproto);
  return descriptor_table_gameevents_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_gameevents_2eproto(&descriptor_table_gameevents_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBaseGameEvents_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gameevents_2eproto);
  return file_level_enum_descriptors_gameevents_2eproto[0];
}
bool EBaseGameEvents_IsValid(int value) {
  switch (value) {
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgVDebugGameSessionIDEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgVDebugGameSessionIDEvent>()._has_bits_);
  static void set_has_clientid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gamesessionid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgVDebugGameSessionIDEvent)
}
CMsgVDebugGameSessionIDEvent::CMsgVDebugGameSessionIDEvent(const CMsgVDebugGameSessionIDEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_gamesessionid()) {
    gamesessionid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gamesessionid(), 
      GetArena());
  }
  clientid_ = from.clientid_;
  // @@protoc_insertion_point(copy_constructor:CMsgVDebugGameSessionIDEvent)
}

void CMsgVDebugGameSessionIDEvent::SharedCtor() {
gamesessionid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clientid_ = 0;
}

CMsgVDebugGameSessionIDEvent::~CMsgVDebugGameSessionIDEvent() {
  // @@protoc_insertion_point(destructor:CMsgVDebugGameSessionIDEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgVDebugGameSessionIDEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gamesessionid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgVDebugGameSessionIDEvent::ArenaDtor(void* object) {
  CMsgVDebugGameSessionIDEvent* _this = reinterpret_cast< CMsgVDebugGameSessionIDEvent* >(object);
  (void)_this;
}
void CMsgVDebugGameSessionIDEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgVDebugGameSessionIDEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgVDebugGameSessionIDEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgVDebugGameSessionIDEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    gamesessionid_.ClearNonDefaultToEmpty();
  }
  clientid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgVDebugGameSessionIDEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 clientid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_clientid(&has_bits);
          clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string gamesessionid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gamesessionid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgVDebugGameSessionIDEvent.gamesessionid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgVDebugGameSessionIDEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgVDebugGameSessionIDEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 clientid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_clientid(), target);
  }

  // optional string gamesessionid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gamesessionid().data(), static_cast<int>(this->_internal_gamesessionid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgVDebugGameSessionIDEvent.gamesessionid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gamesessionid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgVDebugGameSessionIDEvent)
  return target;
}

size_t CMsgVDebugGameSessionIDEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgVDebugGameSessionIDEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string gamesessionid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gamesessionid());
    }

    // optional int32 clientid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_clientid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgVDebugGameSessionIDEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgVDebugGameSessionIDEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgVDebugGameSessionIDEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgVDebugGameSessionIDEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgVDebugGameSessionIDEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgVDebugGameSessionIDEvent)
    MergeFrom(*source);
  }
}

void CMsgVDebugGameSessionIDEvent::MergeFrom(const CMsgVDebugGameSessionIDEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgVDebugGameSessionIDEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gamesessionid(from._internal_gamesessionid());
    }
    if (cached_has_bits & 0x00000002u) {
      clientid_ = from.clientid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgVDebugGameSessionIDEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgVDebugGameSessionIDEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgVDebugGameSessionIDEvent::CopyFrom(const CMsgVDebugGameSessionIDEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgVDebugGameSessionIDEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgVDebugGameSessionIDEvent::IsInitialized() const {
  return true;
}

void CMsgVDebugGameSessionIDEvent::InternalSwap(CMsgVDebugGameSessionIDEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamesessionid_.Swap(&other->gamesessionid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(clientid_, other->clientid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgVDebugGameSessionIDEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgPlaceDecalEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPlaceDecalEvent>()._has_bits_);
  static const ::CMsgVector& position(const CMsgPlaceDecalEvent* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgVector& normal(const CMsgPlaceDecalEvent* msg);
  static void set_has_normal(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgVector& saxis(const CMsgPlaceDecalEvent* msg);
  static void set_has_saxis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decalmaterialindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_entityhandleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_skeletoninstancehash(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_boneindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_translucenthit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_adjacent(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::CMsgVector&
CMsgPlaceDecalEvent::_Internal::position(const CMsgPlaceDecalEvent* msg) {
  return *msg->position_;
}
const ::CMsgVector&
CMsgPlaceDecalEvent::_Internal::normal(const CMsgPlaceDecalEvent* msg) {
  return *msg->normal_;
}
const ::CMsgVector&
CMsgPlaceDecalEvent::_Internal::saxis(const CMsgPlaceDecalEvent* msg) {
  return *msg->saxis_;
}
void CMsgPlaceDecalEvent::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPlaceDecalEvent::clear_normal() {
  if (normal_ != nullptr) normal_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPlaceDecalEvent::clear_saxis() {
  if (saxis_ != nullptr) saxis_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgPlaceDecalEvent)
}
CMsgPlaceDecalEvent::CMsgPlaceDecalEvent(const CMsgPlaceDecalEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_normal()) {
    normal_ = new ::CMsgVector(*from.normal_);
  } else {
    normal_ = nullptr;
  }
  if (from._internal_has_saxis()) {
    saxis_ = new ::CMsgVector(*from.saxis_);
  } else {
    saxis_ = nullptr;
  }
  ::memcpy(&decalmaterialindex_, &from.decalmaterialindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_adjacent_) -
    reinterpret_cast<char*>(&decalmaterialindex_)) + sizeof(is_adjacent_));
  // @@protoc_insertion_point(copy_constructor:CMsgPlaceDecalEvent)
}

void CMsgPlaceDecalEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_adjacent_) -
    reinterpret_cast<char*>(&position_)) + sizeof(is_adjacent_));
}

CMsgPlaceDecalEvent::~CMsgPlaceDecalEvent() {
  // @@protoc_insertion_point(destructor:CMsgPlaceDecalEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgPlaceDecalEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete normal_;
  if (this != internal_default_instance()) delete saxis_;
}

void CMsgPlaceDecalEvent::ArenaDtor(void* object) {
  CMsgPlaceDecalEvent* _this = reinterpret_cast< CMsgPlaceDecalEvent* >(object);
  (void)_this;
}
void CMsgPlaceDecalEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPlaceDecalEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPlaceDecalEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPlaceDecalEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(normal_ != nullptr);
      normal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(saxis_ != nullptr);
      saxis_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&decalmaterialindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&decalmaterialindex_)) + sizeof(height_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&depth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_adjacent_) -
        reinterpret_cast<char*>(&depth_)) + sizeof(is_adjacent_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPlaceDecalEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgVector position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgVector saxis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_saxis(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 decalmaterialindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_decalmaterialindex(&has_bits);
          decalmaterialindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional float width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float depth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_depth(&has_bits);
          depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 entityhandleindex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_entityhandleindex(&has_bits);
          entityhandleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 skeletoninstancehash = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_skeletoninstancehash(&has_bits);
          skeletoninstancehash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 boneindex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_boneindex(&has_bits);
          boneindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool translucenthit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_translucenthit(&has_bits);
          translucenthit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_adjacent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_is_adjacent(&has_bits);
          is_adjacent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgPlaceDecalEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPlaceDecalEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgVector position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional .CMsgVector normal = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::normal(this), target, stream);
  }

  // optional .CMsgVector saxis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::saxis(this), target, stream);
  }

  // optional uint32 decalmaterialindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_decalmaterialindex(), target);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_flags(), target);
  }

  // optional fixed32 color = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(6, this->_internal_color(), target);
  }

  // optional float width = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_width(), target);
  }

  // optional float height = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_height(), target);
  }

  // optional float depth = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_depth(), target);
  }

  // optional uint32 entityhandleindex = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_entityhandleindex(), target);
  }

  // optional fixed32 skeletoninstancehash = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(11, this->_internal_skeletoninstancehash(), target);
  }

  // optional int32 boneindex = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_boneindex(), target);
  }

  // optional bool translucenthit = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_translucenthit(), target);
  }

  // optional bool is_adjacent = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_is_adjacent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPlaceDecalEvent)
  return target;
}

size_t CMsgPlaceDecalEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPlaceDecalEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CMsgVector position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .CMsgVector normal = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *normal_);
    }

    // optional .CMsgVector saxis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *saxis_);
    }

    // optional uint32 decalmaterialindex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_decalmaterialindex());
    }

    // optional uint32 flags = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional fixed32 color = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float width = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float height = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional float depth = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 entityhandleindex = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entityhandleindex());
    }

    // optional fixed32 skeletoninstancehash = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional int32 boneindex = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_boneindex());
    }

    // optional bool translucenthit = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_adjacent = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPlaceDecalEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgPlaceDecalEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlaceDecalEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgPlaceDecalEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgPlaceDecalEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgPlaceDecalEvent)
    MergeFrom(*source);
  }
}

void CMsgPlaceDecalEvent::MergeFrom(const CMsgPlaceDecalEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPlaceDecalEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_position()->::CMsgVector::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_normal()->::CMsgVector::MergeFrom(from._internal_normal());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_saxis()->::CMsgVector::MergeFrom(from._internal_saxis());
    }
    if (cached_has_bits & 0x00000008u) {
      decalmaterialindex_ = from.decalmaterialindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      depth_ = from.depth_;
    }
    if (cached_has_bits & 0x00000200u) {
      entityhandleindex_ = from.entityhandleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      skeletoninstancehash_ = from.skeletoninstancehash_;
    }
    if (cached_has_bits & 0x00000800u) {
      boneindex_ = from.boneindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      translucenthit_ = from.translucenthit_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_adjacent_ = from.is_adjacent_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlaceDecalEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgPlaceDecalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlaceDecalEvent::CopyFrom(const CMsgPlaceDecalEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPlaceDecalEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlaceDecalEvent::IsInitialized() const {
  return true;
}

void CMsgPlaceDecalEvent::InternalSwap(CMsgPlaceDecalEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPlaceDecalEvent, is_adjacent_)
      + sizeof(CMsgPlaceDecalEvent::is_adjacent_)
      - PROTOBUF_FIELD_OFFSET(CMsgPlaceDecalEvent, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPlaceDecalEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearWorldDecalsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearWorldDecalsEvent>()._has_bits_);
  static void set_has_flagstoclear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearWorldDecalsEvent)
}
CMsgClearWorldDecalsEvent::CMsgClearWorldDecalsEvent(const CMsgClearWorldDecalsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flagstoclear_ = from.flagstoclear_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearWorldDecalsEvent)
}

void CMsgClearWorldDecalsEvent::SharedCtor() {
flagstoclear_ = 0u;
}

CMsgClearWorldDecalsEvent::~CMsgClearWorldDecalsEvent() {
  // @@protoc_insertion_point(destructor:CMsgClearWorldDecalsEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearWorldDecalsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearWorldDecalsEvent::ArenaDtor(void* object) {
  CMsgClearWorldDecalsEvent* _this = reinterpret_cast< CMsgClearWorldDecalsEvent* >(object);
  (void)_this;
}
void CMsgClearWorldDecalsEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearWorldDecalsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearWorldDecalsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearWorldDecalsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flagstoclear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearWorldDecalsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 flagstoclear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flagstoclear(&has_bits);
          flagstoclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearWorldDecalsEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearWorldDecalsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flagstoclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearWorldDecalsEvent)
  return target;
}

size_t CMsgClearWorldDecalsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearWorldDecalsEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flagstoclear = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flagstoclear());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearWorldDecalsEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearWorldDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearWorldDecalsEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearWorldDecalsEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearWorldDecalsEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearWorldDecalsEvent)
    MergeFrom(*source);
  }
}

void CMsgClearWorldDecalsEvent::MergeFrom(const CMsgClearWorldDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearWorldDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flagstoclear()) {
    _internal_set_flagstoclear(from._internal_flagstoclear());
  }
}

void CMsgClearWorldDecalsEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearWorldDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearWorldDecalsEvent::CopyFrom(const CMsgClearWorldDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearWorldDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearWorldDecalsEvent::IsInitialized() const {
  return true;
}

void CMsgClearWorldDecalsEvent::InternalSwap(CMsgClearWorldDecalsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flagstoclear_, other->flagstoclear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearWorldDecalsEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearEntityDecalsEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearEntityDecalsEvent>()._has_bits_);
  static void set_has_flagstoclear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearEntityDecalsEvent)
}
CMsgClearEntityDecalsEvent::CMsgClearEntityDecalsEvent(const CMsgClearEntityDecalsEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flagstoclear_ = from.flagstoclear_;
  // @@protoc_insertion_point(copy_constructor:CMsgClearEntityDecalsEvent)
}

void CMsgClearEntityDecalsEvent::SharedCtor() {
flagstoclear_ = 0u;
}

CMsgClearEntityDecalsEvent::~CMsgClearEntityDecalsEvent() {
  // @@protoc_insertion_point(destructor:CMsgClearEntityDecalsEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearEntityDecalsEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearEntityDecalsEvent::ArenaDtor(void* object) {
  CMsgClearEntityDecalsEvent* _this = reinterpret_cast< CMsgClearEntityDecalsEvent* >(object);
  (void)_this;
}
void CMsgClearEntityDecalsEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearEntityDecalsEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearEntityDecalsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearEntityDecalsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flagstoclear_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearEntityDecalsEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 flagstoclear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flagstoclear(&has_bits);
          flagstoclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearEntityDecalsEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearEntityDecalsEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flagstoclear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearEntityDecalsEvent)
  return target;
}

size_t CMsgClearEntityDecalsEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearEntityDecalsEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flagstoclear = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flagstoclear());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearEntityDecalsEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearEntityDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearEntityDecalsEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearEntityDecalsEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearEntityDecalsEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearEntityDecalsEvent)
    MergeFrom(*source);
  }
}

void CMsgClearEntityDecalsEvent::MergeFrom(const CMsgClearEntityDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearEntityDecalsEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_flagstoclear()) {
    _internal_set_flagstoclear(from._internal_flagstoclear());
  }
}

void CMsgClearEntityDecalsEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearEntityDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearEntityDecalsEvent::CopyFrom(const CMsgClearEntityDecalsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearEntityDecalsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearEntityDecalsEvent::IsInitialized() const {
  return true;
}

void CMsgClearEntityDecalsEvent::InternalSwap(CMsgClearEntityDecalsEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(flagstoclear_, other->flagstoclear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearEntityDecalsEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgClearDecalsForSkeletonInstanceEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgClearDecalsForSkeletonInstanceEvent>()._has_bits_);
  static void set_has_flagstoclear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entityhandleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_skeletoninstancehash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgClearDecalsForSkeletonInstanceEvent::CMsgClearDecalsForSkeletonInstanceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgClearDecalsForSkeletonInstanceEvent)
}
CMsgClearDecalsForSkeletonInstanceEvent::CMsgClearDecalsForSkeletonInstanceEvent(const CMsgClearDecalsForSkeletonInstanceEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&flagstoclear_, &from.flagstoclear_,
    static_cast<size_t>(reinterpret_cast<char*>(&skeletoninstancehash_) -
    reinterpret_cast<char*>(&flagstoclear_)) + sizeof(skeletoninstancehash_));
  // @@protoc_insertion_point(copy_constructor:CMsgClearDecalsForSkeletonInstanceEvent)
}

void CMsgClearDecalsForSkeletonInstanceEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&flagstoclear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skeletoninstancehash_) -
    reinterpret_cast<char*>(&flagstoclear_)) + sizeof(skeletoninstancehash_));
}

CMsgClearDecalsForSkeletonInstanceEvent::~CMsgClearDecalsForSkeletonInstanceEvent() {
  // @@protoc_insertion_point(destructor:CMsgClearDecalsForSkeletonInstanceEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgClearDecalsForSkeletonInstanceEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgClearDecalsForSkeletonInstanceEvent::ArenaDtor(void* object) {
  CMsgClearDecalsForSkeletonInstanceEvent* _this = reinterpret_cast< CMsgClearDecalsForSkeletonInstanceEvent* >(object);
  (void)_this;
}
void CMsgClearDecalsForSkeletonInstanceEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgClearDecalsForSkeletonInstanceEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgClearDecalsForSkeletonInstanceEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgClearDecalsForSkeletonInstanceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&flagstoclear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skeletoninstancehash_) -
        reinterpret_cast<char*>(&flagstoclear_)) + sizeof(skeletoninstancehash_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgClearDecalsForSkeletonInstanceEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 flagstoclear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flagstoclear(&has_bits);
          flagstoclear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 entityhandleindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_entityhandleindex(&has_bits);
          entityhandleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 skeletoninstancehash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_skeletoninstancehash(&has_bits);
          skeletoninstancehash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgClearDecalsForSkeletonInstanceEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgClearDecalsForSkeletonInstanceEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 flagstoclear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_flagstoclear(), target);
  }

  // optional uint32 entityhandleindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_entityhandleindex(), target);
  }

  // optional uint32 skeletoninstancehash = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_skeletoninstancehash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgClearDecalsForSkeletonInstanceEvent)
  return target;
}

size_t CMsgClearDecalsForSkeletonInstanceEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgClearDecalsForSkeletonInstanceEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 flagstoclear = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flagstoclear());
    }

    // optional uint32 entityhandleindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_entityhandleindex());
    }

    // optional uint32 skeletoninstancehash = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_skeletoninstancehash());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClearDecalsForSkeletonInstanceEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgClearDecalsForSkeletonInstanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearDecalsForSkeletonInstanceEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgClearDecalsForSkeletonInstanceEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgClearDecalsForSkeletonInstanceEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgClearDecalsForSkeletonInstanceEvent)
    MergeFrom(*source);
  }
}

void CMsgClearDecalsForSkeletonInstanceEvent::MergeFrom(const CMsgClearDecalsForSkeletonInstanceEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgClearDecalsForSkeletonInstanceEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      flagstoclear_ = from.flagstoclear_;
    }
    if (cached_has_bits & 0x00000002u) {
      entityhandleindex_ = from.entityhandleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      skeletoninstancehash_ = from.skeletoninstancehash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClearDecalsForSkeletonInstanceEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgClearDecalsForSkeletonInstanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearDecalsForSkeletonInstanceEvent::CopyFrom(const CMsgClearDecalsForSkeletonInstanceEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgClearDecalsForSkeletonInstanceEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearDecalsForSkeletonInstanceEvent::IsInitialized() const {
  return true;
}

void CMsgClearDecalsForSkeletonInstanceEvent::InternalSwap(CMsgClearDecalsForSkeletonInstanceEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, skeletoninstancehash_)
      + sizeof(CMsgClearDecalsForSkeletonInstanceEvent::skeletoninstancehash_)
      - PROTOBUF_FIELD_OFFSET(CMsgClearDecalsForSkeletonInstanceEvent, flagstoclear_)>(
          reinterpret_cast<char*>(&flagstoclear_),
          reinterpret_cast<char*>(&other->flagstoclear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgClearDecalsForSkeletonInstanceEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSource1LegacyGameEventList_key_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEventList_key_t>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEventList.key_t)
}
CMsgSource1LegacyGameEventList_key_t::CMsgSource1LegacyGameEventList_key_t(const CMsgSource1LegacyGameEventList_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEventList.key_t)
}

void CMsgSource1LegacyGameEventList_key_t::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

CMsgSource1LegacyGameEventList_key_t::~CMsgSource1LegacyGameEventList_key_t() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEventList.key_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSource1LegacyGameEventList_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEventList_key_t::ArenaDtor(void* object) {
  CMsgSource1LegacyGameEventList_key_t* _this = reinterpret_cast< CMsgSource1LegacyGameEventList_key_t* >(object);
  (void)_this;
}
void CMsgSource1LegacyGameEventList_key_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSource1LegacyGameEventList_key_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSource1LegacyGameEventList_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEventList.key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEventList_key_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSource1LegacyGameEventList.key_t.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSource1LegacyGameEventList_key_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEventList.key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEventList.key_t.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEventList.key_t)
  return target;
}

size_t CMsgSource1LegacyGameEventList_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEventList.key_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSource1LegacyGameEventList_key_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSource1LegacyGameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEventList_key_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSource1LegacyGameEventList_key_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSource1LegacyGameEventList.key_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSource1LegacyGameEventList.key_t)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEventList_key_t::MergeFrom(const CMsgSource1LegacyGameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEventList.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEventList_key_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSource1LegacyGameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEventList_key_t::CopyFrom(const CMsgSource1LegacyGameEventList_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEventList.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList_key_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList_key_t::InternalSwap(CMsgSource1LegacyGameEventList_key_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEventList_key_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSource1LegacyGameEventList_descriptor_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEventList_descriptor_t>()._has_bits_);
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEventList.descriptor_t)
}
CMsgSource1LegacyGameEventList_descriptor_t::CMsgSource1LegacyGameEventList_descriptor_t(const CMsgSource1LegacyGameEventList_descriptor_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEventList.descriptor_t)
}

void CMsgSource1LegacyGameEventList_descriptor_t::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eventid_ = 0;
}

CMsgSource1LegacyGameEventList_descriptor_t::~CMsgSource1LegacyGameEventList_descriptor_t() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEventList.descriptor_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSource1LegacyGameEventList_descriptor_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEventList_descriptor_t::ArenaDtor(void* object) {
  CMsgSource1LegacyGameEventList_descriptor_t* _this = reinterpret_cast< CMsgSource1LegacyGameEventList_descriptor_t* >(object);
  (void)_this;
}
void CMsgSource1LegacyGameEventList_descriptor_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSource1LegacyGameEventList_descriptor_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSource1LegacyGameEventList_descriptor_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEventList.descriptor_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEventList_descriptor_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 eventid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSource1LegacyGameEventList.descriptor_t.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSource1LegacyGameEventList.key_t keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSource1LegacyGameEventList_descriptor_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEventList.descriptor_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eventid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eventid(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEventList.descriptor_t.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .CMsgSource1LegacyGameEventList.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEventList.descriptor_t)
  return target;
}

size_t CMsgSource1LegacyGameEventList_descriptor_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEventList.descriptor_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEventList.key_t keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 eventid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eventid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSource1LegacyGameEventList_descriptor_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSource1LegacyGameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEventList_descriptor_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSource1LegacyGameEventList_descriptor_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSource1LegacyGameEventList.descriptor_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSource1LegacyGameEventList.descriptor_t)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEventList_descriptor_t::MergeFrom(const CMsgSource1LegacyGameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEventList.descriptor_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEventList_descriptor_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSource1LegacyGameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEventList_descriptor_t::CopyFrom(const CMsgSource1LegacyGameEventList_descriptor_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEventList.descriptor_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList_descriptor_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList_descriptor_t::InternalSwap(CMsgSource1LegacyGameEventList_descriptor_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEventList_descriptor_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSource1LegacyGameEventList::_Internal {
 public:
};

CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  descriptors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEventList)
}
CMsgSource1LegacyGameEventList::CMsgSource1LegacyGameEventList(const CMsgSource1LegacyGameEventList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      descriptors_(from.descriptors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEventList)
}

void CMsgSource1LegacyGameEventList::SharedCtor() {
}

CMsgSource1LegacyGameEventList::~CMsgSource1LegacyGameEventList() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEventList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSource1LegacyGameEventList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSource1LegacyGameEventList::ArenaDtor(void* object) {
  CMsgSource1LegacyGameEventList* _this = reinterpret_cast< CMsgSource1LegacyGameEventList* >(object);
  (void)_this;
}
void CMsgSource1LegacyGameEventList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSource1LegacyGameEventList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSource1LegacyGameEventList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEventList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  descriptors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEventList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSource1LegacyGameEventList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEventList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_descriptors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEventList)
  return target;
}

size_t CMsgSource1LegacyGameEventList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEventList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEventList.descriptor_t descriptors = 1;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSource1LegacyGameEventList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSource1LegacyGameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEventList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSource1LegacyGameEventList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSource1LegacyGameEventList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSource1LegacyGameEventList)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEventList::MergeFrom(const CMsgSource1LegacyGameEventList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEventList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  descriptors_.MergeFrom(from.descriptors_);
}

void CMsgSource1LegacyGameEventList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSource1LegacyGameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEventList::CopyFrom(const CMsgSource1LegacyGameEventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEventList::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEventList::InternalSwap(CMsgSource1LegacyGameEventList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  descriptors_.InternalSwap(&other->descriptors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEventList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSource1LegacyListenEvents::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyListenEvents>()._has_bits_);
  static void set_has_playerslot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  eventarraybits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyListenEvents)
}
CMsgSource1LegacyListenEvents::CMsgSource1LegacyListenEvents(const CMsgSource1LegacyListenEvents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      eventarraybits_(from.eventarraybits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  playerslot_ = from.playerslot_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyListenEvents)
}

void CMsgSource1LegacyListenEvents::SharedCtor() {
playerslot_ = 0;
}

CMsgSource1LegacyListenEvents::~CMsgSource1LegacyListenEvents() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyListenEvents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSource1LegacyListenEvents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSource1LegacyListenEvents::ArenaDtor(void* object) {
  CMsgSource1LegacyListenEvents* _this = reinterpret_cast< CMsgSource1LegacyListenEvents* >(object);
  (void)_this;
}
void CMsgSource1LegacyListenEvents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSource1LegacyListenEvents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSource1LegacyListenEvents::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyListenEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eventarraybits_.Clear();
  playerslot_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyListenEvents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 playerslot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_playerslot(&has_bits);
          playerslot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 eventarraybits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_eventarraybits(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_eventarraybits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSource1LegacyListenEvents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyListenEvents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 playerslot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_playerslot(), target);
  }

  // repeated uint32 eventarraybits = 2;
  for (int i = 0, n = this->_internal_eventarraybits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_eventarraybits(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyListenEvents)
  return target;
}

size_t CMsgSource1LegacyListenEvents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyListenEvents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 eventarraybits = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->eventarraybits_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_eventarraybits_size());
    total_size += data_size;
  }

  // optional int32 playerslot = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_playerslot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSource1LegacyListenEvents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSource1LegacyListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyListenEvents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSource1LegacyListenEvents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSource1LegacyListenEvents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSource1LegacyListenEvents)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyListenEvents::MergeFrom(const CMsgSource1LegacyListenEvents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyListenEvents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eventarraybits_.MergeFrom(from.eventarraybits_);
  if (from._internal_has_playerslot()) {
    _internal_set_playerslot(from._internal_playerslot());
  }
}

void CMsgSource1LegacyListenEvents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSource1LegacyListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyListenEvents::CopyFrom(const CMsgSource1LegacyListenEvents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyListenEvents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyListenEvents::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyListenEvents::InternalSwap(CMsgSource1LegacyListenEvents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  eventarraybits_.InternalSwap(&other->eventarraybits_);
  swap(playerslot_, other->playerslot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyListenEvents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSource1LegacyGameEvent_key_t::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEvent_key_t>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val_long(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_val_short(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_val_byte(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_val_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_val_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEvent.key_t)
}
CMsgSource1LegacyGameEvent_key_t::CMsgSource1LegacyGameEvent_key_t(const CMsgSource1LegacyGameEvent_key_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val_string()) {
    val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val_string(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEvent.key_t)
}

void CMsgSource1LegacyGameEvent_key_t::SharedCtor() {
val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&val_uint64_) -
    reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
}

CMsgSource1LegacyGameEvent_key_t::~CMsgSource1LegacyGameEvent_key_t() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEvent.key_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSource1LegacyGameEvent_key_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  val_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEvent_key_t::ArenaDtor(void* object) {
  CMsgSource1LegacyGameEvent_key_t* _this = reinterpret_cast< CMsgSource1LegacyGameEvent_key_t* >(object);
  (void)_this;
}
void CMsgSource1LegacyGameEvent_key_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSource1LegacyGameEvent_key_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSource1LegacyGameEvent_key_t::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEvent.key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&val_uint64_) -
        reinterpret_cast<char*>(&type_)) + sizeof(val_uint64_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEvent_key_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string val_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSource1LegacyGameEvent.key_t.val_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float val_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_val_float(&has_bits);
          val_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 val_long = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_val_long(&has_bits);
          val_long_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val_short = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_val_short(&has_bits);
          val_short_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 val_byte = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_val_byte(&has_bits);
          val_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool val_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_val_bool(&has_bits);
          val_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 val_uint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_val_uint64(&has_bits);
          val_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSource1LegacyGameEvent_key_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEvent.key_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional string val_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEvent.key_t.val_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val_string(), target);
  }

  // optional float val_float = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_val_float(), target);
  }

  // optional int32 val_long = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_val_long(), target);
  }

  // optional int32 val_short = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_val_short(), target);
  }

  // optional int32 val_byte = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_val_byte(), target);
  }

  // optional bool val_bool = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_val_bool(), target);
  }

  // optional uint64 val_uint64 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_val_uint64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEvent.key_t)
  return target;
}

size_t CMsgSource1LegacyGameEvent_key_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEvent.key_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string val_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_val_string());
    }

    // optional int32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional float val_float = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 val_long = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_long());
    }

    // optional int32 val_short = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_short());
    }

    // optional int32 val_byte = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_byte());
    }

    // optional bool val_bool = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint64 val_uint64 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_val_uint64());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSource1LegacyGameEvent_key_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSource1LegacyGameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEvent_key_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSource1LegacyGameEvent_key_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSource1LegacyGameEvent.key_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSource1LegacyGameEvent.key_t)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEvent_key_t::MergeFrom(const CMsgSource1LegacyGameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEvent.key_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val_string(from._internal_val_string());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_float_ = from.val_float_;
    }
    if (cached_has_bits & 0x00000008u) {
      val_long_ = from.val_long_;
    }
    if (cached_has_bits & 0x00000010u) {
      val_short_ = from.val_short_;
    }
    if (cached_has_bits & 0x00000020u) {
      val_byte_ = from.val_byte_;
    }
    if (cached_has_bits & 0x00000040u) {
      val_bool_ = from.val_bool_;
    }
    if (cached_has_bits & 0x00000080u) {
      val_uint64_ = from.val_uint64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEvent_key_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSource1LegacyGameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEvent_key_t::CopyFrom(const CMsgSource1LegacyGameEvent_key_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEvent.key_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEvent_key_t::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEvent_key_t::InternalSwap(CMsgSource1LegacyGameEvent_key_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_string_.Swap(&other->val_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, val_uint64_)
      + sizeof(CMsgSource1LegacyGameEvent_key_t::val_uint64_)
      - PROTOBUF_FIELD_OFFSET(CMsgSource1LegacyGameEvent_key_t, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEvent_key_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSource1LegacyGameEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSource1LegacyGameEvent>()._has_bits_);
  static void set_has_event_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eventid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSource1LegacyGameEvent)
}
CMsgSource1LegacyGameEvent::CMsgSource1LegacyGameEvent(const CMsgSource1LegacyGameEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_name()) {
    event_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_name(), 
      GetArena());
  }
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSource1LegacyGameEvent)
}

void CMsgSource1LegacyGameEvent::SharedCtor() {
event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
eventid_ = 0;
}

CMsgSource1LegacyGameEvent::~CMsgSource1LegacyGameEvent() {
  // @@protoc_insertion_point(destructor:CMsgSource1LegacyGameEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSource1LegacyGameEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSource1LegacyGameEvent::ArenaDtor(void* object) {
  CMsgSource1LegacyGameEvent* _this = reinterpret_cast< CMsgSource1LegacyGameEvent* >(object);
  (void)_this;
}
void CMsgSource1LegacyGameEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSource1LegacyGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSource1LegacyGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSource1LegacyGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    event_name_.ClearNonDefaultToEmpty();
  }
  eventid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSource1LegacyGameEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgSource1LegacyGameEvent.event_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 eventid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_eventid(&has_bits);
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgSource1LegacyGameEvent.key_t keys = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSource1LegacyGameEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSource1LegacyGameEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSource1LegacyGameEvent.event_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_event_name(), target);
  }

  // optional int32 eventid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // repeated .CMsgSource1LegacyGameEvent.key_t keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSource1LegacyGameEvent)
  return target;
}

size_t CMsgSource1LegacyGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSource1LegacyGameEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgSource1LegacyGameEvent.key_t keys = 3;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_event_name());
    }

    // optional int32 eventid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_eventid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSource1LegacyGameEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSource1LegacyGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSource1LegacyGameEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSource1LegacyGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSource1LegacyGameEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSource1LegacyGameEvent)
    MergeFrom(*source);
  }
}

void CMsgSource1LegacyGameEvent::MergeFrom(const CMsgSource1LegacyGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSource1LegacyGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_name(from._internal_event_name());
    }
    if (cached_has_bits & 0x00000002u) {
      eventid_ = from.eventid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSource1LegacyGameEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSource1LegacyGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSource1LegacyGameEvent::CopyFrom(const CMsgSource1LegacyGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSource1LegacyGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSource1LegacyGameEvent::IsInitialized() const {
  return true;
}

void CMsgSource1LegacyGameEvent::InternalSwap(CMsgSource1LegacyGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  keys_.InternalSwap(&other->keys_);
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSource1LegacyGameEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSosStartSoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosStartSoundEvent>()._has_bits_);
  static void set_has_soundevent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_soundevent_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packed_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSosStartSoundEvent)
}
CMsgSosStartSoundEvent::CMsgSosStartSoundEvent(const CMsgSosStartSoundEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packed_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_packed_params()) {
    packed_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packed_params(), 
      GetArena());
  }
  ::memcpy(&soundevent_guid_, &from.soundevent_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&soundevent_guid_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgSosStartSoundEvent)
}

void CMsgSosStartSoundEvent::SharedCtor() {
packed_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soundevent_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&soundevent_guid_)) + sizeof(start_time_));
}

CMsgSosStartSoundEvent::~CMsgSosStartSoundEvent() {
  // @@protoc_insertion_point(destructor:CMsgSosStartSoundEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSosStartSoundEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packed_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSosStartSoundEvent::ArenaDtor(void* object) {
  CMsgSosStartSoundEvent* _this = reinterpret_cast< CMsgSosStartSoundEvent* >(object);
  (void)_this;
}
void CMsgSosStartSoundEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSosStartSoundEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSosStartSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosStartSoundEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    packed_params_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&soundevent_guid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&soundevent_guid_)) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosStartSoundEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 soundevent_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_soundevent_guid(&has_bits);
          soundevent_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 soundevent_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_soundevent_hash(&has_bits);
          soundevent_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 source_entity_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_entity_index(&has_bits);
          source_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 seed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_seed(&has_bits);
          seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes packed_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_packed_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSosStartSoundEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosStartSoundEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_soundevent_guid(), target);
  }

  // optional fixed32 soundevent_hash = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(2, this->_internal_soundevent_hash(), target);
  }

  // optional int32 source_entity_index = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_source_entity_index(), target);
  }

  // optional int32 seed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_seed(), target);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_packed_params(), target);
  }

  // optional float start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_start_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosStartSoundEvent)
  return target;
}

size_t CMsgSosStartSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosStartSoundEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes packed_params = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_packed_params());
    }

    // optional int32 soundevent_guid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_soundevent_guid());
    }

    // optional fixed32 soundevent_hash = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 source_entity_index = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_entity_index());
    }

    // optional int32 seed = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_seed());
    }

    // optional float start_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSosStartSoundEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSosStartSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosStartSoundEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSosStartSoundEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSosStartSoundEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSosStartSoundEvent)
    MergeFrom(*source);
  }
}

void CMsgSosStartSoundEvent::MergeFrom(const CMsgSosStartSoundEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosStartSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_packed_params(from._internal_packed_params());
    }
    if (cached_has_bits & 0x00000002u) {
      soundevent_guid_ = from.soundevent_guid_;
    }
    if (cached_has_bits & 0x00000004u) {
      soundevent_hash_ = from.soundevent_hash_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_entity_index_ = from.source_entity_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      seed_ = from.seed_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosStartSoundEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSosStartSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosStartSoundEvent::CopyFrom(const CMsgSosStartSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosStartSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStartSoundEvent::IsInitialized() const {
  return true;
}

void CMsgSosStartSoundEvent::InternalSwap(CMsgSosStartSoundEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_params_.Swap(&other->packed_params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSosStartSoundEvent, start_time_)
      + sizeof(CMsgSosStartSoundEvent::start_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSosStartSoundEvent, soundevent_guid_)>(
          reinterpret_cast<char*>(&soundevent_guid_),
          reinterpret_cast<char*>(&other->soundevent_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosStartSoundEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSosStopSoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosStopSoundEvent>()._has_bits_);
  static void set_has_soundevent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSosStopSoundEvent)
}
CMsgSosStopSoundEvent::CMsgSosStopSoundEvent(const CMsgSosStopSoundEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  soundevent_guid_ = from.soundevent_guid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSosStopSoundEvent)
}

void CMsgSosStopSoundEvent::SharedCtor() {
soundevent_guid_ = 0;
}

CMsgSosStopSoundEvent::~CMsgSosStopSoundEvent() {
  // @@protoc_insertion_point(destructor:CMsgSosStopSoundEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSosStopSoundEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSosStopSoundEvent::ArenaDtor(void* object) {
  CMsgSosStopSoundEvent* _this = reinterpret_cast< CMsgSosStopSoundEvent* >(object);
  (void)_this;
}
void CMsgSosStopSoundEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSosStopSoundEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSosStopSoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosStopSoundEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  soundevent_guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosStopSoundEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 soundevent_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_soundevent_guid(&has_bits);
          soundevent_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSosStopSoundEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosStopSoundEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_soundevent_guid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosStopSoundEvent)
  return target;
}

size_t CMsgSosStopSoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosStopSoundEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 soundevent_guid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_soundevent_guid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSosStopSoundEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSosStopSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosStopSoundEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSosStopSoundEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSosStopSoundEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSosStopSoundEvent)
    MergeFrom(*source);
  }
}

void CMsgSosStopSoundEvent::MergeFrom(const CMsgSosStopSoundEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosStopSoundEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_soundevent_guid()) {
    _internal_set_soundevent_guid(from._internal_soundevent_guid());
  }
}

void CMsgSosStopSoundEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSosStopSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosStopSoundEvent::CopyFrom(const CMsgSosStopSoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosStopSoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStopSoundEvent::IsInitialized() const {
  return true;
}

void CMsgSosStopSoundEvent::InternalSwap(CMsgSosStopSoundEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(soundevent_guid_, other->soundevent_guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosStopSoundEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSosStopSoundEventHash::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosStopSoundEventHash>()._has_bits_);
  static void set_has_soundevent_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source_entity_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSosStopSoundEventHash)
}
CMsgSosStopSoundEventHash::CMsgSosStopSoundEventHash(const CMsgSosStopSoundEventHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&soundevent_hash_, &from.soundevent_hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_entity_index_) -
    reinterpret_cast<char*>(&soundevent_hash_)) + sizeof(source_entity_index_));
  // @@protoc_insertion_point(copy_constructor:CMsgSosStopSoundEventHash)
}

void CMsgSosStopSoundEventHash::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&soundevent_hash_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_entity_index_) -
    reinterpret_cast<char*>(&soundevent_hash_)) + sizeof(source_entity_index_));
}

CMsgSosStopSoundEventHash::~CMsgSosStopSoundEventHash() {
  // @@protoc_insertion_point(destructor:CMsgSosStopSoundEventHash)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSosStopSoundEventHash::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgSosStopSoundEventHash::ArenaDtor(void* object) {
  CMsgSosStopSoundEventHash* _this = reinterpret_cast< CMsgSosStopSoundEventHash* >(object);
  (void)_this;
}
void CMsgSosStopSoundEventHash::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSosStopSoundEventHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSosStopSoundEventHash::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosStopSoundEventHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&soundevent_hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_entity_index_) -
        reinterpret_cast<char*>(&soundevent_hash_)) + sizeof(source_entity_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosStopSoundEventHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 soundevent_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_soundevent_hash(&has_bits);
          soundevent_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional int32 source_entity_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_source_entity_index(&has_bits);
          source_entity_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSosStopSoundEventHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosStopSoundEventHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 soundevent_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_soundevent_hash(), target);
  }

  // optional int32 source_entity_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_entity_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosStopSoundEventHash)
  return target;
}

size_t CMsgSosStopSoundEventHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosStopSoundEventHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed32 soundevent_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 source_entity_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source_entity_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSosStopSoundEventHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSosStopSoundEventHash)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosStopSoundEventHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSosStopSoundEventHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSosStopSoundEventHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSosStopSoundEventHash)
    MergeFrom(*source);
  }
}

void CMsgSosStopSoundEventHash::MergeFrom(const CMsgSosStopSoundEventHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosStopSoundEventHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      soundevent_hash_ = from.soundevent_hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_entity_index_ = from.source_entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosStopSoundEventHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSosStopSoundEventHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosStopSoundEventHash::CopyFrom(const CMsgSosStopSoundEventHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosStopSoundEventHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosStopSoundEventHash::IsInitialized() const {
  return true;
}

void CMsgSosStopSoundEventHash::InternalSwap(CMsgSosStopSoundEventHash* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSosStopSoundEventHash, source_entity_index_)
      + sizeof(CMsgSosStopSoundEventHash::source_entity_index_)
      - PROTOBUF_FIELD_OFFSET(CMsgSosStopSoundEventHash, soundevent_hash_)>(
          reinterpret_cast<char*>(&soundevent_hash_),
          reinterpret_cast<char*>(&other->soundevent_hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosStopSoundEventHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSosSetSoundEventParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosSetSoundEventParams>()._has_bits_);
  static void set_has_soundevent_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packed_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSosSetSoundEventParams)
}
CMsgSosSetSoundEventParams::CMsgSosSetSoundEventParams(const CMsgSosSetSoundEventParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packed_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_packed_params()) {
    packed_params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packed_params(), 
      GetArena());
  }
  soundevent_guid_ = from.soundevent_guid_;
  // @@protoc_insertion_point(copy_constructor:CMsgSosSetSoundEventParams)
}

void CMsgSosSetSoundEventParams::SharedCtor() {
packed_params_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
soundevent_guid_ = 0;
}

CMsgSosSetSoundEventParams::~CMsgSosSetSoundEventParams() {
  // @@protoc_insertion_point(destructor:CMsgSosSetSoundEventParams)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSosSetSoundEventParams::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packed_params_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSosSetSoundEventParams::ArenaDtor(void* object) {
  CMsgSosSetSoundEventParams* _this = reinterpret_cast< CMsgSosSetSoundEventParams* >(object);
  (void)_this;
}
void CMsgSosSetSoundEventParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSosSetSoundEventParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSosSetSoundEventParams::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosSetSoundEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    packed_params_.ClearNonDefaultToEmpty();
  }
  soundevent_guid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosSetSoundEventParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 soundevent_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_soundevent_guid(&has_bits);
          soundevent_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes packed_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_packed_params();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSosSetSoundEventParams::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosSetSoundEventParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 soundevent_guid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_soundevent_guid(), target);
  }

  // optional bytes packed_params = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_packed_params(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosSetSoundEventParams)
  return target;
}

size_t CMsgSosSetSoundEventParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosSetSoundEventParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes packed_params = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_packed_params());
    }

    // optional int32 soundevent_guid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_soundevent_guid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSosSetSoundEventParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSosSetSoundEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosSetSoundEventParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSosSetSoundEventParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSosSetSoundEventParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSosSetSoundEventParams)
    MergeFrom(*source);
  }
}

void CMsgSosSetSoundEventParams::MergeFrom(const CMsgSosSetSoundEventParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosSetSoundEventParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_packed_params(from._internal_packed_params());
    }
    if (cached_has_bits & 0x00000002u) {
      soundevent_guid_ = from.soundevent_guid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosSetSoundEventParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSosSetSoundEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosSetSoundEventParams::CopyFrom(const CMsgSosSetSoundEventParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosSetSoundEventParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosSetSoundEventParams::IsInitialized() const {
  return true;
}

void CMsgSosSetSoundEventParams::InternalSwap(CMsgSosSetSoundEventParams* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_params_.Swap(&other->packed_params_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(soundevent_guid_, other->soundevent_guid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosSetSoundEventParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgSosSetLibraryStackFields::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgSosSetLibraryStackFields>()._has_bits_);
  static void set_has_stack_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_packed_fields(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSosSetLibraryStackFields)
}
CMsgSosSetLibraryStackFields::CMsgSosSetLibraryStackFields(const CMsgSosSetLibraryStackFields& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  packed_fields_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_packed_fields()) {
    packed_fields_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_packed_fields(), 
      GetArena());
  }
  stack_hash_ = from.stack_hash_;
  // @@protoc_insertion_point(copy_constructor:CMsgSosSetLibraryStackFields)
}

void CMsgSosSetLibraryStackFields::SharedCtor() {
packed_fields_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
stack_hash_ = 0u;
}

CMsgSosSetLibraryStackFields::~CMsgSosSetLibraryStackFields() {
  // @@protoc_insertion_point(destructor:CMsgSosSetLibraryStackFields)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgSosSetLibraryStackFields::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  packed_fields_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSosSetLibraryStackFields::ArenaDtor(void* object) {
  CMsgSosSetLibraryStackFields* _this = reinterpret_cast< CMsgSosSetLibraryStackFields* >(object);
  (void)_this;
}
void CMsgSosSetLibraryStackFields::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgSosSetLibraryStackFields::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgSosSetLibraryStackFields::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSosSetLibraryStackFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    packed_fields_.ClearNonDefaultToEmpty();
  }
  stack_hash_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgSosSetLibraryStackFields::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed32 stack_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_stack_hash(&has_bits);
          stack_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional bytes packed_fields = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_packed_fields();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSosSetLibraryStackFields::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSosSetLibraryStackFields)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 stack_hash = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_stack_hash(), target);
  }

  // optional bytes packed_fields = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_packed_fields(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSosSetLibraryStackFields)
  return target;
}

size_t CMsgSosSetLibraryStackFields::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSosSetLibraryStackFields)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes packed_fields = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_packed_fields());
    }

    // optional fixed32 stack_hash = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSosSetLibraryStackFields::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSosSetLibraryStackFields)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSosSetLibraryStackFields* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSosSetLibraryStackFields>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSosSetLibraryStackFields)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSosSetLibraryStackFields)
    MergeFrom(*source);
  }
}

void CMsgSosSetLibraryStackFields::MergeFrom(const CMsgSosSetLibraryStackFields& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSosSetLibraryStackFields)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_packed_fields(from._internal_packed_fields());
    }
    if (cached_has_bits & 0x00000002u) {
      stack_hash_ = from.stack_hash_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSosSetLibraryStackFields::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSosSetLibraryStackFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSosSetLibraryStackFields::CopyFrom(const CMsgSosSetLibraryStackFields& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSosSetLibraryStackFields)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSosSetLibraryStackFields::IsInitialized() const {
  return true;
}

void CMsgSosSetLibraryStackFields::InternalSwap(CMsgSosSetLibraryStackFields* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_fields_.Swap(&other->packed_fields_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stack_hash_, other->stack_hash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSosSetLibraryStackFields::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgVDebugGameSessionIDEvent* Arena::CreateMaybeMessage< ::CMsgVDebugGameSessionIDEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgVDebugGameSessionIDEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPlaceDecalEvent* Arena::CreateMaybeMessage< ::CMsgPlaceDecalEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPlaceDecalEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearWorldDecalsEvent* Arena::CreateMaybeMessage< ::CMsgClearWorldDecalsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearWorldDecalsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearEntityDecalsEvent* Arena::CreateMaybeMessage< ::CMsgClearEntityDecalsEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearEntityDecalsEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgClearDecalsForSkeletonInstanceEvent* Arena::CreateMaybeMessage< ::CMsgClearDecalsForSkeletonInstanceEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgClearDecalsForSkeletonInstanceEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEventList_key_t* Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEventList_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEventList_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEventList_descriptor_t* Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEventList_descriptor_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEventList_descriptor_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEventList* Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEventList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEventList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyListenEvents* Arena::CreateMaybeMessage< ::CMsgSource1LegacyListenEvents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyListenEvents >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEvent_key_t* Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEvent_key_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEvent_key_t >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSource1LegacyGameEvent* Arena::CreateMaybeMessage< ::CMsgSource1LegacyGameEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSource1LegacyGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosStartSoundEvent* Arena::CreateMaybeMessage< ::CMsgSosStartSoundEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosStartSoundEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosStopSoundEvent* Arena::CreateMaybeMessage< ::CMsgSosStopSoundEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosStopSoundEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosStopSoundEventHash* Arena::CreateMaybeMessage< ::CMsgSosStopSoundEventHash >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosStopSoundEventHash >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosSetSoundEventParams* Arena::CreateMaybeMessage< ::CMsgSosSetSoundEventParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosSetSoundEventParams >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSosSetLibraryStackFields* Arena::CreateMaybeMessage< ::CMsgSosSetLibraryStackFields >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgSosSetLibraryStackFields >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
