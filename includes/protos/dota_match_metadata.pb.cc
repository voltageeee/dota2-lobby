// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#include "dota_match_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : private_metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , version_(0){}
struct CDOTAMatchMetadataFileDefaultTypeInternal {
  constexpr CDOTAMatchMetadataFileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadataFileDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadataFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadataFileDefaultTypeInternal _CDOTAMatchMetadataFile_default_instance_;
constexpr CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : victim_slot_(0u)
  , count_(0u){}
struct CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_PlayerKill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
constexpr CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(0u)
  , purchase_time_(0){}
struct CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ItemPurchase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
constexpr CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_()
  , game_time_(0)
  , kills_(0u)
  , deaths_(0u)
  , assists_(0u)
  , level_(0u){}
struct CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_InventorySnapshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
constexpr CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_token_(0u)
  , value_(0){}
struct CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_AutoStyleCriteria _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
constexpr CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_eater_type_(0u)
  , gem_item_def_index_(0u)
  , required_hero_id_(0u)
  , starting_value_(0u)
  , ending_value_(0u)
  , owner_item_def_index_(0u)
  , owner_item_id_(PROTOBUF_ULONGLONG(0)){}
struct CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_StrangeGemProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_StrangeGemProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_;
constexpr CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_id_(PROTOBUF_ULONGLONG(0))
  , item_def_index_(0u)
  , starting_value_(0u)
  , is_victory_(false){}
struct CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_VictoryPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_VictoryPredictionDefaultTypeInternal _CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_;
constexpr CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slot_id_(0u)
  , start_value_(0u)
  , end_value_(0u)
  , completed_(false){}
struct CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_SubChallenge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_SubChallengeDefaultTypeInternal _CDOTAMatchMetadata_Team_SubChallenge_default_instance_;
constexpr CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_path_id_(0u)
  , claimed_room_id_(0u){}
struct CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_CavernChallengeResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_CavernChallengeResultDefaultTypeInternal _CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_;
constexpr CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_id_(0u)
  , quantity_(0u)
  , audit_(0u)
  , requires_win_(false)
  , audit_data_(PROTOBUF_ULONGLONG(0)){}
struct CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_ActionGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_ActionGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_ActionGrant_default_instance_;
constexpr CDOTAMatchMetadata_Team_CandyGrant::CDOTAMatchMetadata_Team_CandyGrant(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_(0u)
  , reason_(0u){}
struct CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_CandyGrant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_CandyGrantDefaultTypeInternal _CDOTAMatchMetadata_Team_CandyGrant_default_instance_;
constexpr CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sub_challenges_with_progress_()
  , cavern_challenge_map_results_()
  , actions_granted_()
  , candy_points_granted_()
  , event_id_(0u)
  , event_points_(0u)
  , challenge_instance_id_(0u)
  , challenge_quest_id_(0u)
  , challenge_quest_challenge_id_(0u)
  , challenge_rank_completed_(0u)
  , challenge_rank_previously_completed_(0u)
  , wager_winnings_(0u)
  , cavern_challenge_winnings_(0u)
  , challenge_completed_(false)
  , event_owned_(false)
  , cavern_challenge_active_(false)
  , cavern_crawl_half_credit_(false)
  , amount_wagered_(0u)
  , periodic_point_adjustments_(0u)
  , cavern_challenge_plus_shard_winnings_(0u)
  , cavern_crawl_map_variant_(0u)
  , team_wager_bonus_pct_(0u)
  , wager_streak_pct_(0u)
  , active_season_id_(0u){}
struct CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_EventData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_EventDataDefaultTypeInternal _CDOTAMatchMetadata_Team_EventData_default_instance_;
constexpr CDOTAMatchMetadata_Team_GauntletProgress::CDOTAMatchMetadata_Team_GauntletProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gauntlet_tier_(0u)
  , gauntlet_wins_(0u)
  , gauntlet_losses_(0u){}
struct CDOTAMatchMetadata_Team_GauntletProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_GauntletProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_GauntletProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_GauntletProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_GauntletProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_GauntletProgress_default_instance_;
constexpr CDOTAMatchMetadata_Team_Player_ContractProgress::CDOTAMatchMetadata_Team_Player_ContractProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guild_id_(0u)
  , event_id_(0u)
  , challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , contract_stars_(0u)
  , contract_slot_(0u)
  , completed_(false){}
struct CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_Player_ContractProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_Player_ContractProgressDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_ContractProgress_default_instance_;
constexpr CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_upgrades_()
  , equipped_econ_items_()
  , kills_()
  , items_()
  , level_up_times_()
  , graph_net_worth_()
  , inventory_snapshot_()
  , auto_style_criteria_()
  , event_data_()
  , strange_gem_progress_()
  , victory_prediction_()
  , contract_progress_()
  , guild_ids_()
  , gauntlet_progress_(nullptr)
  , account_id_(0u)
  , player_slot_(0u)
  , avg_kills_x16_(0u)
  , avg_deaths_x16_(0u)
  , avg_assists_x16_(0u)
  , avg_gpm_x16_(0u)
  , avg_xpm_x16_(0u)
  , best_kills_x16_(0u)
  , best_assists_x16_(0u)
  , best_gpm_x16_(0u)
  , best_xpm_x16_(0u)
  , win_streak_(0u)
  , best_win_streak_(0u)
  , fight_score_(0)
  , farm_score_(0)
  , support_score_(0)
  , push_score_(0)
  , avg_stats_calibrated_(false)
  , hero_xp_(0u)
  , camps_stacked_(0u)
  , lane_selection_flags_(0u)
  , rampages_(0u)
  , triple_kills_(0u)
  , aegis_snatched_(0u)
  , rapiers_purchased_(0u)
  , couriers_killed_(0u)
  , net_worth_rank_(0u)
  , support_gold_spent_(0u)
  , observer_wards_placed_(0u)
  , sentry_wards_placed_(0u)
  , wards_dewarded_(0u)
  , stun_duration_(0)
  , rank_mmr_boost_type_(0)
{}
struct CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchMetadata_Team_Player_default_instance_;
constexpr CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , graph_experience_()
  , graph_gold_earned_()
  , graph_net_worth_()
  , cm_bans_()
  , cm_picks_()
  , dota_team_(0u)
  , cm_first_pick_(false)
  , cm_captain_player_id_(0u)
  , cm_penalty_(0u){}
struct CDOTAMatchMetadata_TeamDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_TeamDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_TeamDefaultTypeInternal _CDOTAMatchMetadata_Team_default_instance_;
constexpr CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_id_(0u)
  , progress_(0u){}
struct CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgressDefaultTypeInternal _CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress_default_instance_;
constexpr CDOTAMatchMetadata_GuildChallengeProgress::CDOTAMatchMetadata_GuildChallengeProgress(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : individual_progress_()
  , guild_id_(0u)
  , event_id_(0)

  , challenge_instance_id_(0u)
  , challenge_parameter_(0u)
  , challenge_timestamp_(0u)
  , challenge_progress_at_start_(0u)
  , challenge_progress_accumulated_(0u){}
struct CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal {
  constexpr CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata_GuildChallengeProgress _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadata_GuildChallengeProgressDefaultTypeInternal _CDOTAMatchMetadata_GuildChallengeProgress_default_instance_;
constexpr CDOTAMatchMetadata::CDOTAMatchMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , item_rewards_()
  , match_tips_()
  , guild_challenge_progress_()
  , event_game_custom_table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , matchmaking_stats_(nullptr)
  , mvp_data_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0))
  , report_until_time_(PROTOBUF_ULONGLONG(0))
  , primary_event_id_(0u){}
struct CDOTAMatchMetadataDefaultTypeInternal {
  constexpr CDOTAMatchMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchMetadataDefaultTypeInternal() {}
  union {
    CDOTAMatchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchMetadataDefaultTypeInternal _CDOTAMatchMetadata_default_instance_;
constexpr CDOTAMatchPrivateMetadata_StringName::CDOTAMatchPrivateMetadata_StringName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0u){}
struct CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_StringName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_StringNameDefaultTypeInternal _CDOTAMatchPrivateMetadata_StringName_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , damage_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : by_hero_targets_()
  , ability_id_(0u)
  , source_unit_index_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , healing_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : by_hero_targets_()
  , ability_id_(0u)
  , source_unit_index_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbilityDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : damage_by_ability_()
  , healing_by_ability_()
  , game_time_(0){}
struct CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_CombatSegment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_CombatSegmentDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_id_(0u)
  , elapsed_duration_(0)
  , is_hidden_(false){}
struct CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTargetDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : by_hero_targets_()
  , buff_modifier_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , buff_ability_id_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_BuffRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_BuffRecordDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creep_(0u)
  , heroes_(0u)
  , bounty_runes_(0u)
  , passive_(0u)
  , buildings_(0u)
  , abilities_(0u)
  , wards_(0u)
  , other_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_GoldReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_GoldReceivedDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : creep_(0u)
  , heroes_(0u)
  , roshan_(0u)
  , tome_of_knowledge_(0u)
  , outpost_(0u)
  , other_(0u){}
struct CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player_XPReceived _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_Player_XPReceivedDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : combat_segments_()
  , damage_unit_names_()
  , buff_records_()
  , graph_kills_()
  , graph_deaths_()
  , graph_assists_()
  , graph_lasthits_()
  , graph_denies_()
  , position_stream_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gold_received_(nullptr)
  , xp_received_(nullptr)
  , account_id_(0u)
  , player_slot_(0u){}
struct CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_quant_x_(0u)
  , position_quant_y_(0u)
  , death_time_(0){}
struct CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team_Building _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
constexpr CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , buildings_()
  , dota_team_(0u){}
struct CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal _CDOTAMatchPrivateMetadata_Team_default_instance_;
constexpr CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , graph_win_probability_()
  , string_names_(){}
struct CDOTAMatchPrivateMetadataDefaultTypeInternal {
  constexpr CDOTAMatchPrivateMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CDOTAMatchPrivateMetadataDefaultTypeInternal() {}
  union {
    CDOTAMatchPrivateMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CDOTAMatchPrivateMetadataDefaultTypeInternal _CDOTAMatchPrivateMetadata_default_instance_;
constexpr CMsgDOTADPCMatch::CMsgDOTADPCMatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_(nullptr)
  , metadata_(nullptr){}
struct CMsgDOTADPCMatchDefaultTypeInternal {
  constexpr CMsgDOTADPCMatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDOTADPCMatchDefaultTypeInternal() {}
  union {
    CMsgDOTADPCMatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDOTADPCMatchDefaultTypeInternal _CMsgDOTADPCMatch_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fmatch_5fmetadata_2eproto[34];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dota_5fmatch_5fmetadata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fmatch_5fmetadata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fmatch_5fmetadata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, version_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, match_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, metadata_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadataFile, private_metadata_),
  3,
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, victim_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_PlayerKill, count_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, assists_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_InventorySnapshot, level_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_AutoStyleCriteria, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, gem_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, required_hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, ending_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, item_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, starting_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, slot_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, start_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, end_value_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_SubChallenge, completed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, completed_path_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CavernChallengeResult, claimed_room_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, action_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, quantity_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, audit_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, requires_win_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_ActionGrant, audit_data_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_CandyGrant, reason_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_points_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_quest_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_quest_challenge_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_rank_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, challenge_rank_previously_completed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, event_owned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, sub_challenges_with_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, wager_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_active_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, amount_wagered_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, periodic_point_adjustments_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_map_results_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_challenge_plus_shard_winnings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, actions_granted_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_crawl_map_variant_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, team_wager_bonus_pct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, wager_streak_pct_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, candy_points_granted_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, active_season_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_EventData, cavern_crawl_half_credit_),
  0,
  1,
  2,
  3,
  4,
  9,
  5,
  6,
  10,
  ~0u,
  7,
  11,
  8,
  13,
  14,
  ~0u,
  15,
  ~0u,
  16,
  17,
  18,
  ~0u,
  19,
  12,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_GauntletProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_GauntletProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_GauntletProgress, gauntlet_tier_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_GauntletProgress, gauntlet_wins_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_GauntletProgress, gauntlet_losses_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, contract_stars_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, contract_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player_ContractProgress, completed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, ability_upgrades_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, equipped_econ_items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, items_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_deaths_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_kills_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_assists_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_gpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_xpm_x16_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, best_win_streak_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, fight_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, farm_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, support_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, push_score_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, level_up_times_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, inventory_snapshot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, avg_stats_calibrated_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, auto_style_criteria_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, event_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, strange_gem_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, hero_xp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, victory_prediction_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, lane_selection_flags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rampages_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, triple_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, aegis_snatched_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rapiers_purchased_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, couriers_killed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, net_worth_rank_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, support_gold_spent_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, sentry_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, wards_dewarded_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, rank_mmr_boost_type_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, gauntlet_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, contract_progress_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team_Player, guild_ids_),
  1,
  ~0u,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  ~0u,
  ~0u,
  18,
  ~0u,
  ~0u,
  ~0u,
  19,
  20,
  ~0u,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, dota_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_experience_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_gold_earned_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, graph_net_worth_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_first_pick_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_captain_player_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_bans_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_picks_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_Team, cm_penalty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, progress_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, guild_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, challenge_instance_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, challenge_parameter_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, challenge_timestamp_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, challenge_progress_at_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, challenge_progress_accumulated_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata_GuildChallengeProgress, individual_progress_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, teams_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, item_rewards_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, report_until_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, event_game_custom_table_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, primary_event_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, match_tips_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, matchmaking_stats_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, mvp_data_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchMetadata, guild_challenge_progress_),
  ~0u,
  ~0u,
  3,
  4,
  0,
  5,
  ~0u,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_StringName, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, damage_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, source_unit_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, by_hero_targets_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, healing_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, source_unit_index_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, by_hero_targets_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, game_time_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, damage_by_ability_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment, healing_by_ability_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, hero_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, elapsed_duration_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, is_hidden_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, buff_ability_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, buff_modifier_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord, by_hero_targets_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, creep_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, heroes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, passive_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, buildings_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, abilities_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, wards_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, other_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, creep_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, heroes_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, roshan_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, tome_of_knowledge_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, outpost_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived, other_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, player_slot_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, position_stream_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, combat_segments_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, damage_unit_names_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, buff_records_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, graph_kills_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, graph_deaths_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, graph_assists_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, graph_lasthits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, graph_denies_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, gold_received_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Player, xp_received_),
  3,
  4,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, unit_name_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, position_quant_x_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, position_quant_y_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team_Building, death_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, dota_team_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, players_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata_Team, buildings_),
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, teams_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, graph_win_probability_),
  PROTOBUF_FIELD_OFFSET(::CDOTAMatchPrivateMetadata, string_names_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCMatch, match_),
  PROTOBUF_FIELD_OFFSET(::CMsgDOTADPCMatch, metadata_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CDOTAMatchMetadataFile)},
  { 13, 20, sizeof(::CDOTAMatchMetadata_Team_PlayerKill)},
  { 22, 29, sizeof(::CDOTAMatchMetadata_Team_ItemPurchase)},
  { 31, 42, sizeof(::CDOTAMatchMetadata_Team_InventorySnapshot)},
  { 48, 55, sizeof(::CDOTAMatchMetadata_Team_AutoStyleCriteria)},
  { 57, 69, sizeof(::CDOTAMatchMetadata_Team_StrangeGemProgress)},
  { 76, 85, sizeof(::CDOTAMatchMetadata_Team_VictoryPrediction)},
  { 89, 98, sizeof(::CDOTAMatchMetadata_Team_SubChallenge)},
  { 102, 109, sizeof(::CDOTAMatchMetadata_Team_CavernChallengeResult)},
  { 111, 121, sizeof(::CDOTAMatchMetadata_Team_ActionGrant)},
  { 126, 133, sizeof(::CDOTAMatchMetadata_Team_CandyGrant)},
  { 135, 164, sizeof(::CDOTAMatchMetadata_Team_EventData)},
  { 188, 196, sizeof(::CDOTAMatchMetadata_Team_GauntletProgress)},
  { 199, 211, sizeof(::CDOTAMatchMetadata_Team_Player_ContractProgress)},
  { 218, 270, sizeof(::CDOTAMatchMetadata_Team_Player)},
  { 317, 332, sizeof(::CDOTAMatchMetadata_Team)},
  { 342, 349, sizeof(::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress)},
  { 351, 364, sizeof(::CDOTAMatchMetadata_GuildChallengeProgress)},
  { 372, 387, sizeof(::CDOTAMatchMetadata)},
  { 397, 404, sizeof(::CDOTAMatchPrivateMetadata_StringName)},
  { 406, 413, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget)},
  { 415, 423, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility)},
  { 426, 433, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget)},
  { 435, 443, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility)},
  { 446, 454, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment)},
  { 457, 465, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget)},
  { 468, 476, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord)},
  { 479, 492, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived)},
  { 500, 511, sizeof(::CDOTAMatchPrivateMetadata_Team_Player_XPReceived)},
  { 517, 535, sizeof(::CDOTAMatchPrivateMetadata_Team_Player)},
  { 548, 557, sizeof(::CDOTAMatchPrivateMetadata_Team_Building)},
  { 561, 569, sizeof(::CDOTAMatchPrivateMetadata_Team)},
  { 572, -1, sizeof(::CDOTAMatchPrivateMetadata)},
  { 580, 587, sizeof(::CMsgDOTADPCMatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadataFile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_PlayerKill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_StrangeGemProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_VictoryPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_SubChallenge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_CavernChallengeResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_ActionGrant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_CandyGrant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_EventData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_GauntletProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_Player_ContractProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_GuildChallengeProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_StringName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_GoldReceived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_XPReceived_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_Building_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CDOTAMatchPrivateMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDOTADPCMatch_default_instance_),
};

const char descriptor_table_protodef_dota_5fmatch_5fmetadata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031dota_match_metadata.proto\032\025base_gcmess"
  "ages.proto\032-dota_gcmessages_common_match"
  "_management.proto\032\034dota_gcmessages_commo"
  "n.proto\032\027dota_shared_enums.proto\"|\n\026CDOT"
  "AMatchMetadataFile\022\017\n\007version\030\001 \002(\005\022\020\n\010m"
  "atch_id\030\002 \002(\004\022%\n\010metadata\030\003 \001(\0132\023.CDOTAM"
  "atchMetadata\022\030\n\020private_metadata\030\005 \001(\014\"\236"
  "%\n\022CDOTAMatchMetadata\022\'\n\005teams\030\001 \003(\0132\030.C"
  "DOTAMatchMetadata.Team\022/\n\014item_rewards\030\002"
  " \003(\0132\031.CLobbyTimedRewardDetails\022\020\n\010lobby"
  "_id\030\003 \001(\006\022\031\n\021report_until_time\030\004 \001(\006\022\037\n\027"
  "event_game_custom_table\030\005 \001(\014\022\030\n\020primary"
  "_event_id\030\006 \001(\r\022\"\n\nmatch_tips\030\007 \003(\0132\016.CM"
  "sgMatchTips\0225\n\021matchmaking_stats\030\010 \001(\0132\032"
  ".CMsgMatchMatchmakingStats\022\033\n\010mvp_data\030\t"
  " \001(\0132\t.CMvpData\022L\n\030guild_challenge_progr"
  "ess\030\n \003(\0132*.CDOTAMatchMetadata.GuildChal"
  "lengeProgress\032\352\036\n\004Team\022\021\n\tdota_team\030\001 \001("
  "\r\0220\n\007players\030\002 \003(\0132\037.CDOTAMatchMetadata."
  "Team.Player\022\030\n\020graph_experience\030\003 \003(\002\022\031\n"
  "\021graph_gold_earned\030\004 \003(\002\022\027\n\017graph_net_wo"
  "rth\030\005 \003(\002\022\025\n\rcm_first_pick\030\006 \001(\010\022\034\n\024cm_c"
  "aptain_player_id\030\007 \001(\r\022\017\n\007cm_bans\030\010 \003(\r\022"
  "\020\n\010cm_picks\030\t \003(\r\022\022\n\ncm_penalty\030\n \001(\r\0320\n"
  "\nPlayerKill\022\023\n\013victim_slot\030\001 \001(\r\022\r\n\005coun"
  "t\030\002 \001(\r\0326\n\014ItemPurchase\022\017\n\007item_id\030\001 \001(\r"
  "\022\025\n\rpurchase_time\030\002 \001(\005\032v\n\021InventorySnap"
  "shot\022\017\n\007item_id\030\001 \003(\r\022\021\n\tgame_time\030\002 \001(\005"
  "\022\r\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assis"
  "ts\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\0326\n\021AutoStyleCrit"
  "eria\022\022\n\nname_token\030\001 \001(\r\022\r\n\005value\030\002 \001(\002\032"
  "\306\001\n\022StrangeGemProgress\022\027\n\017kill_eater_typ"
  "e\030\001 \001(\r\022\032\n\022gem_item_def_index\030\002 \001(\r\022\030\n\020r"
  "equired_hero_id\030\003 \001(\r\022\026\n\016starting_value\030"
  "\004 \001(\r\022\024\n\014ending_value\030\005 \001(\r\022\034\n\024owner_ite"
  "m_def_index\030\006 \001(\r\022\025\n\rowner_item_id\030\007 \001(\004"
  "\032h\n\021VictoryPrediction\022\017\n\007item_id\030\001 \001(\004\022\026"
  "\n\016item_def_index\030\002 \001(\r\022\026\n\016starting_value"
  "\030\003 \001(\r\022\022\n\nis_victory\030\004 \001(\010\032Z\n\014SubChallen"
  "ge\022\017\n\007slot_id\030\001 \001(\r\022\023\n\013start_value\030\002 \001(\r"
  "\022\021\n\tend_value\030\003 \001(\r\022\021\n\tcompleted\030\004 \001(\010\032K"
  "\n\025CavernChallengeResult\022\031\n\021completed_pat"
  "h_id\030\001 \001(\r\022\027\n\017claimed_room_id\030\002 \001(\r\032k\n\013A"
  "ctionGrant\022\021\n\taction_id\030\001 \001(\r\022\020\n\010quantit"
  "y\030\002 \001(\r\022\r\n\005audit\030\003 \001(\r\022\024\n\014requires_win\030\004"
  " \001(\010\022\022\n\naudit_data\030\005 \001(\004\032,\n\nCandyGrant\022\016"
  "\n\006points\030\001 \001(\r\022\016\n\006reason\030\002 \001(\r\032\226\007\n\tEvent"
  "Data\022\020\n\010event_id\030\001 \001(\r\022\024\n\014event_points\030\002"
  " \001(\r\022\035\n\025challenge_instance_id\030\003 \001(\r\022\032\n\022c"
  "hallenge_quest_id\030\004 \001(\r\022$\n\034challenge_que"
  "st_challenge_id\030\005 \001(\r\022\033\n\023challenge_compl"
  "eted\030\006 \001(\010\022 \n\030challenge_rank_completed\030\007"
  " \001(\r\022+\n#challenge_rank_previously_comple"
  "ted\030\010 \001(\r\022\023\n\013event_owned\030\t \001(\010\022K\n\034sub_ch"
  "allenges_with_progress\030\n \003(\0132%.CDOTAMatc"
  "hMetadata.Team.SubChallenge\022\026\n\016wager_win"
  "nings\030\013 \001(\r\022\037\n\027cavern_challenge_active\030\014"
  " \001(\010\022!\n\031cavern_challenge_winnings\030\r \001(\r\022"
  "\026\n\016amount_wagered\030\016 \001(\r\022\"\n\032periodic_poin"
  "t_adjustments\030\020 \001(\r\022T\n\034cavern_challenge_"
  "map_results\030\021 \003(\0132..CDOTAMatchMetadata.T"
  "eam.CavernChallengeResult\022,\n$cavern_chal"
  "lenge_plus_shard_winnings\030\022 \001(\r\022=\n\017actio"
  "ns_granted\030\023 \003(\0132$.CDOTAMatchMetadata.Te"
  "am.ActionGrant\022 \n\030cavern_crawl_map_varia"
  "nt\030\024 \001(\r\022\034\n\024team_wager_bonus_pct\030\025 \001(\r\022\030"
  "\n\020wager_streak_pct\030\026 \001(\r\022A\n\024candy_points"
  "_granted\030\027 \003(\0132#.CDOTAMatchMetadata.Team"
  ".CandyGrant\022\030\n\020active_season_id\030\030 \001(\r\022 \n"
  "\030cavern_crawl_half_credit\030\031 \001(\010\032Y\n\020Gaunt"
  "letProgress\022\025\n\rgauntlet_tier\030\002 \001(\r\022\025\n\rga"
  "untlet_wins\030\003 \001(\r\022\027\n\017gauntlet_losses\030\004 \001"
  "(\r\032\335\r\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020abi"
  "lity_upgrades\030\002 \003(\r\022\023\n\013player_slot\030\003 \001(\r"
  "\022)\n\023equipped_econ_items\030\004 \003(\0132\014.CSOEconI"
  "tem\0222\n\005kills\030\005 \003(\0132#.CDOTAMatchMetadata."
  "Team.PlayerKill\0224\n\005items\030\006 \003(\0132%.CDOTAMa"
  "tchMetadata.Team.ItemPurchase\022\025\n\ravg_kil"
  "ls_x16\030\007 \001(\r\022\026\n\016avg_deaths_x16\030\010 \001(\r\022\027\n\017"
  "avg_assists_x16\030\t \001(\r\022\023\n\013avg_gpm_x16\030\n \001"
  "(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r\022\026\n\016best_kills_x1"
  "6\030\014 \001(\r\022\030\n\020best_assists_x16\030\r \001(\r\022\024\n\014bes"
  "t_gpm_x16\030\016 \001(\r\022\024\n\014best_xpm_x16\030\017 \001(\r\022\022\n"
  "\nwin_streak\030\020 \001(\r\022\027\n\017best_win_streak\030\021 \001"
  "(\r\022\023\n\013fight_score\030\022 \001(\002\022\022\n\nfarm_score\030\023 "
  "\001(\002\022\025\n\rsupport_score\030\024 \001(\002\022\022\n\npush_score"
  "\030\025 \001(\002\022\026\n\016level_up_times\030\026 \003(\r\022\027\n\017graph_"
  "net_worth\030\027 \003(\002\022F\n\022inventory_snapshot\030\030 "
  "\003(\0132*.CDOTAMatchMetadata.Team.InventoryS"
  "napshot\022\034\n\024avg_stats_calibrated\030\031 \001(\010\022G\n"
  "\023auto_style_criteria\030\032 \003(\0132*.CDOTAMatchM"
  "etadata.Team.AutoStyleCriteria\0226\n\nevent_"
  "data\030\035 \003(\0132\".CDOTAMatchMetadata.Team.Eve"
  "ntData\022I\n\024strange_gem_progress\030\036 \003(\0132+.C"
  "DOTAMatchMetadata.Team.StrangeGemProgres"
  "s\022\017\n\007hero_xp\030\037 \001(\r\022\025\n\rcamps_stacked\030  \001("
  "\r\022F\n\022victory_prediction\030! \003(\0132*.CDOTAMat"
  "chMetadata.Team.VictoryPrediction\022\034\n\024lan"
  "e_selection_flags\030\" \001(\r\022\020\n\010rampages\030# \001("
  "\r\022\024\n\014triple_kills\030$ \001(\r\022\026\n\016aegis_snatche"
  "d\030% \001(\r\022\031\n\021rapiers_purchased\030& \001(\r\022\027\n\017co"
  "uriers_killed\030\' \001(\r\022\026\n\016net_worth_rank\030( "
  "\001(\r\022\032\n\022support_gold_spent\030) \001(\r\022\035\n\025obser"
  "ver_wards_placed\030* \001(\r\022\033\n\023sentry_wards_p"
  "laced\030+ \001(\r\022\026\n\016wards_dewarded\030, \001(\r\022\025\n\rs"
  "tun_duration\030- \001(\002\022I\n\023rank_mmr_boost_typ"
  "e\030. \001(\0162\022.EDOTAMMRBoostType:\030k_EDOTAMMRB"
  "oostType_None\022D\n\021gauntlet_progress\030/ \001(\013"
  "2).CDOTAMatchMetadata.Team.GauntletProgr"
  "ess\022K\n\021contract_progress\0300 \003(\01320.CDOTAMa"
  "tchMetadata.Team.Player.ContractProgress"
  "\022\021\n\tguild_ids\0301 \003(\r\032\264\001\n\020ContractProgress"
  "\022\020\n\010guild_id\030\001 \001(\r\022\020\n\010event_id\030\002 \001(\r\022\035\n\025"
  "challenge_instance_id\030\003 \001(\r\022\033\n\023challenge"
  "_parameter\030\004 \001(\r\022\026\n\016contract_stars\030\005 \001(\r"
  "\022\025\n\rcontract_slot\030\006 \001(\r\022\021\n\tcompleted\030\007 \001"
  "(\010\032\222\003\n\026GuildChallengeProgress\022\020\n\010guild_i"
  "d\030\001 \001(\r\022(\n\010event_id\030\002 \001(\0162\007.EEvent:\rEVEN"
  "T_ID_NONE\022\035\n\025challenge_instance_id\030\003 \001(\r"
  "\022\033\n\023challenge_parameter\030\004 \001(\r\022\033\n\023challen"
  "ge_timestamp\030\005 \001(\r\022#\n\033challenge_progress"
  "_at_start\030\006 \001(\r\022&\n\036challenge_progress_ac"
  "cumulated\030\007 \001(\r\022Z\n\023individual_progress\030\010"
  " \003(\0132=.CDOTAMatchMetadata.GuildChallenge"
  "Progress.IndividualProgress\032:\n\022Individua"
  "lProgress\022\022\n\naccount_id\030\001 \001(\r\022\020\n\010progres"
  "s\030\002 \001(\r\"\366\020\n\031CDOTAMatchPrivateMetadata\022.\n"
  "\005teams\030\001 \003(\0132\037.CDOTAMatchPrivateMetadata"
  ".Team\022\035\n\025graph_win_probability\030\002 \003(\002\022;\n\014"
  "string_names\030\003 \003(\0132%.CDOTAMatchPrivateMe"
  "tadata.StringName\032&\n\nStringName\022\n\n\002id\030\001 "
  "\001(\r\022\014\n\004name\030\002 \001(\t\032\244\017\n\004Team\022\021\n\tdota_team\030"
  "\001 \001(\r\0227\n\007players\030\002 \003(\0132&.CDOTAMatchPriva"
  "teMetadata.Team.Player\022;\n\tbuildings\030\003 \003("
  "\0132(.CDOTAMatchPrivateMetadata.Team.Build"
  "ing\032\253\r\n\006Player\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013pl"
  "ayer_slot\030\002 \001(\r\022\027\n\017position_stream\030\003 \001(\014"
  "\022M\n\017combat_segments\030\004 \003(\01324.CDOTAMatchPr"
  "ivateMetadata.Team.Player.CombatSegment\022"
  "\031\n\021damage_unit_names\030\005 \003(\t\022G\n\014buff_recor"
  "ds\030\006 \003(\01321.CDOTAMatchPrivateMetadata.Tea"
  "m.Player.BuffRecord\022\023\n\013graph_kills\030\007 \003(\002"
  "\022\024\n\014graph_deaths\030\010 \003(\002\022\025\n\rgraph_assists\030"
  "\t \003(\002\022\026\n\016graph_lasthits\030\n \003(\002\022\024\n\014graph_d"
  "enies\030\013 \003(\002\022J\n\rgold_received\030\014 \001(\01323.CDO"
  "TAMatchPrivateMetadata.Team.Player.GoldR"
  "eceived\022F\n\013xp_received\030\r \001(\01321.CDOTAMatc"
  "hPrivateMetadata.Team.Player.XPReceived\032"
  "\251\005\n\rCombatSegment\022\021\n\tgame_time\030\001 \001(\005\022_\n\021"
  "damage_by_ability\030\002 \003(\0132D.CDOTAMatchPriv"
  "ateMetadata.Team.Player.CombatSegment.Da"
  "mageByAbility\022a\n\022healing_by_ability\030\003 \003("
  "\0132E.CDOTAMatchPrivateMetadata.Team.Playe"
  "r.CombatSegment.HealingByAbility\032\335\001\n\017Dam"
  "ageByAbility\022\031\n\021source_unit_index\030\003 \001(\r\022"
  "\022\n\nability_id\030\001 \001(\r\022j\n\017by_hero_targets\030\002"
  " \003(\0132Q.CDOTAMatchPrivateMetadata.Team.Pl"
  "ayer.CombatSegment.DamageByAbility.ByHer"
  "oTarget\032/\n\014ByHeroTarget\022\017\n\007hero_id\030\001 \001(\r"
  "\022\016\n\006damage\030\002 \001(\r\032\340\001\n\020HealingByAbility\022\031\n"
  "\021source_unit_index\030\003 \001(\r\022\022\n\nability_id\030\001"
  " \001(\r\022k\n\017by_hero_targets\030\002 \003(\0132R.CDOTAMat"
  "chPrivateMetadata.Team.Player.CombatSegm"
  "ent.HealingByAbility.ByHeroTarget\0320\n\014ByH"
  "eroTarget\022\017\n\007hero_id\030\001 \001(\r\022\017\n\007healing\030\002 "
  "\001(\r\032\350\001\n\nBuffRecord\022\027\n\017buff_ability_id\030\001 "
  "\001(\r\022\032\n\022buff_modifier_name\030\003 \001(\t\022W\n\017by_he"
  "ro_targets\030\002 \003(\0132>.CDOTAMatchPrivateMeta"
  "data.Team.Player.BuffRecord.ByHeroTarget"
  "\032L\n\014ByHeroTarget\022\017\n\007hero_id\030\001 \001(\r\022\030\n\020ela"
  "psed_duration\030\002 \001(\002\022\021\n\tis_hidden\030\003 \001(\010\032\230"
  "\001\n\014GoldReceived\022\r\n\005creep\030\001 \001(\r\022\016\n\006heroes"
  "\030\002 \001(\r\022\024\n\014bounty_runes\030\003 \001(\r\022\017\n\007passive\030"
  "\004 \001(\r\022\021\n\tbuildings\030\005 \001(\r\022\021\n\tabilities\030\006 "
  "\001(\r\022\r\n\005wards\030\007 \001(\r\022\r\n\005other\030\010 \001(\r\032v\n\nXPR"
  "eceived\022\r\n\005creep\030\001 \001(\r\022\016\n\006heroes\030\002 \001(\r\022\016"
  "\n\006roshan\030\003 \001(\r\022\031\n\021tome_of_knowledge\030\004 \001("
  "\r\022\017\n\007outpost\030\005 \001(\r\022\r\n\005other\030\006 \001(\r\032e\n\010Bui"
  "lding\022\021\n\tunit_name\030\001 \001(\t\022\030\n\020position_qua"
  "nt_x\030\002 \001(\r\022\030\n\020position_quant_y\030\003 \001(\r\022\022\n\n"
  "death_time\030\004 \001(\002\"X\n\020CMsgDOTADPCMatch\022\035\n\005"
  "match\030\001 \001(\0132\016.CMsgDOTAMatch\022%\n\010metadata\030"
  "\002 \001(\0132\023.CDOTAMatchMetadataB\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dota_5fmatch_5fmetadata_2eproto_deps[4] = {
  &::descriptor_table_base_5fgcmessages_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_2eproto,
  &::descriptor_table_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto,
  &::descriptor_table_dota_5fshared_5fenums_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fmatch_5fmetadata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fmatch_5fmetadata_2eproto = {
  false, false, 7311, descriptor_table_protodef_dota_5fmatch_5fmetadata_2eproto, "dota_match_metadata.proto", 
  &descriptor_table_dota_5fmatch_5fmetadata_2eproto_once, descriptor_table_dota_5fmatch_5fmetadata_2eproto_deps, 4, 34,
  schemas, file_default_instances, TableStruct_dota_5fmatch_5fmetadata_2eproto::offsets,
  file_level_metadata_dota_5fmatch_5fmetadata_2eproto, file_level_enum_descriptors_dota_5fmatch_5fmetadata_2eproto, file_level_service_descriptors_dota_5fmatch_5fmetadata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fmatch_5fmetadata_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fmatch_5fmetadata_2eproto);
  return descriptor_table_dota_5fmatch_5fmetadata_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fmatch_5fmetadata_2eproto(&descriptor_table_dota_5fmatch_5fmetadata_2eproto);

// ===================================================================

class CDOTAMatchMetadataFile::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadataFile>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CDOTAMatchMetadata& metadata(const CDOTAMatchMetadataFile* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_private_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::CDOTAMatchMetadata&
CDOTAMatchMetadataFile::_Internal::metadata(const CDOTAMatchMetadataFile* msg) {
  return *msg->metadata_;
}
CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadataFile)
}
CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  private_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_private_metadata()) {
    private_metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_private_metadata(), 
      GetArena());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::CDOTAMatchMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadataFile)
}

void CDOTAMatchMetadataFile::SharedCtor() {
private_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(version_));
}

CDOTAMatchMetadataFile::~CDOTAMatchMetadataFile() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadataFile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadataFile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  private_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void CDOTAMatchMetadataFile::ArenaDtor(void* object) {
  CDOTAMatchMetadataFile* _this = reinterpret_cast< CDOTAMatchMetadataFile* >(object);
  (void)_this;
}
void CDOTAMatchMetadataFile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadataFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadataFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      private_metadata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&version_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadataFile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 match_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMatchMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes private_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_private_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadataFile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadataFile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // required uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_match_id(), target);
  }

  // optional .CDOTAMatchMetadata metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  // optional bytes private_metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_private_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadataFile)
  return target;
}

size_t CDOTAMatchMetadataFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (_internal_has_match_id()) {
    // required uint64 match_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());
  }

  if (_internal_has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  return total_size;
}
size_t CDOTAMatchMetadataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 match_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_match_id());

    // required int32 version = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes private_metadata = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_private_metadata());
    }

    // optional .CDOTAMatchMetadata metadata = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadataFile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadataFile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadataFile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadataFile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadataFile)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadataFile::MergeFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_private_metadata(from._internal_private_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata()->::CDOTAMatchMetadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadataFile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadataFile::CopyFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadataFile::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CDOTAMatchMetadataFile::InternalSwap(CDOTAMatchMetadataFile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_metadata_.Swap(&other->private_metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadataFile, version_)
      + sizeof(CDOTAMatchMetadataFile::version_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadataFile, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadataFile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_PlayerKill::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_PlayerKill>()._has_bits_);
  static void set_has_victim_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}
CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&victim_slot_, &from.victim_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.PlayerKill)
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&victim_slot_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.PlayerKill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_PlayerKill::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_PlayerKill* _this = reinterpret_cast< CDOTAMatchMetadata_Team_PlayerKill* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_PlayerKill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.PlayerKill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&victim_slot_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_) -
        reinterpret_cast<char*>(&victim_slot_)) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_PlayerKill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 victim_slot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_victim_slot(&has_bits);
          victim_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_PlayerKill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.PlayerKill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

size_t CDOTAMatchMetadata_Team_PlayerKill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.PlayerKill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 victim_slot = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_victim_slot());
    }

    // optional uint32 count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_count());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_PlayerKill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_PlayerKill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.PlayerKill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.PlayerKill)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      victim_slot_ = from.victim_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, count_)
      + sizeof(CDOTAMatchMetadata_Team_PlayerKill::count_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, victim_slot_)>(
          reinterpret_cast<char*>(&victim_slot_),
          reinterpret_cast<char*>(&other->victim_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_ItemPurchase::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ItemPurchase>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_purchase_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}
CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ItemPurchase)
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ItemPurchase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_ItemPurchase::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_ItemPurchase* _this = reinterpret_cast< CDOTAMatchMetadata_Team_ItemPurchase* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_ItemPurchase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ItemPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_time_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(purchase_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ItemPurchase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 purchase_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_purchase_time(&has_bits);
          purchase_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_ItemPurchase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ItemPurchase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

size_t CDOTAMatchMetadata_Team_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ItemPurchase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_id());
    }

    // optional int32 purchase_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_purchase_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ItemPurchase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_ItemPurchase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.ItemPurchase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.ItemPurchase)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_time_ = from.purchase_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_)
      + sizeof(CDOTAMatchMetadata_Team_ItemPurchase::purchase_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_InventorySnapshot::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_InventorySnapshot>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  item_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}
CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      item_id_(from.item_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.InventorySnapshot)
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.InventorySnapshot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_InventorySnapshot* _this = reinterpret_cast< CDOTAMatchMetadata_Team_InventorySnapshot* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_item_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_item_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_kills(&has_bits);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deaths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deaths(&has_bits);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 assists = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_assists(&has_bits);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_InventorySnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  for (int i = 0, n = this->_internal_item_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item_id(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_time(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_assists(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

size_t CDOTAMatchMetadata_Team_InventorySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->item_id_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 game_time = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_time());
    }

    // optional uint32 kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kills());
    }

    // optional uint32 deaths = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deaths());
    }

    // optional uint32 assists = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_assists());
    }

    // optional uint32 level = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_InventorySnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_InventorySnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.InventorySnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.InventorySnapshot)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_id_.MergeFrom(from.item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_id_.InternalSwap(&other->item_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, level_)
      + sizeof(CDOTAMatchMetadata_Team_InventorySnapshot::level_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, game_time_)>(
          reinterpret_cast<char*>(&game_time_),
          reinterpret_cast<char*>(&other->game_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_AutoStyleCriteria::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_AutoStyleCriteria>()._has_bits_);
  static void set_has_name_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}
CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&name_token_, &from.name_token_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_AutoStyleCriteria* _this = reinterpret_cast< CDOTAMatchMetadata_Team_AutoStyleCriteria* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&name_token_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&name_token_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 name_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_name_token(&has_bits);
          name_token_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_AutoStyleCriteria::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_name_token(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

size_t CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 name_token = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_name_token());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_AutoStyleCriteria* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_AutoStyleCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.AutoStyleCriteria)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.AutoStyleCriteria)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_token_ = from.name_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, value_)
      + sizeof(CDOTAMatchMetadata_Team_AutoStyleCriteria::value_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_)>(
          reinterpret_cast<char*>(&name_token_),
          reinterpret_cast<char*>(&other->name_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_StrangeGemProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_StrangeGemProgress>()._has_bits_);
  static void set_has_kill_eater_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gem_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_required_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ending_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_owner_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_owner_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}
CDOTAMatchMetadata_Team_StrangeGemProgress::CDOTAMatchMetadata_Team_StrangeGemProgress(const CDOTAMatchMetadata_Team_StrangeGemProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kill_eater_type_, &from.kill_eater_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kill_eater_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_item_id_) -
    reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
}

CDOTAMatchMetadata_Team_StrangeGemProgress::~CDOTAMatchMetadata_Team_StrangeGemProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.StrangeGemProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_StrangeGemProgress* _this = reinterpret_cast< CDOTAMatchMetadata_Team_StrangeGemProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_StrangeGemProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&kill_eater_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_item_id_) -
        reinterpret_cast<char*>(&kill_eater_type_)) + sizeof(owner_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 kill_eater_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kill_eater_type(&has_bits);
          kill_eater_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gem_item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gem_item_def_index(&has_bits);
          gem_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 required_hero_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required_hero_id(&has_bits);
          required_hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starting_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_starting_value(&has_bits);
          starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ending_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ending_value(&has_bits);
          ending_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 owner_item_def_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_owner_item_def_index(&has_bits);
          owner_item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 owner_item_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_owner_item_id(&has_bits);
          owner_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_StrangeGemProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 kill_eater_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_kill_eater_type(), target);
  }

  // optional uint32 gem_item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gem_item_def_index(), target);
  }

  // optional uint32 required_hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_required_hero_id(), target);
  }

  // optional uint32 starting_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_starting_value(), target);
  }

  // optional uint32 ending_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_ending_value(), target);
  }

  // optional uint32 owner_item_def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_owner_item_def_index(), target);
  }

  // optional uint64 owner_item_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_owner_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.StrangeGemProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_StrangeGemProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 kill_eater_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_kill_eater_type());
    }

    // optional uint32 gem_item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gem_item_def_index());
    }

    // optional uint32 required_hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_required_hero_id());
    }

    // optional uint32 starting_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starting_value());
    }

    // optional uint32 ending_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ending_value());
    }

    // optional uint32 owner_item_def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_owner_item_def_index());
    }

    // optional uint64 owner_item_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_owner_item_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_StrangeGemProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_StrangeGemProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.StrangeGemProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.StrangeGemProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::MergeFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      kill_eater_type_ = from.kill_eater_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      gem_item_def_index_ = from.gem_item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      required_hero_id_ = from.required_hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      ending_value_ = from.ending_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      owner_item_def_index_ = from.owner_item_def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      owner_item_id_ = from.owner_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::CopyFrom(const CDOTAMatchMetadata_Team_StrangeGemProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.StrangeGemProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_StrangeGemProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_StrangeGemProgress::InternalSwap(CDOTAMatchMetadata_Team_StrangeGemProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, owner_item_id_)
      + sizeof(CDOTAMatchMetadata_Team_StrangeGemProgress::owner_item_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_StrangeGemProgress, kill_eater_type_)>(
          reinterpret_cast<char*>(&kill_eater_type_),
          reinterpret_cast<char*>(&other->kill_eater_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_StrangeGemProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_VictoryPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_VictoryPrediction>()._has_bits_);
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_item_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starting_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_victory(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}
CDOTAMatchMetadata_Team_VictoryPrediction::CDOTAMatchMetadata_Team_VictoryPrediction(const CDOTAMatchMetadata_Team_VictoryPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.VictoryPrediction)
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_victory_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
}

CDOTAMatchMetadata_Team_VictoryPrediction::~CDOTAMatchMetadata_Team_VictoryPrediction() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.VictoryPrediction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_VictoryPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_VictoryPrediction* _this = reinterpret_cast< CDOTAMatchMetadata_Team_VictoryPrediction* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_VictoryPrediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_VictoryPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_victory_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(is_victory_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 item_def_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_item_def_index(&has_bits);
          item_def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 starting_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_starting_value(&has_bits);
          starting_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_victory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_victory(&has_bits);
          is_victory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_VictoryPrediction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_item_id(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_def_index(), target);
  }

  // optional uint32 starting_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_starting_value(), target);
  }

  // optional bool is_victory = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_victory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.VictoryPrediction)
  return target;
}

size_t CDOTAMatchMetadata_Team_VictoryPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_item_id());
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_item_def_index());
    }

    // optional uint32 starting_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_starting_value());
    }

    // optional bool is_victory = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_VictoryPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_VictoryPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.VictoryPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.VictoryPrediction)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_VictoryPrediction::MergeFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      starting_value_ = from.starting_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_victory_ = from.is_victory_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_VictoryPrediction::CopyFrom(const CDOTAMatchMetadata_Team_VictoryPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.VictoryPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_VictoryPrediction::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_VictoryPrediction::InternalSwap(CDOTAMatchMetadata_Team_VictoryPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, is_victory_)
      + sizeof(CDOTAMatchMetadata_Team_VictoryPrediction::is_victory_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_VictoryPrediction, item_id_)>(
          reinterpret_cast<char*>(&item_id_),
          reinterpret_cast<char*>(&other->item_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_VictoryPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_SubChallenge::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_SubChallenge>()._has_bits_);
  static void set_has_slot_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}
CDOTAMatchMetadata_Team_SubChallenge::CDOTAMatchMetadata_Team_SubChallenge(const CDOTAMatchMetadata_Team_SubChallenge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&slot_id_, &from.slot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.SubChallenge)
}

void CDOTAMatchMetadata_Team_SubChallenge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slot_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
}

CDOTAMatchMetadata_Team_SubChallenge::~CDOTAMatchMetadata_Team_SubChallenge() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.SubChallenge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_SubChallenge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_SubChallenge::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_SubChallenge* _this = reinterpret_cast< CDOTAMatchMetadata_Team_SubChallenge* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_SubChallenge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_SubChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_SubChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.SubChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&slot_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&slot_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_SubChallenge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 slot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_slot_id(&has_bits);
          slot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 start_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_start_value(&has_bits);
          start_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 end_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_end_value(&has_bits);
          end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_SubChallenge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.SubChallenge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_slot_id(), target);
  }

  // optional uint32 start_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_start_value(), target);
  }

  // optional uint32 end_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_end_value(), target);
  }

  // optional bool completed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.SubChallenge)
  return target;
}

size_t CDOTAMatchMetadata_Team_SubChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.SubChallenge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 slot_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_slot_id());
    }

    // optional uint32 start_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_start_value());
    }

    // optional uint32 end_value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_end_value());
    }

    // optional bool completed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_SubChallenge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_SubChallenge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.SubChallenge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.SubChallenge)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_SubChallenge::MergeFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      start_value_ = from.start_value_;
    }
    if (cached_has_bits & 0x00000004u) {
      end_value_ = from.end_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_SubChallenge::CopyFrom(const CDOTAMatchMetadata_Team_SubChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.SubChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_SubChallenge::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_SubChallenge::InternalSwap(CDOTAMatchMetadata_Team_SubChallenge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, completed_)
      + sizeof(CDOTAMatchMetadata_Team_SubChallenge::completed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_SubChallenge, slot_id_)>(
          reinterpret_cast<char*>(&slot_id_),
          reinterpret_cast<char*>(&other->slot_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_SubChallenge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_CavernChallengeResult::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_CavernChallengeResult>()._has_bits_);
  static void set_has_completed_path_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_claimed_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}
CDOTAMatchMetadata_Team_CavernChallengeResult::CDOTAMatchMetadata_Team_CavernChallengeResult(const CDOTAMatchMetadata_Team_CavernChallengeResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&completed_path_id_, &from.completed_path_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&claimed_room_id_) -
    reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&completed_path_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&claimed_room_id_) -
    reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
}

CDOTAMatchMetadata_Team_CavernChallengeResult::~CDOTAMatchMetadata_Team_CavernChallengeResult() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.CavernChallengeResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_CavernChallengeResult* _this = reinterpret_cast< CDOTAMatchMetadata_Team_CavernChallengeResult* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_CavernChallengeResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_CavernChallengeResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&completed_path_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&claimed_room_id_) -
        reinterpret_cast<char*>(&completed_path_id_)) + sizeof(claimed_room_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 completed_path_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_completed_path_id(&has_bits);
          completed_path_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 claimed_room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_claimed_room_id(&has_bits);
          claimed_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_CavernChallengeResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 completed_path_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_completed_path_id(), target);
  }

  // optional uint32 claimed_room_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_claimed_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.CavernChallengeResult)
  return target;
}

size_t CDOTAMatchMetadata_Team_CavernChallengeResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 completed_path_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_completed_path_id());
    }

    // optional uint32 claimed_room_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_claimed_room_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_CavernChallengeResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_CavernChallengeResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.CavernChallengeResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.CavernChallengeResult)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::MergeFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      completed_path_id_ = from.completed_path_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      claimed_room_id_ = from.claimed_room_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::CopyFrom(const CDOTAMatchMetadata_Team_CavernChallengeResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.CavernChallengeResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_CavernChallengeResult::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_CavernChallengeResult::InternalSwap(CDOTAMatchMetadata_Team_CavernChallengeResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CavernChallengeResult, claimed_room_id_)
      + sizeof(CDOTAMatchMetadata_Team_CavernChallengeResult::claimed_room_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CavernChallengeResult, completed_path_id_)>(
          reinterpret_cast<char*>(&completed_path_id_),
          reinterpret_cast<char*>(&other->completed_path_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_CavernChallengeResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_ActionGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_ActionGrant>()._has_bits_);
  static void set_has_action_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_audit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_requires_win(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audit_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}
CDOTAMatchMetadata_Team_ActionGrant::CDOTAMatchMetadata_Team_ActionGrant(const CDOTAMatchMetadata_Team_ActionGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&action_id_, &from.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(audit_data_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.ActionGrant)
}

void CDOTAMatchMetadata_Team_ActionGrant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&action_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&audit_data_) -
    reinterpret_cast<char*>(&action_id_)) + sizeof(audit_data_));
}

CDOTAMatchMetadata_Team_ActionGrant::~CDOTAMatchMetadata_Team_ActionGrant() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.ActionGrant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_ActionGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_ActionGrant::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_ActionGrant* _this = reinterpret_cast< CDOTAMatchMetadata_Team_ActionGrant* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_ActionGrant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_ActionGrant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_ActionGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.ActionGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&action_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&audit_data_) -
        reinterpret_cast<char*>(&action_id_)) + sizeof(audit_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_ActionGrant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_action_id(&has_bits);
          action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 audit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_audit(&has_bits);
          audit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool requires_win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_requires_win(&has_bits);
          requires_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 audit_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_audit_data(&has_bits);
          audit_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_ActionGrant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.ActionGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_action_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_quantity(), target);
  }

  // optional uint32 audit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_audit(), target);
  }

  // optional bool requires_win = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_requires_win(), target);
  }

  // optional uint64 audit_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_audit_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.ActionGrant)
  return target;
}

size_t CDOTAMatchMetadata_Team_ActionGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.ActionGrant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 action_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_action_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_quantity());
    }

    // optional uint32 audit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_audit());
    }

    // optional bool requires_win = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 audit_data = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_audit_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_ActionGrant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ActionGrant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_ActionGrant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.ActionGrant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.ActionGrant)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ActionGrant::MergeFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      audit_ = from.audit_;
    }
    if (cached_has_bits & 0x00000008u) {
      requires_win_ = from.requires_win_;
    }
    if (cached_has_bits & 0x00000010u) {
      audit_data_ = from.audit_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_ActionGrant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ActionGrant::CopyFrom(const CDOTAMatchMetadata_Team_ActionGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.ActionGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ActionGrant::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ActionGrant::InternalSwap(CDOTAMatchMetadata_Team_ActionGrant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, audit_data_)
      + sizeof(CDOTAMatchMetadata_Team_ActionGrant::audit_data_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_ActionGrant, action_id_)>(
          reinterpret_cast<char*>(&action_id_),
          reinterpret_cast<char*>(&other->action_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_ActionGrant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_CandyGrant::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_CandyGrant>()._has_bits_);
  static void set_has_points(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_Team_CandyGrant::CDOTAMatchMetadata_Team_CandyGrant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.CandyGrant)
}
CDOTAMatchMetadata_Team_CandyGrant::CDOTAMatchMetadata_Team_CandyGrant(const CDOTAMatchMetadata_Team_CandyGrant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&points_, &from.points_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&points_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.CandyGrant)
}

void CDOTAMatchMetadata_Team_CandyGrant::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&points_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&points_)) + sizeof(reason_));
}

CDOTAMatchMetadata_Team_CandyGrant::~CDOTAMatchMetadata_Team_CandyGrant() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.CandyGrant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_CandyGrant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_CandyGrant::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_CandyGrant* _this = reinterpret_cast< CDOTAMatchMetadata_Team_CandyGrant* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_CandyGrant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_CandyGrant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_CandyGrant::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.CandyGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&points_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reason_) -
        reinterpret_cast<char*>(&points_)) + sizeof(reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_CandyGrant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_points(&has_bits);
          points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_CandyGrant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.CandyGrant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 points = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_points(), target);
  }

  // optional uint32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.CandyGrant)
  return target;
}

size_t CDOTAMatchMetadata_Team_CandyGrant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.CandyGrant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 points = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_points());
    }

    // optional uint32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_CandyGrant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.CandyGrant)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_CandyGrant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_CandyGrant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.CandyGrant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.CandyGrant)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_CandyGrant::MergeFrom(const CDOTAMatchMetadata_Team_CandyGrant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.CandyGrant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      points_ = from.points_;
    }
    if (cached_has_bits & 0x00000002u) {
      reason_ = from.reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_CandyGrant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.CandyGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_CandyGrant::CopyFrom(const CDOTAMatchMetadata_Team_CandyGrant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.CandyGrant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_CandyGrant::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_CandyGrant::InternalSwap(CDOTAMatchMetadata_Team_CandyGrant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CandyGrant, reason_)
      + sizeof(CDOTAMatchMetadata_Team_CandyGrant::reason_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_CandyGrant, points_)>(
          reinterpret_cast<char*>(&points_),
          reinterpret_cast<char*>(&other->points_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_CandyGrant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_EventData::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_EventData>()._has_bits_);
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_points(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_quest_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_quest_challenge_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_challenge_rank_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_rank_previously_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_event_owned(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wager_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cavern_challenge_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_cavern_challenge_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_amount_wagered(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_periodic_point_adjustments(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_cavern_challenge_plus_shard_winnings(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cavern_crawl_map_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_team_wager_bonus_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_wager_streak_pct(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_active_season_id(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_cavern_crawl_half_credit(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sub_challenges_with_progress_(arena),
  cavern_challenge_map_results_(arena),
  actions_granted_(arena),
  candy_points_granted_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.EventData)
}
CDOTAMatchMetadata_Team_EventData::CDOTAMatchMetadata_Team_EventData(const CDOTAMatchMetadata_Team_EventData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sub_challenges_with_progress_(from.sub_challenges_with_progress_),
      cavern_challenge_map_results_(from.cavern_challenge_map_results_),
      actions_granted_(from.actions_granted_),
      candy_points_granted_(from.candy_points_granted_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_season_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(active_season_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.EventData)
}

void CDOTAMatchMetadata_Team_EventData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_season_id_) -
    reinterpret_cast<char*>(&event_id_)) + sizeof(active_season_id_));
}

CDOTAMatchMetadata_Team_EventData::~CDOTAMatchMetadata_Team_EventData() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.EventData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_EventData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_EventData::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_EventData* _this = reinterpret_cast< CDOTAMatchMetadata_Team_EventData* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_EventData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_EventData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_EventData::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.EventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_challenges_with_progress_.Clear();
  cavern_challenge_map_results_.Clear();
  actions_granted_.Clear();
  candy_points_granted_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&event_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_winnings_) -
        reinterpret_cast<char*>(&event_id_)) + sizeof(wager_winnings_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cavern_challenge_winnings_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cavern_challenge_plus_shard_winnings_) -
        reinterpret_cast<char*>(&cavern_challenge_winnings_)) + sizeof(cavern_challenge_plus_shard_winnings_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&cavern_crawl_map_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_season_id_) -
        reinterpret_cast<char*>(&cavern_crawl_map_variant_)) + sizeof(active_season_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_EventData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 event_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_points(&has_bits);
          event_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_quest_id(&has_bits);
          challenge_quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_quest_challenge_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_quest_challenge_id(&has_bits);
          challenge_quest_challenge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool challenge_completed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_challenge_completed(&has_bits);
          challenge_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_rank_completed(&has_bits);
          challenge_rank_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_rank_previously_completed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_challenge_rank_previously_completed(&has_bits);
          challenge_rank_previously_completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool event_owned = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_event_owned(&has_bits);
          event_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sub_challenges_with_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 wager_winnings = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_wager_winnings(&has_bits);
          wager_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cavern_challenge_active = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_cavern_challenge_active(&has_bits);
          cavern_challenge_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_winnings = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_cavern_challenge_winnings(&has_bits);
          cavern_challenge_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 amount_wagered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_amount_wagered(&has_bits);
          amount_wagered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 periodic_point_adjustments = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_periodic_point_adjustments(&has_bits);
          periodic_point_adjustments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_cavern_challenge_map_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 cavern_challenge_plus_shard_winnings = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_cavern_challenge_plus_shard_winnings(&has_bits);
          cavern_challenge_plus_shard_winnings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_actions_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 cavern_crawl_map_variant = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_cavern_crawl_map_variant(&has_bits);
          cavern_crawl_map_variant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 team_wager_bonus_pct = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_team_wager_bonus_pct(&has_bits);
          team_wager_bonus_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wager_streak_pct = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_wager_streak_pct(&has_bits);
          wager_streak_pct_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_candy_points_granted(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 active_season_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_active_season_id(&has_bits);
          active_season_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cavern_crawl_half_credit = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_cavern_crawl_half_credit(&has_bits);
          cavern_crawl_half_credit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_EventData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.EventData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_id(), target);
  }

  // optional uint32 event_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_points(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_quest_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_quest_id(), target);
  }

  // optional uint32 challenge_quest_challenge_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_quest_challenge_id(), target);
  }

  // optional bool challenge_completed = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_challenge_completed(), target);
  }

  // optional uint32 challenge_rank_completed = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_rank_completed(), target);
  }

  // optional uint32 challenge_rank_previously_completed = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_challenge_rank_previously_completed(), target);
  }

  // optional bool event_owned = 9;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_event_owned(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sub_challenges_with_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_sub_challenges_with_progress(i), target, stream);
  }

  // optional uint32 wager_winnings = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_wager_winnings(), target);
  }

  // optional bool cavern_challenge_active = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_cavern_challenge_active(), target);
  }

  // optional uint32 cavern_challenge_winnings = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_cavern_challenge_winnings(), target);
  }

  // optional uint32 amount_wagered = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_amount_wagered(), target);
  }

  // optional uint32 periodic_point_adjustments = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_periodic_point_adjustments(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cavern_challenge_map_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_cavern_challenge_map_results(i), target, stream);
  }

  // optional uint32 cavern_challenge_plus_shard_winnings = 18;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_cavern_challenge_plus_shard_winnings(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_granted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_actions_granted(i), target, stream);
  }

  // optional uint32 cavern_crawl_map_variant = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cavern_crawl_map_variant(), target);
  }

  // optional uint32 team_wager_bonus_pct = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_team_wager_bonus_pct(), target);
  }

  // optional uint32 wager_streak_pct = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_wager_streak_pct(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_candy_points_granted_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_candy_points_granted(i), target, stream);
  }

  // optional uint32 active_season_id = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_active_season_id(), target);
  }

  // optional bool cavern_crawl_half_credit = 25;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_cavern_crawl_half_credit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.EventData)
  return target;
}

size_t CDOTAMatchMetadata_Team_EventData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.EventData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.SubChallenge sub_challenges_with_progress = 10;
  total_size += 1UL * this->_internal_sub_challenges_with_progress_size();
  for (const auto& msg : this->sub_challenges_with_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.CavernChallengeResult cavern_challenge_map_results = 17;
  total_size += 2UL * this->_internal_cavern_challenge_map_results_size();
  for (const auto& msg : this->cavern_challenge_map_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ActionGrant actions_granted = 19;
  total_size += 2UL * this->_internal_actions_granted_size();
  for (const auto& msg : this->actions_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.CandyGrant candy_points_granted = 23;
  total_size += 2UL * this->_internal_candy_points_granted_size();
  for (const auto& msg : this->candy_points_granted_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 event_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 event_points = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_points());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_quest_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_quest_id());
    }

    // optional uint32 challenge_quest_challenge_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_quest_challenge_id());
    }

    // optional uint32 challenge_rank_completed = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_rank_completed());
    }

    // optional uint32 challenge_rank_previously_completed = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_rank_previously_completed());
    }

    // optional uint32 wager_winnings = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager_winnings());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 cavern_challenge_winnings = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_challenge_winnings());
    }

    // optional bool challenge_completed = 6;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool event_owned = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_challenge_active = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool cavern_crawl_half_credit = 25;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional uint32 amount_wagered = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_amount_wagered());
    }

    // optional uint32 periodic_point_adjustments = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_periodic_point_adjustments());
    }

    // optional uint32 cavern_challenge_plus_shard_winnings = 18;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_challenge_plus_shard_winnings());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional uint32 cavern_crawl_map_variant = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cavern_crawl_map_variant());
    }

    // optional uint32 team_wager_bonus_pct = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_team_wager_bonus_pct());
    }

    // optional uint32 wager_streak_pct = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wager_streak_pct());
    }

    // optional uint32 active_season_id = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_active_season_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_EventData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_EventData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_EventData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.EventData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.EventData)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_EventData::MergeFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.EventData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sub_challenges_with_progress_.MergeFrom(from.sub_challenges_with_progress_);
  cavern_challenge_map_results_.MergeFrom(from.cavern_challenge_map_results_);
  actions_granted_.MergeFrom(from.actions_granted_);
  candy_points_granted_.MergeFrom(from.candy_points_granted_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_quest_id_ = from.challenge_quest_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_quest_challenge_id_ = from.challenge_quest_challenge_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_rank_completed_ = from.challenge_rank_completed_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_rank_previously_completed_ = from.challenge_rank_previously_completed_;
    }
    if (cached_has_bits & 0x00000080u) {
      wager_winnings_ = from.wager_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cavern_challenge_winnings_ = from.cavern_challenge_winnings_;
    }
    if (cached_has_bits & 0x00000200u) {
      challenge_completed_ = from.challenge_completed_;
    }
    if (cached_has_bits & 0x00000400u) {
      event_owned_ = from.event_owned_;
    }
    if (cached_has_bits & 0x00000800u) {
      cavern_challenge_active_ = from.cavern_challenge_active_;
    }
    if (cached_has_bits & 0x00001000u) {
      cavern_crawl_half_credit_ = from.cavern_crawl_half_credit_;
    }
    if (cached_has_bits & 0x00002000u) {
      amount_wagered_ = from.amount_wagered_;
    }
    if (cached_has_bits & 0x00004000u) {
      periodic_point_adjustments_ = from.periodic_point_adjustments_;
    }
    if (cached_has_bits & 0x00008000u) {
      cavern_challenge_plus_shard_winnings_ = from.cavern_challenge_plus_shard_winnings_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      cavern_crawl_map_variant_ = from.cavern_crawl_map_variant_;
    }
    if (cached_has_bits & 0x00020000u) {
      team_wager_bonus_pct_ = from.team_wager_bonus_pct_;
    }
    if (cached_has_bits & 0x00040000u) {
      wager_streak_pct_ = from.wager_streak_pct_;
    }
    if (cached_has_bits & 0x00080000u) {
      active_season_id_ = from.active_season_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_EventData::CopyFrom(const CDOTAMatchMetadata_Team_EventData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.EventData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_EventData::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_EventData::InternalSwap(CDOTAMatchMetadata_Team_EventData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sub_challenges_with_progress_.InternalSwap(&other->sub_challenges_with_progress_);
  cavern_challenge_map_results_.InternalSwap(&other->cavern_challenge_map_results_);
  actions_granted_.InternalSwap(&other->actions_granted_);
  candy_points_granted_.InternalSwap(&other->candy_points_granted_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, active_season_id_)
      + sizeof(CDOTAMatchMetadata_Team_EventData::active_season_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_EventData, event_id_)>(
          reinterpret_cast<char*>(&event_id_),
          reinterpret_cast<char*>(&other->event_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_EventData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_GauntletProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_GauntletProgress>()._has_bits_);
  static void set_has_gauntlet_tier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gauntlet_wins(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_gauntlet_losses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchMetadata_Team_GauntletProgress::CDOTAMatchMetadata_Team_GauntletProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.GauntletProgress)
}
CDOTAMatchMetadata_Team_GauntletProgress::CDOTAMatchMetadata_Team_GauntletProgress(const CDOTAMatchMetadata_Team_GauntletProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&gauntlet_tier_, &from.gauntlet_tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&gauntlet_losses_) -
    reinterpret_cast<char*>(&gauntlet_tier_)) + sizeof(gauntlet_losses_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.GauntletProgress)
}

void CDOTAMatchMetadata_Team_GauntletProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gauntlet_tier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gauntlet_losses_) -
    reinterpret_cast<char*>(&gauntlet_tier_)) + sizeof(gauntlet_losses_));
}

CDOTAMatchMetadata_Team_GauntletProgress::~CDOTAMatchMetadata_Team_GauntletProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.GauntletProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_GauntletProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_GauntletProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_GauntletProgress* _this = reinterpret_cast< CDOTAMatchMetadata_Team_GauntletProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_GauntletProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_GauntletProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_GauntletProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.GauntletProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&gauntlet_tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gauntlet_losses_) -
        reinterpret_cast<char*>(&gauntlet_tier_)) + sizeof(gauntlet_losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_GauntletProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 gauntlet_tier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gauntlet_tier(&has_bits);
          gauntlet_tier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_wins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_gauntlet_wins(&has_bits);
          gauntlet_wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 gauntlet_losses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_gauntlet_losses(&has_bits);
          gauntlet_losses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_GauntletProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.GauntletProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gauntlet_tier = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gauntlet_tier(), target);
  }

  // optional uint32 gauntlet_wins = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gauntlet_wins(), target);
  }

  // optional uint32 gauntlet_losses = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_gauntlet_losses(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.GauntletProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_GauntletProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.GauntletProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 gauntlet_tier = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_tier());
    }

    // optional uint32 gauntlet_wins = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_wins());
    }

    // optional uint32 gauntlet_losses = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gauntlet_losses());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_GauntletProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.GauntletProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_GauntletProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_GauntletProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.GauntletProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.GauntletProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_GauntletProgress::MergeFrom(const CDOTAMatchMetadata_Team_GauntletProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.GauntletProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      gauntlet_tier_ = from.gauntlet_tier_;
    }
    if (cached_has_bits & 0x00000002u) {
      gauntlet_wins_ = from.gauntlet_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      gauntlet_losses_ = from.gauntlet_losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_GauntletProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.GauntletProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_GauntletProgress::CopyFrom(const CDOTAMatchMetadata_Team_GauntletProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.GauntletProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_GauntletProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_GauntletProgress::InternalSwap(CDOTAMatchMetadata_Team_GauntletProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_GauntletProgress, gauntlet_losses_)
      + sizeof(CDOTAMatchMetadata_Team_GauntletProgress::gauntlet_losses_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_GauntletProgress, gauntlet_tier_)>(
          reinterpret_cast<char*>(&gauntlet_tier_),
          reinterpret_cast<char*>(&other->gauntlet_tier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_GauntletProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_Player_ContractProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_Player_ContractProgress>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_contract_stars(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contract_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_completed(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_Team_Player_ContractProgress::CDOTAMatchMetadata_Team_Player_ContractProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.Player.ContractProgress)
}
CDOTAMatchMetadata_Team_Player_ContractProgress::CDOTAMatchMetadata_Team_Player_ContractProgress(const CDOTAMatchMetadata_Team_Player_ContractProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player.ContractProgress)
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(completed_));
}

CDOTAMatchMetadata_Team_Player_ContractProgress::~CDOTAMatchMetadata_Team_Player_ContractProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player.ContractProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_Player_ContractProgress* _this = reinterpret_cast< CDOTAMatchMetadata_Team_Player_ContractProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_Player_ContractProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_Player_ContractProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&completed_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_Player_ContractProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 event_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_event_id(&has_bits);
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contract_stars = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_contract_stars(&has_bits);
          contract_stars_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 contract_slot = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_contract_slot(&has_bits);
          contract_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool completed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_completed(&has_bits);
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_Player_ContractProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 contract_stars = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_contract_stars(), target);
  }

  // optional uint32 contract_slot = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_contract_slot(), target);
  }

  // optional bool completed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_completed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player.ContractProgress)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player_ContractProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional uint32 contract_stars = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contract_stars());
    }

    // optional uint32 contract_slot = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_contract_slot());
    }

    // optional bool completed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_Player_ContractProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_Player_ContractProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.Player.ContractProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.Player.ContractProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::MergeFrom(const CDOTAMatchMetadata_Team_Player_ContractProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000010u) {
      contract_stars_ = from.contract_stars_;
    }
    if (cached_has_bits & 0x00000020u) {
      contract_slot_ = from.contract_slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::CopyFrom(const CDOTAMatchMetadata_Team_Player_ContractProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.Player.ContractProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player_ContractProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player_ContractProgress::InternalSwap(CDOTAMatchMetadata_Team_Player_ContractProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player_ContractProgress, completed_)
      + sizeof(CDOTAMatchMetadata_Team_Player_ContractProgress::completed_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player_ContractProgress, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_Player_ContractProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_avg_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_avg_deaths_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_avg_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_avg_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_avg_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_best_kills_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_best_assists_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_best_gpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_best_xpm_x16(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_best_win_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_fight_score(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_farm_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_support_score(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_push_score(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_avg_stats_calibrated(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_hero_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_lane_selection_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_rampages(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_triple_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_aegis_snatched(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_rapiers_purchased(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_couriers_killed(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_net_worth_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_support_gold_spent(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_sentry_wards_placed(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_wards_dewarded(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_rank_mmr_boost_type(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::CDOTAMatchMetadata_Team_GauntletProgress& gauntlet_progress(const CDOTAMatchMetadata_Team_Player* msg);
  static void set_has_gauntlet_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CDOTAMatchMetadata_Team_GauntletProgress&
CDOTAMatchMetadata_Team_Player::_Internal::gauntlet_progress(const CDOTAMatchMetadata_Team_Player* msg) {
  return *msg->gauntlet_progress_;
}
void CDOTAMatchMetadata_Team_Player::clear_equipped_econ_items() {
  equipped_econ_items_.Clear();
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ability_upgrades_(arena),
  equipped_econ_items_(arena),
  kills_(arena),
  items_(arena),
  level_up_times_(arena),
  graph_net_worth_(arena),
  inventory_snapshot_(arena),
  auto_style_criteria_(arena),
  event_data_(arena),
  strange_gem_progress_(arena),
  victory_prediction_(arena),
  contract_progress_(arena),
  guild_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team.Player)
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      equipped_econ_items_(from.equipped_econ_items_),
      kills_(from.kills_),
      items_(from.items_),
      level_up_times_(from.level_up_times_),
      graph_net_worth_(from.graph_net_worth_),
      inventory_snapshot_(from.inventory_snapshot_),
      auto_style_criteria_(from.auto_style_criteria_),
      event_data_(from.event_data_),
      strange_gem_progress_(from.strange_gem_progress_),
      victory_prediction_(from.victory_prediction_),
      contract_progress_(from.contract_progress_),
      guild_ids_(from.guild_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gauntlet_progress()) {
    gauntlet_progress_ = new ::CDOTAMatchMetadata_Team_GauntletProgress(*from.gauntlet_progress_);
  } else {
    gauntlet_progress_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rank_mmr_boost_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(rank_mmr_boost_type_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team.Player)
}

void CDOTAMatchMetadata_Team_Player::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gauntlet_progress_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rank_mmr_boost_type_) -
    reinterpret_cast<char*>(&gauntlet_progress_)) + sizeof(rank_mmr_boost_type_));
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gauntlet_progress_;
}

void CDOTAMatchMetadata_Team_Player::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team_Player* _this = reinterpret_cast< CDOTAMatchMetadata_Team_Player* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ability_upgrades_.Clear();
  equipped_econ_items_.Clear();
  kills_.Clear();
  items_.Clear();
  level_up_times_.Clear();
  graph_net_worth_.Clear();
  inventory_snapshot_.Clear();
  auto_style_criteria_.Clear();
  event_data_.Clear();
  strange_gem_progress_.Clear();
  victory_prediction_.Clear();
  contract_progress_.Clear();
  guild_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gauntlet_progress_ != nullptr);
    gauntlet_progress_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&avg_xpm_x16_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(avg_xpm_x16_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&best_kills_x16_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&farm_score_) -
        reinterpret_cast<char*>(&best_kills_x16_)) + sizeof(farm_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&support_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&triple_kills_) -
        reinterpret_cast<char*>(&support_score_)) + sizeof(triple_kills_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&aegis_snatched_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wards_dewarded_) -
        reinterpret_cast<char*>(&aegis_snatched_)) + sizeof(wards_dewarded_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stun_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rank_mmr_boost_type_) -
        reinterpret_cast<char*>(&stun_duration_)) + sizeof(rank_mmr_boost_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&_has_bits_);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ability_upgrades = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ability_upgrades(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ability_upgrades(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_slot(&_has_bits_);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CSOEconItem equipped_econ_items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_equipped_econ_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_kills_x16 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_avg_kills_x16(&_has_bits_);
          avg_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_deaths_x16 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_avg_deaths_x16(&_has_bits_);
          avg_deaths_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_assists_x16 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_avg_assists_x16(&_has_bits_);
          avg_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_gpm_x16 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_avg_gpm_x16(&_has_bits_);
          avg_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 avg_xpm_x16 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_avg_xpm_x16(&_has_bits_);
          avg_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_kills_x16 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_best_kills_x16(&_has_bits_);
          best_kills_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_assists_x16 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_best_assists_x16(&_has_bits_);
          best_assists_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_gpm_x16 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_best_gpm_x16(&_has_bits_);
          best_gpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_xpm_x16 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_best_xpm_x16(&_has_bits_);
          best_xpm_x16_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 win_streak = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_win_streak(&_has_bits_);
          win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 best_win_streak = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_best_win_streak(&_has_bits_);
          best_win_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float fight_score = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_fight_score(&_has_bits_);
          fight_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float farm_score = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_farm_score(&_has_bits_);
          farm_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float support_score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_support_score(&_has_bits_);
          support_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float push_score = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_push_score(&_has_bits_);
          push_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 level_up_times = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_level_up_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<176>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_level_up_times(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<189>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_inventory_snapshot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool avg_stats_calibrated = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_avg_stats_calibrated(&_has_bits_);
          avg_stats_calibrated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_auto_style_criteria(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_event_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_strange_gem_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 hero_xp = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_hero_xp(&_has_bits_);
          hero_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 camps_stacked = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_camps_stacked(&_has_bits_);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_victory_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 lane_selection_flags = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lane_selection_flags(&_has_bits_);
          lane_selection_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rampages = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rampages(&_has_bits_);
          rampages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 triple_kills = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_triple_kills(&_has_bits_);
          triple_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aegis_snatched = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_aegis_snatched(&_has_bits_);
          aegis_snatched_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rapiers_purchased = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rapiers_purchased(&_has_bits_);
          rapiers_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 couriers_killed = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_couriers_killed(&_has_bits_);
          couriers_killed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 net_worth_rank = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_net_worth_rank(&_has_bits_);
          net_worth_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 support_gold_spent = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_support_gold_spent(&_has_bits_);
          support_gold_spent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 observer_wards_placed = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_observer_wards_placed(&_has_bits_);
          observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sentry_wards_placed = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_sentry_wards_placed(&_has_bits_);
          sentry_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards_dewarded = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_wards_dewarded(&_has_bits_);
          wards_dewarded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float stun_duration = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_stun_duration(&_has_bits_);
          stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EDOTAMMRBoostType_IsValid(val))) {
            _internal_set_rank_mmr_boost_type(static_cast<::EDOTAMMRBoostType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMatchMetadata.Team.GauntletProgress gauntlet_progress = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_gauntlet_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_contract_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 guild_ids = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_guild_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<392>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_guild_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0, n = this->_internal_ability_upgrades_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ability_upgrades(i), target);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_player_slot(), target);
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_equipped_econ_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_equipped_econ_items(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_kills(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_items(i), target, stream);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_fight_score(), target);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_farm_score(), target);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_support_score(), target);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0, n = this->_internal_level_up_times_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_level_up_times(i), target);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_graph_net_worth(i), target);
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inventory_snapshot_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_inventory_snapshot(i), target, stream);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_avg_stats_calibrated(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_auto_style_criteria_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_auto_style_criteria(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_event_data(i), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strange_gem_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_strange_gem_progress(i), target, stream);
  }

  // optional uint32 hero_xp = 31;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_hero_xp(), target);
  }

  // optional uint32 camps_stacked = 32;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_camps_stacked(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_victory_prediction_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_victory_prediction(i), target, stream);
  }

  // optional uint32 lane_selection_flags = 34;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_lane_selection_flags(), target);
  }

  // optional uint32 rampages = 35;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_rampages(), target);
  }

  // optional uint32 triple_kills = 36;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_triple_kills(), target);
  }

  // optional uint32 aegis_snatched = 37;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_aegis_snatched(), target);
  }

  // optional uint32 rapiers_purchased = 38;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(38, this->_internal_rapiers_purchased(), target);
  }

  // optional uint32 couriers_killed = 39;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_couriers_killed(), target);
  }

  // optional uint32 net_worth_rank = 40;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(40, this->_internal_net_worth_rank(), target);
  }

  // optional uint32 support_gold_spent = 41;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(41, this->_internal_support_gold_spent(), target);
  }

  // optional uint32 observer_wards_placed = 42;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(42, this->_internal_observer_wards_placed(), target);
  }

  // optional uint32 sentry_wards_placed = 43;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(43, this->_internal_sentry_wards_placed(), target);
  }

  // optional uint32 wards_dewarded = 44;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(44, this->_internal_wards_dewarded(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float stun_duration = 45;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_stun_duration(), target);
  }

  // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      46, this->_internal_rank_mmr_boost_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CDOTAMatchMetadata.Team.GauntletProgress gauntlet_progress = 47;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        47, _Internal::gauntlet_progress(this), target, stream);
  }

  // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_contract_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, this->_internal_contract_progress(i), target, stream);
  }

  // repeated uint32 guild_ids = 49;
  for (int i = 0, n = this->_internal_guild_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(49, this->_internal_guild_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ability_upgrades = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ability_upgrades_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ability_upgrades_size());
    total_size += data_size;
  }

  // repeated .CSOEconItem equipped_econ_items = 4;
  total_size += 1UL * this->_internal_equipped_econ_items_size();
  for (const auto& msg : this->equipped_econ_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  total_size += 1UL * this->_internal_kills_size();
  for (const auto& msg : this->kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 level_up_times = 22;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->level_up_times_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_level_up_times_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  total_size += 2UL * this->_internal_inventory_snapshot_size();
  for (const auto& msg : this->inventory_snapshot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  total_size += 2UL * this->_internal_auto_style_criteria_size();
  for (const auto& msg : this->auto_style_criteria_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.EventData event_data = 29;
  total_size += 2UL * this->_internal_event_data_size();
  for (const auto& msg : this->event_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.StrangeGemProgress strange_gem_progress = 30;
  total_size += 2UL * this->_internal_strange_gem_progress_size();
  for (const auto& msg : this->strange_gem_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.VictoryPrediction victory_prediction = 33;
  total_size += 2UL * this->_internal_victory_prediction_size();
  for (const auto& msg : this->victory_prediction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.Team.Player.ContractProgress contract_progress = 48;
  total_size += 2UL * this->_internal_contract_progress_size();
  for (const auto& msg : this->contract_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 guild_ids = 49;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->guild_ids_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_guild_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .CDOTAMatchMetadata.Team.GauntletProgress gauntlet_progress = 47;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gauntlet_progress_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 player_slot = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_avg_xpm_x16());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 best_kills_x16 = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_kills_x16());
    }

    // optional uint32 best_assists_x16 = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_win_streak());
    }

    // optional uint32 best_win_streak = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_best_win_streak());
    }

    // optional float fight_score = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float support_score = 20;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float push_score = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional bool avg_stats_calibrated = 25;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional uint32 hero_xp = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_xp());
    }

    // optional uint32 camps_stacked = 32;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_camps_stacked());
    }

    // optional uint32 lane_selection_flags = 34;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lane_selection_flags());
    }

    // optional uint32 rampages = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rampages());
    }

    // optional uint32 triple_kills = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_triple_kills());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 aegis_snatched = 37;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aegis_snatched());
    }

    // optional uint32 rapiers_purchased = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rapiers_purchased());
    }

    // optional uint32 couriers_killed = 39;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_couriers_killed());
    }

    // optional uint32 net_worth_rank = 40;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_net_worth_rank());
    }

    // optional uint32 support_gold_spent = 41;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_support_gold_spent());
    }

    // optional uint32 observer_wards_placed = 42;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_observer_wards_placed());
    }

    // optional uint32 sentry_wards_placed = 43;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sentry_wards_placed());
    }

    // optional uint32 wards_dewarded = 44;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards_dewarded());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional float stun_duration = 45;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional .EDOTAMMRBoostType rank_mmr_boost_type = 46 [default = k_EDOTAMMRBoostType_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_rank_mmr_boost_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  kills_.MergeFrom(from.kills_);
  items_.MergeFrom(from.items_);
  level_up_times_.MergeFrom(from.level_up_times_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  inventory_snapshot_.MergeFrom(from.inventory_snapshot_);
  auto_style_criteria_.MergeFrom(from.auto_style_criteria_);
  event_data_.MergeFrom(from.event_data_);
  strange_gem_progress_.MergeFrom(from.strange_gem_progress_);
  victory_prediction_.MergeFrom(from.victory_prediction_);
  contract_progress_.MergeFrom(from.contract_progress_);
  guild_ids_.MergeFrom(from.guild_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gauntlet_progress()->::CDOTAMatchMetadata_Team_GauntletProgress::MergeFrom(from._internal_gauntlet_progress());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000800u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00001000u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00004000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      farm_score_ = from.farm_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      support_score_ = from.support_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      push_score_ = from.push_score_;
    }
    if (cached_has_bits & 0x00040000u) {
      avg_stats_calibrated_ = from.avg_stats_calibrated_;
    }
    if (cached_has_bits & 0x00080000u) {
      hero_xp_ = from.hero_xp_;
    }
    if (cached_has_bits & 0x00100000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00200000u) {
      lane_selection_flags_ = from.lane_selection_flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      rampages_ = from.rampages_;
    }
    if (cached_has_bits & 0x00800000u) {
      triple_kills_ = from.triple_kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      aegis_snatched_ = from.aegis_snatched_;
    }
    if (cached_has_bits & 0x02000000u) {
      rapiers_purchased_ = from.rapiers_purchased_;
    }
    if (cached_has_bits & 0x04000000u) {
      couriers_killed_ = from.couriers_killed_;
    }
    if (cached_has_bits & 0x08000000u) {
      net_worth_rank_ = from.net_worth_rank_;
    }
    if (cached_has_bits & 0x10000000u) {
      support_gold_spent_ = from.support_gold_spent_;
    }
    if (cached_has_bits & 0x20000000u) {
      observer_wards_placed_ = from.observer_wards_placed_;
    }
    if (cached_has_bits & 0x40000000u) {
      sentry_wards_placed_ = from.sentry_wards_placed_;
    }
    if (cached_has_bits & 0x80000000u) {
      wards_dewarded_ = from.wards_dewarded_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stun_duration_ = from.stun_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_mmr_boost_type_ = from.rank_mmr_boost_type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player::InternalSwap(CDOTAMatchMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  equipped_econ_items_.InternalSwap(&other->equipped_econ_items_);
  kills_.InternalSwap(&other->kills_);
  items_.InternalSwap(&other->items_);
  level_up_times_.InternalSwap(&other->level_up_times_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  inventory_snapshot_.InternalSwap(&other->inventory_snapshot_);
  auto_style_criteria_.InternalSwap(&other->auto_style_criteria_);
  event_data_.InternalSwap(&other->event_data_);
  strange_gem_progress_.InternalSwap(&other->strange_gem_progress_);
  victory_prediction_.InternalSwap(&other->victory_prediction_);
  contract_progress_.InternalSwap(&other->contract_progress_);
  guild_ids_.InternalSwap(&other->guild_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, rank_mmr_boost_type_)
      + sizeof(CDOTAMatchMetadata_Team_Player::rank_mmr_boost_type_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, gauntlet_progress_)>(
          reinterpret_cast<char*>(&gauntlet_progress_),
          reinterpret_cast<char*>(&other->gauntlet_progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_Team>()._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cm_first_pick(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cm_captain_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cm_penalty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  graph_experience_(arena),
  graph_gold_earned_(arena),
  graph_net_worth_(arena),
  cm_bans_(arena),
  cm_picks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.Team)
}
CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      graph_experience_(from.graph_experience_),
      graph_gold_earned_(from.graph_gold_earned_),
      graph_net_worth_(from.graph_net_worth_),
      cm_bans_(from.cm_bans_),
      cm_picks_(from.cm_picks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.Team)
}

void CDOTAMatchMetadata_Team::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dota_team_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_Team::ArenaDtor(void* object) {
  CDOTAMatchMetadata_Team* _this = reinterpret_cast< CDOTAMatchMetadata_Team* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  graph_experience_.Clear();
  graph_gold_earned_.Clear();
  graph_net_worth_.Clear();
  cm_bans_.Clear();
  cm_picks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dota_team_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cm_penalty_) -
        reinterpret_cast<char*>(&dota_team_)) + sizeof(cm_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.Team.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float graph_experience = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_experience(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_experience(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_gold_earned = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_gold_earned(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_gold_earned(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_net_worth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_net_worth(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_net_worth(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cm_first_pick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_cm_first_pick(&has_bits);
          cm_first_pick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cm_captain_player_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cm_captain_player_id(&has_bits);
          cm_captain_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cm_bans = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_bans(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_bans(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 cm_picks = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cm_picks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cm_picks(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cm_penalty = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cm_penalty(&has_bits);
          cm_penalty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  // repeated float graph_experience = 3;
  for (int i = 0, n = this->_internal_graph_experience_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_graph_experience(i), target);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0, n = this->_internal_graph_gold_earned_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_graph_gold_earned(i), target);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0, n = this->_internal_graph_net_worth_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_graph_net_worth(i), target);
  }

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_cm_first_pick(), target);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_cm_captain_player_id(), target);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0, n = this->_internal_cm_bans_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_cm_bans(i), target);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0, n = this->_internal_cm_picks_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cm_picks(i), target);
  }

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cm_penalty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.Team)
  return target;
}

size_t CDOTAMatchMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_experience = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_experience_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_experience_size());
    total_size += data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_gold_earned_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_gold_earned_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_net_worth_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_net_worth_size());
    total_size += data_size;
  }

  // repeated uint32 cm_bans = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_bans_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_bans_size());
    total_size += data_size;
  }

  // repeated uint32 cm_picks = 9;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cm_picks_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cm_picks_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 dota_team = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_captain_player_id = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cm_captain_player_id());
    }

    // optional uint32 cm_penalty = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cm_penalty());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team::MergeFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  graph_experience_.MergeFrom(from.graph_experience_);
  graph_gold_earned_.MergeFrom(from.graph_gold_earned_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  cm_bans_.MergeFrom(from.cm_bans_);
  cm_picks_.MergeFrom(from.cm_picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      cm_first_pick_ = from.cm_first_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      cm_captain_player_id_ = from.cm_captain_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cm_penalty_ = from.cm_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team::InternalSwap(CDOTAMatchMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  graph_experience_.InternalSwap(&other->graph_experience_);
  graph_gold_earned_.InternalSwap(&other->graph_gold_earned_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  cm_bans_.InternalSwap(&other->cm_bans_);
  cm_picks_.InternalSwap(&other->cm_picks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_penalty_)
      + sizeof(CDOTAMatchMetadata_Team::cm_penalty_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_Team, dota_team_)>(
          reinterpret_cast<char*>(&dota_team_),
          reinterpret_cast<char*>(&other->dota_team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
}
CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(progress_));
}

CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::~CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* _this = reinterpret_cast< CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&progress_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(progress_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  return target;
}

size_t CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 progress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_progress());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::MergeFrom(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::CopyFrom(const CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::InternalSwap(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, progress_)
      + sizeof(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::progress_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata_GuildChallengeProgress::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata_GuildChallengeProgress>()._has_bits_);
  static void set_has_guild_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_challenge_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_challenge_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_progress_at_start(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_challenge_progress_accumulated(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

CDOTAMatchMetadata_GuildChallengeProgress::CDOTAMatchMetadata_GuildChallengeProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  individual_progress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata.GuildChallengeProgress)
}
CDOTAMatchMetadata_GuildChallengeProgress::CDOTAMatchMetadata_GuildChallengeProgress(const CDOTAMatchMetadata_GuildChallengeProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      individual_progress_(from.individual_progress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_progress_accumulated_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_progress_accumulated_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata.GuildChallengeProgress)
}

void CDOTAMatchMetadata_GuildChallengeProgress::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guild_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&challenge_progress_accumulated_) -
    reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_progress_accumulated_));
}

CDOTAMatchMetadata_GuildChallengeProgress::~CDOTAMatchMetadata_GuildChallengeProgress() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata.GuildChallengeProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata_GuildChallengeProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchMetadata_GuildChallengeProgress::ArenaDtor(void* object) {
  CDOTAMatchMetadata_GuildChallengeProgress* _this = reinterpret_cast< CDOTAMatchMetadata_GuildChallengeProgress* >(object);
  (void)_this;
}
void CDOTAMatchMetadata_GuildChallengeProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata_GuildChallengeProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata_GuildChallengeProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata.GuildChallengeProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  individual_progress_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&guild_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&challenge_progress_accumulated_) -
        reinterpret_cast<char*>(&guild_id_)) + sizeof(challenge_progress_accumulated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata_GuildChallengeProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 guild_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_guild_id(&has_bits);
          guild_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EEvent_IsValid(val))) {
            _internal_set_event_id(static_cast<::EEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_instance_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_instance_id(&has_bits);
          challenge_instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_challenge_parameter(&has_bits);
          challenge_parameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_challenge_timestamp(&has_bits);
          challenge_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_at_start = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_challenge_progress_at_start(&has_bits);
          challenge_progress_at_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_progress_accumulated = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_challenge_progress_accumulated(&has_bits);
          challenge_progress_accumulated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_individual_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata_GuildChallengeProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata.GuildChallengeProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_guild_id(), target);
  }

  // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_event_id(), target);
  }

  // optional uint32 challenge_instance_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_instance_id(), target);
  }

  // optional uint32 challenge_parameter = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_challenge_parameter(), target);
  }

  // optional uint32 challenge_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_challenge_timestamp(), target);
  }

  // optional uint32 challenge_progress_at_start = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_challenge_progress_at_start(), target);
  }

  // optional uint32 challenge_progress_accumulated = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_challenge_progress_accumulated(), target);
  }

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_individual_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_individual_progress(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata.GuildChallengeProgress)
  return target;
}

size_t CDOTAMatchMetadata_GuildChallengeProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata.GuildChallengeProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress.IndividualProgress individual_progress = 8;
  total_size += 1UL * this->_internal_individual_progress_size();
  for (const auto& msg : this->individual_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 guild_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_guild_id());
    }

    // optional .EEvent event_id = 2 [default = EVENT_ID_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_id());
    }

    // optional uint32 challenge_instance_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_instance_id());
    }

    // optional uint32 challenge_parameter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_parameter());
    }

    // optional uint32 challenge_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_timestamp());
    }

    // optional uint32 challenge_progress_at_start = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_progress_at_start());
    }

    // optional uint32 challenge_progress_accumulated = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_progress_accumulated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata_GuildChallengeProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata.GuildChallengeProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_GuildChallengeProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata_GuildChallengeProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata.GuildChallengeProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata.GuildChallengeProgress)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_GuildChallengeProgress::MergeFrom(const CDOTAMatchMetadata_GuildChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata.GuildChallengeProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  individual_progress_.MergeFrom(from.individual_progress_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_instance_id_ = from.challenge_instance_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_parameter_ = from.challenge_parameter_;
    }
    if (cached_has_bits & 0x00000010u) {
      challenge_timestamp_ = from.challenge_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      challenge_progress_at_start_ = from.challenge_progress_at_start_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_progress_accumulated_ = from.challenge_progress_accumulated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_GuildChallengeProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata.GuildChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_GuildChallengeProgress::CopyFrom(const CDOTAMatchMetadata_GuildChallengeProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata.GuildChallengeProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_GuildChallengeProgress::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_GuildChallengeProgress::InternalSwap(CDOTAMatchMetadata_GuildChallengeProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  individual_progress_.InternalSwap(&other->individual_progress_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress, challenge_progress_accumulated_)
      + sizeof(CDOTAMatchMetadata_GuildChallengeProgress::challenge_progress_accumulated_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata_GuildChallengeProgress, guild_id_)>(
          reinterpret_cast<char*>(&guild_id_),
          reinterpret_cast<char*>(&other->guild_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata_GuildChallengeProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchMetadata>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_report_until_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_event_game_custom_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_primary_event_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgMatchMatchmakingStats& matchmaking_stats(const CDOTAMatchMetadata* msg);
  static void set_has_matchmaking_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMvpData& mvp_data(const CDOTAMatchMetadata* msg);
  static void set_has_mvp_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgMatchMatchmakingStats&
CDOTAMatchMetadata::_Internal::matchmaking_stats(const CDOTAMatchMetadata* msg) {
  return *msg->matchmaking_stats_;
}
const ::CMvpData&
CDOTAMatchMetadata::_Internal::mvp_data(const CDOTAMatchMetadata* msg) {
  return *msg->mvp_data_;
}
void CDOTAMatchMetadata::clear_item_rewards() {
  item_rewards_.Clear();
}
void CDOTAMatchMetadata::clear_match_tips() {
  match_tips_.Clear();
}
void CDOTAMatchMetadata::clear_matchmaking_stats() {
  if (matchmaking_stats_ != nullptr) matchmaking_stats_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata::clear_mvp_data() {
  if (mvp_data_ != nullptr) mvp_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
CDOTAMatchMetadata::CDOTAMatchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  item_rewards_(arena),
  match_tips_(arena),
  guild_challenge_progress_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchMetadata)
}
CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      item_rewards_(from.item_rewards_),
      match_tips_(from.match_tips_),
      guild_challenge_progress_(from.guild_challenge_progress_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_game_custom_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_event_game_custom_table()) {
    event_game_custom_table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_event_game_custom_table(), 
      GetArena());
  }
  if (from._internal_has_matchmaking_stats()) {
    matchmaking_stats_ = new ::CMsgMatchMatchmakingStats(*from.matchmaking_stats_);
  } else {
    matchmaking_stats_ = nullptr;
  }
  if (from._internal_has_mvp_data()) {
    mvp_data_ = new ::CMvpData(*from.mvp_data_);
  } else {
    mvp_data_ = nullptr;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchMetadata)
}

void CDOTAMatchMetadata::SharedCtor() {
event_game_custom_table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&matchmaking_stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&primary_event_id_) -
    reinterpret_cast<char*>(&matchmaking_stats_)) + sizeof(primary_event_id_));
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  event_game_custom_table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete matchmaking_stats_;
  if (this != internal_default_instance()) delete mvp_data_;
}

void CDOTAMatchMetadata::ArenaDtor(void* object) {
  CDOTAMatchMetadata* _this = reinterpret_cast< CDOTAMatchMetadata* >(object);
  (void)_this;
}
void CDOTAMatchMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  item_rewards_.Clear();
  match_tips_.Clear();
  guild_challenge_progress_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      event_game_custom_table_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(matchmaking_stats_ != nullptr);
      matchmaking_stats_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mvp_data_ != nullptr);
      mvp_data_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&primary_event_id_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(primary_event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAMatchMetadata.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CLobbyTimedRewardDetails item_rewards = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_item_rewards(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional fixed64 lobby_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional fixed64 report_until_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_report_until_time(&has_bits);
          report_until_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes event_game_custom_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_event_game_custom_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 primary_event_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_primary_event_id(&has_bits);
          primary_event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgMatchTips match_tips = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_match_tips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchmaking_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMvpData mvp_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_mvp_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_guild_challenge_progress(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_item_rewards_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_item_rewards(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_report_until_time(), target);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_event_game_custom_table(), target);
  }

  // optional uint32 primary_event_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_primary_event_id(), target);
  }

  // repeated .CMsgMatchTips match_tips = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_match_tips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_match_tips(i), target, stream);
  }

  // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::matchmaking_stats(this), target, stream);
  }

  // optional .CMvpData mvp_data = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::mvp_data(this), target, stream);
  }

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_guild_challenge_progress_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_guild_challenge_progress(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchMetadata)
  return target;
}

size_t CDOTAMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchMetadata.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CLobbyTimedRewardDetails item_rewards = 2;
  total_size += 1UL * this->_internal_item_rewards_size();
  for (const auto& msg : this->item_rewards_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgMatchTips match_tips = 7;
  total_size += 1UL * this->_internal_match_tips_size();
  for (const auto& msg : this->match_tips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchMetadata.GuildChallengeProgress guild_challenge_progress = 10;
  total_size += 1UL * this->_internal_guild_challenge_progress_size();
  for (const auto& msg : this->guild_challenge_progress_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes event_game_custom_table = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_event_game_custom_table());
    }

    // optional .CMsgMatchMatchmakingStats matchmaking_stats = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *matchmaking_stats_);
    }

    // optional .CMvpData mvp_data = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mvp_data_);
    }

    // optional fixed64 lobby_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 primary_event_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_primary_event_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata::MergeFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  item_rewards_.MergeFrom(from.item_rewards_);
  match_tips_.MergeFrom(from.match_tips_);
  guild_challenge_progress_.MergeFrom(from.guild_challenge_progress_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_event_game_custom_table(from._internal_event_game_custom_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_matchmaking_stats()->::CMsgMatchMatchmakingStats::MergeFrom(from._internal_matchmaking_stats());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mvp_data()->::CMvpData::MergeFrom(from._internal_mvp_data());
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_until_time_ = from.report_until_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      primary_event_id_ = from.primary_event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata::InternalSwap(CDOTAMatchMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  item_rewards_.InternalSwap(&other->item_rewards_);
  match_tips_.InternalSwap(&other->match_tips_);
  guild_challenge_progress_.InternalSwap(&other->guild_challenge_progress_);
  event_game_custom_table_.Swap(&other->event_game_custom_table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, primary_event_id_)
      + sizeof(CDOTAMatchMetadata::primary_event_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchMetadata, matchmaking_stats_)>(
          reinterpret_cast<char*>(&matchmaking_stats_),
          reinterpret_cast<char*>(&other->matchmaking_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_StringName::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_StringName>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_StringName::CDOTAMatchPrivateMetadata_StringName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.StringName)
}
CDOTAMatchPrivateMetadata_StringName::CDOTAMatchPrivateMetadata_StringName(const CDOTAMatchPrivateMetadata_StringName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.StringName)
}

void CDOTAMatchPrivateMetadata_StringName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_ = 0u;
}

CDOTAMatchPrivateMetadata_StringName::~CDOTAMatchPrivateMetadata_StringName() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.StringName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_StringName::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_StringName::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_StringName* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_StringName* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_StringName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_StringName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_StringName::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.StringName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_StringName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.StringName.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_StringName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.StringName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.StringName.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.StringName)
  return target;
}

size_t CDOTAMatchPrivateMetadata_StringName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.StringName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_StringName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.StringName)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_StringName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_StringName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.StringName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.StringName)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_StringName::MergeFrom(const CDOTAMatchPrivateMetadata_StringName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.StringName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_StringName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.StringName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_StringName::CopyFrom(const CDOTAMatchPrivateMetadata_StringName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.StringName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_StringName::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_StringName::InternalSwap(CDOTAMatchPrivateMetadata_StringName* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_StringName::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_damage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(damage_));
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&damage_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(damage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 damage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_damage(&has_bits);
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 damage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 damage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_damage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      damage_ = from.damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, damage_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::damage_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>()._has_bits_);
  static void set_has_source_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  by_hero_targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      by_hero_targets_(from.by_hero_targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_unit_index_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_unit_index_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_hero_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_unit_index_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_hero_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 source_unit_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_unit_index(&has_bits);
          source_unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_by_hero_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_by_hero_targets(i), target, stream);
  }

  // optional uint32 source_unit_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility.ByHeroTarget by_hero_targets = 2;
  total_size += 1UL * this->_internal_by_hero_targets_size();
  for (const auto& msg : this->by_hero_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 source_unit_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_unit_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_hero_targets_.MergeFrom(from.by_hero_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_unit_index_ = from.source_unit_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  by_hero_targets_.InternalSwap(&other->by_hero_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, source_unit_index_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::source_unit_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility, ability_id_)>(
          reinterpret_cast<char*>(&ability_id_),
          reinterpret_cast<char*>(&other->ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&healing_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(healing_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&healing_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(healing_));
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&healing_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(healing_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 healing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_healing(&has_bits);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional uint32 healing = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_healing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional uint32 healing = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_healing());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      healing_ = from.healing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, healing_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::healing_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility>()._has_bits_);
  static void set_has_source_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  by_hero_targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      by_hero_targets_(from.by_hero_targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ability_id_, &from.ability_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_unit_index_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ability_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_unit_index_) -
    reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_hero_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&ability_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_unit_index_) -
        reinterpret_cast<char*>(&ability_id_)) + sizeof(source_unit_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ability_id(&has_bits);
          ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_hero_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 source_unit_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_source_unit_index(&has_bits);
          source_unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ability_id(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_by_hero_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_by_hero_targets(i), target, stream);
  }

  // optional uint32 source_unit_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_unit_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility.ByHeroTarget by_hero_targets = 2;
  total_size += 1UL * this->_internal_by_hero_targets_size();
  for (const auto& msg : this->by_hero_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 ability_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ability_id());
    }

    // optional uint32 source_unit_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_source_unit_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_hero_targets_.MergeFrom(from.by_hero_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_unit_index_ = from.source_unit_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  by_hero_targets_.InternalSwap(&other->by_hero_targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, source_unit_index_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::source_unit_index_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility, ability_id_)>(
          reinterpret_cast<char*>(&ability_id_),
          reinterpret_cast<char*>(&other->ability_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>()._has_bits_);
  static void set_has_game_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  damage_by_ability_(arena),
  healing_by_ability_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}
CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      damage_by_ability_(from.damage_by_ability_),
      healing_by_ability_(from.healing_by_ability_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_time_ = from.game_time_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SharedCtor() {
game_time_ = 0;
}

CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::~CDOTAMatchPrivateMetadata_Team_Player_CombatSegment() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damage_by_ability_.Clear();
  healing_by_ability_.Clear();
  game_time_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 game_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_game_time(&has_bits);
          game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damage_by_ability(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_healing_by_ability(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_time(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_damage_by_ability_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_damage_by_ability(i), target, stream);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_healing_by_ability_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_healing_by_ability(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.DamageByAbility damage_by_ability = 2;
  total_size += 1UL * this->_internal_damage_by_ability_size();
  for (const auto& msg : this->damage_by_ability_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment.HealingByAbility healing_by_ability = 3;
  total_size += 1UL * this->_internal_healing_by_ability_size();
  for (const auto& msg : this->healing_by_ability_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 game_time = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_CombatSegment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  damage_by_ability_.MergeFrom(from.damage_by_ability_);
  healing_by_ability_.MergeFrom(from.healing_by_ability_);
  if (from._internal_has_game_time()) {
    _internal_set_game_time(from._internal_game_time());
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_CombatSegment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.CombatSegment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  damage_by_ability_.InternalSwap(&other->damage_by_ability_);
  healing_by_ability_.InternalSwap(&other->healing_by_ability_);
  swap(game_time_, other->game_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_CombatSegment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>()._has_bits_);
  static void set_has_hero_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elapsed_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_hidden(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_hidden_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(is_hidden_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hero_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_hidden_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(is_hidden_));
}

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_hidden_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(is_hidden_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hero_id(&has_bits);
          hero_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float elapsed_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_elapsed_duration(&has_bits);
          elapsed_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool is_hidden = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_hidden(&has_bits);
          is_hidden_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_hero_id(), target);
  }

  // optional float elapsed_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_elapsed_duration(), target);
  }

  // optional bool is_hidden = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_hidden(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hero_id());
    }

    // optional float elapsed_duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool is_hidden = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      elapsed_duration_ = from.elapsed_duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_hidden_ = from.is_hidden_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, is_hidden_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::is_hidden_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget, hero_id_)>(
          reinterpret_cast<char*>(&hero_id_),
          reinterpret_cast<char*>(&other->hero_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>()._has_bits_);
  static void set_has_buff_ability_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buff_modifier_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  by_hero_targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}
CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      by_hero_targets_(from.by_hero_targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buff_modifier_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buff_modifier_name()) {
    buff_modifier_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buff_modifier_name(), 
      GetArena());
  }
  buff_ability_id_ = from.buff_ability_id_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SharedCtor() {
buff_modifier_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
buff_ability_id_ = 0u;
}

CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::~CDOTAMatchPrivateMetadata_Team_Player_BuffRecord() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  buff_modifier_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_hero_targets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buff_modifier_name_.ClearNonDefaultToEmpty();
  }
  buff_ability_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 buff_ability_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_buff_ability_id(&has_bits);
          buff_ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_hero_targets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string buff_modifier_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_buff_modifier_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 buff_ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_buff_ability_id(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_by_hero_targets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_by_hero_targets(i), target, stream);
  }

  // optional string buff_modifier_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_buff_modifier_name().data(), static_cast<int>(this->_internal_buff_modifier_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.buff_modifier_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_buff_modifier_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord.ByHeroTarget by_hero_targets = 2;
  total_size += 1UL * this->_internal_by_hero_targets_size();
  for (const auto& msg : this->by_hero_targets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string buff_modifier_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_buff_modifier_name());
    }

    // optional uint32 buff_ability_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_buff_ability_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_BuffRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_hero_targets_.MergeFrom(from.by_hero_targets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_buff_modifier_name(from._internal_buff_modifier_name());
    }
    if (cached_has_bits & 0x00000002u) {
      buff_ability_id_ = from.buff_ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_BuffRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.BuffRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  by_hero_targets_.InternalSwap(&other->by_hero_targets_);
  buff_modifier_name_.Swap(&other->buff_modifier_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(buff_ability_id_, other->buff_ability_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_BuffRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>()._has_bits_);
  static void set_has_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_passive(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buildings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_abilities(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wards(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_other(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
}
CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&creep_, &from.creep_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_) -
    reinterpret_cast<char*>(&creep_)) + sizeof(other_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creep_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&other_) -
    reinterpret_cast<char*>(&creep_)) + sizeof(other_));
}

CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::~CDOTAMatchPrivateMetadata_Team_Player_GoldReceived() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&creep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_) -
        reinterpret_cast<char*>(&creep_)) + sizeof(other_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 creep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_creep(&has_bits);
          creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heroes(&has_bits);
          heroes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bounty_runes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bounty_runes(&has_bits);
          bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 passive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_passive(&has_bits);
          passive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 buildings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_buildings(&has_bits);
          buildings_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 abilities = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_abilities(&has_bits);
          abilities_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wards = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_wards(&has_bits);
          wards_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 other = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_other(&has_bits);
          other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 creep = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_creep(), target);
  }

  // optional uint32 heroes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroes(), target);
  }

  // optional uint32 bounty_runes = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bounty_runes(), target);
  }

  // optional uint32 passive = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_passive(), target);
  }

  // optional uint32 buildings = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_buildings(), target);
  }

  // optional uint32 abilities = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_abilities(), target);
  }

  // optional uint32 wards = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_wards(), target);
  }

  // optional uint32 other = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_other(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 creep = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep());
    }

    // optional uint32 heroes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroes());
    }

    // optional uint32 bounty_runes = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bounty_runes());
    }

    // optional uint32 passive = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_passive());
    }

    // optional uint32 buildings = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_buildings());
    }

    // optional uint32 abilities = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_abilities());
    }

    // optional uint32 wards = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wards());
    }

    // optional uint32 other = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_other());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_GoldReceived>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      creep_ = from.creep_;
    }
    if (cached_has_bits & 0x00000002u) {
      heroes_ = from.heroes_;
    }
    if (cached_has_bits & 0x00000004u) {
      bounty_runes_ = from.bounty_runes_;
    }
    if (cached_has_bits & 0x00000008u) {
      passive_ = from.passive_;
    }
    if (cached_has_bits & 0x00000010u) {
      buildings_ = from.buildings_;
    }
    if (cached_has_bits & 0x00000020u) {
      abilities_ = from.abilities_;
    }
    if (cached_has_bits & 0x00000040u) {
      wards_ = from.wards_;
    }
    if (cached_has_bits & 0x00000080u) {
      other_ = from.other_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.GoldReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, other_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::other_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_GoldReceived, creep_)>(
          reinterpret_cast<char*>(&creep_),
          reinterpret_cast<char*>(&other->creep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player_XPReceived>()._has_bits_);
  static void set_has_creep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heroes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_roshan(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tome_of_knowledge(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outpost(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_other(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
}
CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&creep_, &from.creep_,
    static_cast<size_t>(reinterpret_cast<char*>(&other_) -
    reinterpret_cast<char*>(&creep_)) + sizeof(other_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&creep_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&other_) -
    reinterpret_cast<char*>(&creep_)) + sizeof(other_));
}

CDOTAMatchPrivateMetadata_Team_Player_XPReceived::~CDOTAMatchPrivateMetadata_Team_Player_XPReceived() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player_XPReceived* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player_XPReceived* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&creep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&other_) -
        reinterpret_cast<char*>(&creep_)) + sizeof(other_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 creep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_creep(&has_bits);
          creep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heroes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_heroes(&has_bits);
          heroes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 roshan = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_roshan(&has_bits);
          roshan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tome_of_knowledge = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tome_of_knowledge(&has_bits);
          tome_of_knowledge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 outpost = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_outpost(&has_bits);
          outpost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 other = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_other(&has_bits);
          other_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player_XPReceived::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 creep = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_creep(), target);
  }

  // optional uint32 heroes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_heroes(), target);
  }

  // optional uint32 roshan = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_roshan(), target);
  }

  // optional uint32 tome_of_knowledge = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tome_of_knowledge(), target);
  }

  // optional uint32 outpost = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_outpost(), target);
  }

  // optional uint32 other = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_other(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player_XPReceived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 creep = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_creep());
    }

    // optional uint32 heroes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_heroes());
    }

    // optional uint32 roshan = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_roshan());
    }

    // optional uint32 tome_of_knowledge = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tome_of_knowledge());
    }

    // optional uint32 outpost = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_outpost());
    }

    // optional uint32 other = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_other());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player_XPReceived* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player_XPReceived>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      creep_ = from.creep_;
    }
    if (cached_has_bits & 0x00000002u) {
      heroes_ = from.heroes_;
    }
    if (cached_has_bits & 0x00000004u) {
      roshan_ = from.roshan_;
    }
    if (cached_has_bits & 0x00000008u) {
      tome_of_knowledge_ = from.tome_of_knowledge_;
    }
    if (cached_has_bits & 0x00000010u) {
      outpost_ = from.outpost_;
    }
    if (cached_has_bits & 0x00000020u) {
      other_ = from.other_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player_XPReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player.XPReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player_XPReceived::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player_XPReceived::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player_XPReceived* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_XPReceived, other_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player_XPReceived::other_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player_XPReceived, creep_)>(
          reinterpret_cast<char*>(&creep_),
          reinterpret_cast<char*>(&other->creep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player_XPReceived::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Player::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Player>()._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_player_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_position_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived& gold_received(const CDOTAMatchPrivateMetadata_Team_Player* msg);
  static void set_has_gold_received(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived& xp_received(const CDOTAMatchPrivateMetadata_Team_Player* msg);
  static void set_has_xp_received(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived&
CDOTAMatchPrivateMetadata_Team_Player::_Internal::gold_received(const CDOTAMatchPrivateMetadata_Team_Player* msg) {
  return *msg->gold_received_;
}
const ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived&
CDOTAMatchPrivateMetadata_Team_Player::_Internal::xp_received(const CDOTAMatchPrivateMetadata_Team_Player* msg) {
  return *msg->xp_received_;
}
CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  combat_segments_(arena),
  damage_unit_names_(arena),
  buff_records_(arena),
  graph_kills_(arena),
  graph_deaths_(arena),
  graph_assists_(arena),
  graph_lasthits_(arena),
  graph_denies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Player)
}
CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      combat_segments_(from.combat_segments_),
      damage_unit_names_(from.damage_unit_names_),
      buff_records_(from.buff_records_),
      graph_kills_(from.graph_kills_),
      graph_deaths_(from.graph_deaths_),
      graph_assists_(from.graph_assists_),
      graph_lasthits_(from.graph_lasthits_),
      graph_denies_(from.graph_denies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  position_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_position_stream()) {
    position_stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_position_stream(), 
      GetArena());
  }
  if (from._internal_has_gold_received()) {
    gold_received_ = new ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived(*from.gold_received_);
  } else {
    gold_received_ = nullptr;
  }
  if (from._internal_has_xp_received()) {
    xp_received_ = new ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived(*from.xp_received_);
  } else {
    xp_received_ = nullptr;
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Player)
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedCtor() {
position_stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gold_received_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&gold_received_)) + sizeof(player_slot_));
}

CDOTAMatchPrivateMetadata_Team_Player::~CDOTAMatchPrivateMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  position_stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gold_received_;
  if (this != internal_default_instance()) delete xp_received_;
}

void CDOTAMatchPrivateMetadata_Team_Player::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Player* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Player* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  combat_segments_.Clear();
  damage_unit_names_.Clear();
  buff_records_.Clear();
  graph_kills_.Clear();
  graph_deaths_.Clear();
  graph_assists_.Clear();
  graph_lasthits_.Clear();
  graph_denies_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      position_stream_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gold_received_ != nullptr);
      gold_received_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(xp_received_ != nullptr);
      xp_received_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&player_slot_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 player_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_slot(&has_bits);
          player_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes position_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_position_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_combat_segments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string damage_unit_names = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_damage_unit_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buff_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float graph_kills = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_kills(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_kills(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_deaths = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_deaths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<69>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_deaths(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_assists = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_assists(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<77>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_assists(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_lasthits = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_lasthits(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<85>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_lasthits(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float graph_denies = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_denies(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<93>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_denies(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_gold_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_xp_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_player_slot(), target);
  }

  // optional bytes position_stream = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_position_stream(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_combat_segments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_combat_segments(i), target, stream);
  }

  // repeated string damage_unit_names = 5;
  for (int i = 0, n = this->_internal_damage_unit_names_size(); i < n; i++) {
    const auto& s = this->_internal_damage_unit_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.Team.Player.damage_unit_names");
    target = stream->WriteString(5, s, target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buff_records_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_buff_records(i), target, stream);
  }

  // repeated float graph_kills = 7;
  for (int i = 0, n = this->_internal_graph_kills_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_graph_kills(i), target);
  }

  // repeated float graph_deaths = 8;
  for (int i = 0, n = this->_internal_graph_deaths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_graph_deaths(i), target);
  }

  // repeated float graph_assists = 9;
  for (int i = 0, n = this->_internal_graph_assists_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_graph_assists(i), target);
  }

  // repeated float graph_lasthits = 10;
  for (int i = 0, n = this->_internal_graph_lasthits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_graph_lasthits(i), target);
  }

  // repeated float graph_denies = 11;
  for (int i = 0, n = this->_internal_graph_denies_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_graph_denies(i), target);
  }

  // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::gold_received(this), target, stream);
  }

  // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::xp_received(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.CombatSegment combat_segments = 4;
  total_size += 1UL * this->_internal_combat_segments_size();
  for (const auto& msg : this->combat_segments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string damage_unit_names = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(damage_unit_names_.size());
  for (int i = 0, n = damage_unit_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      damage_unit_names_.Get(i));
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player.BuffRecord buff_records = 6;
  total_size += 1UL * this->_internal_buff_records_size();
  for (const auto& msg : this->buff_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_kills = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_kills_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_kills_size());
    total_size += data_size;
  }

  // repeated float graph_deaths = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_deaths_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_deaths_size());
    total_size += data_size;
  }

  // repeated float graph_assists = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_assists_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_assists_size());
    total_size += data_size;
  }

  // repeated float graph_lasthits = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_lasthits_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_lasthits_size());
    total_size += data_size;
  }

  // repeated float graph_denies = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_denies_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_denies_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes position_stream = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_position_stream());
    }

    // optional .CDOTAMatchPrivateMetadata.Team.Player.GoldReceived gold_received = 12;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gold_received_);
    }

    // optional .CDOTAMatchPrivateMetadata.Team.Player.XPReceived xp_received = 13;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *xp_received_);
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_id());
    }

    // optional uint32 player_slot = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_player_slot());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  combat_segments_.MergeFrom(from.combat_segments_);
  damage_unit_names_.MergeFrom(from.damage_unit_names_);
  buff_records_.MergeFrom(from.buff_records_);
  graph_kills_.MergeFrom(from.graph_kills_);
  graph_deaths_.MergeFrom(from.graph_deaths_);
  graph_assists_.MergeFrom(from.graph_assists_);
  graph_lasthits_.MergeFrom(from.graph_lasthits_);
  graph_denies_.MergeFrom(from.graph_denies_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_position_stream(from._internal_position_stream());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gold_received()->::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived::MergeFrom(from._internal_gold_received());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_xp_received()->::CDOTAMatchPrivateMetadata_Team_Player_XPReceived::MergeFrom(from._internal_xp_received());
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  combat_segments_.InternalSwap(&other->combat_segments_);
  damage_unit_names_.InternalSwap(&other->damage_unit_names_);
  buff_records_.InternalSwap(&other->buff_records_);
  graph_kills_.InternalSwap(&other->graph_kills_);
  graph_deaths_.InternalSwap(&other->graph_deaths_);
  graph_assists_.InternalSwap(&other->graph_assists_);
  graph_lasthits_.InternalSwap(&other->graph_lasthits_);
  graph_denies_.InternalSwap(&other->graph_denies_);
  position_stream_.Swap(&other->position_stream_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, player_slot_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Player::player_slot_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, gold_received_)>(
          reinterpret_cast<char*>(&gold_received_),
          reinterpret_cast<char*>(&other->gold_received_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team_Building::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team_Building>()._has_bits_);
  static void set_has_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position_quant_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_position_quant_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_death_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team.Building)
}
CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit_name()) {
    unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit_name(), 
      GetArena());
  }
  ::memcpy(&position_quant_x_, &from.position_quant_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&death_time_) -
    reinterpret_cast<char*>(&position_quant_x_)) + sizeof(death_time_));
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team.Building)
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedCtor() {
unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_quant_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&death_time_) -
    reinterpret_cast<char*>(&position_quant_x_)) + sizeof(death_time_));
}

CDOTAMatchPrivateMetadata_Team_Building::~CDOTAMatchPrivateMetadata_Team_Building() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team.Building)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Building::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team_Building* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team_Building* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team_Building::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team_Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team_Building::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    unit_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&position_quant_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&death_time_) -
        reinterpret_cast<char*>(&position_quant_x_)) + sizeof(death_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team_Building::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string unit_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CDOTAMatchPrivateMetadata.Team.Building.unit_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position_quant_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_position_quant_x(&has_bits);
          position_quant_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 position_quant_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_position_quant_y(&has_bits);
          position_quant_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float death_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_death_time(&has_bits);
          death_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team_Building::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit_name().data(), static_cast<int>(this->_internal_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CDOTAMatchPrivateMetadata.Team.Building.unit_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unit_name(), target);
  }

  // optional uint32 position_quant_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_position_quant_x(), target);
  }

  // optional uint32 position_quant_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_position_quant_y(), target);
  }

  // optional float death_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_death_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team.Building)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team.Building)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unit_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit_name());
    }

    // optional uint32 position_quant_x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_quant_x());
    }

    // optional uint32 position_quant_y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_position_quant_y());
    }

    // optional float death_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Building* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team_Building>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team.Building)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team.Building)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unit_name(from._internal_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      position_quant_x_ = from.position_quant_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_quant_y_ = from.position_quant_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      death_time_ = from.death_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Building::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Building::InternalSwap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unit_name_.Swap(&other->unit_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, death_time_)
      + sizeof(CDOTAMatchPrivateMetadata_Team_Building::death_time_)
      - PROTOBUF_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, position_quant_x_)>(
          reinterpret_cast<char*>(&position_quant_x_),
          reinterpret_cast<char*>(&other->position_quant_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team_Building::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAMatchPrivateMetadata_Team>()._has_bits_);
  static void set_has_dota_team(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena),
  buildings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata.Team)
}
CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dota_team_ = from.dota_team_;
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata.Team)
}

void CDOTAMatchPrivateMetadata_Team::SharedCtor() {
dota_team_ = 0u;
}

CDOTAMatchPrivateMetadata_Team::~CDOTAMatchPrivateMetadata_Team() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata_Team::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata_Team* _this = reinterpret_cast< CDOTAMatchPrivateMetadata_Team* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  buildings_.Clear();
  dota_team_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 dota_team = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dota_team(&has_bits);
          dota_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dota_team(), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_buildings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata.Team)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 dota_team = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dota_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  buildings_.MergeFrom(from.buildings_);
  if (from._internal_has_dota_team()) {
    _internal_set_dota_team(from._internal_dota_team());
  }
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team::InternalSwap(CDOTAMatchPrivateMetadata_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  buildings_.InternalSwap(&other->buildings_);
  swap(dota_team_, other->dota_team_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CDOTAMatchPrivateMetadata::_Internal {
 public:
};

CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  graph_win_probability_(arena),
  string_names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CDOTAMatchPrivateMetadata)
}
CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      teams_(from.teams_),
      graph_win_probability_(from.graph_win_probability_),
      string_names_(from.string_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CDOTAMatchPrivateMetadata)
}

void CDOTAMatchPrivateMetadata::SharedCtor() {
}

CDOTAMatchPrivateMetadata::~CDOTAMatchPrivateMetadata() {
  // @@protoc_insertion_point(destructor:CDOTAMatchPrivateMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CDOTAMatchPrivateMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CDOTAMatchPrivateMetadata::ArenaDtor(void* object) {
  CDOTAMatchPrivateMetadata* _this = reinterpret_cast< CDOTAMatchPrivateMetadata* >(object);
  (void)_this;
}
void CDOTAMatchPrivateMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CDOTAMatchPrivateMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CDOTAMatchPrivateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAMatchPrivateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  graph_win_probability_.Clear();
  string_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAMatchPrivateMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float graph_win_probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_graph_win_probability(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_graph_win_probability(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_string_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CDOTAMatchPrivateMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAMatchPrivateMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_teams(i), target, stream);
  }

  // repeated float graph_win_probability = 2;
  for (int i = 0, n = this->_internal_graph_win_probability_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_graph_win_probability(i), target);
  }

  // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_string_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_string_names(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAMatchPrivateMetadata)
  return target;
}

size_t CDOTAMatchPrivateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAMatchPrivateMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CDOTAMatchPrivateMetadata.Team teams = 1;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float graph_win_probability = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_graph_win_probability_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_graph_win_probability_size());
    total_size += data_size;
  }

  // repeated .CDOTAMatchPrivateMetadata.StringName string_names = 3;
  total_size += 1UL * this->_internal_string_names_size();
  for (const auto& msg : this->string_names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAMatchPrivateMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CDOTAMatchPrivateMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CDOTAMatchPrivateMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CDOTAMatchPrivateMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata::MergeFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  graph_win_probability_.MergeFrom(from.graph_win_probability_);
  string_names_.MergeFrom(from.string_names_);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata::InternalSwap(CDOTAMatchPrivateMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  teams_.InternalSwap(&other->teams_);
  graph_win_probability_.InternalSwap(&other->graph_win_probability_);
  string_names_.InternalSwap(&other->string_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAMatchPrivateMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDOTADPCMatch::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDOTADPCMatch>()._has_bits_);
  static const ::CMsgDOTAMatch& match(const CMsgDOTADPCMatch* msg);
  static void set_has_match(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CDOTAMatchMetadata& metadata(const CMsgDOTADPCMatch* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgDOTAMatch&
CMsgDOTADPCMatch::_Internal::match(const CMsgDOTADPCMatch* msg) {
  return *msg->match_;
}
const ::CDOTAMatchMetadata&
CMsgDOTADPCMatch::_Internal::metadata(const CMsgDOTADPCMatch* msg) {
  return *msg->metadata_;
}
void CMsgDOTADPCMatch::clear_match() {
  if (match_ != nullptr) match_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
CMsgDOTADPCMatch::CMsgDOTADPCMatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDOTADPCMatch)
}
CMsgDOTADPCMatch::CMsgDOTADPCMatch(const CMsgDOTADPCMatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_match()) {
    match_ = new ::CMsgDOTAMatch(*from.match_);
  } else {
    match_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::CDOTAMatchMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDOTADPCMatch)
}

void CMsgDOTADPCMatch::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&metadata_) -
    reinterpret_cast<char*>(&match_)) + sizeof(metadata_));
}

CMsgDOTADPCMatch::~CMsgDOTADPCMatch() {
  // @@protoc_insertion_point(destructor:CMsgDOTADPCMatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDOTADPCMatch::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete match_;
  if (this != internal_default_instance()) delete metadata_;
}

void CMsgDOTADPCMatch::ArenaDtor(void* object) {
  CMsgDOTADPCMatch* _this = reinterpret_cast< CMsgDOTADPCMatch* >(object);
  (void)_this;
}
void CMsgDOTADPCMatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDOTADPCMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDOTADPCMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDOTADPCMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDOTADPCMatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgDOTAMatch match = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_match(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CDOTAMatchMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDOTADPCMatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDOTADPCMatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgDOTAMatch match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::match(this), target, stream);
  }

  // optional .CDOTAMatchMetadata metadata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDOTADPCMatch)
  return target;
}

size_t CMsgDOTADPCMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDOTADPCMatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDOTAMatch match = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional .CDOTAMatchMetadata metadata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTADPCMatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDOTADPCMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTADPCMatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDOTADPCMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDOTADPCMatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDOTADPCMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTADPCMatch::MergeFrom(const CMsgDOTADPCMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDOTADPCMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_match()->::CMsgDOTAMatch::MergeFrom(from._internal_match());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata()->::CDOTAMatchMetadata::MergeFrom(from._internal_metadata());
    }
  }
}

void CMsgDOTADPCMatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDOTADPCMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTADPCMatch::CopyFrom(const CMsgDOTADPCMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDOTADPCMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTADPCMatch::IsInitialized() const {
  return true;
}

void CMsgDOTADPCMatch::InternalSwap(CMsgDOTADPCMatch* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDOTADPCMatch, metadata_)
      + sizeof(CMsgDOTADPCMatch::metadata_)
      - PROTOBUF_FIELD_OFFSET(CMsgDOTADPCMatch, match_)>(
          reinterpret_cast<char*>(&match_),
          reinterpret_cast<char*>(&other->match_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDOTADPCMatch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadataFile* Arena::CreateMaybeMessage< ::CDOTAMatchMetadataFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadataFile >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_PlayerKill* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_PlayerKill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_PlayerKill >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ItemPurchase* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ItemPurchase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ItemPurchase >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_InventorySnapshot* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_InventorySnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_InventorySnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_AutoStyleCriteria* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_AutoStyleCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_StrangeGemProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_StrangeGemProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_VictoryPrediction* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_VictoryPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_VictoryPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_SubChallenge* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_SubChallenge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_SubChallenge >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_CavernChallengeResult* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_CavernChallengeResult >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_ActionGrant* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_ActionGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_ActionGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_CandyGrant* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_CandyGrant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_CandyGrant >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_EventData* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_EventData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_EventData >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_GauntletProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_GauntletProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_GauntletProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_Player_ContractProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_Player_ContractProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_Player_ContractProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team_Player* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_Team* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_GuildChallengeProgress_IndividualProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata_GuildChallengeProgress* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata_GuildChallengeProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata_GuildChallengeProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchMetadata* Arena::CreateMaybeMessage< ::CDOTAMatchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_StringName* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_StringName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_StringName >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_DamageByAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment_HealingByAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_CombatSegment >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord_ByHeroTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_BuffRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_GoldReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player_XPReceived >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Player* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team_Building* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team_Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team_Building >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata_Team* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CDOTAMatchPrivateMetadata* Arena::CreateMaybeMessage< ::CDOTAMatchPrivateMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAMatchPrivateMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDOTADPCMatch* Arena::CreateMaybeMessage< ::CMsgDOTADPCMatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDOTADPCMatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
