// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_scenariomessages.proto

#include "dota_scenariomessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CScenario_Position::CScenario_Position(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct CScenario_PositionDefaultTypeInternal {
  constexpr CScenario_PositionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CScenario_PositionDefaultTypeInternal() {}
  union {
    CScenario_Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CScenario_PositionDefaultTypeInternal _CScenario_Position_default_instance_;
constexpr CScenarioGame_RoshanSpawner::CScenarioGame_RoshanSpawner(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kill_count_(0)
  , state_(0)
  , cooldown_(0){}
struct CScenarioGame_RoshanSpawnerDefaultTypeInternal {
  constexpr CScenarioGame_RoshanSpawnerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CScenarioGame_RoshanSpawnerDefaultTypeInternal() {}
  union {
    CScenarioGame_RoshanSpawner _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CScenarioGame_RoshanSpawnerDefaultTypeInternal _CScenarioGame_RoshanSpawner_default_instance_;
constexpr CScenarioEnt_Courier::CScenarioEnt_Courier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : team_number_(0)
  , owner_player_id_(0)
  , cooldown_(-1){}
struct CScenarioEnt_CourierDefaultTypeInternal {
  constexpr CScenarioEnt_CourierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CScenarioEnt_CourierDefaultTypeInternal() {}
  union {
    CScenarioEnt_Courier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CScenarioEnt_CourierDefaultTypeInternal _CScenarioEnt_Courier_default_instance_;
constexpr CScenarioEnt_NPC::CScenarioEnt_NPC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , owning_camp_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , invade_goal_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , owning_camp_position_(nullptr)
  , team_number_(0)
  , health_frac_(1){}
struct CScenarioEnt_NPCDefaultTypeInternal {
  constexpr CScenarioEnt_NPCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CScenarioEnt_NPCDefaultTypeInternal() {}
  union {
    CScenarioEnt_NPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CScenarioEnt_NPCDefaultTypeInternal _CScenarioEnt_NPC_default_instance_;
constexpr CScenarioEnt_SpiritBear::CScenarioEnt_SpiritBear(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : owner_id_(0)
  , team_id_(0){}
struct CScenarioEnt_SpiritBearDefaultTypeInternal {
  constexpr CScenarioEnt_SpiritBearDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CScenarioEnt_SpiritBearDefaultTypeInternal() {}
  union {
    CScenarioEnt_SpiritBear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CScenarioEnt_SpiritBearDefaultTypeInternal _CScenarioEnt_SpiritBear_default_instance_;
constexpr CScenarioEnt_DroppedItem::CScenarioEnt_DroppedItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr){}
struct CScenarioEnt_DroppedItemDefaultTypeInternal {
  constexpr CScenarioEnt_DroppedItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CScenarioEnt_DroppedItemDefaultTypeInternal() {}
  union {
    CScenarioEnt_DroppedItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CScenarioEnt_DroppedItemDefaultTypeInternal _CScenarioEnt_DroppedItem_default_instance_;
constexpr CMsgDotaScenario_EntityRef::CMsgDotaScenario_EntityRef(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ability_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , roshan_(false)
  , entity_idx_(-1)
  , player_id_(-1)
  , neutral_stash_id_(-1){}
struct CMsgDotaScenario_EntityRefDefaultTypeInternal {
  constexpr CMsgDotaScenario_EntityRefDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_EntityRefDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_EntityRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_EntityRefDefaultTypeInternal _CMsgDotaScenario_EntityRef_default_instance_;
constexpr CMsgDotaScenario_Game::CMsgDotaScenario_Game(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : roshan_(nullptr)
  , match_id_(PROTOBUF_ULONGLONG(0))
  , game_mode_(0)
  , clock_time_(0)
  , internal_time_(0){}
struct CMsgDotaScenario_GameDefaultTypeInternal {
  constexpr CMsgDotaScenario_GameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_GameDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Game _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_GameDefaultTypeInternal _CMsgDotaScenario_Game_default_instance_;
constexpr CMsgDotaScenario_TeamNeutralItem::CMsgDotaScenario_TeamNeutralItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , consumed_(false){}
struct CMsgDotaScenario_TeamNeutralItemDefaultTypeInternal {
  constexpr CMsgDotaScenario_TeamNeutralItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_TeamNeutralItemDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_TeamNeutralItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_TeamNeutralItemDefaultTypeInternal _CMsgDotaScenario_TeamNeutralItem_default_instance_;
constexpr CMsgDotaScenario_Team::CMsgDotaScenario_Team(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neutral_items_()
  , team_number_(0)
  , hero_kills_(0)
  , tower_kills_(0)
  , barracks_kills_(0){}
struct CMsgDotaScenario_TeamDefaultTypeInternal {
  constexpr CMsgDotaScenario_TeamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_TeamDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Team _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_TeamDefaultTypeInternal _CMsgDotaScenario_Team_default_instance_;
constexpr CMsgDotaScenario_HeroHeroInt::CMsgDotaScenario_HeroHeroInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , value_(0){}
struct CMsgDotaScenario_HeroHeroIntDefaultTypeInternal {
  constexpr CMsgDotaScenario_HeroHeroIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_HeroHeroIntDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_HeroHeroInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_HeroHeroIntDefaultTypeInternal _CMsgDotaScenario_HeroHeroInt_default_instance_;
constexpr CMsgDotaScenario_HeroHeroFloat::CMsgDotaScenario_HeroHeroFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0)
  , value_(0){}
struct CMsgDotaScenario_HeroHeroFloatDefaultTypeInternal {
  constexpr CMsgDotaScenario_HeroHeroFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_HeroHeroFloatDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_HeroHeroFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_HeroHeroFloatDefaultTypeInternal _CMsgDotaScenario_HeroHeroFloat_default_instance_;
constexpr CMsgDotaScenario_DamageStatsByType::CMsgDotaScenario_DamageStatsByType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : damage_type_(0)
  , received_pre_reduction_(0)
  , received_post_reduction_(0)
  , outgoing_pre_reduction_(0)
  , outgoing_post_reduction_(0){}
struct CMsgDotaScenario_DamageStatsByTypeDefaultTypeInternal {
  constexpr CMsgDotaScenario_DamageStatsByTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_DamageStatsByTypeDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_DamageStatsByType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_DamageStatsByTypeDefaultTypeInternal _CMsgDotaScenario_DamageStatsByType_default_instance_;
constexpr CMsgDotaScenario_HeroAbility::CMsgDotaScenario_HeroAbility(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(0){}
struct CMsgDotaScenario_HeroAbilityDefaultTypeInternal {
  constexpr CMsgDotaScenario_HeroAbilityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_HeroAbilityDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_HeroAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_HeroAbilityDefaultTypeInternal _CMsgDotaScenario_HeroAbility_default_instance_;
constexpr CMsgDotaScenario_Hero::CMsgDotaScenario_Hero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enemy_kills_()
  , damage_stats_()
  , abilities_()
  , hero_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steam_id_(PROTOBUF_ULONGLONG(0))
  , player_id_(0)
  , team_id_(0)
  , total_xp_(0)
  , bkb_charges_used_(0)
  , aeon_charges_used_(0)
  , reliable_gold_(0)
  , unreliable_gold_(0)
  , total_earned_gold_(0)
  , shared_gold_(0)
  , hero_kill_gold_(0)
  , creep_kill_gold_(0)
  , neutral_kill_gold_(0)
  , courier_gold_(0)
  , bounty_gold_(0)
  , roshan_gold_(0)
  , building_gold_(0)
  , other_gold_(0)
  , income_gold_(0)
  , ward_kill_gold_(0)
  , ability_gold_(0)
  , denies_(0)
  , last_hits_(0)
  , last_hit_streak_(0)
  , last_hit_multikill_(0)
  , nearby_creep_death_count_(0)
  , claimed_deny_count_(0)
  , claimed_miss_count_(0)
  , miss_count_(0)
  , buyback_cooldown_time_(0)
  , buyback_gold_limit_time_(0)
  , stun_duration_(0)
  , healing_(0)
  , tower_kills_(0)
  , roshan_kills_(0)
  , observer_wards_placed_(0)
  , sentry_wards_placed_(0)
  , creeps_stacked_(0)
  , camps_stacked_(0)
  , rune_pickups_(0)
  , gold_spent_on_support_(0)
  , hero_damage_(0)
  , wards_purchased_(0)
  , wards_destroyed_(0)
  , gold_spent_on_consumables_(0)
  , gold_spent_on_items_(0)
  , gold_spent_on_buybacks_(0)
  , gold_lost_to_death_(0)
  , kills_(0)
  , outposts_captured_(0)
  , assists_(0)
  , deaths_(0)
  , kill_streak_(0)
  , last_buyback_time_(0)
  , first_blood_claimed_(false)
  , first_blood_given_(false)
  , bounty_runes_(0)
  , respawn_seconds_(-1){}
struct CMsgDotaScenario_HeroDefaultTypeInternal {
  constexpr CMsgDotaScenario_HeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_HeroDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_HeroDefaultTypeInternal _CMsgDotaScenario_Hero_default_instance_;
constexpr CMsgDotaScenario_Stock::CMsgDotaScenario_Stock(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , current_stock_(0)
  , cooldown_(0)
  , bonus_stock_(0)
  , team_number_(-1)
  , player_id_(-1){}
struct CMsgDotaScenario_StockDefaultTypeInternal {
  constexpr CMsgDotaScenario_StockDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_StockDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Stock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_StockDefaultTypeInternal _CMsgDotaScenario_Stock_default_instance_;
constexpr CMsgDotaScenario_Building::CMsgDotaScenario_Building(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entity_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , entity_class_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(0)
  , is_destroyed_(false)
  , health_frac_(1){}
struct CMsgDotaScenario_BuildingDefaultTypeInternal {
  constexpr CMsgDotaScenario_BuildingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_BuildingDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Building _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_BuildingDefaultTypeInternal _CMsgDotaScenario_Building_default_instance_;
constexpr CMsgDotaScenario_Entity::CMsgDotaScenario_Entity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : courier_(nullptr)
  , npc_(nullptr)
  , spirit_bear_(nullptr)
  , dropped_item_(nullptr){}
struct CMsgDotaScenario_EntityDefaultTypeInternal {
  constexpr CMsgDotaScenario_EntityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_EntityDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Entity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_EntityDefaultTypeInternal _CMsgDotaScenario_Entity_default_instance_;
constexpr CMsgDotaScenario_Item::CMsgDotaScenario_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , owner_id_(0)
  , item_slot_(0)
  , neutral_drop_team_(0)
  , charges_(0)
  , secondary_charges_(0)
  , lifetime_(-1)
  , stored_rune_type_(-1){}
struct CMsgDotaScenario_ItemDefaultTypeInternal {
  constexpr CMsgDotaScenario_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_ItemDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_ItemDefaultTypeInternal _CMsgDotaScenario_Item_default_instance_;
constexpr CMsgDotaScenario_Modifier::CMsgDotaScenario_Modifier(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parent_(nullptr)
  , caster_(nullptr)
  , ability_(nullptr)
  , lifetime_remaining_(0)
  , stack_count_(0)
  , ultimate_scepter_consumed_alchemist_bonus_mana_(0)
  , create_even_if_existing_(false)
  , create_without_caster_(false)
  , create_without_ability_(false)
  , moonshard_consumed_bonus_(0)
  , moonshard_consumed_bonus_night_vision_(0)
  , wardtruesight_range_(0)
  , ultimate_scepter_consumed_alchemist_bonus_all_stats_(0)
  , ultimate_scepter_consumed_alchemist_bonus_health_(0)
  , duration_(-1){}
struct CMsgDotaScenario_ModifierDefaultTypeInternal {
  constexpr CMsgDotaScenario_ModifierDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenario_ModifierDefaultTypeInternal() {}
  union {
    CMsgDotaScenario_Modifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenario_ModifierDefaultTypeInternal _CMsgDotaScenario_Modifier_default_instance_;
constexpr CMsgDotaScenario::CMsgDotaScenario(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : teams_()
  , heroes_()
  , stock_()
  , buildings_()
  , entities_()
  , items_()
  , modifiers_()
  , game_(nullptr)
  , lobby_id_(PROTOBUF_ULONGLONG(0)){}
struct CMsgDotaScenarioDefaultTypeInternal {
  constexpr CMsgDotaScenarioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDotaScenarioDefaultTypeInternal() {}
  union {
    CMsgDotaScenario _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDotaScenarioDefaultTypeInternal _CMsgDotaScenario_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dota_5fscenariomessages_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dota_5fscenariomessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dota_5fscenariomessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dota_5fscenariomessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CScenario_Position, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CScenario_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScenario_Position, x_),
  PROTOBUF_FIELD_OFFSET(::CScenario_Position, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CScenarioGame_RoshanSpawner, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CScenarioGame_RoshanSpawner, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScenarioGame_RoshanSpawner, kill_count_),
  PROTOBUF_FIELD_OFFSET(::CScenarioGame_RoshanSpawner, state_),
  PROTOBUF_FIELD_OFFSET(::CScenarioGame_RoshanSpawner, cooldown_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_Courier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_Courier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_Courier, team_number_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_Courier, owner_player_id_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_Courier, cooldown_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, position_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, unit_name_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, team_number_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, health_frac_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, owning_camp_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, owning_camp_position_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_NPC, invade_goal_),
  3,
  0,
  5,
  6,
  1,
  4,
  2,
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_SpiritBear, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_SpiritBear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_SpiritBear, owner_id_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_SpiritBear, team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_DroppedItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_DroppedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CScenarioEnt_DroppedItem, position_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, neutral_stash_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, entity_idx_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, roshan_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_EntityRef, ability_name_),
  3,
  4,
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, match_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, game_mode_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, clock_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, internal_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Game, roshan_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_TeamNeutralItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_TeamNeutralItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_TeamNeutralItem, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_TeamNeutralItem, consumed_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, team_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, neutral_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, hero_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Team, barracks_kills_),
  0,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroInt, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroInt, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroFloat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroFloat, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroHeroFloat, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, damage_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, received_pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, received_post_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, outgoing_pre_reduction_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_DamageStatsByType, outgoing_post_reduction_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroAbility, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroAbility, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_HeroAbility, level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, hero_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, total_xp_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, bkb_charges_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, aeon_charges_used_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, reliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, unreliable_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, total_earned_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, shared_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, hero_kill_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, creep_kill_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, neutral_kill_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, courier_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, bounty_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, roshan_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, building_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, other_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, income_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, ward_kill_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, ability_gold_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, denies_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, last_hits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, last_hit_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, last_hit_multikill_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, nearby_creep_death_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, claimed_deny_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, claimed_miss_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, miss_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, buyback_cooldown_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, buyback_gold_limit_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, stun_duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, healing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, tower_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, roshan_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, observer_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, sentry_wards_placed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, creeps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, camps_stacked_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, rune_pickups_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, gold_spent_on_support_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, hero_damage_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, wards_purchased_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, wards_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, gold_spent_on_consumables_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, gold_spent_on_items_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, gold_spent_on_buybacks_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, gold_lost_to_death_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, assists_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, deaths_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, kill_streak_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, respawn_seconds_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, last_buyback_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, first_blood_claimed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, first_blood_given_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, bounty_runes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, outposts_captured_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, enemy_kills_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, damage_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Hero, abilities_),
  1,
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  51,
  52,
  53,
  58,
  54,
  55,
  56,
  57,
  50,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, team_number_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, player_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, current_stock_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, cooldown_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Stock, bonus_stock_),
  0,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, entity_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, entity_class_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, team_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, is_destroyed_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Building, health_frac_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Entity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Entity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Entity, courier_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Entity, npc_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Entity, spirit_bear_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Entity, dropped_item_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, location_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, owner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, item_slot_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, neutral_drop_team_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, secondary_charges_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, lifetime_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Item, stored_rune_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, parent_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, caster_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, ability_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, duration_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, lifetime_remaining_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, stack_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, create_even_if_existing_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, create_without_caster_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, create_without_ability_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, moonshard_consumed_bonus_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, moonshard_consumed_bonus_night_vision_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, wardtruesight_range_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, ultimate_scepter_consumed_alchemist_bonus_all_stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, ultimate_scepter_consumed_alchemist_bonus_health_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario_Modifier, ultimate_scepter_consumed_alchemist_bonus_mana_),
  0,
  1,
  2,
  3,
  15,
  4,
  5,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, game_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, teams_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, heroes_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, stock_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, buildings_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, entities_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, items_),
  PROTOBUF_FIELD_OFFSET(::CMsgDotaScenario, modifiers_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CScenario_Position)},
  { 9, 17, sizeof(::CScenarioGame_RoshanSpawner)},
  { 20, 28, sizeof(::CScenarioEnt_Courier)},
  { 31, 43, sizeof(::CScenarioEnt_NPC)},
  { 50, 57, sizeof(::CScenarioEnt_SpiritBear)},
  { 59, 65, sizeof(::CScenarioEnt_DroppedItem)},
  { 66, 76, sizeof(::CMsgDotaScenario_EntityRef)},
  { 81, 91, sizeof(::CMsgDotaScenario_Game)},
  { 96, 103, sizeof(::CMsgDotaScenario_TeamNeutralItem)},
  { 105, 115, sizeof(::CMsgDotaScenario_Team)},
  { 120, 127, sizeof(::CMsgDotaScenario_HeroHeroInt)},
  { 129, 136, sizeof(::CMsgDotaScenario_HeroHeroFloat)},
  { 138, 148, sizeof(::CMsgDotaScenario_DamageStatsByType)},
  { 153, 160, sizeof(::CMsgDotaScenario_HeroAbility)},
  { 162, 229, sizeof(::CMsgDotaScenario_Hero)},
  { 291, 302, sizeof(::CMsgDotaScenario_Stock)},
  { 308, 318, sizeof(::CMsgDotaScenario_Building)},
  { 323, 332, sizeof(::CMsgDotaScenario_Entity)},
  { 336, 350, sizeof(::CMsgDotaScenario_Item)},
  { 359, 380, sizeof(::CMsgDotaScenario_Modifier)},
  { 396, 410, sizeof(::CMsgDotaScenario)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScenario_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScenarioGame_RoshanSpawner_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScenarioEnt_Courier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScenarioEnt_NPC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScenarioEnt_SpiritBear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CScenarioEnt_DroppedItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_EntityRef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Game_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_TeamNeutralItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Team_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_HeroHeroInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_HeroHeroFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_DamageStatsByType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_HeroAbility_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Hero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Stock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Building_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Entity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_Modifier_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDotaScenario_default_instance_),
};

const char descriptor_table_protodef_dota_5fscenariomessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033dota_scenariomessages.proto\"*\n\022CScenar"
  "io_Position\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"R\n\033CSc"
  "enarioGame_RoshanSpawner\022\022\n\nkill_count\030\001"
  " \001(\005\022\r\n\005state\030\002 \001(\005\022\020\n\010cooldown\030\003 \001(\002\"Z\n"
  "\024CScenarioEnt_Courier\022\023\n\013team_number\030\001 \001"
  "(\005\022\027\n\017owner_player_id\030\002 \001(\005\022\024\n\010cooldown\030"
  "\003 \001(\002:\002-1\"\326\001\n\020CScenarioEnt_NPC\022%\n\010positi"
  "on\030\001 \001(\0132\023.CScenario_Position\022\021\n\tunit_na"
  "me\030\002 \001(\t\022\023\n\013team_number\030\003 \001(\005\022\026\n\013health_"
  "frac\030\004 \001(\002:\0011\022\023\n\013owning_camp\030\n \001(\t\0221\n\024ow"
  "ning_camp_position\030\013 \001(\0132\023.CScenario_Pos"
  "ition\022\023\n\013invade_goal\030\024 \001(\t\"<\n\027CScenarioE"
  "nt_SpiritBear\022\020\n\010owner_id\030\001 \001(\005\022\017\n\007team_"
  "id\030\002 \001(\005\"A\n\030CScenarioEnt_DroppedItem\022%\n\010"
  "position\030\001 \001(\0132\023.CScenario_Position\"\275\037\n\020"
  "CMsgDotaScenario\022\020\n\010lobby_id\030\001 \001(\004\022$\n\004ga"
  "me\030\002 \001(\0132\026.CMsgDotaScenario.Game\022%\n\005team"
  "s\030\003 \003(\0132\026.CMsgDotaScenario.Team\022&\n\006heroe"
  "s\030\004 \003(\0132\026.CMsgDotaScenario.Hero\022&\n\005stock"
  "\030\005 \003(\0132\027.CMsgDotaScenario.Stock\022-\n\tbuild"
  "ings\030\006 \003(\0132\032.CMsgDotaScenario.Building\022*"
  "\n\010entities\030\007 \003(\0132\030.CMsgDotaScenario.Enti"
  "ty\022%\n\005items\030\010 \003(\0132\026.CMsgDotaScenario.Ite"
  "m\022-\n\tmodifiers\030\t \003(\0132\032.CMsgDotaScenario."
  "Modifier\032\205\001\n\tEntityRef\022\025\n\tplayer_id\030\001 \001("
  "\005:\002-1\022\034\n\020neutral_stash_id\030\002 \001(\005:\002-1\022\026\n\ne"
  "ntity_idx\030\003 \001(\005:\002-1\022\025\n\006roshan\030\004 \001(\010:\005fal"
  "se\022\024\n\014ability_name\030\n \001(\t\032\204\001\n\004Game\022\020\n\010mat"
  "ch_id\030\001 \001(\004\022\021\n\tgame_mode\030\002 \001(\005\022\022\n\nclock_"
  "time\030\003 \001(\002\022\025\n\rinternal_time\030\004 \001(\002\022,\n\006ros"
  "han\030\005 \001(\0132\034.CScenarioGame_RoshanSpawner\032"
  "1\n\017TeamNeutralItem\022\014\n\004name\030\001 \001(\t\022\020\n\010cons"
  "umed\030\002 \001(\010\032\226\001\n\004Team\022\023\n\013team_number\030\001 \001(\005"
  "\0228\n\rneutral_items\030\002 \003(\0132!.CMsgDotaScenar"
  "io.TeamNeutralItem\022\022\n\nhero_kills\030\003 \001(\005\022\023"
  "\n\013tower_kills\030\004 \001(\005\022\026\n\016barracks_kills\030\005 "
  "\001(\005\032/\n\013HeroHeroInt\022\021\n\tplayer_id\030\001 \001(\005\022\r\n"
  "\005value\030\002 \001(\005\0321\n\rHeroHeroFloat\022\021\n\tplayer_"
  "id\030\001 \001(\005\022\r\n\005value\030\002 \001(\002\032\252\001\n\021DamageStatsB"
  "yType\022\023\n\013damage_type\030\001 \001(\005\022\036\n\026received_p"
  "re_reduction\030\002 \001(\005\022\037\n\027received_post_redu"
  "ction\030\003 \001(\005\022\036\n\026outgoing_pre_reduction\030\004 "
  "\001(\005\022\037\n\027outgoing_post_reduction\030\005 \001(\005\032*\n\013"
  "HeroAbility\022\014\n\004name\030\001 \001(\t\022\r\n\005level\030\002 \001(\005"
  "\032\261\014\n\004Hero\022\020\n\010steam_id\030\001 \001(\006\022\021\n\tplayer_id"
  "\030\002 \001(\005\022\017\n\007team_id\030\003 \001(\005\022\014\n\004hero\030\004 \001(\t\022\020\n"
  "\010total_xp\030\005 \001(\005\022\030\n\020bkb_charges_used\030\006 \001("
  "\005\022\031\n\021aeon_charges_used\030\007 \001(\005\022\025\n\rreliable"
  "_gold\030\010 \001(\005\022\027\n\017unreliable_gold\030\t \001(\005\022\031\n\021"
  "total_earned_gold\030\n \001(\005\022\023\n\013shared_gold\030\013"
  " \001(\005\022\026\n\016hero_kill_gold\030\014 \001(\005\022\027\n\017creep_ki"
  "ll_gold\030\r \001(\005\022\031\n\021neutral_kill_gold\030\016 \001(\005"
  "\022\024\n\014courier_gold\030\017 \001(\005\022\023\n\013bounty_gold\030\020 "
  "\001(\005\022\023\n\013roshan_gold\030\021 \001(\005\022\025\n\rbuilding_gol"
  "d\030\022 \001(\005\022\022\n\nother_gold\030\023 \001(\005\022\023\n\013income_go"
  "ld\030\032 \001(\005\022\026\n\016ward_kill_gold\030\033 \001(\005\022\024\n\014abil"
  "ity_gold\030\034 \001(\005\022\016\n\006denies\030\035 \001(\005\022\021\n\tlast_h"
  "its\030\036 \001(\005\022\027\n\017last_hit_streak\030\037 \001(\005\022\032\n\022la"
  "st_hit_multikill\030  \001(\005\022 \n\030nearby_creep_d"
  "eath_count\030! \001(\005\022\032\n\022claimed_deny_count\030\""
  " \001(\005\022\032\n\022claimed_miss_count\030# \001(\005\022\022\n\nmiss"
  "_count\030$ \001(\005\022\035\n\025buyback_cooldown_time\030( "
  "\001(\002\022\037\n\027buyback_gold_limit_time\030) \001(\002\022\025\n\r"
  "stun_duration\030, \001(\002\022\017\n\007healing\030- \001(\002\022\023\n\013"
  "tower_kills\030. \001(\005\022\024\n\014roshan_kills\030/ \001(\005\022"
  "\035\n\025observer_wards_placed\0300 \001(\005\022\033\n\023sentry"
  "_wards_placed\0301 \001(\005\022\026\n\016creeps_stacked\0302 "
  "\001(\005\022\025\n\rcamps_stacked\0303 \001(\005\022\024\n\014rune_picku"
  "ps\0304 \001(\005\022\035\n\025gold_spent_on_support\0305 \001(\005\022"
  "\023\n\013hero_damage\0306 \001(\005\022\027\n\017wards_purchased\030"
  "7 \001(\005\022\027\n\017wards_destroyed\0308 \001(\005\022!\n\031gold_s"
  "pent_on_consumables\030: \001(\005\022\033\n\023gold_spent_"
  "on_items\030; \001(\005\022\036\n\026gold_spent_on_buybacks"
  "\030< \001(\005\022\032\n\022gold_lost_to_death\030= \001(\005\022\r\n\005ki"
  "lls\030> \001(\005\022\017\n\007assists\030\? \001(\005\022\016\n\006deaths\030@ \001"
  "(\005\022\023\n\013kill_streak\030A \001(\005\022\033\n\017respawn_secon"
  "ds\030D \001(\005:\002-1\022\031\n\021last_buyback_time\030E \001(\005\022"
  "\033\n\023first_blood_claimed\030G \001(\010\022\031\n\021first_bl"
  "ood_given\030H \001(\010\022\024\n\014bounty_runes\030I \001(\005\022\031\n"
  "\021outposts_captured\030J \001(\005\0223\n\013enemy_kills\030"
  "\226\001 \003(\0132\035.CMsgDotaScenario.HeroHeroInt\022:\n"
  "\014damage_stats\030\227\001 \003(\0132#.CMsgDotaScenario."
  "DamageStatsByType\0221\n\tabilities\030\230\001 \003(\0132\035."
  "CMsgDotaScenario.HeroAbility\032\203\001\n\005Stock\022\014"
  "\n\004name\030\001 \001(\t\022\027\n\013team_number\030\002 \001(\005:\002-1\022\025\n"
  "\tplayer_id\030\003 \001(\005:\002-1\022\025\n\rcurrent_stock\030\004 "
  "\001(\005\022\020\n\010cooldown\030\005 \001(\002\022\023\n\013bonus_stock\030\006 \001"
  "(\005\032t\n\010Building\022\023\n\013entity_name\030\001 \001(\t\022\024\n\014e"
  "ntity_class\030\002 \001(\t\022\017\n\007team_id\030\003 \001(\005\022\024\n\014is"
  "_destroyed\030\004 \001(\010\022\026\n\013health_frac\030\005 \001(\002:\0011"
  "\032\260\001\n\006Entity\022&\n\007courier\030\001 \001(\0132\025.CScenario"
  "Ent_Courier\022\036\n\003npc\030\002 \001(\0132\021.CScenarioEnt_"
  "NPC\022-\n\013spirit_bear\030\003 \001(\0132\030.CScenarioEnt_"
  "SpiritBear\022/\n\014dropped_item\030\004 \001(\0132\031.CScen"
  "arioEnt_DroppedItem\032\343\001\n\004Item\022\014\n\004name\030\001 \001"
  "(\t\022-\n\010location\030\002 \001(\0132\033.CMsgDotaScenario."
  "EntityRef\022\020\n\010owner_id\030\003 \001(\005\022\021\n\titem_slot"
  "\030\004 \001(\005\022\031\n\021neutral_drop_team\030\005 \001(\005\022\017\n\007cha"
  "rges\030\006 \001(\005\022\031\n\021secondary_charges\030\007 \001(\005\022\024\n"
  "\010lifetime\030\010 \001(\002:\002-1\022\034\n\020stored_rune_type\030"
  "\t \001(\005:\002-1\032\347\004\n\010Modifier\022\014\n\004name\030\001 \001(\t\022+\n\006"
  "parent\030\002 \001(\0132\033.CMsgDotaScenario.EntityRe"
  "f\022+\n\006caster\030\003 \001(\0132\033.CMsgDotaScenario.Ent"
  "ityRef\022,\n\007ability\030\004 \001(\0132\033.CMsgDotaScenar"
  "io.EntityRef\022\024\n\010duration\030\005 \001(\002:\002-1\022\035\n\022li"
  "fetime_remaining\030\006 \001(\002:\0010\022\023\n\013stack_count"
  "\030\007 \001(\005\022\037\n\027create_even_if_existing\030\010 \001(\010\022"
  "\035\n\025create_without_caster\030\t \001(\010\022\036\n\026create"
  "_without_ability\030\n \001(\010\022 \n\030moonshard_cons"
  "umed_bonus\030d \001(\005\022-\n%moonshard_consumed_b"
  "onus_night_vision\030e \001(\005\022\033\n\023wardtruesight"
  "_range\030n \001(\005\022;\n3ultimate_scepter_consume"
  "d_alchemist_bonus_all_stats\030x \001(\005\0228\n0ult"
  "imate_scepter_consumed_alchemist_bonus_h"
  "ealth\030y \001(\005\0226\n.ultimate_scepter_consumed"
  "_alchemist_bonus_mana\030z \001(\005B\005H\001\200\001\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dota_5fscenariomessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dota_5fscenariomessages_2eproto = {
  false, false, 4634, descriptor_table_protodef_dota_5fscenariomessages_2eproto, "dota_scenariomessages.proto", 
  &descriptor_table_dota_5fscenariomessages_2eproto_once, nullptr, 0, 21,
  schemas, file_default_instances, TableStruct_dota_5fscenariomessages_2eproto::offsets,
  file_level_metadata_dota_5fscenariomessages_2eproto, file_level_enum_descriptors_dota_5fscenariomessages_2eproto, file_level_service_descriptors_dota_5fscenariomessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_dota_5fscenariomessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_dota_5fscenariomessages_2eproto);
  return descriptor_table_dota_5fscenariomessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_dota_5fscenariomessages_2eproto(&descriptor_table_dota_5fscenariomessages_2eproto);

// ===================================================================

class CScenario_Position::_Internal {
 public:
  using HasBits = decltype(std::declval<CScenario_Position>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CScenario_Position::CScenario_Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CScenario_Position)
}
CScenario_Position::CScenario_Position(const CScenario_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:CScenario_Position)
}

void CScenario_Position::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

CScenario_Position::~CScenario_Position() {
  // @@protoc_insertion_point(destructor:CScenario_Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CScenario_Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CScenario_Position::ArenaDtor(void* object) {
  CScenario_Position* _this = reinterpret_cast< CScenario_Position* >(object);
  (void)_this;
}
void CScenario_Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CScenario_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CScenario_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:CScenario_Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CScenario_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScenario_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScenario_Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScenario_Position)
  return target;
}

size_t CScenario_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScenario_Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScenario_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScenario_Position)
  GOOGLE_DCHECK_NE(&from, this);
  const CScenario_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScenario_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScenario_Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScenario_Position)
    MergeFrom(*source);
  }
}

void CScenario_Position::MergeFrom(const CScenario_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScenario_Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CScenario_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScenario_Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScenario_Position::CopyFrom(const CScenario_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScenario_Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScenario_Position::IsInitialized() const {
  return true;
}

void CScenario_Position::InternalSwap(CScenario_Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CScenario_Position, y_)
      + sizeof(CScenario_Position::y_)
      - PROTOBUF_FIELD_OFFSET(CScenario_Position, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CScenario_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CScenarioGame_RoshanSpawner::_Internal {
 public:
  using HasBits = decltype(std::declval<CScenarioGame_RoshanSpawner>()._has_bits_);
  static void set_has_kill_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CScenarioGame_RoshanSpawner::CScenarioGame_RoshanSpawner(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CScenarioGame_RoshanSpawner)
}
CScenarioGame_RoshanSpawner::CScenarioGame_RoshanSpawner(const CScenarioGame_RoshanSpawner& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&kill_count_, &from.kill_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_) -
    reinterpret_cast<char*>(&kill_count_)) + sizeof(cooldown_));
  // @@protoc_insertion_point(copy_constructor:CScenarioGame_RoshanSpawner)
}

void CScenarioGame_RoshanSpawner::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&kill_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cooldown_) -
    reinterpret_cast<char*>(&kill_count_)) + sizeof(cooldown_));
}

CScenarioGame_RoshanSpawner::~CScenarioGame_RoshanSpawner() {
  // @@protoc_insertion_point(destructor:CScenarioGame_RoshanSpawner)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CScenarioGame_RoshanSpawner::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CScenarioGame_RoshanSpawner::ArenaDtor(void* object) {
  CScenarioGame_RoshanSpawner* _this = reinterpret_cast< CScenarioGame_RoshanSpawner* >(object);
  (void)_this;
}
void CScenarioGame_RoshanSpawner::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CScenarioGame_RoshanSpawner::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CScenarioGame_RoshanSpawner::Clear() {
// @@protoc_insertion_point(message_clear_start:CScenarioGame_RoshanSpawner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&kill_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cooldown_) -
        reinterpret_cast<char*>(&kill_count_)) + sizeof(cooldown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CScenarioGame_RoshanSpawner::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 kill_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kill_count(&has_bits);
          kill_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_state(&has_bits);
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cooldown = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cooldown(&has_bits);
          cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScenarioGame_RoshanSpawner::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScenarioGame_RoshanSpawner)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 kill_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_kill_count(), target);
  }

  // optional int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // optional float cooldown = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScenarioGame_RoshanSpawner)
  return target;
}

size_t CScenarioGame_RoshanSpawner::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScenarioGame_RoshanSpawner)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 kill_count = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kill_count());
    }

    // optional int32 state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_state());
    }

    // optional float cooldown = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScenarioGame_RoshanSpawner::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScenarioGame_RoshanSpawner)
  GOOGLE_DCHECK_NE(&from, this);
  const CScenarioGame_RoshanSpawner* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScenarioGame_RoshanSpawner>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScenarioGame_RoshanSpawner)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScenarioGame_RoshanSpawner)
    MergeFrom(*source);
  }
}

void CScenarioGame_RoshanSpawner::MergeFrom(const CScenarioGame_RoshanSpawner& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScenarioGame_RoshanSpawner)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_ = from.cooldown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CScenarioGame_RoshanSpawner::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScenarioGame_RoshanSpawner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScenarioGame_RoshanSpawner::CopyFrom(const CScenarioGame_RoshanSpawner& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScenarioGame_RoshanSpawner)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScenarioGame_RoshanSpawner::IsInitialized() const {
  return true;
}

void CScenarioGame_RoshanSpawner::InternalSwap(CScenarioGame_RoshanSpawner* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CScenarioGame_RoshanSpawner, cooldown_)
      + sizeof(CScenarioGame_RoshanSpawner::cooldown_)
      - PROTOBUF_FIELD_OFFSET(CScenarioGame_RoshanSpawner, kill_count_)>(
          reinterpret_cast<char*>(&kill_count_),
          reinterpret_cast<char*>(&other->kill_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CScenarioGame_RoshanSpawner::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CScenarioEnt_Courier::_Internal {
 public:
  using HasBits = decltype(std::declval<CScenarioEnt_Courier>()._has_bits_);
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CScenarioEnt_Courier::CScenarioEnt_Courier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CScenarioEnt_Courier)
}
CScenarioEnt_Courier::CScenarioEnt_Courier(const CScenarioEnt_Courier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&cooldown_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(cooldown_));
  // @@protoc_insertion_point(copy_constructor:CScenarioEnt_Courier)
}

void CScenarioEnt_Courier::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_player_id_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(owner_player_id_));
cooldown_ = -1;
}

CScenarioEnt_Courier::~CScenarioEnt_Courier() {
  // @@protoc_insertion_point(destructor:CScenarioEnt_Courier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CScenarioEnt_Courier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CScenarioEnt_Courier::ArenaDtor(void* object) {
  CScenarioEnt_Courier* _this = reinterpret_cast< CScenarioEnt_Courier* >(object);
  (void)_this;
}
void CScenarioEnt_Courier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CScenarioEnt_Courier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CScenarioEnt_Courier::Clear() {
// @@protoc_insertion_point(message_clear_start:CScenarioEnt_Courier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_player_id_) -
        reinterpret_cast<char*>(&team_number_)) + sizeof(owner_player_id_));
    cooldown_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CScenarioEnt_Courier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 team_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 owner_player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_owner_player_id(&has_bits);
          owner_player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cooldown = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_cooldown(&has_bits);
          cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScenarioEnt_Courier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScenarioEnt_Courier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_number(), target);
  }

  // optional int32 owner_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner_player_id(), target);
  }

  // optional float cooldown = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_cooldown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScenarioEnt_Courier)
  return target;
}

size_t CScenarioEnt_Courier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScenarioEnt_Courier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 team_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_number());
    }

    // optional int32 owner_player_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_owner_player_id());
    }

    // optional float cooldown = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScenarioEnt_Courier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScenarioEnt_Courier)
  GOOGLE_DCHECK_NE(&from, this);
  const CScenarioEnt_Courier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScenarioEnt_Courier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScenarioEnt_Courier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScenarioEnt_Courier)
    MergeFrom(*source);
  }
}

void CScenarioEnt_Courier::MergeFrom(const CScenarioEnt_Courier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScenarioEnt_Courier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      owner_player_id_ = from.owner_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_ = from.cooldown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CScenarioEnt_Courier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScenarioEnt_Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScenarioEnt_Courier::CopyFrom(const CScenarioEnt_Courier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScenarioEnt_Courier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScenarioEnt_Courier::IsInitialized() const {
  return true;
}

void CScenarioEnt_Courier::InternalSwap(CScenarioEnt_Courier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CScenarioEnt_Courier, owner_player_id_)
      + sizeof(CScenarioEnt_Courier::owner_player_id_)
      - PROTOBUF_FIELD_OFFSET(CScenarioEnt_Courier, team_number_)>(
          reinterpret_cast<char*>(&team_number_),
          reinterpret_cast<char*>(&other->team_number_));
  swap(cooldown_, other->cooldown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CScenarioEnt_Courier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CScenarioEnt_NPC::_Internal {
 public:
  using HasBits = decltype(std::declval<CScenarioEnt_NPC>()._has_bits_);
  static const ::CScenario_Position& position(const CScenarioEnt_NPC* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unit_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_health_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_owning_camp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CScenario_Position& owning_camp_position(const CScenarioEnt_NPC* msg);
  static void set_has_owning_camp_position(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_invade_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CScenario_Position&
CScenarioEnt_NPC::_Internal::position(const CScenarioEnt_NPC* msg) {
  return *msg->position_;
}
const ::CScenario_Position&
CScenarioEnt_NPC::_Internal::owning_camp_position(const CScenarioEnt_NPC* msg) {
  return *msg->owning_camp_position_;
}
CScenarioEnt_NPC::CScenarioEnt_NPC(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CScenarioEnt_NPC)
}
CScenarioEnt_NPC::CScenarioEnt_NPC(const CScenarioEnt_NPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unit_name()) {
    unit_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unit_name(), 
      GetArena());
  }
  owning_camp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_owning_camp()) {
    owning_camp_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_owning_camp(), 
      GetArena());
  }
  invade_goal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invade_goal()) {
    invade_goal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_invade_goal(), 
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new ::CScenario_Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_owning_camp_position()) {
    owning_camp_position_ = new ::CScenario_Position(*from.owning_camp_position_);
  } else {
    owning_camp_position_ = nullptr;
  }
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_frac_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(health_frac_));
  // @@protoc_insertion_point(copy_constructor:CScenarioEnt_NPC)
}

void CScenarioEnt_NPC::SharedCtor() {
unit_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
owning_camp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
invade_goal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_number_) -
    reinterpret_cast<char*>(&position_)) + sizeof(team_number_));
health_frac_ = 1;
}

CScenarioEnt_NPC::~CScenarioEnt_NPC() {
  // @@protoc_insertion_point(destructor:CScenarioEnt_NPC)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CScenarioEnt_NPC::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  unit_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owning_camp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invade_goal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete owning_camp_position_;
}

void CScenarioEnt_NPC::ArenaDtor(void* object) {
  CScenarioEnt_NPC* _this = reinterpret_cast< CScenarioEnt_NPC* >(object);
  (void)_this;
}
void CScenarioEnt_NPC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CScenarioEnt_NPC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CScenarioEnt_NPC::Clear() {
// @@protoc_insertion_point(message_clear_start:CScenarioEnt_NPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      unit_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      owning_camp_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      invade_goal_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(owning_camp_position_ != nullptr);
      owning_camp_position_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    team_number_ = 0;
    health_frac_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CScenarioEnt_NPC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CScenario_Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string unit_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_unit_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CScenarioEnt_NPC.unit_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float health_frac = 4 [default = 1];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_health_frac(&has_bits);
          health_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string owning_camp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_owning_camp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CScenarioEnt_NPC.owning_camp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CScenario_Position owning_camp_position = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_owning_camp_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string invade_goal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_invade_goal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CScenarioEnt_NPC.invade_goal");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScenarioEnt_NPC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScenarioEnt_NPC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CScenario_Position position = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // optional string unit_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unit_name().data(), static_cast<int>(this->_internal_unit_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CScenarioEnt_NPC.unit_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_unit_name(), target);
  }

  // optional int32 team_number = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_number(), target);
  }

  // optional float health_frac = 4 [default = 1];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_health_frac(), target);
  }

  // optional string owning_camp = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_owning_camp().data(), static_cast<int>(this->_internal_owning_camp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CScenarioEnt_NPC.owning_camp");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_owning_camp(), target);
  }

  // optional .CScenario_Position owning_camp_position = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::owning_camp_position(this), target, stream);
  }

  // optional string invade_goal = 20;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invade_goal().data(), static_cast<int>(this->_internal_invade_goal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CScenarioEnt_NPC.invade_goal");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_invade_goal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScenarioEnt_NPC)
  return target;
}

size_t CScenarioEnt_NPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScenarioEnt_NPC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string unit_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unit_name());
    }

    // optional string owning_camp = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_owning_camp());
    }

    // optional string invade_goal = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_invade_goal());
    }

    // optional .CScenario_Position position = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .CScenario_Position owning_camp_position = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *owning_camp_position_);
    }

    // optional int32 team_number = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_number());
    }

    // optional float health_frac = 4 [default = 1];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScenarioEnt_NPC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScenarioEnt_NPC)
  GOOGLE_DCHECK_NE(&from, this);
  const CScenarioEnt_NPC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScenarioEnt_NPC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScenarioEnt_NPC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScenarioEnt_NPC)
    MergeFrom(*source);
  }
}

void CScenarioEnt_NPC::MergeFrom(const CScenarioEnt_NPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScenarioEnt_NPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unit_name(from._internal_unit_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_owning_camp(from._internal_owning_camp());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_invade_goal(from._internal_invade_goal());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_position()->::CScenario_Position::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_owning_camp_position()->::CScenario_Position::MergeFrom(from._internal_owning_camp_position());
    }
    if (cached_has_bits & 0x00000020u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      health_frac_ = from.health_frac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CScenarioEnt_NPC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScenarioEnt_NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScenarioEnt_NPC::CopyFrom(const CScenarioEnt_NPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScenarioEnt_NPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScenarioEnt_NPC::IsInitialized() const {
  return true;
}

void CScenarioEnt_NPC::InternalSwap(CScenarioEnt_NPC* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  unit_name_.Swap(&other->unit_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  owning_camp_.Swap(&other->owning_camp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invade_goal_.Swap(&other->invade_goal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CScenarioEnt_NPC, team_number_)
      + sizeof(CScenarioEnt_NPC::team_number_)
      - PROTOBUF_FIELD_OFFSET(CScenarioEnt_NPC, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
  swap(health_frac_, other->health_frac_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CScenarioEnt_NPC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CScenarioEnt_SpiritBear::_Internal {
 public:
  using HasBits = decltype(std::declval<CScenarioEnt_SpiritBear>()._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CScenarioEnt_SpiritBear::CScenarioEnt_SpiritBear(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CScenarioEnt_SpiritBear)
}
CScenarioEnt_SpiritBear::CScenarioEnt_SpiritBear(const CScenarioEnt_SpiritBear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:CScenarioEnt_SpiritBear)
}

void CScenarioEnt_SpiritBear::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&owner_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(team_id_));
}

CScenarioEnt_SpiritBear::~CScenarioEnt_SpiritBear() {
  // @@protoc_insertion_point(destructor:CScenarioEnt_SpiritBear)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CScenarioEnt_SpiritBear::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CScenarioEnt_SpiritBear::ArenaDtor(void* object) {
  CScenarioEnt_SpiritBear* _this = reinterpret_cast< CScenarioEnt_SpiritBear* >(object);
  (void)_this;
}
void CScenarioEnt_SpiritBear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CScenarioEnt_SpiritBear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CScenarioEnt_SpiritBear::Clear() {
// @@protoc_insertion_point(message_clear_start:CScenarioEnt_SpiritBear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CScenarioEnt_SpiritBear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScenarioEnt_SpiritBear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScenarioEnt_SpiritBear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // optional int32 team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScenarioEnt_SpiritBear)
  return target;
}

size_t CScenarioEnt_SpiritBear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScenarioEnt_SpiritBear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 owner_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_owner_id());
    }

    // optional int32 team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScenarioEnt_SpiritBear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScenarioEnt_SpiritBear)
  GOOGLE_DCHECK_NE(&from, this);
  const CScenarioEnt_SpiritBear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScenarioEnt_SpiritBear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScenarioEnt_SpiritBear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScenarioEnt_SpiritBear)
    MergeFrom(*source);
  }
}

void CScenarioEnt_SpiritBear::MergeFrom(const CScenarioEnt_SpiritBear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScenarioEnt_SpiritBear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CScenarioEnt_SpiritBear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScenarioEnt_SpiritBear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScenarioEnt_SpiritBear::CopyFrom(const CScenarioEnt_SpiritBear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScenarioEnt_SpiritBear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScenarioEnt_SpiritBear::IsInitialized() const {
  return true;
}

void CScenarioEnt_SpiritBear::InternalSwap(CScenarioEnt_SpiritBear* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CScenarioEnt_SpiritBear, team_id_)
      + sizeof(CScenarioEnt_SpiritBear::team_id_)
      - PROTOBUF_FIELD_OFFSET(CScenarioEnt_SpiritBear, owner_id_)>(
          reinterpret_cast<char*>(&owner_id_),
          reinterpret_cast<char*>(&other->owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CScenarioEnt_SpiritBear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CScenarioEnt_DroppedItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CScenarioEnt_DroppedItem>()._has_bits_);
  static const ::CScenario_Position& position(const CScenarioEnt_DroppedItem* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CScenario_Position&
CScenarioEnt_DroppedItem::_Internal::position(const CScenarioEnt_DroppedItem* msg) {
  return *msg->position_;
}
CScenarioEnt_DroppedItem::CScenarioEnt_DroppedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CScenarioEnt_DroppedItem)
}
CScenarioEnt_DroppedItem::CScenarioEnt_DroppedItem(const CScenarioEnt_DroppedItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::CScenario_Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CScenarioEnt_DroppedItem)
}

void CScenarioEnt_DroppedItem::SharedCtor() {
position_ = nullptr;
}

CScenarioEnt_DroppedItem::~CScenarioEnt_DroppedItem() {
  // @@protoc_insertion_point(destructor:CScenarioEnt_DroppedItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CScenarioEnt_DroppedItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void CScenarioEnt_DroppedItem::ArenaDtor(void* object) {
  CScenarioEnt_DroppedItem* _this = reinterpret_cast< CScenarioEnt_DroppedItem* >(object);
  (void)_this;
}
void CScenarioEnt_DroppedItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CScenarioEnt_DroppedItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CScenarioEnt_DroppedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CScenarioEnt_DroppedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CScenarioEnt_DroppedItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CScenario_Position position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CScenarioEnt_DroppedItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CScenarioEnt_DroppedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CScenario_Position position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CScenarioEnt_DroppedItem)
  return target;
}

size_t CScenarioEnt_DroppedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CScenarioEnt_DroppedItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .CScenario_Position position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CScenarioEnt_DroppedItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CScenarioEnt_DroppedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CScenarioEnt_DroppedItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CScenarioEnt_DroppedItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CScenarioEnt_DroppedItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CScenarioEnt_DroppedItem)
    MergeFrom(*source);
  }
}

void CScenarioEnt_DroppedItem::MergeFrom(const CScenarioEnt_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CScenarioEnt_DroppedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::CScenario_Position::MergeFrom(from._internal_position());
  }
}

void CScenarioEnt_DroppedItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CScenarioEnt_DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CScenarioEnt_DroppedItem::CopyFrom(const CScenarioEnt_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CScenarioEnt_DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CScenarioEnt_DroppedItem::IsInitialized() const {
  return true;
}

void CScenarioEnt_DroppedItem::InternalSwap(CScenarioEnt_DroppedItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CScenarioEnt_DroppedItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_EntityRef::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_EntityRef>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_neutral_stash_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entity_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_roshan(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ability_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDotaScenario_EntityRef::CMsgDotaScenario_EntityRef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.EntityRef)
}
CMsgDotaScenario_EntityRef::CMsgDotaScenario_EntityRef(const CMsgDotaScenario_EntityRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ability_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ability_name()) {
    ability_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ability_name(), 
      GetArena());
  }
  ::memcpy(&roshan_, &from.roshan_,
    static_cast<size_t>(reinterpret_cast<char*>(&neutral_stash_id_) -
    reinterpret_cast<char*>(&roshan_)) + sizeof(neutral_stash_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.EntityRef)
}

void CMsgDotaScenario_EntityRef::SharedCtor() {
ability_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
roshan_ = false;
entity_idx_ = -1;
player_id_ = -1;
neutral_stash_id_ = -1;
}

CMsgDotaScenario_EntityRef::~CMsgDotaScenario_EntityRef() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.EntityRef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_EntityRef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ability_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDotaScenario_EntityRef::ArenaDtor(void* object) {
  CMsgDotaScenario_EntityRef* _this = reinterpret_cast< CMsgDotaScenario_EntityRef* >(object);
  (void)_this;
}
void CMsgDotaScenario_EntityRef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_EntityRef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_EntityRef::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.EntityRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ability_name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    roshan_ = false;
    entity_idx_ = -1;
    player_id_ = -1;
    neutral_stash_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_EntityRef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1 [default = -1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 neutral_stash_id = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_neutral_stash_id(&has_bits);
          neutral_stash_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 entity_idx = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_entity_idx(&has_bits);
          entity_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool roshan = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_roshan(&has_bits);
          roshan_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ability_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ability_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.EntityRef.ability_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_EntityRef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.EntityRef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1 [default = -1];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 neutral_stash_id = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_neutral_stash_id(), target);
  }

  // optional int32 entity_idx = 3 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_entity_idx(), target);
  }

  // optional bool roshan = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_roshan(), target);
  }

  // optional string ability_name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ability_name().data(), static_cast<int>(this->_internal_ability_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.EntityRef.ability_name");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ability_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.EntityRef)
  return target;
}

size_t CMsgDotaScenario_EntityRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.EntityRef)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string ability_name = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ability_name());
    }

    // optional bool roshan = 4 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 entity_idx = 3 [default = -1];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_entity_idx());
    }

    // optional int32 player_id = 1 [default = -1];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 neutral_stash_id = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_neutral_stash_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_EntityRef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.EntityRef)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_EntityRef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_EntityRef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.EntityRef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.EntityRef)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_EntityRef::MergeFrom(const CMsgDotaScenario_EntityRef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.EntityRef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ability_name(from._internal_ability_name());
    }
    if (cached_has_bits & 0x00000002u) {
      roshan_ = from.roshan_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_idx_ = from.entity_idx_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      neutral_stash_id_ = from.neutral_stash_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_EntityRef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.EntityRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_EntityRef::CopyFrom(const CMsgDotaScenario_EntityRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.EntityRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_EntityRef::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_EntityRef::InternalSwap(CMsgDotaScenario_EntityRef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ability_name_.Swap(&other->ability_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(roshan_, other->roshan_);
  swap(entity_idx_, other->entity_idx_);
  swap(player_id_, other->player_id_);
  swap(neutral_stash_id_, other->neutral_stash_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_EntityRef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Game::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Game>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_game_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_clock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_internal_time(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CScenarioGame_RoshanSpawner& roshan(const CMsgDotaScenario_Game* msg);
  static void set_has_roshan(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CScenarioGame_RoshanSpawner&
CMsgDotaScenario_Game::_Internal::roshan(const CMsgDotaScenario_Game* msg) {
  return *msg->roshan_;
}
CMsgDotaScenario_Game::CMsgDotaScenario_Game(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Game)
}
CMsgDotaScenario_Game::CMsgDotaScenario_Game(const CMsgDotaScenario_Game& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_roshan()) {
    roshan_ = new ::CScenarioGame_RoshanSpawner(*from.roshan_);
  } else {
    roshan_ = nullptr;
  }
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&internal_time_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(internal_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Game)
}

void CMsgDotaScenario_Game::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&roshan_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&internal_time_) -
    reinterpret_cast<char*>(&roshan_)) + sizeof(internal_time_));
}

CMsgDotaScenario_Game::~CMsgDotaScenario_Game() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Game)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Game::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete roshan_;
}

void CMsgDotaScenario_Game::ArenaDtor(void* object) {
  CMsgDotaScenario_Game* _this = reinterpret_cast< CMsgDotaScenario_Game* >(object);
  (void)_this;
}
void CMsgDotaScenario_Game::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(roshan_ != nullptr);
    roshan_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&internal_time_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(internal_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Game::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 game_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_game_mode(&has_bits);
          game_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float clock_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_clock_time(&has_bits);
          clock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float internal_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_internal_time(&has_bits);
          internal_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .CScenarioGame_RoshanSpawner roshan = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_roshan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Game::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Game)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional int32 game_mode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_mode(), target);
  }

  // optional float clock_time = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_clock_time(), target);
  }

  // optional float internal_time = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_internal_time(), target);
  }

  // optional .CScenarioGame_RoshanSpawner roshan = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::roshan(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Game)
  return target;
}

size_t CMsgDotaScenario_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Game)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .CScenarioGame_RoshanSpawner roshan = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *roshan_);
    }

    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_match_id());
    }

    // optional int32 game_mode = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_game_mode());
    }

    // optional float clock_time = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float internal_time = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Game::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Game* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Game)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Game)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Game::MergeFrom(const CMsgDotaScenario_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_roshan()->::CScenarioGame_RoshanSpawner::MergeFrom(from._internal_roshan());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      clock_time_ = from.clock_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      internal_time_ = from.internal_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_Game::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Game::CopyFrom(const CMsgDotaScenario_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Game::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Game::InternalSwap(CMsgDotaScenario_Game* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Game, internal_time_)
      + sizeof(CMsgDotaScenario_Game::internal_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Game, roshan_)>(
          reinterpret_cast<char*>(&roshan_),
          reinterpret_cast<char*>(&other->roshan_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Game::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_TeamNeutralItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_TeamNeutralItem>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_consumed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDotaScenario_TeamNeutralItem::CMsgDotaScenario_TeamNeutralItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.TeamNeutralItem)
}
CMsgDotaScenario_TeamNeutralItem::CMsgDotaScenario_TeamNeutralItem(const CMsgDotaScenario_TeamNeutralItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  consumed_ = from.consumed_;
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.TeamNeutralItem)
}

void CMsgDotaScenario_TeamNeutralItem::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
consumed_ = false;
}

CMsgDotaScenario_TeamNeutralItem::~CMsgDotaScenario_TeamNeutralItem() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.TeamNeutralItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_TeamNeutralItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDotaScenario_TeamNeutralItem::ArenaDtor(void* object) {
  CMsgDotaScenario_TeamNeutralItem* _this = reinterpret_cast< CMsgDotaScenario_TeamNeutralItem* >(object);
  (void)_this;
}
void CMsgDotaScenario_TeamNeutralItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_TeamNeutralItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_TeamNeutralItem::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.TeamNeutralItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  consumed_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_TeamNeutralItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.TeamNeutralItem.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool consumed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_consumed(&has_bits);
          consumed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_TeamNeutralItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.TeamNeutralItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.TeamNeutralItem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool consumed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_consumed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.TeamNeutralItem)
  return target;
}

size_t CMsgDotaScenario_TeamNeutralItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.TeamNeutralItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bool consumed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_TeamNeutralItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.TeamNeutralItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_TeamNeutralItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_TeamNeutralItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.TeamNeutralItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.TeamNeutralItem)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_TeamNeutralItem::MergeFrom(const CMsgDotaScenario_TeamNeutralItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.TeamNeutralItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      consumed_ = from.consumed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_TeamNeutralItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.TeamNeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_TeamNeutralItem::CopyFrom(const CMsgDotaScenario_TeamNeutralItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.TeamNeutralItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_TeamNeutralItem::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_TeamNeutralItem::InternalSwap(CMsgDotaScenario_TeamNeutralItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(consumed_, other->consumed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_TeamNeutralItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Team::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Team>()._has_bits_);
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hero_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_barracks_kills(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDotaScenario_Team::CMsgDotaScenario_Team(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  neutral_items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Team)
}
CMsgDotaScenario_Team::CMsgDotaScenario_Team(const CMsgDotaScenario_Team& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      neutral_items_(from.neutral_items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&team_number_, &from.team_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&barracks_kills_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(barracks_kills_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Team)
}

void CMsgDotaScenario_Team::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_number_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&barracks_kills_) -
    reinterpret_cast<char*>(&team_number_)) + sizeof(barracks_kills_));
}

CMsgDotaScenario_Team::~CMsgDotaScenario_Team() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Team)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Team::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDotaScenario_Team::ArenaDtor(void* object) {
  CMsgDotaScenario_Team* _this = reinterpret_cast< CMsgDotaScenario_Team* >(object);
  (void)_this;
}
void CMsgDotaScenario_Team::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neutral_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&team_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&barracks_kills_) -
        reinterpret_cast<char*>(&team_number_)) + sizeof(barracks_kills_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Team::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 team_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.TeamNeutralItem neutral_items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neutral_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 hero_kills = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hero_kills(&has_bits);
          hero_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 tower_kills = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tower_kills(&has_bits);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 barracks_kills = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_barracks_kills(&has_bits);
          barracks_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Team::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Team)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 team_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_team_number(), target);
  }

  // repeated .CMsgDotaScenario.TeamNeutralItem neutral_items = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neutral_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_neutral_items(i), target, stream);
  }

  // optional int32 hero_kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hero_kills(), target);
  }

  // optional int32 tower_kills = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tower_kills(), target);
  }

  // optional int32 barracks_kills = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_barracks_kills(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Team)
  return target;
}

size_t CMsgDotaScenario_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Team)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDotaScenario.TeamNeutralItem neutral_items = 2;
  total_size += 1UL * this->_internal_neutral_items_size();
  for (const auto& msg : this->neutral_items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 team_number = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_number());
    }

    // optional int32 hero_kills = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_kills());
    }

    // optional int32 tower_kills = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tower_kills());
    }

    // optional int32 barracks_kills = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_barracks_kills());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Team::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Team* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Team)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Team)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Team::MergeFrom(const CMsgDotaScenario_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neutral_items_.MergeFrom(from.neutral_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_kills_ = from.hero_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      barracks_kills_ = from.barracks_kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_Team::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Team::CopyFrom(const CMsgDotaScenario_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Team::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Team::InternalSwap(CMsgDotaScenario_Team* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  neutral_items_.InternalSwap(&other->neutral_items_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Team, barracks_kills_)
      + sizeof(CMsgDotaScenario_Team::barracks_kills_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Team, team_number_)>(
          reinterpret_cast<char*>(&team_number_),
          reinterpret_cast<char*>(&other->team_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Team::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_HeroHeroInt::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_HeroHeroInt>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDotaScenario_HeroHeroInt::CMsgDotaScenario_HeroHeroInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.HeroHeroInt)
}
CMsgDotaScenario_HeroHeroInt::CMsgDotaScenario_HeroHeroInt(const CMsgDotaScenario_HeroHeroInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.HeroHeroInt)
}

void CMsgDotaScenario_HeroHeroInt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
}

CMsgDotaScenario_HeroHeroInt::~CMsgDotaScenario_HeroHeroInt() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.HeroHeroInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_HeroHeroInt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDotaScenario_HeroHeroInt::ArenaDtor(void* object) {
  CMsgDotaScenario_HeroHeroInt* _this = reinterpret_cast< CMsgDotaScenario_HeroHeroInt* >(object);
  (void)_this;
}
void CMsgDotaScenario_HeroHeroInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_HeroHeroInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_HeroHeroInt::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.HeroHeroInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_HeroHeroInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_HeroHeroInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.HeroHeroInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional int32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.HeroHeroInt)
  return target;
}

size_t CMsgDotaScenario_HeroHeroInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.HeroHeroInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_HeroHeroInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.HeroHeroInt)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_HeroHeroInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_HeroHeroInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.HeroHeroInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.HeroHeroInt)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_HeroHeroInt::MergeFrom(const CMsgDotaScenario_HeroHeroInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.HeroHeroInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_HeroHeroInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.HeroHeroInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_HeroHeroInt::CopyFrom(const CMsgDotaScenario_HeroHeroInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.HeroHeroInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_HeroHeroInt::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_HeroHeroInt::InternalSwap(CMsgDotaScenario_HeroHeroInt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_HeroHeroInt, value_)
      + sizeof(CMsgDotaScenario_HeroHeroInt::value_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_HeroHeroInt, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_HeroHeroInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_HeroHeroFloat::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_HeroHeroFloat>()._has_bits_);
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDotaScenario_HeroHeroFloat::CMsgDotaScenario_HeroHeroFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.HeroHeroFloat)
}
CMsgDotaScenario_HeroHeroFloat::CMsgDotaScenario_HeroHeroFloat(const CMsgDotaScenario_HeroHeroFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.HeroHeroFloat)
}

void CMsgDotaScenario_HeroHeroFloat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
}

CMsgDotaScenario_HeroHeroFloat::~CMsgDotaScenario_HeroHeroFloat() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.HeroHeroFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_HeroHeroFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDotaScenario_HeroHeroFloat::ArenaDtor(void* object) {
  CMsgDotaScenario_HeroHeroFloat* _this = reinterpret_cast< CMsgDotaScenario_HeroHeroFloat* >(object);
  (void)_this;
}
void CMsgDotaScenario_HeroHeroFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_HeroHeroFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_HeroHeroFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.HeroHeroFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&player_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&player_id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_HeroHeroFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_HeroHeroFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.HeroHeroFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.HeroHeroFloat)
  return target;
}

size_t CMsgDotaScenario_HeroHeroFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.HeroHeroFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 player_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional float value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_HeroHeroFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.HeroHeroFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_HeroHeroFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_HeroHeroFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.HeroHeroFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.HeroHeroFloat)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_HeroHeroFloat::MergeFrom(const CMsgDotaScenario_HeroHeroFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.HeroHeroFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_HeroHeroFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.HeroHeroFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_HeroHeroFloat::CopyFrom(const CMsgDotaScenario_HeroHeroFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.HeroHeroFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_HeroHeroFloat::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_HeroHeroFloat::InternalSwap(CMsgDotaScenario_HeroHeroFloat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_HeroHeroFloat, value_)
      + sizeof(CMsgDotaScenario_HeroHeroFloat::value_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_HeroHeroFloat, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_HeroHeroFloat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_DamageStatsByType::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_DamageStatsByType>()._has_bits_);
  static void set_has_damage_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_received_pre_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_received_post_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_outgoing_pre_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_outgoing_post_reduction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDotaScenario_DamageStatsByType::CMsgDotaScenario_DamageStatsByType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.DamageStatsByType)
}
CMsgDotaScenario_DamageStatsByType::CMsgDotaScenario_DamageStatsByType(const CMsgDotaScenario_DamageStatsByType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&damage_type_, &from.damage_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&outgoing_post_reduction_) -
    reinterpret_cast<char*>(&damage_type_)) + sizeof(outgoing_post_reduction_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.DamageStatsByType)
}

void CMsgDotaScenario_DamageStatsByType::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&damage_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&outgoing_post_reduction_) -
    reinterpret_cast<char*>(&damage_type_)) + sizeof(outgoing_post_reduction_));
}

CMsgDotaScenario_DamageStatsByType::~CMsgDotaScenario_DamageStatsByType() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.DamageStatsByType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_DamageStatsByType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CMsgDotaScenario_DamageStatsByType::ArenaDtor(void* object) {
  CMsgDotaScenario_DamageStatsByType* _this = reinterpret_cast< CMsgDotaScenario_DamageStatsByType* >(object);
  (void)_this;
}
void CMsgDotaScenario_DamageStatsByType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_DamageStatsByType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_DamageStatsByType::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.DamageStatsByType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&damage_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&outgoing_post_reduction_) -
        reinterpret_cast<char*>(&damage_type_)) + sizeof(outgoing_post_reduction_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_DamageStatsByType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 damage_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_damage_type(&has_bits);
          damage_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 received_pre_reduction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_received_pre_reduction(&has_bits);
          received_pre_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 received_post_reduction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_received_post_reduction(&has_bits);
          received_post_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 outgoing_pre_reduction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_outgoing_pre_reduction(&has_bits);
          outgoing_pre_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 outgoing_post_reduction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_outgoing_post_reduction(&has_bits);
          outgoing_post_reduction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_DamageStatsByType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.DamageStatsByType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 damage_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_damage_type(), target);
  }

  // optional int32 received_pre_reduction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_received_pre_reduction(), target);
  }

  // optional int32 received_post_reduction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_received_post_reduction(), target);
  }

  // optional int32 outgoing_pre_reduction = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_outgoing_pre_reduction(), target);
  }

  // optional int32 outgoing_post_reduction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_outgoing_post_reduction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.DamageStatsByType)
  return target;
}

size_t CMsgDotaScenario_DamageStatsByType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.DamageStatsByType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 damage_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_damage_type());
    }

    // optional int32 received_pre_reduction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_received_pre_reduction());
    }

    // optional int32 received_post_reduction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_received_post_reduction());
    }

    // optional int32 outgoing_pre_reduction = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_outgoing_pre_reduction());
    }

    // optional int32 outgoing_post_reduction = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_outgoing_post_reduction());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_DamageStatsByType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.DamageStatsByType)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_DamageStatsByType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_DamageStatsByType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.DamageStatsByType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.DamageStatsByType)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_DamageStatsByType::MergeFrom(const CMsgDotaScenario_DamageStatsByType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.DamageStatsByType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      damage_type_ = from.damage_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      received_pre_reduction_ = from.received_pre_reduction_;
    }
    if (cached_has_bits & 0x00000004u) {
      received_post_reduction_ = from.received_post_reduction_;
    }
    if (cached_has_bits & 0x00000008u) {
      outgoing_pre_reduction_ = from.outgoing_pre_reduction_;
    }
    if (cached_has_bits & 0x00000010u) {
      outgoing_post_reduction_ = from.outgoing_post_reduction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_DamageStatsByType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.DamageStatsByType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_DamageStatsByType::CopyFrom(const CMsgDotaScenario_DamageStatsByType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.DamageStatsByType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_DamageStatsByType::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_DamageStatsByType::InternalSwap(CMsgDotaScenario_DamageStatsByType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_DamageStatsByType, outgoing_post_reduction_)
      + sizeof(CMsgDotaScenario_DamageStatsByType::outgoing_post_reduction_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_DamageStatsByType, damage_type_)>(
          reinterpret_cast<char*>(&damage_type_),
          reinterpret_cast<char*>(&other->damage_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_DamageStatsByType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_HeroAbility::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_HeroAbility>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgDotaScenario_HeroAbility::CMsgDotaScenario_HeroAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.HeroAbility)
}
CMsgDotaScenario_HeroAbility::CMsgDotaScenario_HeroAbility(const CMsgDotaScenario_HeroAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.HeroAbility)
}

void CMsgDotaScenario_HeroAbility::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
level_ = 0;
}

CMsgDotaScenario_HeroAbility::~CMsgDotaScenario_HeroAbility() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.HeroAbility)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_HeroAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDotaScenario_HeroAbility::ArenaDtor(void* object) {
  CMsgDotaScenario_HeroAbility* _this = reinterpret_cast< CMsgDotaScenario_HeroAbility* >(object);
  (void)_this;
}
void CMsgDotaScenario_HeroAbility::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_HeroAbility::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_HeroAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.HeroAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_HeroAbility::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.HeroAbility.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_level(&has_bits);
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_HeroAbility::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.HeroAbility)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.HeroAbility.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.HeroAbility)
  return target;
}

size_t CMsgDotaScenario_HeroAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.HeroAbility)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 level = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_level());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_HeroAbility::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_HeroAbility* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_HeroAbility>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.HeroAbility)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.HeroAbility)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_HeroAbility::MergeFrom(const CMsgDotaScenario_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.HeroAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_HeroAbility::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_HeroAbility::CopyFrom(const CMsgDotaScenario_HeroAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.HeroAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_HeroAbility::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_HeroAbility::InternalSwap(CMsgDotaScenario_HeroAbility* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(level_, other->level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_HeroAbility::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Hero::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Hero>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hero(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_total_xp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_bkb_charges_used(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_aeon_charges_used(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reliable_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unreliable_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_total_earned_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_shared_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_hero_kill_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_creep_kill_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_neutral_kill_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_courier_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bounty_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_roshan_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_building_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_other_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_income_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_ward_kill_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ability_gold(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_denies(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_last_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_last_hit_streak(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_last_hit_multikill(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_nearby_creep_death_count(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_claimed_deny_count(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_claimed_miss_count(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_miss_count(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_buyback_cooldown_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_buyback_gold_limit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_stun_duration(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_healing(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tower_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_roshan_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_observer_wards_placed(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_sentry_wards_placed(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_creeps_stacked(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_camps_stacked(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_rune_pickups(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_gold_spent_on_support(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_hero_damage(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_wards_purchased(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_wards_destroyed(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_gold_spent_on_consumables(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_gold_spent_on_items(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_gold_spent_on_buybacks(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_gold_lost_to_death(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_kills(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_assists(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_deaths(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_kill_streak(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_respawn_seconds(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_last_buyback_time(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_first_blood_claimed(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_first_blood_given(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_bounty_runes(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_outposts_captured(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
};

CMsgDotaScenario_Hero::CMsgDotaScenario_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  enemy_kills_(arena),
  damage_stats_(arena),
  abilities_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Hero)
}
CMsgDotaScenario_Hero::CMsgDotaScenario_Hero(const CMsgDotaScenario_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      enemy_kills_(from.enemy_kills_),
      damage_stats_(from.damage_stats_),
      abilities_(from.abilities_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_hero()) {
    hero_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hero(), 
      GetArena());
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&respawn_seconds_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(respawn_seconds_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Hero)
}

void CMsgDotaScenario_Hero::SharedCtor() {
hero_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bounty_runes_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(bounty_runes_));
respawn_seconds_ = -1;
}

CMsgDotaScenario_Hero::~CMsgDotaScenario_Hero() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Hero)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hero_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDotaScenario_Hero::ArenaDtor(void* object) {
  CMsgDotaScenario_Hero* _this = reinterpret_cast< CMsgDotaScenario_Hero* >(object);
  (void)_this;
}
void CMsgDotaScenario_Hero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enemy_kills_.Clear();
  damage_stats_.Clear();
  abilities_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hero_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reliable_gold_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(reliable_gold_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&unreliable_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bounty_gold_) -
        reinterpret_cast<char*>(&unreliable_gold_)) + sizeof(bounty_gold_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&roshan_gold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_hits_) -
        reinterpret_cast<char*>(&roshan_gold_)) + sizeof(last_hits_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&last_hit_streak_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&buyback_gold_limit_time_) -
        reinterpret_cast<char*>(&last_hit_streak_)) + sizeof(buyback_gold_limit_time_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&stun_duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camps_stacked_) -
        reinterpret_cast<char*>(&stun_duration_)) + sizeof(camps_stacked_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&rune_pickups_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gold_spent_on_buybacks_) -
        reinterpret_cast<char*>(&rune_pickups_)) + sizeof(gold_spent_on_buybacks_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&gold_lost_to_death_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&first_blood_claimed_) -
        reinterpret_cast<char*>(&gold_lost_to_death_)) + sizeof(first_blood_claimed_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&first_blood_given_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bounty_runes_) -
        reinterpret_cast<char*>(&first_blood_given_)) + sizeof(bounty_runes_));
    respawn_seconds_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_steam_id(&_has_bits_);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_player_id(&_has_bits_);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id(&_has_bits_);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string hero = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hero();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.Hero.hero");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_xp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_total_xp(&_has_bits_);
          total_xp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bkb_charges_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bkb_charges_used(&_has_bits_);
          bkb_charges_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 aeon_charges_used = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_aeon_charges_used(&_has_bits_);
          aeon_charges_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 reliable_gold = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_reliable_gold(&_has_bits_);
          reliable_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 unreliable_gold = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_unreliable_gold(&_has_bits_);
          unreliable_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 total_earned_gold = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_total_earned_gold(&_has_bits_);
          total_earned_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 shared_gold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_shared_gold(&_has_bits_);
          shared_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hero_kill_gold = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_hero_kill_gold(&_has_bits_);
          hero_kill_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 creep_kill_gold = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_creep_kill_gold(&_has_bits_);
          creep_kill_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 neutral_kill_gold = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_neutral_kill_gold(&_has_bits_);
          neutral_kill_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 courier_gold = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_courier_gold(&_has_bits_);
          courier_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bounty_gold = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_bounty_gold(&_has_bits_);
          bounty_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roshan_gold = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_roshan_gold(&_has_bits_);
          roshan_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 building_gold = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_building_gold(&_has_bits_);
          building_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 other_gold = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_other_gold(&_has_bits_);
          other_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 income_gold = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_income_gold(&_has_bits_);
          income_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ward_kill_gold = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_ward_kill_gold(&_has_bits_);
          ward_kill_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ability_gold = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_ability_gold(&_has_bits_);
          ability_gold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 denies = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_denies(&_has_bits_);
          denies_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_hits = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_last_hits(&_has_bits_);
          last_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_hit_streak = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_last_hit_streak(&_has_bits_);
          last_hit_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_hit_multikill = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_last_hit_multikill(&_has_bits_);
          last_hit_multikill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nearby_creep_death_count = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nearby_creep_death_count(&_has_bits_);
          nearby_creep_death_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 claimed_deny_count = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_claimed_deny_count(&_has_bits_);
          claimed_deny_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 claimed_miss_count = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_claimed_miss_count(&_has_bits_);
          claimed_miss_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 miss_count = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_miss_count(&_has_bits_);
          miss_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float buyback_cooldown_time = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_buyback_cooldown_time(&_has_bits_);
          buyback_cooldown_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float buyback_gold_limit_time = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_buyback_gold_limit_time(&_has_bits_);
          buyback_gold_limit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float stun_duration = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_stun_duration(&_has_bits_);
          stun_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float healing = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_healing(&_has_bits_);
          healing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 tower_kills = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tower_kills(&_has_bits_);
          tower_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 roshan_kills = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_roshan_kills(&_has_bits_);
          roshan_kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 observer_wards_placed = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_observer_wards_placed(&_has_bits_);
          observer_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 sentry_wards_placed = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_sentry_wards_placed(&_has_bits_);
          sentry_wards_placed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 creeps_stacked = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_creeps_stacked(&_has_bits_);
          creeps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 camps_stacked = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_camps_stacked(&_has_bits_);
          camps_stacked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rune_pickups = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_rune_pickups(&_has_bits_);
          rune_pickups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_spent_on_support = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_gold_spent_on_support(&_has_bits_);
          gold_spent_on_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 hero_damage = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_hero_damage(&_has_bits_);
          hero_damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wards_purchased = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_wards_purchased(&_has_bits_);
          wards_purchased_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wards_destroyed = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_wards_destroyed(&_has_bits_);
          wards_destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_spent_on_consumables = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_gold_spent_on_consumables(&_has_bits_);
          gold_spent_on_consumables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_spent_on_items = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_gold_spent_on_items(&_has_bits_);
          gold_spent_on_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_spent_on_buybacks = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_gold_spent_on_buybacks(&_has_bits_);
          gold_spent_on_buybacks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 gold_lost_to_death = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_gold_lost_to_death(&_has_bits_);
          gold_lost_to_death_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 kills = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_kills(&_has_bits_);
          kills_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 assists = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_assists(&_has_bits_);
          assists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 deaths = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_deaths(&_has_bits_);
          deaths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 kill_streak = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_kill_streak(&_has_bits_);
          kill_streak_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 respawn_seconds = 68 [default = -1];
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_respawn_seconds(&_has_bits_);
          respawn_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 last_buyback_time = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_last_buyback_time(&_has_bits_);
          last_buyback_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_blood_claimed = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_first_blood_claimed(&_has_bits_);
          first_blood_claimed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool first_blood_given = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_first_blood_given(&_has_bits_);
          first_blood_given_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 bounty_runes = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_bounty_runes(&_has_bits_);
          bounty_runes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 outposts_captured = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_outposts_captured(&_has_bits_);
          outposts_captured_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.HeroHeroInt enemy_kills = 150;
      case 150:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_enemy_kills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.DamageStatsByType damage_stats = 151;
      case 151:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_damage_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.HeroAbility abilities = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_abilities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<1218>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Hero::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Hero)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // optional int32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_id(), target);
  }

  // optional string hero = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hero().data(), static_cast<int>(this->_internal_hero().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.Hero.hero");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hero(), target);
  }

  // optional int32 total_xp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_total_xp(), target);
  }

  // optional int32 bkb_charges_used = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bkb_charges_used(), target);
  }

  // optional int32 aeon_charges_used = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_aeon_charges_used(), target);
  }

  // optional int32 reliable_gold = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_reliable_gold(), target);
  }

  // optional int32 unreliable_gold = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_unreliable_gold(), target);
  }

  // optional int32 total_earned_gold = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_total_earned_gold(), target);
  }

  // optional int32 shared_gold = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_shared_gold(), target);
  }

  // optional int32 hero_kill_gold = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_hero_kill_gold(), target);
  }

  // optional int32 creep_kill_gold = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_creep_kill_gold(), target);
  }

  // optional int32 neutral_kill_gold = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_neutral_kill_gold(), target);
  }

  // optional int32 courier_gold = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_courier_gold(), target);
  }

  // optional int32 bounty_gold = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_bounty_gold(), target);
  }

  // optional int32 roshan_gold = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_roshan_gold(), target);
  }

  // optional int32 building_gold = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_building_gold(), target);
  }

  // optional int32 other_gold = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_other_gold(), target);
  }

  // optional int32 income_gold = 26;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_income_gold(), target);
  }

  // optional int32 ward_kill_gold = 27;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(27, this->_internal_ward_kill_gold(), target);
  }

  // optional int32 ability_gold = 28;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(28, this->_internal_ability_gold(), target);
  }

  // optional int32 denies = 29;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_denies(), target);
  }

  // optional int32 last_hits = 30;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(30, this->_internal_last_hits(), target);
  }

  // optional int32 last_hit_streak = 31;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(31, this->_internal_last_hit_streak(), target);
  }

  // optional int32 last_hit_multikill = 32;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(32, this->_internal_last_hit_multikill(), target);
  }

  // optional int32 nearby_creep_death_count = 33;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(33, this->_internal_nearby_creep_death_count(), target);
  }

  // optional int32 claimed_deny_count = 34;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(34, this->_internal_claimed_deny_count(), target);
  }

  // optional int32 claimed_miss_count = 35;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(35, this->_internal_claimed_miss_count(), target);
  }

  // optional int32 miss_count = 36;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(36, this->_internal_miss_count(), target);
  }

  // optional float buyback_cooldown_time = 40;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(40, this->_internal_buyback_cooldown_time(), target);
  }

  // optional float buyback_gold_limit_time = 41;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(41, this->_internal_buyback_gold_limit_time(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float stun_duration = 44;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_stun_duration(), target);
  }

  // optional float healing = 45;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_healing(), target);
  }

  // optional int32 tower_kills = 46;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(46, this->_internal_tower_kills(), target);
  }

  // optional int32 roshan_kills = 47;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(47, this->_internal_roshan_kills(), target);
  }

  // optional int32 observer_wards_placed = 48;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(48, this->_internal_observer_wards_placed(), target);
  }

  // optional int32 sentry_wards_placed = 49;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(49, this->_internal_sentry_wards_placed(), target);
  }

  // optional int32 creeps_stacked = 50;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(50, this->_internal_creeps_stacked(), target);
  }

  // optional int32 camps_stacked = 51;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(51, this->_internal_camps_stacked(), target);
  }

  // optional int32 rune_pickups = 52;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(52, this->_internal_rune_pickups(), target);
  }

  // optional int32 gold_spent_on_support = 53;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(53, this->_internal_gold_spent_on_support(), target);
  }

  // optional int32 hero_damage = 54;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_hero_damage(), target);
  }

  // optional int32 wards_purchased = 55;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(55, this->_internal_wards_purchased(), target);
  }

  // optional int32 wards_destroyed = 56;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(56, this->_internal_wards_destroyed(), target);
  }

  // optional int32 gold_spent_on_consumables = 58;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(58, this->_internal_gold_spent_on_consumables(), target);
  }

  // optional int32 gold_spent_on_items = 59;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(59, this->_internal_gold_spent_on_items(), target);
  }

  // optional int32 gold_spent_on_buybacks = 60;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(60, this->_internal_gold_spent_on_buybacks(), target);
  }

  // optional int32 gold_lost_to_death = 61;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_gold_lost_to_death(), target);
  }

  // optional int32 kills = 62;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_kills(), target);
  }

  // optional int32 assists = 63;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(63, this->_internal_assists(), target);
  }

  // optional int32 deaths = 64;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(64, this->_internal_deaths(), target);
  }

  // optional int32 kill_streak = 65;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(65, this->_internal_kill_streak(), target);
  }

  // optional int32 respawn_seconds = 68 [default = -1];
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(68, this->_internal_respawn_seconds(), target);
  }

  // optional int32 last_buyback_time = 69;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(69, this->_internal_last_buyback_time(), target);
  }

  // optional bool first_blood_claimed = 71;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(71, this->_internal_first_blood_claimed(), target);
  }

  // optional bool first_blood_given = 72;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(72, this->_internal_first_blood_given(), target);
  }

  // optional int32 bounty_runes = 73;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(73, this->_internal_bounty_runes(), target);
  }

  // optional int32 outposts_captured = 74;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(74, this->_internal_outposts_captured(), target);
  }

  // repeated .CMsgDotaScenario.HeroHeroInt enemy_kills = 150;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_enemy_kills_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(150, this->_internal_enemy_kills(i), target, stream);
  }

  // repeated .CMsgDotaScenario.DamageStatsByType damage_stats = 151;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_damage_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(151, this->_internal_damage_stats(i), target, stream);
  }

  // repeated .CMsgDotaScenario.HeroAbility abilities = 152;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_abilities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(152, this->_internal_abilities(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Hero)
  return target;
}

size_t CMsgDotaScenario_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Hero)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDotaScenario.HeroHeroInt enemy_kills = 150;
  total_size += 2UL * this->_internal_enemy_kills_size();
  for (const auto& msg : this->enemy_kills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.DamageStatsByType damage_stats = 151;
  total_size += 2UL * this->_internal_damage_stats_size();
  for (const auto& msg : this->damage_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.HeroAbility abilities = 152;
  total_size += 2UL * this->_internal_abilities_size();
  for (const auto& msg : this->abilities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string hero = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hero());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 player_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

    // optional int32 team_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

    // optional int32 total_xp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_total_xp());
    }

    // optional int32 bkb_charges_used = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bkb_charges_used());
    }

    // optional int32 aeon_charges_used = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_aeon_charges_used());
    }

    // optional int32 reliable_gold = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_reliable_gold());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 unreliable_gold = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_unreliable_gold());
    }

    // optional int32 total_earned_gold = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_total_earned_gold());
    }

    // optional int32 shared_gold = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_shared_gold());
    }

    // optional int32 hero_kill_gold = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_kill_gold());
    }

    // optional int32 creep_kill_gold = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_creep_kill_gold());
    }

    // optional int32 neutral_kill_gold = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_neutral_kill_gold());
    }

    // optional int32 courier_gold = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_courier_gold());
    }

    // optional int32 bounty_gold = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bounty_gold());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 roshan_gold = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roshan_gold());
    }

    // optional int32 building_gold = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_building_gold());
    }

    // optional int32 other_gold = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_other_gold());
    }

    // optional int32 income_gold = 26;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_income_gold());
    }

    // optional int32 ward_kill_gold = 27;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ward_kill_gold());
    }

    // optional int32 ability_gold = 28;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ability_gold());
    }

    // optional int32 denies = 29;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_denies());
    }

    // optional int32 last_hits = 30;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_hits());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 last_hit_streak = 31;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_hit_streak());
    }

    // optional int32 last_hit_multikill = 32;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_hit_multikill());
    }

    // optional int32 nearby_creep_death_count = 33;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nearby_creep_death_count());
    }

    // optional int32 claimed_deny_count = 34;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_claimed_deny_count());
    }

    // optional int32 claimed_miss_count = 35;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_claimed_miss_count());
    }

    // optional int32 miss_count = 36;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_miss_count());
    }

    // optional float buyback_cooldown_time = 40;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float buyback_gold_limit_time = 41;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float stun_duration = 44;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float healing = 45;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 tower_kills = 46;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_tower_kills());
    }

    // optional int32 roshan_kills = 47;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_roshan_kills());
    }

    // optional int32 observer_wards_placed = 48;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_observer_wards_placed());
    }

    // optional int32 sentry_wards_placed = 49;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_sentry_wards_placed());
    }

    // optional int32 creeps_stacked = 50;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_creeps_stacked());
    }

    // optional int32 camps_stacked = 51;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_camps_stacked());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 rune_pickups = 52;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rune_pickups());
    }

    // optional int32 gold_spent_on_support = 53;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_spent_on_support());
    }

    // optional int32 hero_damage = 54;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_hero_damage());
    }

    // optional int32 wards_purchased = 55;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wards_purchased());
    }

    // optional int32 wards_destroyed = 56;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wards_destroyed());
    }

    // optional int32 gold_spent_on_consumables = 58;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_spent_on_consumables());
    }

    // optional int32 gold_spent_on_items = 59;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_spent_on_items());
    }

    // optional int32 gold_spent_on_buybacks = 60;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_spent_on_buybacks());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 gold_lost_to_death = 61;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gold_lost_to_death());
    }

    // optional int32 kills = 62;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kills());
    }

    // optional int32 outposts_captured = 74;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_outposts_captured());
    }

    // optional int32 assists = 63;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_assists());
    }

    // optional int32 deaths = 64;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_deaths());
    }

    // optional int32 kill_streak = 65;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_kill_streak());
    }

    // optional int32 last_buyback_time = 69;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_last_buyback_time());
    }

    // optional bool first_blood_claimed = 71;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x07000000u) {
    // optional bool first_blood_given = 72;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 bounty_runes = 73;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bounty_runes());
    }

    // optional int32 respawn_seconds = 68 [default = -1];
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_respawn_seconds());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Hero::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Hero* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Hero>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Hero)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Hero)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Hero::MergeFrom(const CMsgDotaScenario_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enemy_kills_.MergeFrom(from.enemy_kills_);
  damage_stats_.MergeFrom(from.damage_stats_);
  abilities_.MergeFrom(from.abilities_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hero(from._internal_hero());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      total_xp_ = from.total_xp_;
    }
    if (cached_has_bits & 0x00000020u) {
      bkb_charges_used_ = from.bkb_charges_used_;
    }
    if (cached_has_bits & 0x00000040u) {
      aeon_charges_used_ = from.aeon_charges_used_;
    }
    if (cached_has_bits & 0x00000080u) {
      reliable_gold_ = from.reliable_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      unreliable_gold_ = from.unreliable_gold_;
    }
    if (cached_has_bits & 0x00000200u) {
      total_earned_gold_ = from.total_earned_gold_;
    }
    if (cached_has_bits & 0x00000400u) {
      shared_gold_ = from.shared_gold_;
    }
    if (cached_has_bits & 0x00000800u) {
      hero_kill_gold_ = from.hero_kill_gold_;
    }
    if (cached_has_bits & 0x00001000u) {
      creep_kill_gold_ = from.creep_kill_gold_;
    }
    if (cached_has_bits & 0x00002000u) {
      neutral_kill_gold_ = from.neutral_kill_gold_;
    }
    if (cached_has_bits & 0x00004000u) {
      courier_gold_ = from.courier_gold_;
    }
    if (cached_has_bits & 0x00008000u) {
      bounty_gold_ = from.bounty_gold_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      roshan_gold_ = from.roshan_gold_;
    }
    if (cached_has_bits & 0x00020000u) {
      building_gold_ = from.building_gold_;
    }
    if (cached_has_bits & 0x00040000u) {
      other_gold_ = from.other_gold_;
    }
    if (cached_has_bits & 0x00080000u) {
      income_gold_ = from.income_gold_;
    }
    if (cached_has_bits & 0x00100000u) {
      ward_kill_gold_ = from.ward_kill_gold_;
    }
    if (cached_has_bits & 0x00200000u) {
      ability_gold_ = from.ability_gold_;
    }
    if (cached_has_bits & 0x00400000u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00800000u) {
      last_hits_ = from.last_hits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      last_hit_streak_ = from.last_hit_streak_;
    }
    if (cached_has_bits & 0x02000000u) {
      last_hit_multikill_ = from.last_hit_multikill_;
    }
    if (cached_has_bits & 0x04000000u) {
      nearby_creep_death_count_ = from.nearby_creep_death_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      claimed_deny_count_ = from.claimed_deny_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      claimed_miss_count_ = from.claimed_miss_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      miss_count_ = from.miss_count_;
    }
    if (cached_has_bits & 0x40000000u) {
      buyback_cooldown_time_ = from.buyback_cooldown_time_;
    }
    if (cached_has_bits & 0x80000000u) {
      buyback_gold_limit_time_ = from.buyback_gold_limit_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      stun_duration_ = from.stun_duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      healing_ = from.healing_;
    }
    if (cached_has_bits & 0x00000004u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      observer_wards_placed_ = from.observer_wards_placed_;
    }
    if (cached_has_bits & 0x00000020u) {
      sentry_wards_placed_ = from.sentry_wards_placed_;
    }
    if (cached_has_bits & 0x00000040u) {
      creeps_stacked_ = from.creeps_stacked_;
    }
    if (cached_has_bits & 0x00000080u) {
      camps_stacked_ = from.camps_stacked_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      rune_pickups_ = from.rune_pickups_;
    }
    if (cached_has_bits & 0x00000200u) {
      gold_spent_on_support_ = from.gold_spent_on_support_;
    }
    if (cached_has_bits & 0x00000400u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x00000800u) {
      wards_purchased_ = from.wards_purchased_;
    }
    if (cached_has_bits & 0x00001000u) {
      wards_destroyed_ = from.wards_destroyed_;
    }
    if (cached_has_bits & 0x00002000u) {
      gold_spent_on_consumables_ = from.gold_spent_on_consumables_;
    }
    if (cached_has_bits & 0x00004000u) {
      gold_spent_on_items_ = from.gold_spent_on_items_;
    }
    if (cached_has_bits & 0x00008000u) {
      gold_spent_on_buybacks_ = from.gold_spent_on_buybacks_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      gold_lost_to_death_ = from.gold_lost_to_death_;
    }
    if (cached_has_bits & 0x00020000u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00040000u) {
      outposts_captured_ = from.outposts_captured_;
    }
    if (cached_has_bits & 0x00080000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00100000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00200000u) {
      kill_streak_ = from.kill_streak_;
    }
    if (cached_has_bits & 0x00400000u) {
      last_buyback_time_ = from.last_buyback_time_;
    }
    if (cached_has_bits & 0x00800000u) {
      first_blood_claimed_ = from.first_blood_claimed_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      first_blood_given_ = from.first_blood_given_;
    }
    if (cached_has_bits & 0x02000000u) {
      bounty_runes_ = from.bounty_runes_;
    }
    if (cached_has_bits & 0x04000000u) {
      respawn_seconds_ = from.respawn_seconds_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDotaScenario_Hero::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Hero::CopyFrom(const CMsgDotaScenario_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Hero::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Hero::InternalSwap(CMsgDotaScenario_Hero* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  enemy_kills_.InternalSwap(&other->enemy_kills_);
  damage_stats_.InternalSwap(&other->damage_stats_);
  abilities_.InternalSwap(&other->abilities_);
  hero_.Swap(&other->hero_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Hero, bounty_runes_)
      + sizeof(CMsgDotaScenario_Hero::bounty_runes_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Hero, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
  swap(respawn_seconds_, other->respawn_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Hero::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Stock::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Stock>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_team_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_player_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_current_stock(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cooldown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bonus_stock(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgDotaScenario_Stock::CMsgDotaScenario_Stock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Stock)
}
CMsgDotaScenario_Stock::CMsgDotaScenario_Stock(const CMsgDotaScenario_Stock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&current_stock_, &from.current_stock_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&current_stock_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Stock)
}

void CMsgDotaScenario_Stock::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_stock_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bonus_stock_) -
    reinterpret_cast<char*>(&current_stock_)) + sizeof(bonus_stock_));
team_number_ = -1;
player_id_ = -1;
}

CMsgDotaScenario_Stock::~CMsgDotaScenario_Stock() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Stock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Stock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDotaScenario_Stock::ArenaDtor(void* object) {
  CMsgDotaScenario_Stock* _this = reinterpret_cast< CMsgDotaScenario_Stock* >(object);
  (void)_this;
}
void CMsgDotaScenario_Stock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Stock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Stock::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Stock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&current_stock_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bonus_stock_) -
        reinterpret_cast<char*>(&current_stock_)) + sizeof(bonus_stock_));
    team_number_ = -1;
    player_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Stock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.Stock.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_number = 2 [default = -1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_team_number(&has_bits);
          team_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 player_id = 3 [default = -1];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_player_id(&has_bits);
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 current_stock = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_current_stock(&has_bits);
          current_stock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float cooldown = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_cooldown(&has_bits);
          cooldown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 bonus_stock = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_bonus_stock(&has_bits);
          bonus_stock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Stock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Stock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.Stock.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional int32 team_number = 2 [default = -1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_team_number(), target);
  }

  // optional int32 player_id = 3 [default = -1];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_id(), target);
  }

  // optional int32 current_stock = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_current_stock(), target);
  }

  // optional float cooldown = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_cooldown(), target);
  }

  // optional int32 bonus_stock = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_bonus_stock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Stock)
  return target;
}

size_t CMsgDotaScenario_Stock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Stock)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional int32 current_stock = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_current_stock());
    }

    // optional float cooldown = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional int32 bonus_stock = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_bonus_stock());
    }

    // optional int32 team_number = 2 [default = -1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_number());
    }

    // optional int32 player_id = 3 [default = -1];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_player_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Stock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Stock)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Stock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Stock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Stock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Stock)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Stock::MergeFrom(const CMsgDotaScenario_Stock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Stock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      current_stock_ = from.current_stock_;
    }
    if (cached_has_bits & 0x00000004u) {
      cooldown_ = from.cooldown_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_stock_ = from.bonus_stock_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000020u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_Stock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Stock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Stock::CopyFrom(const CMsgDotaScenario_Stock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Stock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Stock::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Stock::InternalSwap(CMsgDotaScenario_Stock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Stock, bonus_stock_)
      + sizeof(CMsgDotaScenario_Stock::bonus_stock_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Stock, current_stock_)>(
          reinterpret_cast<char*>(&current_stock_),
          reinterpret_cast<char*>(&other->current_stock_));
  swap(team_number_, other->team_number_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Stock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Building::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Building>()._has_bits_);
  static void set_has_entity_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_entity_class(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_team_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_destroyed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_health_frac(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgDotaScenario_Building::CMsgDotaScenario_Building(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Building)
}
CMsgDotaScenario_Building::CMsgDotaScenario_Building(const CMsgDotaScenario_Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  entity_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity_name()) {
    entity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_name(), 
      GetArena());
  }
  entity_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_entity_class()) {
    entity_class_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_entity_class(), 
      GetArena());
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_frac_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(health_frac_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Building)
}

void CMsgDotaScenario_Building::SharedCtor() {
entity_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
entity_class_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&team_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_destroyed_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(is_destroyed_));
health_frac_ = 1;
}

CMsgDotaScenario_Building::~CMsgDotaScenario_Building() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Building)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Building::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  entity_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  entity_class_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDotaScenario_Building::ArenaDtor(void* object) {
  CMsgDotaScenario_Building* _this = reinterpret_cast< CMsgDotaScenario_Building* >(object);
  (void)_this;
}
void CMsgDotaScenario_Building::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Building::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      entity_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      entity_class_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_destroyed_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(is_destroyed_));
    health_frac_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Building::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string entity_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.Building.entity_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string entity_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_entity_class();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.Building.entity_class");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_team_id(&has_bits);
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool is_destroyed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_is_destroyed(&has_bits);
          is_destroyed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float health_frac = 5 [default = 1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_health_frac(&has_bits);
          health_frac_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Building::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string entity_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity_name().data(), static_cast<int>(this->_internal_entity_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.Building.entity_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity_name(), target);
  }

  // optional string entity_class = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_entity_class().data(), static_cast<int>(this->_internal_entity_class().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.Building.entity_class");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_entity_class(), target);
  }

  // optional int32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_team_id(), target);
  }

  // optional bool is_destroyed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_destroyed(), target);
  }

  // optional float health_frac = 5 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_health_frac(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Building)
  return target;
}

size_t CMsgDotaScenario_Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Building)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string entity_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entity_name());
    }

    // optional string entity_class = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_entity_class());
    }

    // optional int32 team_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_team_id());
    }

    // optional bool is_destroyed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float health_frac = 5 [default = 1];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Building::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Building)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Building* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Building>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Building)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Building)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Building::MergeFrom(const CMsgDotaScenario_Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_entity_name(from._internal_entity_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_entity_class(from._internal_entity_class());
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_destroyed_ = from.is_destroyed_;
    }
    if (cached_has_bits & 0x00000010u) {
      health_frac_ = from.health_frac_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_Building::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Building::CopyFrom(const CMsgDotaScenario_Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Building::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Building::InternalSwap(CMsgDotaScenario_Building* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  entity_name_.Swap(&other->entity_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  entity_class_.Swap(&other->entity_class_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Building, is_destroyed_)
      + sizeof(CMsgDotaScenario_Building::is_destroyed_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Building, team_id_)>(
          reinterpret_cast<char*>(&team_id_),
          reinterpret_cast<char*>(&other->team_id_));
  swap(health_frac_, other->health_frac_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Building::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Entity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Entity>()._has_bits_);
  static const ::CScenarioEnt_Courier& courier(const CMsgDotaScenario_Entity* msg);
  static void set_has_courier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CScenarioEnt_NPC& npc(const CMsgDotaScenario_Entity* msg);
  static void set_has_npc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CScenarioEnt_SpiritBear& spirit_bear(const CMsgDotaScenario_Entity* msg);
  static void set_has_spirit_bear(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CScenarioEnt_DroppedItem& dropped_item(const CMsgDotaScenario_Entity* msg);
  static void set_has_dropped_item(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::CScenarioEnt_Courier&
CMsgDotaScenario_Entity::_Internal::courier(const CMsgDotaScenario_Entity* msg) {
  return *msg->courier_;
}
const ::CScenarioEnt_NPC&
CMsgDotaScenario_Entity::_Internal::npc(const CMsgDotaScenario_Entity* msg) {
  return *msg->npc_;
}
const ::CScenarioEnt_SpiritBear&
CMsgDotaScenario_Entity::_Internal::spirit_bear(const CMsgDotaScenario_Entity* msg) {
  return *msg->spirit_bear_;
}
const ::CScenarioEnt_DroppedItem&
CMsgDotaScenario_Entity::_Internal::dropped_item(const CMsgDotaScenario_Entity* msg) {
  return *msg->dropped_item_;
}
CMsgDotaScenario_Entity::CMsgDotaScenario_Entity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Entity)
}
CMsgDotaScenario_Entity::CMsgDotaScenario_Entity(const CMsgDotaScenario_Entity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_courier()) {
    courier_ = new ::CScenarioEnt_Courier(*from.courier_);
  } else {
    courier_ = nullptr;
  }
  if (from._internal_has_npc()) {
    npc_ = new ::CScenarioEnt_NPC(*from.npc_);
  } else {
    npc_ = nullptr;
  }
  if (from._internal_has_spirit_bear()) {
    spirit_bear_ = new ::CScenarioEnt_SpiritBear(*from.spirit_bear_);
  } else {
    spirit_bear_ = nullptr;
  }
  if (from._internal_has_dropped_item()) {
    dropped_item_ = new ::CScenarioEnt_DroppedItem(*from.dropped_item_);
  } else {
    dropped_item_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Entity)
}

void CMsgDotaScenario_Entity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&courier_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dropped_item_) -
    reinterpret_cast<char*>(&courier_)) + sizeof(dropped_item_));
}

CMsgDotaScenario_Entity::~CMsgDotaScenario_Entity() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Entity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Entity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete courier_;
  if (this != internal_default_instance()) delete npc_;
  if (this != internal_default_instance()) delete spirit_bear_;
  if (this != internal_default_instance()) delete dropped_item_;
}

void CMsgDotaScenario_Entity::ArenaDtor(void* object) {
  CMsgDotaScenario_Entity* _this = reinterpret_cast< CMsgDotaScenario_Entity* >(object);
  (void)_this;
}
void CMsgDotaScenario_Entity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Entity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(courier_ != nullptr);
      courier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(npc_ != nullptr);
      npc_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(spirit_bear_ != nullptr);
      spirit_bear_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dropped_item_ != nullptr);
      dropped_item_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Entity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CScenarioEnt_Courier courier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_courier(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CScenarioEnt_NPC npc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_npc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CScenarioEnt_SpiritBear spirit_bear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spirit_bear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CScenarioEnt_DroppedItem dropped_item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dropped_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Entity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Entity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CScenarioEnt_Courier courier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::courier(this), target, stream);
  }

  // optional .CScenarioEnt_NPC npc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::npc(this), target, stream);
  }

  // optional .CScenarioEnt_SpiritBear spirit_bear = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spirit_bear(this), target, stream);
  }

  // optional .CScenarioEnt_DroppedItem dropped_item = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dropped_item(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Entity)
  return target;
}

size_t CMsgDotaScenario_Entity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Entity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CScenarioEnt_Courier courier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *courier_);
    }

    // optional .CScenarioEnt_NPC npc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *npc_);
    }

    // optional .CScenarioEnt_SpiritBear spirit_bear = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *spirit_bear_);
    }

    // optional .CScenarioEnt_DroppedItem dropped_item = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dropped_item_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Entity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Entity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Entity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Entity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Entity)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Entity::MergeFrom(const CMsgDotaScenario_Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Entity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_courier()->::CScenarioEnt_Courier::MergeFrom(from._internal_courier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_npc()->::CScenarioEnt_NPC::MergeFrom(from._internal_npc());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_spirit_bear()->::CScenarioEnt_SpiritBear::MergeFrom(from._internal_spirit_bear());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dropped_item()->::CScenarioEnt_DroppedItem::MergeFrom(from._internal_dropped_item());
    }
  }
}

void CMsgDotaScenario_Entity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Entity::CopyFrom(const CMsgDotaScenario_Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Entity::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Entity::InternalSwap(CMsgDotaScenario_Entity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Entity, dropped_item_)
      + sizeof(CMsgDotaScenario_Entity::dropped_item_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Entity, courier_)>(
          reinterpret_cast<char*>(&courier_),
          reinterpret_cast<char*>(&other->courier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Entity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Item::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Item>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDotaScenario_EntityRef& location(const CMsgDotaScenario_Item* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_item_slot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_neutral_drop_team(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_secondary_charges(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lifetime(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_stored_rune_type(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const ::CMsgDotaScenario_EntityRef&
CMsgDotaScenario_Item::_Internal::location(const CMsgDotaScenario_Item* msg) {
  return *msg->location_;
}
CMsgDotaScenario_Item::CMsgDotaScenario_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Item)
}
CMsgDotaScenario_Item::CMsgDotaScenario_Item(const CMsgDotaScenario_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::CMsgDotaScenario_EntityRef(*from.location_);
  } else {
    location_ = nullptr;
  }
  ::memcpy(&owner_id_, &from.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stored_rune_type_) -
    reinterpret_cast<char*>(&owner_id_)) + sizeof(stored_rune_type_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Item)
}

void CMsgDotaScenario_Item::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&secondary_charges_) -
    reinterpret_cast<char*>(&location_)) + sizeof(secondary_charges_));
lifetime_ = -1;
stored_rune_type_ = -1;
}

CMsgDotaScenario_Item::~CMsgDotaScenario_Item() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Item)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void CMsgDotaScenario_Item::ArenaDtor(void* object) {
  CMsgDotaScenario_Item* _this = reinterpret_cast< CMsgDotaScenario_Item* >(object);
  (void)_this;
}
void CMsgDotaScenario_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(location_ != nullptr);
      location_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&secondary_charges_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(secondary_charges_));
    lifetime_ = -1;
  }
  stored_rune_type_ = -1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.Item.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDotaScenario.EntityRef location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 item_slot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_item_slot(&has_bits);
          item_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 neutral_drop_team = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_neutral_drop_team(&has_bits);
          neutral_drop_team_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 charges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_charges(&has_bits);
          charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 secondary_charges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_secondary_charges(&has_bits);
          secondary_charges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lifetime = 8 [default = -1];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_lifetime(&has_bits);
          lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 stored_rune_type = 9 [default = -1];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_stored_rune_type(&has_bits);
          stored_rune_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Item::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Item)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.Item.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .CMsgDotaScenario.EntityRef location = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  // optional int32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_owner_id(), target);
  }

  // optional int32 item_slot = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_item_slot(), target);
  }

  // optional int32 neutral_drop_team = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_neutral_drop_team(), target);
  }

  // optional int32 charges = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_charges(), target);
  }

  // optional int32 secondary_charges = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_secondary_charges(), target);
  }

  // optional float lifetime = 8 [default = -1];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_lifetime(), target);
  }

  // optional int32 stored_rune_type = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_stored_rune_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Item)
  return target;
}

size_t CMsgDotaScenario_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Item)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .CMsgDotaScenario.EntityRef location = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional int32 owner_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_owner_id());
    }

    // optional int32 item_slot = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_item_slot());
    }

    // optional int32 neutral_drop_team = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_neutral_drop_team());
    }

    // optional int32 charges = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_charges());
    }

    // optional int32 secondary_charges = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_secondary_charges());
    }

    // optional float lifetime = 8 [default = -1];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  // optional int32 stored_rune_type = 9 [default = -1];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stored_rune_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Item::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Item* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Item>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Item)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Item)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Item::MergeFrom(const CMsgDotaScenario_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_location()->::CMsgDotaScenario_EntityRef::MergeFrom(from._internal_location());
    }
    if (cached_has_bits & 0x00000004u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      item_slot_ = from.item_slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      neutral_drop_team_ = from.neutral_drop_team_;
    }
    if (cached_has_bits & 0x00000020u) {
      charges_ = from.charges_;
    }
    if (cached_has_bits & 0x00000040u) {
      secondary_charges_ = from.secondary_charges_;
    }
    if (cached_has_bits & 0x00000080u) {
      lifetime_ = from.lifetime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_stored_rune_type(from._internal_stored_rune_type());
  }
}

void CMsgDotaScenario_Item::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Item::CopyFrom(const CMsgDotaScenario_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Item::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Item::InternalSwap(CMsgDotaScenario_Item* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Item, secondary_charges_)
      + sizeof(CMsgDotaScenario_Item::secondary_charges_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Item, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
  swap(lifetime_, other->lifetime_);
  swap(stored_rune_type_, other->stored_rune_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Item::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario_Modifier::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario_Modifier>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDotaScenario_EntityRef& parent(const CMsgDotaScenario_Modifier* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDotaScenario_EntityRef& caster(const CMsgDotaScenario_Modifier* msg);
  static void set_has_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgDotaScenario_EntityRef& ability(const CMsgDotaScenario_Modifier* msg);
  static void set_has_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_lifetime_remaining(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stack_count(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_create_even_if_existing(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_create_without_caster(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_create_without_ability(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_moonshard_consumed_bonus(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_moonshard_consumed_bonus_night_vision(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_wardtruesight_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ultimate_scepter_consumed_alchemist_bonus_all_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ultimate_scepter_consumed_alchemist_bonus_health(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ultimate_scepter_consumed_alchemist_bonus_mana(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgDotaScenario_EntityRef&
CMsgDotaScenario_Modifier::_Internal::parent(const CMsgDotaScenario_Modifier* msg) {
  return *msg->parent_;
}
const ::CMsgDotaScenario_EntityRef&
CMsgDotaScenario_Modifier::_Internal::caster(const CMsgDotaScenario_Modifier* msg) {
  return *msg->caster_;
}
const ::CMsgDotaScenario_EntityRef&
CMsgDotaScenario_Modifier::_Internal::ability(const CMsgDotaScenario_Modifier* msg) {
  return *msg->ability_;
}
CMsgDotaScenario_Modifier::CMsgDotaScenario_Modifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario.Modifier)
}
CMsgDotaScenario_Modifier::CMsgDotaScenario_Modifier(const CMsgDotaScenario_Modifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_parent()) {
    parent_ = new ::CMsgDotaScenario_EntityRef(*from.parent_);
  } else {
    parent_ = nullptr;
  }
  if (from._internal_has_caster()) {
    caster_ = new ::CMsgDotaScenario_EntityRef(*from.caster_);
  } else {
    caster_ = nullptr;
  }
  if (from._internal_has_ability()) {
    ability_ = new ::CMsgDotaScenario_EntityRef(*from.ability_);
  } else {
    ability_ = nullptr;
  }
  ::memcpy(&lifetime_remaining_, &from.lifetime_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&lifetime_remaining_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario.Modifier)
}

void CMsgDotaScenario_Modifier::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ultimate_scepter_consumed_alchemist_bonus_health_) -
    reinterpret_cast<char*>(&parent_)) + sizeof(ultimate_scepter_consumed_alchemist_bonus_health_));
duration_ = -1;
}

CMsgDotaScenario_Modifier::~CMsgDotaScenario_Modifier() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario.Modifier)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario_Modifier::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parent_;
  if (this != internal_default_instance()) delete caster_;
  if (this != internal_default_instance()) delete ability_;
}

void CMsgDotaScenario_Modifier::ArenaDtor(void* object) {
  CMsgDotaScenario_Modifier* _this = reinterpret_cast< CMsgDotaScenario_Modifier* >(object);
  (void)_this;
}
void CMsgDotaScenario_Modifier::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario_Modifier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario_Modifier::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario.Modifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(parent_ != nullptr);
      parent_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(caster_ != nullptr);
      caster_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ability_ != nullptr);
      ability_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&lifetime_remaining_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&create_even_if_existing_) -
        reinterpret_cast<char*>(&lifetime_remaining_)) + sizeof(create_even_if_existing_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&create_without_caster_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ultimate_scepter_consumed_alchemist_bonus_health_) -
        reinterpret_cast<char*>(&create_without_caster_)) + sizeof(ultimate_scepter_consumed_alchemist_bonus_health_));
    duration_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario_Modifier::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDotaScenario.Modifier.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDotaScenario.EntityRef parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDotaScenario.EntityRef caster = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_caster(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDotaScenario.EntityRef ability = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ability(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float duration = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_duration(&has_bits);
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float lifetime_remaining = 6 [default = 0];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_lifetime_remaining(&has_bits);
          lifetime_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 stack_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_stack_count(&has_bits);
          stack_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool create_even_if_existing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_create_even_if_existing(&has_bits);
          create_even_if_existing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool create_without_caster = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_create_without_caster(&has_bits);
          create_without_caster_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool create_without_ability = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_create_without_ability(&has_bits);
          create_without_ability_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 moonshard_consumed_bonus = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_moonshard_consumed_bonus(&has_bits);
          moonshard_consumed_bonus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 moonshard_consumed_bonus_night_vision = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_moonshard_consumed_bonus_night_vision(&has_bits);
          moonshard_consumed_bonus_night_vision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 wardtruesight_range = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_wardtruesight_range(&has_bits);
          wardtruesight_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultimate_scepter_consumed_alchemist_bonus_all_stats = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ultimate_scepter_consumed_alchemist_bonus_all_stats(&has_bits);
          ultimate_scepter_consumed_alchemist_bonus_all_stats_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultimate_scepter_consumed_alchemist_bonus_health = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ultimate_scepter_consumed_alchemist_bonus_health(&has_bits);
          ultimate_scepter_consumed_alchemist_bonus_health_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ultimate_scepter_consumed_alchemist_bonus_mana = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_ultimate_scepter_consumed_alchemist_bonus_mana(&has_bits);
          ultimate_scepter_consumed_alchemist_bonus_mana_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario_Modifier::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario.Modifier)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDotaScenario.Modifier.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .CMsgDotaScenario.EntityRef parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::parent(this), target, stream);
  }

  // optional .CMsgDotaScenario.EntityRef caster = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::caster(this), target, stream);
  }

  // optional .CMsgDotaScenario.EntityRef ability = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ability(this), target, stream);
  }

  // optional float duration = 5 [default = -1];
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_duration(), target);
  }

  // optional float lifetime_remaining = 6 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_lifetime_remaining(), target);
  }

  // optional int32 stack_count = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_stack_count(), target);
  }

  // optional bool create_even_if_existing = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_create_even_if_existing(), target);
  }

  // optional bool create_without_caster = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_create_without_caster(), target);
  }

  // optional bool create_without_ability = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_create_without_ability(), target);
  }

  // optional int32 moonshard_consumed_bonus = 100;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(100, this->_internal_moonshard_consumed_bonus(), target);
  }

  // optional int32 moonshard_consumed_bonus_night_vision = 101;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(101, this->_internal_moonshard_consumed_bonus_night_vision(), target);
  }

  // optional int32 wardtruesight_range = 110;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_wardtruesight_range(), target);
  }

  // optional int32 ultimate_scepter_consumed_alchemist_bonus_all_stats = 120;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(120, this->_internal_ultimate_scepter_consumed_alchemist_bonus_all_stats(), target);
  }

  // optional int32 ultimate_scepter_consumed_alchemist_bonus_health = 121;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(121, this->_internal_ultimate_scepter_consumed_alchemist_bonus_health(), target);
  }

  // optional int32 ultimate_scepter_consumed_alchemist_bonus_mana = 122;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(122, this->_internal_ultimate_scepter_consumed_alchemist_bonus_mana(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario.Modifier)
  return target;
}

size_t CMsgDotaScenario_Modifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario.Modifier)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .CMsgDotaScenario.EntityRef parent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_);
    }

    // optional .CMsgDotaScenario.EntityRef caster = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *caster_);
    }

    // optional .CMsgDotaScenario.EntityRef ability = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ability_);
    }

    // optional float lifetime_remaining = 6 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional int32 stack_count = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_stack_count());
    }

    // optional int32 ultimate_scepter_consumed_alchemist_bonus_mana = 122;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultimate_scepter_consumed_alchemist_bonus_mana());
    }

    // optional bool create_even_if_existing = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool create_without_caster = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool create_without_ability = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional int32 moonshard_consumed_bonus = 100;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_moonshard_consumed_bonus());
    }

    // optional int32 moonshard_consumed_bonus_night_vision = 101;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_moonshard_consumed_bonus_night_vision());
    }

    // optional int32 wardtruesight_range = 110;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_wardtruesight_range());
    }

    // optional int32 ultimate_scepter_consumed_alchemist_bonus_all_stats = 120;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultimate_scepter_consumed_alchemist_bonus_all_stats());
    }

    // optional int32 ultimate_scepter_consumed_alchemist_bonus_health = 121;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ultimate_scepter_consumed_alchemist_bonus_health());
    }

    // optional float duration = 5 [default = -1];
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario_Modifier::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario.Modifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario_Modifier* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario_Modifier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario.Modifier)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario.Modifier)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario_Modifier::MergeFrom(const CMsgDotaScenario_Modifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario.Modifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_parent()->::CMsgDotaScenario_EntityRef::MergeFrom(from._internal_parent());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_caster()->::CMsgDotaScenario_EntityRef::MergeFrom(from._internal_caster());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ability()->::CMsgDotaScenario_EntityRef::MergeFrom(from._internal_ability());
    }
    if (cached_has_bits & 0x00000010u) {
      lifetime_remaining_ = from.lifetime_remaining_;
    }
    if (cached_has_bits & 0x00000020u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      ultimate_scepter_consumed_alchemist_bonus_mana_ = from.ultimate_scepter_consumed_alchemist_bonus_mana_;
    }
    if (cached_has_bits & 0x00000080u) {
      create_even_if_existing_ = from.create_even_if_existing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      create_without_caster_ = from.create_without_caster_;
    }
    if (cached_has_bits & 0x00000200u) {
      create_without_ability_ = from.create_without_ability_;
    }
    if (cached_has_bits & 0x00000400u) {
      moonshard_consumed_bonus_ = from.moonshard_consumed_bonus_;
    }
    if (cached_has_bits & 0x00000800u) {
      moonshard_consumed_bonus_night_vision_ = from.moonshard_consumed_bonus_night_vision_;
    }
    if (cached_has_bits & 0x00001000u) {
      wardtruesight_range_ = from.wardtruesight_range_;
    }
    if (cached_has_bits & 0x00002000u) {
      ultimate_scepter_consumed_alchemist_bonus_all_stats_ = from.ultimate_scepter_consumed_alchemist_bonus_all_stats_;
    }
    if (cached_has_bits & 0x00004000u) {
      ultimate_scepter_consumed_alchemist_bonus_health_ = from.ultimate_scepter_consumed_alchemist_bonus_health_;
    }
    if (cached_has_bits & 0x00008000u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario_Modifier::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario_Modifier::CopyFrom(const CMsgDotaScenario_Modifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario_Modifier::IsInitialized() const {
  return true;
}

void CMsgDotaScenario_Modifier::InternalSwap(CMsgDotaScenario_Modifier* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Modifier, ultimate_scepter_consumed_alchemist_bonus_health_)
      + sizeof(CMsgDotaScenario_Modifier::ultimate_scepter_consumed_alchemist_bonus_health_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario_Modifier, parent_)>(
          reinterpret_cast<char*>(&parent_),
          reinterpret_cast<char*>(&other->parent_));
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario_Modifier::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CMsgDotaScenario::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDotaScenario>()._has_bits_);
  static void set_has_lobby_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgDotaScenario_Game& game(const CMsgDotaScenario* msg);
  static void set_has_game(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgDotaScenario_Game&
CMsgDotaScenario::_Internal::game(const CMsgDotaScenario* msg) {
  return *msg->game_;
}
CMsgDotaScenario::CMsgDotaScenario(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  teams_(arena),
  heroes_(arena),
  stock_(arena),
  buildings_(arena),
  entities_(arena),
  items_(arena),
  modifiers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgDotaScenario)
}
CMsgDotaScenario::CMsgDotaScenario(const CMsgDotaScenario& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      heroes_(from.heroes_),
      stock_(from.stock_),
      buildings_(from.buildings_),
      entities_(from.entities_),
      items_(from.items_),
      modifiers_(from.modifiers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game()) {
    game_ = new ::CMsgDotaScenario_Game(*from.game_);
  } else {
    game_ = nullptr;
  }
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDotaScenario)
}

void CMsgDotaScenario::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&game_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&game_)) + sizeof(lobby_id_));
}

CMsgDotaScenario::~CMsgDotaScenario() {
  // @@protoc_insertion_point(destructor:CMsgDotaScenario)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CMsgDotaScenario::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete game_;
}

void CMsgDotaScenario::ArenaDtor(void* object) {
  CMsgDotaScenario* _this = reinterpret_cast< CMsgDotaScenario* >(object);
  (void)_this;
}
void CMsgDotaScenario::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDotaScenario::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDotaScenario::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDotaScenario)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  heroes_.Clear();
  stock_.Clear();
  buildings_.Clear();
  entities_.Clear();
  items_.Clear();
  modifiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(game_ != nullptr);
    game_->Clear();
  }
  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDotaScenario::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 lobby_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lobby_id(&has_bits);
          lobby_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgDotaScenario.Game game = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Team teams = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_teams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Hero heroes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_heroes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Stock stock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stock(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Building buildings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Entity entities = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entities(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Item items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .CMsgDotaScenario.Modifier modifiers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_modifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgDotaScenario::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDotaScenario)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_lobby_id(), target);
  }

  // optional .CMsgDotaScenario.Game game = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::game(this), target, stream);
  }

  // repeated .CMsgDotaScenario.Team teams = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_teams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_teams(i), target, stream);
  }

  // repeated .CMsgDotaScenario.Hero heroes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heroes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_heroes(i), target, stream);
  }

  // repeated .CMsgDotaScenario.Stock stock = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stock_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stock(i), target, stream);
  }

  // repeated .CMsgDotaScenario.Building buildings = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_buildings(i), target, stream);
  }

  // repeated .CMsgDotaScenario.Entity entities = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entities_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_entities(i), target, stream);
  }

  // repeated .CMsgDotaScenario.Item items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_items(i), target, stream);
  }

  // repeated .CMsgDotaScenario.Modifier modifiers = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_modifiers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_modifiers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDotaScenario)
  return target;
}

size_t CMsgDotaScenario::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDotaScenario)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDotaScenario.Team teams = 3;
  total_size += 1UL * this->_internal_teams_size();
  for (const auto& msg : this->teams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.Hero heroes = 4;
  total_size += 1UL * this->_internal_heroes_size();
  for (const auto& msg : this->heroes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.Stock stock = 5;
  total_size += 1UL * this->_internal_stock_size();
  for (const auto& msg : this->stock_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.Building buildings = 6;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.Entity entities = 7;
  total_size += 1UL * this->_internal_entities_size();
  for (const auto& msg : this->entities_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.Item items = 8;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgDotaScenario.Modifier modifiers = 9;
  total_size += 1UL * this->_internal_modifiers_size();
  for (const auto& msg : this->modifiers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDotaScenario.Game game = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *game_);
    }

    // optional uint64 lobby_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_lobby_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDotaScenario::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgDotaScenario)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDotaScenario* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgDotaScenario>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgDotaScenario)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgDotaScenario)
    MergeFrom(*source);
  }
}

void CMsgDotaScenario::MergeFrom(const CMsgDotaScenario& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDotaScenario)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  heroes_.MergeFrom(from.heroes_);
  stock_.MergeFrom(from.stock_);
  buildings_.MergeFrom(from.buildings_);
  entities_.MergeFrom(from.entities_);
  items_.MergeFrom(from.items_);
  modifiers_.MergeFrom(from.modifiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_game()->::CMsgDotaScenario_Game::MergeFrom(from._internal_game());
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDotaScenario::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgDotaScenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDotaScenario::CopyFrom(const CMsgDotaScenario& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDotaScenario)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDotaScenario::IsInitialized() const {
  return true;
}

void CMsgDotaScenario::InternalSwap(CMsgDotaScenario* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  teams_.InternalSwap(&other->teams_);
  heroes_.InternalSwap(&other->heroes_);
  stock_.InternalSwap(&other->stock_);
  buildings_.InternalSwap(&other->buildings_);
  entities_.InternalSwap(&other->entities_);
  items_.InternalSwap(&other->items_);
  modifiers_.InternalSwap(&other->modifiers_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDotaScenario, lobby_id_)
      + sizeof(CMsgDotaScenario::lobby_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDotaScenario, game_)>(
          reinterpret_cast<char*>(&game_),
          reinterpret_cast<char*>(&other->game_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDotaScenario::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CScenario_Position* Arena::CreateMaybeMessage< ::CScenario_Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CScenario_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::CScenarioGame_RoshanSpawner* Arena::CreateMaybeMessage< ::CScenarioGame_RoshanSpawner >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CScenarioGame_RoshanSpawner >(arena);
}
template<> PROTOBUF_NOINLINE ::CScenarioEnt_Courier* Arena::CreateMaybeMessage< ::CScenarioEnt_Courier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CScenarioEnt_Courier >(arena);
}
template<> PROTOBUF_NOINLINE ::CScenarioEnt_NPC* Arena::CreateMaybeMessage< ::CScenarioEnt_NPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CScenarioEnt_NPC >(arena);
}
template<> PROTOBUF_NOINLINE ::CScenarioEnt_SpiritBear* Arena::CreateMaybeMessage< ::CScenarioEnt_SpiritBear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CScenarioEnt_SpiritBear >(arena);
}
template<> PROTOBUF_NOINLINE ::CScenarioEnt_DroppedItem* Arena::CreateMaybeMessage< ::CScenarioEnt_DroppedItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CScenarioEnt_DroppedItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_EntityRef* Arena::CreateMaybeMessage< ::CMsgDotaScenario_EntityRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_EntityRef >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Game* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Game >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_TeamNeutralItem* Arena::CreateMaybeMessage< ::CMsgDotaScenario_TeamNeutralItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_TeamNeutralItem >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Team* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Team >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_HeroHeroInt* Arena::CreateMaybeMessage< ::CMsgDotaScenario_HeroHeroInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_HeroHeroInt >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_HeroHeroFloat* Arena::CreateMaybeMessage< ::CMsgDotaScenario_HeroHeroFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_HeroHeroFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_DamageStatsByType* Arena::CreateMaybeMessage< ::CMsgDotaScenario_DamageStatsByType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_DamageStatsByType >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_HeroAbility* Arena::CreateMaybeMessage< ::CMsgDotaScenario_HeroAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_HeroAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Hero* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Stock* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Stock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Stock >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Building* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Building >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Entity* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Entity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Entity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Item* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario_Modifier* Arena::CreateMaybeMessage< ::CMsgDotaScenario_Modifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario_Modifier >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDotaScenario* Arena::CreateMaybeMessage< ::CMsgDotaScenario >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDotaScenario >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
