// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_cloud.steamworkssdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamworkssdk_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamworkssdk_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "steammessages_unified_base.steamworkssdk.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fcloud_2esteamworkssdk_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(int index);
class CCloud_Delete_Request;
struct CCloud_Delete_RequestDefaultTypeInternal;
extern CCloud_Delete_RequestDefaultTypeInternal _CCloud_Delete_Request_default_instance_;
class CCloud_Delete_Response;
struct CCloud_Delete_ResponseDefaultTypeInternal;
extern CCloud_Delete_ResponseDefaultTypeInternal _CCloud_Delete_Response_default_instance_;
class CCloud_EnumerateUserFiles_Request;
struct CCloud_EnumerateUserFiles_RequestDefaultTypeInternal;
extern CCloud_EnumerateUserFiles_RequestDefaultTypeInternal _CCloud_EnumerateUserFiles_Request_default_instance_;
class CCloud_EnumerateUserFiles_Response;
struct CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal;
extern CCloud_EnumerateUserFiles_ResponseDefaultTypeInternal _CCloud_EnumerateUserFiles_Response_default_instance_;
class CCloud_GetFileDetails_Request;
struct CCloud_GetFileDetails_RequestDefaultTypeInternal;
extern CCloud_GetFileDetails_RequestDefaultTypeInternal _CCloud_GetFileDetails_Request_default_instance_;
class CCloud_GetFileDetails_Response;
struct CCloud_GetFileDetails_ResponseDefaultTypeInternal;
extern CCloud_GetFileDetails_ResponseDefaultTypeInternal _CCloud_GetFileDetails_Response_default_instance_;
class CCloud_GetUploadServerInfo_Request;
struct CCloud_GetUploadServerInfo_RequestDefaultTypeInternal;
extern CCloud_GetUploadServerInfo_RequestDefaultTypeInternal _CCloud_GetUploadServerInfo_Request_default_instance_;
class CCloud_GetUploadServerInfo_Response;
struct CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal;
extern CCloud_GetUploadServerInfo_ResponseDefaultTypeInternal _CCloud_GetUploadServerInfo_Response_default_instance_;
class CCloud_UserFile;
struct CCloud_UserFileDefaultTypeInternal;
extern CCloud_UserFileDefaultTypeInternal _CCloud_UserFile_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CCloud_Delete_Request* Arena::CreateMaybeMessage<::CCloud_Delete_Request>(Arena*);
template<> ::CCloud_Delete_Response* Arena::CreateMaybeMessage<::CCloud_Delete_Response>(Arena*);
template<> ::CCloud_EnumerateUserFiles_Request* Arena::CreateMaybeMessage<::CCloud_EnumerateUserFiles_Request>(Arena*);
template<> ::CCloud_EnumerateUserFiles_Response* Arena::CreateMaybeMessage<::CCloud_EnumerateUserFiles_Response>(Arena*);
template<> ::CCloud_GetFileDetails_Request* Arena::CreateMaybeMessage<::CCloud_GetFileDetails_Request>(Arena*);
template<> ::CCloud_GetFileDetails_Response* Arena::CreateMaybeMessage<::CCloud_GetFileDetails_Response>(Arena*);
template<> ::CCloud_GetUploadServerInfo_Request* Arena::CreateMaybeMessage<::CCloud_GetUploadServerInfo_Request>(Arena*);
template<> ::CCloud_GetUploadServerInfo_Response* Arena::CreateMaybeMessage<::CCloud_GetUploadServerInfo_Response>(Arena*);
template<> ::CCloud_UserFile* Arena::CreateMaybeMessage<::CCloud_UserFile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class CCloud_GetUploadServerInfo_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetUploadServerInfo_Request) */ {
 public:
  inline CCloud_GetUploadServerInfo_Request() : CCloud_GetUploadServerInfo_Request(nullptr) {}
  virtual ~CCloud_GetUploadServerInfo_Request();
  explicit constexpr CCloud_GetUploadServerInfo_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetUploadServerInfo_Request(const CCloud_GetUploadServerInfo_Request& from);
  CCloud_GetUploadServerInfo_Request(CCloud_GetUploadServerInfo_Request&& from) noexcept
    : CCloud_GetUploadServerInfo_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetUploadServerInfo_Request& operator=(const CCloud_GetUploadServerInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetUploadServerInfo_Request& operator=(CCloud_GetUploadServerInfo_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_GetUploadServerInfo_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetUploadServerInfo_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetUploadServerInfo_Request*>(
               &_CCloud_GetUploadServerInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CCloud_GetUploadServerInfo_Request& a, CCloud_GetUploadServerInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetUploadServerInfo_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetUploadServerInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetUploadServerInfo_Request* New() const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Request>(nullptr);
  }

  CCloud_GetUploadServerInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_GetUploadServerInfo_Request& from);
  void MergeFrom(const CCloud_GetUploadServerInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetUploadServerInfo_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetUploadServerInfo_Request";
  }
  protected:
  explicit CCloud_GetUploadServerInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
  };
  // optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetUploadServerInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetUploadServerInfo_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetUploadServerInfo_Response) */ {
 public:
  inline CCloud_GetUploadServerInfo_Response() : CCloud_GetUploadServerInfo_Response(nullptr) {}
  virtual ~CCloud_GetUploadServerInfo_Response();
  explicit constexpr CCloud_GetUploadServerInfo_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetUploadServerInfo_Response(const CCloud_GetUploadServerInfo_Response& from);
  CCloud_GetUploadServerInfo_Response(CCloud_GetUploadServerInfo_Response&& from) noexcept
    : CCloud_GetUploadServerInfo_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetUploadServerInfo_Response& operator=(const CCloud_GetUploadServerInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetUploadServerInfo_Response& operator=(CCloud_GetUploadServerInfo_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_GetUploadServerInfo_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetUploadServerInfo_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetUploadServerInfo_Response*>(
               &_CCloud_GetUploadServerInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CCloud_GetUploadServerInfo_Response& a, CCloud_GetUploadServerInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetUploadServerInfo_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetUploadServerInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetUploadServerInfo_Response* New() const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Response>(nullptr);
  }

  CCloud_GetUploadServerInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetUploadServerInfo_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_GetUploadServerInfo_Response& from);
  void MergeFrom(const CCloud_GetUploadServerInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetUploadServerInfo_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetUploadServerInfo_Response";
  }
  protected:
  explicit CCloud_GetUploadServerInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerUrlFieldNumber = 1,
  };
  // optional string server_url = 1;
  bool has_server_url() const;
  private:
  bool _internal_has_server_url() const;
  public:
  void clear_server_url();
  const std::string& server_url() const;
  void set_server_url(const std::string& value);
  void set_server_url(std::string&& value);
  void set_server_url(const char* value);
  void set_server_url(const char* value, size_t size);
  std::string* mutable_server_url();
  std::string* release_server_url();
  void set_allocated_server_url(std::string* server_url);
  private:
  const std::string& _internal_server_url() const;
  void _internal_set_server_url(const std::string& value);
  std::string* _internal_mutable_server_url();
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetUploadServerInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_url_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetFileDetails_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetFileDetails_Request) */ {
 public:
  inline CCloud_GetFileDetails_Request() : CCloud_GetFileDetails_Request(nullptr) {}
  virtual ~CCloud_GetFileDetails_Request();
  explicit constexpr CCloud_GetFileDetails_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetFileDetails_Request(const CCloud_GetFileDetails_Request& from);
  CCloud_GetFileDetails_Request(CCloud_GetFileDetails_Request&& from) noexcept
    : CCloud_GetFileDetails_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_GetFileDetails_Request& operator=(const CCloud_GetFileDetails_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetFileDetails_Request& operator=(CCloud_GetFileDetails_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_GetFileDetails_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetFileDetails_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetFileDetails_Request*>(
               &_CCloud_GetFileDetails_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CCloud_GetFileDetails_Request& a, CCloud_GetFileDetails_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetFileDetails_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetFileDetails_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetFileDetails_Request* New() const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Request>(nullptr);
  }

  CCloud_GetFileDetails_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_GetFileDetails_Request& from);
  void MergeFrom(const CCloud_GetFileDetails_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetFileDetails_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetFileDetails_Request";
  }
  protected:
  explicit CCloud_GetFileDetails_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUgcidFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  ::PROTOBUF_NAMESPACE_ID::uint64 ugcid() const;
  void set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ugcid() const;
  void _internal_set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_GetFileDetails_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ugcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_UserFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_UserFile) */ {
 public:
  inline CCloud_UserFile() : CCloud_UserFile(nullptr) {}
  virtual ~CCloud_UserFile();
  explicit constexpr CCloud_UserFile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_UserFile(const CCloud_UserFile& from);
  CCloud_UserFile(CCloud_UserFile&& from) noexcept
    : CCloud_UserFile() {
    *this = ::std::move(from);
  }

  inline CCloud_UserFile& operator=(const CCloud_UserFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_UserFile& operator=(CCloud_UserFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_UserFile& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_UserFile* internal_default_instance() {
    return reinterpret_cast<const CCloud_UserFile*>(
               &_CCloud_UserFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CCloud_UserFile& a, CCloud_UserFile& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_UserFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_UserFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_UserFile* New() const final {
    return CreateMaybeMessage<CCloud_UserFile>(nullptr);
  }

  CCloud_UserFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_UserFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_UserFile& from);
  void MergeFrom(const CCloud_UserFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_UserFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_UserFile";
  }
  protected:
  explicit CCloud_UserFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 3,
    kUrlFieldNumber = 6,
    kUgcidFieldNumber = 2,
    kAppidFieldNumber = 1,
    kFileSizeFieldNumber = 5,
    kTimestampFieldNumber = 4,
    kSteamidCreatorFieldNumber = 7,
  };
  // optional string filename = 3;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional string url = 6;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional uint64 ugcid = 2;
  bool has_ugcid() const;
  private:
  bool _internal_has_ugcid() const;
  public:
  void clear_ugcid();
  ::PROTOBUF_NAMESPACE_ID::uint64 ugcid() const;
  void set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ugcid() const;
  void _internal_set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 appid = 1;
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 file_size = 5;
  bool has_file_size() const;
  private:
  bool _internal_has_file_size() const;
  public:
  void clear_file_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size() const;
  void set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_file_size() const;
  void _internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional fixed64 steamid_creator = 7;
  bool has_steamid_creator() const;
  private:
  bool _internal_has_steamid_creator() const;
  public:
  void clear_steamid_creator();
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_creator() const;
  void set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_steamid_creator() const;
  void _internal_set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_UserFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ugcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 steamid_creator_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_GetFileDetails_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_GetFileDetails_Response) */ {
 public:
  inline CCloud_GetFileDetails_Response() : CCloud_GetFileDetails_Response(nullptr) {}
  virtual ~CCloud_GetFileDetails_Response();
  explicit constexpr CCloud_GetFileDetails_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_GetFileDetails_Response(const CCloud_GetFileDetails_Response& from);
  CCloud_GetFileDetails_Response(CCloud_GetFileDetails_Response&& from) noexcept
    : CCloud_GetFileDetails_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_GetFileDetails_Response& operator=(const CCloud_GetFileDetails_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_GetFileDetails_Response& operator=(CCloud_GetFileDetails_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_GetFileDetails_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_GetFileDetails_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_GetFileDetails_Response*>(
               &_CCloud_GetFileDetails_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CCloud_GetFileDetails_Response& a, CCloud_GetFileDetails_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_GetFileDetails_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_GetFileDetails_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_GetFileDetails_Response* New() const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Response>(nullptr);
  }

  CCloud_GetFileDetails_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_GetFileDetails_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_GetFileDetails_Response& from);
  void MergeFrom(const CCloud_GetFileDetails_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_GetFileDetails_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_GetFileDetails_Response";
  }
  protected:
  explicit CCloud_GetFileDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailsFieldNumber = 1,
  };
  // optional .CCloud_UserFile details = 1;
  bool has_details() const;
  private:
  bool _internal_has_details() const;
  public:
  void clear_details();
  const ::CCloud_UserFile& details() const;
  ::CCloud_UserFile* release_details();
  ::CCloud_UserFile* mutable_details();
  void set_allocated_details(::CCloud_UserFile* details);
  private:
  const ::CCloud_UserFile& _internal_details() const;
  ::CCloud_UserFile* _internal_mutable_details();
  public:
  void unsafe_arena_set_allocated_details(
      ::CCloud_UserFile* details);
  ::CCloud_UserFile* unsafe_arena_release_details();

  // @@protoc_insertion_point(class_scope:CCloud_GetFileDetails_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CCloud_UserFile* details_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserFiles_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserFiles_Request) */ {
 public:
  inline CCloud_EnumerateUserFiles_Request() : CCloud_EnumerateUserFiles_Request(nullptr) {}
  virtual ~CCloud_EnumerateUserFiles_Request();
  explicit constexpr CCloud_EnumerateUserFiles_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserFiles_Request(const CCloud_EnumerateUserFiles_Request& from);
  CCloud_EnumerateUserFiles_Request(CCloud_EnumerateUserFiles_Request&& from) noexcept
    : CCloud_EnumerateUserFiles_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserFiles_Request& operator=(const CCloud_EnumerateUserFiles_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserFiles_Request& operator=(CCloud_EnumerateUserFiles_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_EnumerateUserFiles_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserFiles_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserFiles_Request*>(
               &_CCloud_EnumerateUserFiles_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CCloud_EnumerateUserFiles_Request& a, CCloud_EnumerateUserFiles_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserFiles_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserFiles_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserFiles_Request* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Request>(nullptr);
  }

  CCloud_EnumerateUserFiles_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserFiles_Request& from);
  void MergeFrom(const CCloud_EnumerateUserFiles_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserFiles_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserFiles_Request";
  }
  protected:
  explicit CCloud_EnumerateUserFiles_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppidFieldNumber = 1,
    kExtendedDetailsFieldNumber = 2,
    kCountFieldNumber = 3,
    kStartIndexFieldNumber = 4,
  };
  // optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
  bool has_extended_details() const;
  private:
  bool _internal_has_extended_details() const;
  public:
  void clear_extended_details();
  bool extended_details() const;
  void set_extended_details(bool value);
  private:
  bool _internal_extended_details() const;
  void _internal_set_extended_details(bool value);
  public:

  // optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
  bool has_start_index() const;
  private:
  bool _internal_has_start_index() const;
  public:
  void clear_start_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index() const;
  void set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_start_index() const;
  void _internal_set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserFiles_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  bool extended_details_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 start_index_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_EnumerateUserFiles_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_EnumerateUserFiles_Response) */ {
 public:
  inline CCloud_EnumerateUserFiles_Response() : CCloud_EnumerateUserFiles_Response(nullptr) {}
  virtual ~CCloud_EnumerateUserFiles_Response();
  explicit constexpr CCloud_EnumerateUserFiles_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_EnumerateUserFiles_Response(const CCloud_EnumerateUserFiles_Response& from);
  CCloud_EnumerateUserFiles_Response(CCloud_EnumerateUserFiles_Response&& from) noexcept
    : CCloud_EnumerateUserFiles_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_EnumerateUserFiles_Response& operator=(const CCloud_EnumerateUserFiles_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_EnumerateUserFiles_Response& operator=(CCloud_EnumerateUserFiles_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_EnumerateUserFiles_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_EnumerateUserFiles_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_EnumerateUserFiles_Response*>(
               &_CCloud_EnumerateUserFiles_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CCloud_EnumerateUserFiles_Response& a, CCloud_EnumerateUserFiles_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_EnumerateUserFiles_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_EnumerateUserFiles_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_EnumerateUserFiles_Response* New() const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Response>(nullptr);
  }

  CCloud_EnumerateUserFiles_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_EnumerateUserFiles_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_EnumerateUserFiles_Response& from);
  void MergeFrom(const CCloud_EnumerateUserFiles_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_EnumerateUserFiles_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_EnumerateUserFiles_Response";
  }
  protected:
  explicit CCloud_EnumerateUserFiles_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 1,
    kTotalFilesFieldNumber = 2,
  };
  // repeated .CCloud_UserFile files = 1;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::CCloud_UserFile* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >*
      mutable_files();
  private:
  const ::CCloud_UserFile& _internal_files(int index) const;
  ::CCloud_UserFile* _internal_add_files();
  public:
  const ::CCloud_UserFile& files(int index) const;
  ::CCloud_UserFile* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >&
      files() const;

  // optional uint32 total_files = 2;
  bool has_total_files() const;
  private:
  bool _internal_has_total_files() const;
  public:
  void clear_total_files();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_files() const;
  void set_total_files(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_files() const;
  void _internal_set_total_files(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_EnumerateUserFiles_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile > files_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_files_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_Delete_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_Delete_Request) */ {
 public:
  inline CCloud_Delete_Request() : CCloud_Delete_Request(nullptr) {}
  virtual ~CCloud_Delete_Request();
  explicit constexpr CCloud_Delete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_Delete_Request(const CCloud_Delete_Request& from);
  CCloud_Delete_Request(CCloud_Delete_Request&& from) noexcept
    : CCloud_Delete_Request() {
    *this = ::std::move(from);
  }

  inline CCloud_Delete_Request& operator=(const CCloud_Delete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_Delete_Request& operator=(CCloud_Delete_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_Delete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_Delete_Request* internal_default_instance() {
    return reinterpret_cast<const CCloud_Delete_Request*>(
               &_CCloud_Delete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CCloud_Delete_Request& a, CCloud_Delete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_Delete_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_Delete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_Delete_Request* New() const final {
    return CreateMaybeMessage<CCloud_Delete_Request>(nullptr);
  }

  CCloud_Delete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_Delete_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_Delete_Request& from);
  void MergeFrom(const CCloud_Delete_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_Delete_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_Delete_Request";
  }
  protected:
  explicit CCloud_Delete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kAppidFieldNumber = 2,
  };
  // optional string filename = 1;
  bool has_filename() const;
  private:
  bool _internal_has_filename() const;
  public:
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
  bool has_appid() const;
  private:
  bool _internal_has_appid() const;
  public:
  void clear_appid();
  ::PROTOBUF_NAMESPACE_ID::uint32 appid() const;
  void set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_appid() const;
  void _internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:CCloud_Delete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 appid_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// -------------------------------------------------------------------

class CCloud_Delete_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CCloud_Delete_Response) */ {
 public:
  inline CCloud_Delete_Response() : CCloud_Delete_Response(nullptr) {}
  virtual ~CCloud_Delete_Response();
  explicit constexpr CCloud_Delete_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CCloud_Delete_Response(const CCloud_Delete_Response& from);
  CCloud_Delete_Response(CCloud_Delete_Response&& from) noexcept
    : CCloud_Delete_Response() {
    *this = ::std::move(from);
  }

  inline CCloud_Delete_Response& operator=(const CCloud_Delete_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline CCloud_Delete_Response& operator=(CCloud_Delete_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CCloud_Delete_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const CCloud_Delete_Response* internal_default_instance() {
    return reinterpret_cast<const CCloud_Delete_Response*>(
               &_CCloud_Delete_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CCloud_Delete_Response& a, CCloud_Delete_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(CCloud_Delete_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CCloud_Delete_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CCloud_Delete_Response* New() const final {
    return CreateMaybeMessage<CCloud_Delete_Response>(nullptr);
  }

  CCloud_Delete_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CCloud_Delete_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CCloud_Delete_Response& from);
  void MergeFrom(const CCloud_Delete_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CCloud_Delete_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CCloud_Delete_Response";
  }
  protected:
  explicit CCloud_Delete_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_steammessages_5fcloud_2esteamworkssdk_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CCloud_Delete_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_steammessages_5fcloud_2esteamworkssdk_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CCloud_GetUploadServerInfo_Request

// optional uint32 appid = 1 [(.description) = "App ID to which a file will be uploaded to."];
inline bool CCloud_GetUploadServerInfo_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetUploadServerInfo_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_GetUploadServerInfo_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_GetUploadServerInfo_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_GetUploadServerInfo_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetUploadServerInfo_Request.appid)
  return _internal_appid();
}
inline void CCloud_GetUploadServerInfo_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_GetUploadServerInfo_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetUploadServerInfo_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_GetUploadServerInfo_Response

// optional string server_url = 1;
inline bool CCloud_GetUploadServerInfo_Response::_internal_has_server_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetUploadServerInfo_Response::has_server_url() const {
  return _internal_has_server_url();
}
inline void CCloud_GetUploadServerInfo_Response::clear_server_url() {
  server_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_GetUploadServerInfo_Response::server_url() const {
  // @@protoc_insertion_point(field_get:CCloud_GetUploadServerInfo_Response.server_url)
  return _internal_server_url();
}
inline void CCloud_GetUploadServerInfo_Response::set_server_url(const std::string& value) {
  _internal_set_server_url(value);
  // @@protoc_insertion_point(field_set:CCloud_GetUploadServerInfo_Response.server_url)
}
inline std::string* CCloud_GetUploadServerInfo_Response::mutable_server_url() {
  // @@protoc_insertion_point(field_mutable:CCloud_GetUploadServerInfo_Response.server_url)
  return _internal_mutable_server_url();
}
inline const std::string& CCloud_GetUploadServerInfo_Response::_internal_server_url() const {
  return server_url_.Get();
}
inline void CCloud_GetUploadServerInfo_Response::_internal_set_server_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCloud_GetUploadServerInfo_Response::set_server_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCloud_GetUploadServerInfo_Response.server_url)
}
inline void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCloud_GetUploadServerInfo_Response.server_url)
}
inline void CCloud_GetUploadServerInfo_Response::set_server_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  server_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCloud_GetUploadServerInfo_Response.server_url)
}
inline std::string* CCloud_GetUploadServerInfo_Response::_internal_mutable_server_url() {
  _has_bits_[0] |= 0x00000001u;
  return server_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCloud_GetUploadServerInfo_Response::release_server_url() {
  // @@protoc_insertion_point(field_release:CCloud_GetUploadServerInfo_Response.server_url)
  if (!_internal_has_server_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return server_url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCloud_GetUploadServerInfo_Response::set_allocated_server_url(std::string* server_url) {
  if (server_url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  server_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCloud_GetUploadServerInfo_Response.server_url)
}

// -------------------------------------------------------------------

// CCloud_GetFileDetails_Request

// optional uint64 ugcid = 1 [(.description) = "ID of the Cloud file to get details for."];
inline bool CCloud_GetFileDetails_Request::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_GetFileDetails_Request::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_GetFileDetails_Request::clear_ugcid() {
  ugcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_GetFileDetails_Request::_internal_ugcid() const {
  return ugcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_GetFileDetails_Request::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetFileDetails_Request.ugcid)
  return _internal_ugcid();
}
inline void CCloud_GetFileDetails_Request::_internal_set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ugcid_ = value;
}
inline void CCloud_GetFileDetails_Request::set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetFileDetails_Request.ugcid)
}

// optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
inline bool CCloud_GetFileDetails_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_GetFileDetails_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_GetFileDetails_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_GetFileDetails_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_GetFileDetails_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_GetFileDetails_Request.appid)
  return _internal_appid();
}
inline void CCloud_GetFileDetails_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_GetFileDetails_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_GetFileDetails_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_UserFile

// optional uint32 appid = 1;
inline bool CCloud_UserFile::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_UserFile::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_UserFile::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_UserFile::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.appid)
  return _internal_appid();
}
inline void CCloud_UserFile::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  appid_ = value;
}
inline void CCloud_UserFile::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.appid)
}

// optional uint64 ugcid = 2;
inline bool CCloud_UserFile::_internal_has_ugcid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_ugcid() const {
  return _internal_has_ugcid();
}
inline void CCloud_UserFile::clear_ugcid() {
  ugcid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_UserFile::_internal_ugcid() const {
  return ugcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_UserFile::ugcid() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.ugcid)
  return _internal_ugcid();
}
inline void CCloud_UserFile::_internal_set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  ugcid_ = value;
}
inline void CCloud_UserFile::set_ugcid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ugcid(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.ugcid)
}

// optional string filename = 3;
inline bool CCloud_UserFile::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_UserFile::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_UserFile::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.filename)
  return _internal_filename();
}
inline void CCloud_UserFile::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.filename)
}
inline std::string* CCloud_UserFile::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:CCloud_UserFile.filename)
  return _internal_mutable_filename();
}
inline const std::string& CCloud_UserFile::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_UserFile::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCloud_UserFile::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCloud_UserFile.filename)
}
inline void CCloud_UserFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCloud_UserFile.filename)
}
inline void CCloud_UserFile::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCloud_UserFile.filename)
}
inline std::string* CCloud_UserFile::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCloud_UserFile::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_UserFile.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCloud_UserFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCloud_UserFile.filename)
}

// optional uint64 timestamp = 4;
inline bool CCloud_UserFile::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void CCloud_UserFile::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_UserFile::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_UserFile::timestamp() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.timestamp)
  return _internal_timestamp();
}
inline void CCloud_UserFile::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  timestamp_ = value;
}
inline void CCloud_UserFile::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.timestamp)
}

// optional uint32 file_size = 5;
inline bool CCloud_UserFile::_internal_has_file_size() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_file_size() const {
  return _internal_has_file_size();
}
inline void CCloud_UserFile::clear_file_size() {
  file_size_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_UserFile::_internal_file_size() const {
  return file_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_UserFile::file_size() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.file_size)
  return _internal_file_size();
}
inline void CCloud_UserFile::_internal_set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  file_size_ = value;
}
inline void CCloud_UserFile::set_file_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_file_size(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.file_size)
}

// optional string url = 6;
inline bool CCloud_UserFile::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_url() const {
  return _internal_has_url();
}
inline void CCloud_UserFile::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CCloud_UserFile::url() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.url)
  return _internal_url();
}
inline void CCloud_UserFile::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.url)
}
inline std::string* CCloud_UserFile::mutable_url() {
  // @@protoc_insertion_point(field_mutable:CCloud_UserFile.url)
  return _internal_mutable_url();
}
inline const std::string& CCloud_UserFile::_internal_url() const {
  return url_.Get();
}
inline void CCloud_UserFile::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCloud_UserFile::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCloud_UserFile.url)
}
inline void CCloud_UserFile::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCloud_UserFile.url)
}
inline void CCloud_UserFile::set_url(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCloud_UserFile.url)
}
inline std::string* CCloud_UserFile::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCloud_UserFile::release_url() {
  // @@protoc_insertion_point(field_release:CCloud_UserFile.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCloud_UserFile::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCloud_UserFile.url)
}

// optional fixed64 steamid_creator = 7;
inline bool CCloud_UserFile::_internal_has_steamid_creator() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CCloud_UserFile::has_steamid_creator() const {
  return _internal_has_steamid_creator();
}
inline void CCloud_UserFile::clear_steamid_creator() {
  steamid_creator_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_UserFile::_internal_steamid_creator() const {
  return steamid_creator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CCloud_UserFile::steamid_creator() const {
  // @@protoc_insertion_point(field_get:CCloud_UserFile.steamid_creator)
  return _internal_steamid_creator();
}
inline void CCloud_UserFile::_internal_set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  steamid_creator_ = value;
}
inline void CCloud_UserFile::set_steamid_creator(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_steamid_creator(value);
  // @@protoc_insertion_point(field_set:CCloud_UserFile.steamid_creator)
}

// -------------------------------------------------------------------

// CCloud_GetFileDetails_Response

// optional .CCloud_UserFile details = 1;
inline bool CCloud_GetFileDetails_Response::_internal_has_details() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || details_ != nullptr);
  return value;
}
inline bool CCloud_GetFileDetails_Response::has_details() const {
  return _internal_has_details();
}
inline void CCloud_GetFileDetails_Response::clear_details() {
  if (details_ != nullptr) details_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CCloud_UserFile& CCloud_GetFileDetails_Response::_internal_details() const {
  const ::CCloud_UserFile* p = details_;
  return p != nullptr ? *p : reinterpret_cast<const ::CCloud_UserFile&>(
      ::_CCloud_UserFile_default_instance_);
}
inline const ::CCloud_UserFile& CCloud_GetFileDetails_Response::details() const {
  // @@protoc_insertion_point(field_get:CCloud_GetFileDetails_Response.details)
  return _internal_details();
}
inline void CCloud_GetFileDetails_Response::unsafe_arena_set_allocated_details(
    ::CCloud_UserFile* details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(details_);
  }
  details_ = details;
  if (details) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CCloud_GetFileDetails_Response.details)
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::release_details() {
  _has_bits_[0] &= ~0x00000001u;
  ::CCloud_UserFile* temp = details_;
  details_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::unsafe_arena_release_details() {
  // @@protoc_insertion_point(field_release:CCloud_GetFileDetails_Response.details)
  _has_bits_[0] &= ~0x00000001u;
  ::CCloud_UserFile* temp = details_;
  details_ = nullptr;
  return temp;
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::_internal_mutable_details() {
  _has_bits_[0] |= 0x00000001u;
  if (details_ == nullptr) {
    auto* p = CreateMaybeMessage<::CCloud_UserFile>(GetArena());
    details_ = p;
  }
  return details_;
}
inline ::CCloud_UserFile* CCloud_GetFileDetails_Response::mutable_details() {
  // @@protoc_insertion_point(field_mutable:CCloud_GetFileDetails_Response.details)
  return _internal_mutable_details();
}
inline void CCloud_GetFileDetails_Response::set_allocated_details(::CCloud_UserFile* details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete details_;
  }
  if (details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(details);
    if (message_arena != submessage_arena) {
      details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, details, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  details_ = details;
  // @@protoc_insertion_point(field_set_allocated:CCloud_GetFileDetails_Response.details)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserFiles_Request

// optional uint32 appid = 1 [(.description) = "App ID to enumerate the files of."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_EnumerateUserFiles_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.appid)
  return _internal_appid();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  appid_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.appid)
}

// optional bool extended_details = 2 [(.description) = "(Optional) Get extended details back on the files found. Defaults to only returned the app Id and UGC Id of the files found."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_extended_details() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_extended_details() const {
  return _internal_has_extended_details();
}
inline void CCloud_EnumerateUserFiles_Request::clear_extended_details() {
  extended_details_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CCloud_EnumerateUserFiles_Request::_internal_extended_details() const {
  return extended_details_;
}
inline bool CCloud_EnumerateUserFiles_Request::extended_details() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.extended_details)
  return _internal_extended_details();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_extended_details(bool value) {
  _has_bits_[0] |= 0x00000002u;
  extended_details_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_extended_details(bool value) {
  _internal_set_extended_details(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.extended_details)
}

// optional uint32 count = 3 [(.description) = "(Optional) Maximum number of results to return on this call. Defaults to a maximum of 500 files returned."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_count() const {
  return _internal_has_count();
}
inline void CCloud_EnumerateUserFiles_Request::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Request::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Request::count() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.count)
  return _internal_count();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  count_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.count)
}

// optional uint32 start_index = 4 [(.description) = "(Optional) Starting index to begin enumeration at. Defaults to the beginning of the list."];
inline bool CCloud_EnumerateUserFiles_Request::_internal_has_start_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Request::has_start_index() const {
  return _internal_has_start_index();
}
inline void CCloud_EnumerateUserFiles_Request::clear_start_index() {
  start_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Request::_internal_start_index() const {
  return start_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Request::start_index() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Request.start_index)
  return _internal_start_index();
}
inline void CCloud_EnumerateUserFiles_Request::_internal_set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  start_index_ = value;
}
inline void CCloud_EnumerateUserFiles_Request::set_start_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_start_index(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Request.start_index)
}

// -------------------------------------------------------------------

// CCloud_EnumerateUserFiles_Response

// repeated .CCloud_UserFile files = 1;
inline int CCloud_EnumerateUserFiles_Response::_internal_files_size() const {
  return files_.size();
}
inline int CCloud_EnumerateUserFiles_Response::files_size() const {
  return _internal_files_size();
}
inline void CCloud_EnumerateUserFiles_Response::clear_files() {
  files_.Clear();
}
inline ::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:CCloud_EnumerateUserFiles_Response.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >*
CCloud_EnumerateUserFiles_Response::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:CCloud_EnumerateUserFiles_Response.files)
  return &files_;
}
inline const ::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::CCloud_UserFile& CCloud_EnumerateUserFiles_Response::files(int index) const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Response.files)
  return _internal_files(index);
}
inline ::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::_internal_add_files() {
  return files_.Add();
}
inline ::CCloud_UserFile* CCloud_EnumerateUserFiles_Response::add_files() {
  // @@protoc_insertion_point(field_add:CCloud_EnumerateUserFiles_Response.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CCloud_UserFile >&
CCloud_EnumerateUserFiles_Response::files() const {
  // @@protoc_insertion_point(field_list:CCloud_EnumerateUserFiles_Response.files)
  return files_;
}

// optional uint32 total_files = 2;
inline bool CCloud_EnumerateUserFiles_Response::_internal_has_total_files() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_EnumerateUserFiles_Response::has_total_files() const {
  return _internal_has_total_files();
}
inline void CCloud_EnumerateUserFiles_Response::clear_total_files() {
  total_files_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Response::_internal_total_files() const {
  return total_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_EnumerateUserFiles_Response::total_files() const {
  // @@protoc_insertion_point(field_get:CCloud_EnumerateUserFiles_Response.total_files)
  return _internal_total_files();
}
inline void CCloud_EnumerateUserFiles_Response::_internal_set_total_files(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  total_files_ = value;
}
inline void CCloud_EnumerateUserFiles_Response::set_total_files(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_files(value);
  // @@protoc_insertion_point(field_set:CCloud_EnumerateUserFiles_Response.total_files)
}

// -------------------------------------------------------------------

// CCloud_Delete_Request

// optional string filename = 1;
inline bool CCloud_Delete_Request::_internal_has_filename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CCloud_Delete_Request::has_filename() const {
  return _internal_has_filename();
}
inline void CCloud_Delete_Request::clear_filename() {
  filename_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CCloud_Delete_Request::filename() const {
  // @@protoc_insertion_point(field_get:CCloud_Delete_Request.filename)
  return _internal_filename();
}
inline void CCloud_Delete_Request::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:CCloud_Delete_Request.filename)
}
inline std::string* CCloud_Delete_Request::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:CCloud_Delete_Request.filename)
  return _internal_mutable_filename();
}
inline const std::string& CCloud_Delete_Request::_internal_filename() const {
  return filename_.Get();
}
inline void CCloud_Delete_Request::_internal_set_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CCloud_Delete_Request::set_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:CCloud_Delete_Request.filename)
}
inline void CCloud_Delete_Request::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:CCloud_Delete_Request.filename)
}
inline void CCloud_Delete_Request::set_filename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:CCloud_Delete_Request.filename)
}
inline std::string* CCloud_Delete_Request::_internal_mutable_filename() {
  _has_bits_[0] |= 0x00000001u;
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CCloud_Delete_Request::release_filename() {
  // @@protoc_insertion_point(field_release:CCloud_Delete_Request.filename)
  if (!_internal_has_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return filename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CCloud_Delete_Request::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:CCloud_Delete_Request.filename)
}

// optional uint32 appid = 2 [(.description) = "App ID the file belongs to."];
inline bool CCloud_Delete_Request::_internal_has_appid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CCloud_Delete_Request::has_appid() const {
  return _internal_has_appid();
}
inline void CCloud_Delete_Request::clear_appid() {
  appid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_Delete_Request::_internal_appid() const {
  return appid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CCloud_Delete_Request::appid() const {
  // @@protoc_insertion_point(field_get:CCloud_Delete_Request.appid)
  return _internal_appid();
}
inline void CCloud_Delete_Request::_internal_set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  appid_ = value;
}
inline void CCloud_Delete_Request::set_appid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_appid(value);
  // @@protoc_insertion_point(field_set:CCloud_Delete_Request.appid)
}

// -------------------------------------------------------------------

// CCloud_Delete_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steammessages_5fcloud_2esteamworkssdk_2eproto
