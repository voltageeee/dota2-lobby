// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: connectionless_netmessages.proto

#include "connectionless_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr C2S_CONNECT_Message::C2S_CONNECT_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : splitplayers_()
  , encrypted_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_steam_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , challenge_context_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_version_(0u)
  , auth_protocol_(0u)
  , reservation_cookie_(PROTOBUF_ULONGLONG(0))
  , challenge_number_(0u)
  , low_violence_(false)
  , use_snp_(0){}
struct C2S_CONNECT_MessageDefaultTypeInternal {
  constexpr C2S_CONNECT_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_CONNECT_MessageDefaultTypeInternal() {}
  union {
    C2S_CONNECT_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_CONNECT_MessageDefaultTypeInternal _C2S_CONNECT_Message_default_instance_;
constexpr C2S_CONNECTION_Message::C2S_CONNECTION_Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addon_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , use_snp_(false){}
struct C2S_CONNECTION_MessageDefaultTypeInternal {
  constexpr C2S_CONNECTION_MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~C2S_CONNECTION_MessageDefaultTypeInternal() {}
  union {
    C2S_CONNECTION_Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT C2S_CONNECTION_MessageDefaultTypeInternal _C2S_CONNECTION_Message_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_connectionless_5fnetmessages_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_connectionless_5fnetmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_connectionless_5fnetmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_connectionless_5fnetmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, host_version_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, auth_protocol_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, challenge_number_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, reservation_cookie_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, low_violence_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, encrypted_password_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, splitplayers_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, auth_steam_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, challenge_context_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECT_Message, use_snp_),
  3,
  4,
  6,
  5,
  7,
  0,
  ~0u,
  1,
  2,
  8,
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECTION_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECTION_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECTION_Message, addon_name_),
  PROTOBUF_FIELD_OFFSET(::C2S_CONNECTION_Message, use_snp_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::C2S_CONNECT_Message)},
  { 25, 32, sizeof(::C2S_CONNECTION_Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_C2S_CONNECT_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_C2S_CONNECTION_Message_default_instance_),
};

const char descriptor_table_protodef_connectionless_5fnetmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n connectionless_netmessages.proto\032\021netm"
  "essages.proto\"\235\002\n\023C2S_CONNECT_Message\022\024\n"
  "\014host_version\030\001 \001(\r\022\025\n\rauth_protocol\030\002 \001"
  "(\r\022\030\n\020challenge_number\030\003 \001(\r\022\032\n\022reservat"
  "ion_cookie\030\004 \001(\006\022\024\n\014low_violence\030\005 \001(\010\022\032"
  "\n\022encrypted_password\030\006 \001(\014\0221\n\014splitplaye"
  "rs\030\007 \003(\0132\033.CCLCMsg_SplitPlayerConnect\022\022\n"
  "\nauth_steam\030\010 \001(\014\022\031\n\021challenge_context\030\t"
  " \001(\t\022\017\n\007use_snp\030\n \001(\021\"=\n\026C2S_CONNECTION_"
  "Message\022\022\n\naddon_name\030\001 \001(\t\022\017\n\007use_snp\030\002"
  " \001(\010B\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_connectionless_5fnetmessages_2eproto_deps[1] = {
  &::descriptor_table_netmessages_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_connectionless_5fnetmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_connectionless_5fnetmessages_2eproto = {
  false, false, 409, descriptor_table_protodef_connectionless_5fnetmessages_2eproto, "connectionless_netmessages.proto", 
  &descriptor_table_connectionless_5fnetmessages_2eproto_once, descriptor_table_connectionless_5fnetmessages_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_connectionless_5fnetmessages_2eproto::offsets,
  file_level_metadata_connectionless_5fnetmessages_2eproto, file_level_enum_descriptors_connectionless_5fnetmessages_2eproto, file_level_service_descriptors_connectionless_5fnetmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_connectionless_5fnetmessages_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_connectionless_5fnetmessages_2eproto);
  return descriptor_table_connectionless_5fnetmessages_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_connectionless_5fnetmessages_2eproto(&descriptor_table_connectionless_5fnetmessages_2eproto);

// ===================================================================

class C2S_CONNECT_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<C2S_CONNECT_Message>()._has_bits_);
  static void set_has_host_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_auth_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_challenge_number(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_reservation_cookie(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_low_violence(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_encrypted_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_auth_steam(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_challenge_context(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_use_snp(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

void C2S_CONNECT_Message::clear_splitplayers() {
  splitplayers_.Clear();
}
C2S_CONNECT_Message::C2S_CONNECT_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  splitplayers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:C2S_CONNECT_Message)
}
C2S_CONNECT_Message::C2S_CONNECT_Message(const C2S_CONNECT_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      splitplayers_(from.splitplayers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encrypted_password()) {
    encrypted_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_password(), 
      GetArena());
  }
  auth_steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_auth_steam()) {
    auth_steam_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth_steam(), 
      GetArena());
  }
  challenge_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_challenge_context()) {
    challenge_context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_challenge_context(), 
      GetArena());
  }
  ::memcpy(&host_version_, &from.host_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_snp_) -
    reinterpret_cast<char*>(&host_version_)) + sizeof(use_snp_));
  // @@protoc_insertion_point(copy_constructor:C2S_CONNECT_Message)
}

void C2S_CONNECT_Message::SharedCtor() {
encrypted_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auth_steam_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
challenge_context_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&host_version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_snp_) -
    reinterpret_cast<char*>(&host_version_)) + sizeof(use_snp_));
}

C2S_CONNECT_Message::~C2S_CONNECT_Message() {
  // @@protoc_insertion_point(destructor:C2S_CONNECT_Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2S_CONNECT_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encrypted_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_steam_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  challenge_context_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_CONNECT_Message::ArenaDtor(void* object) {
  C2S_CONNECT_Message* _this = reinterpret_cast< C2S_CONNECT_Message* >(object);
  (void)_this;
}
void C2S_CONNECT_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_CONNECT_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_CONNECT_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S_CONNECT_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  splitplayers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encrypted_password_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      auth_steam_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      challenge_context_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&host_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_violence_) -
        reinterpret_cast<char*>(&host_version_)) + sizeof(low_violence_));
  }
  use_snp_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_CONNECT_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 host_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_host_version(&has_bits);
          host_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 auth_protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_auth_protocol(&has_bits);
          auth_protocol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 challenge_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_challenge_number(&has_bits);
          challenge_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 reservation_cookie = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_reservation_cookie(&has_bits);
          reservation_cookie_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bool low_violence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_low_violence(&has_bits);
          low_violence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes encrypted_password = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_encrypted_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_splitplayers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bytes auth_steam = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_auth_steam();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string challenge_context = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_challenge_context();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "C2S_CONNECT_Message.challenge_context");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 use_snp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_use_snp(&has_bits);
          use_snp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_CONNECT_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S_CONNECT_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 host_version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_host_version(), target);
  }

  // optional uint32 auth_protocol = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_auth_protocol(), target);
  }

  // optional uint32 challenge_number = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_challenge_number(), target);
  }

  // optional fixed64 reservation_cookie = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_reservation_cookie(), target);
  }

  // optional bool low_violence = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_low_violence(), target);
  }

  // optional bytes encrypted_password = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_encrypted_password(), target);
  }

  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_splitplayers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_splitplayers(i), target, stream);
  }

  // optional bytes auth_steam = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_auth_steam(), target);
  }

  // optional string challenge_context = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_challenge_context().data(), static_cast<int>(this->_internal_challenge_context().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "C2S_CONNECT_Message.challenge_context");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_challenge_context(), target);
  }

  // optional sint32 use_snp = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(10, this->_internal_use_snp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S_CONNECT_Message)
  return target;
}

size_t C2S_CONNECT_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S_CONNECT_Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CCLCMsg_SplitPlayerConnect splitplayers = 7;
  total_size += 1UL * this->_internal_splitplayers_size();
  for (const auto& msg : this->splitplayers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes encrypted_password = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_password());
    }

    // optional bytes auth_steam = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_auth_steam());
    }

    // optional string challenge_context = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_challenge_context());
    }

    // optional uint32 host_version = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_host_version());
    }

    // optional uint32 auth_protocol = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_auth_protocol());
    }

    // optional fixed64 reservation_cookie = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint32 challenge_number = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_challenge_number());
    }

    // optional bool low_violence = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional sint32 use_snp = 10;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_use_snp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_CONNECT_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2S_CONNECT_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_CONNECT_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_CONNECT_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2S_CONNECT_Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2S_CONNECT_Message)
    MergeFrom(*source);
  }
}

void C2S_CONNECT_Message::MergeFrom(const C2S_CONNECT_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2S_CONNECT_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  splitplayers_.MergeFrom(from.splitplayers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encrypted_password(from._internal_encrypted_password());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_auth_steam(from._internal_auth_steam());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_challenge_context(from._internal_challenge_context());
    }
    if (cached_has_bits & 0x00000008u) {
      host_version_ = from.host_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      auth_protocol_ = from.auth_protocol_;
    }
    if (cached_has_bits & 0x00000020u) {
      reservation_cookie_ = from.reservation_cookie_;
    }
    if (cached_has_bits & 0x00000040u) {
      challenge_number_ = from.challenge_number_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_violence_ = from.low_violence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_use_snp(from._internal_use_snp());
  }
}

void C2S_CONNECT_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2S_CONNECT_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CONNECT_Message::CopyFrom(const C2S_CONNECT_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S_CONNECT_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CONNECT_Message::IsInitialized() const {
  return true;
}

void C2S_CONNECT_Message::InternalSwap(C2S_CONNECT_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  splitplayers_.InternalSwap(&other->splitplayers_);
  encrypted_password_.Swap(&other->encrypted_password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auth_steam_.Swap(&other->auth_steam_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  challenge_context_.Swap(&other->challenge_context_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2S_CONNECT_Message, use_snp_)
      + sizeof(C2S_CONNECT_Message::use_snp_)
      - PROTOBUF_FIELD_OFFSET(C2S_CONNECT_Message, host_version_)>(
          reinterpret_cast<char*>(&host_version_),
          reinterpret_cast<char*>(&other->host_version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_CONNECT_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class C2S_CONNECTION_Message::_Internal {
 public:
  using HasBits = decltype(std::declval<C2S_CONNECTION_Message>()._has_bits_);
  static void set_has_addon_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_snp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

C2S_CONNECTION_Message::C2S_CONNECTION_Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:C2S_CONNECTION_Message)
}
C2S_CONNECTION_Message::C2S_CONNECTION_Message(const C2S_CONNECTION_Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addon_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addon_name()) {
    addon_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addon_name(), 
      GetArena());
  }
  use_snp_ = from.use_snp_;
  // @@protoc_insertion_point(copy_constructor:C2S_CONNECTION_Message)
}

void C2S_CONNECTION_Message::SharedCtor() {
addon_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
use_snp_ = false;
}

C2S_CONNECTION_Message::~C2S_CONNECTION_Message() {
  // @@protoc_insertion_point(destructor:C2S_CONNECTION_Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void C2S_CONNECTION_Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addon_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void C2S_CONNECTION_Message::ArenaDtor(void* object) {
  C2S_CONNECTION_Message* _this = reinterpret_cast< C2S_CONNECTION_Message* >(object);
  (void)_this;
}
void C2S_CONNECTION_Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void C2S_CONNECTION_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2S_CONNECTION_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:C2S_CONNECTION_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    addon_name_.ClearNonDefaultToEmpty();
  }
  use_snp_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2S_CONNECTION_Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string addon_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addon_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "C2S_CONNECTION_Message.addon_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool use_snp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_use_snp(&has_bits);
          use_snp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* C2S_CONNECTION_Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2S_CONNECTION_Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string addon_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addon_name().data(), static_cast<int>(this->_internal_addon_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "C2S_CONNECTION_Message.addon_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addon_name(), target);
  }

  // optional bool use_snp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_snp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2S_CONNECTION_Message)
  return target;
}

size_t C2S_CONNECTION_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2S_CONNECTION_Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string addon_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addon_name());
    }

    // optional bool use_snp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void C2S_CONNECTION_Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:C2S_CONNECTION_Message)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_CONNECTION_Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<C2S_CONNECTION_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:C2S_CONNECTION_Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:C2S_CONNECTION_Message)
    MergeFrom(*source);
  }
}

void C2S_CONNECTION_Message::MergeFrom(const C2S_CONNECTION_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2S_CONNECTION_Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addon_name(from._internal_addon_name());
    }
    if (cached_has_bits & 0x00000002u) {
      use_snp_ = from.use_snp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void C2S_CONNECTION_Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:C2S_CONNECTION_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CONNECTION_Message::CopyFrom(const C2S_CONNECTION_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2S_CONNECTION_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CONNECTION_Message::IsInitialized() const {
  return true;
}

void C2S_CONNECTION_Message::InternalSwap(C2S_CONNECTION_Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addon_name_.Swap(&other->addon_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(use_snp_, other->use_snp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2S_CONNECTION_Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::C2S_CONNECT_Message* Arena::CreateMaybeMessage< ::C2S_CONNECT_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S_CONNECT_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::C2S_CONNECTION_Message* Arena::CreateMaybeMessage< ::C2S_CONNECTION_Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2S_CONNECTION_Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
