// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uifontfile_format.proto

#include "uifontfile_format.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CUIFontFilePB::CUIFontFilePB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : font_file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , opentype_font_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUIFontFilePBDefaultTypeInternal {
  constexpr CUIFontFilePBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUIFontFilePBDefaultTypeInternal() {}
  union {
    CUIFontFilePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUIFontFilePBDefaultTypeInternal _CUIFontFilePB_default_instance_;
constexpr CUIFontFilePackagePB_CUIEncryptedFontFilePB::CUIFontFilePackagePB_CUIEncryptedFontFilePB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CUIFontFilePackagePB_CUIEncryptedFontFilePBDefaultTypeInternal {
  constexpr CUIFontFilePackagePB_CUIEncryptedFontFilePBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUIFontFilePackagePB_CUIEncryptedFontFilePBDefaultTypeInternal() {}
  union {
    CUIFontFilePackagePB_CUIEncryptedFontFilePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUIFontFilePackagePB_CUIEncryptedFontFilePBDefaultTypeInternal _CUIFontFilePackagePB_CUIEncryptedFontFilePB_default_instance_;
constexpr CUIFontFilePackagePB::CUIFontFilePackagePB(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encrypted_font_files_()
  , package_version_(0u){}
struct CUIFontFilePackagePBDefaultTypeInternal {
  constexpr CUIFontFilePackagePBDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CUIFontFilePackagePBDefaultTypeInternal() {}
  union {
    CUIFontFilePackagePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CUIFontFilePackagePBDefaultTypeInternal _CUIFontFilePackagePB_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_uifontfile_5fformat_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_uifontfile_5fformat_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_uifontfile_5fformat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_uifontfile_5fformat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePB, font_file_name_),
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePB, opentype_font_data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB_CUIEncryptedFontFilePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB_CUIEncryptedFontFilePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB_CUIEncryptedFontFilePB, encrypted_contents_),
  0,
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB, package_version_),
  PROTOBUF_FIELD_OFFSET(::CUIFontFilePackagePB, encrypted_font_files_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::CUIFontFilePB)},
  { 9, 15, sizeof(::CUIFontFilePackagePB_CUIEncryptedFontFilePB)},
  { 16, 23, sizeof(::CUIFontFilePackagePB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUIFontFilePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUIFontFilePackagePB_CUIEncryptedFontFilePB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CUIFontFilePackagePB_default_instance_),
};

const char descriptor_table_protodef_uifontfile_5fformat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027uifontfile_format.proto\"C\n\rCUIFontFile"
  "PB\022\026\n\016font_file_name\030\001 \001(\t\022\032\n\022opentype_f"
  "ont_data\030\002 \001(\014\"\261\001\n\024CUIFontFilePackagePB\022"
  "\027\n\017package_version\030\001 \002(\r\022J\n\024encrypted_fo"
  "nt_files\030\002 \003(\0132,.CUIFontFilePackagePB.CU"
  "IEncryptedFontFilePB\0324\n\026CUIEncryptedFont"
  "FilePB\022\032\n\022encrypted_contents\030\001 \001(\014B\005H\001\200\001"
  "\000"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_uifontfile_5fformat_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_uifontfile_5fformat_2eproto = {
  false, false, 281, descriptor_table_protodef_uifontfile_5fformat_2eproto, "uifontfile_format.proto", 
  &descriptor_table_uifontfile_5fformat_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_uifontfile_5fformat_2eproto::offsets,
  file_level_metadata_uifontfile_5fformat_2eproto, file_level_enum_descriptors_uifontfile_5fformat_2eproto, file_level_service_descriptors_uifontfile_5fformat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_uifontfile_5fformat_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_uifontfile_5fformat_2eproto);
  return descriptor_table_uifontfile_5fformat_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_uifontfile_5fformat_2eproto(&descriptor_table_uifontfile_5fformat_2eproto);

// ===================================================================

class CUIFontFilePB::_Internal {
 public:
  using HasBits = decltype(std::declval<CUIFontFilePB>()._has_bits_);
  static void set_has_font_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opentype_font_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CUIFontFilePB::CUIFontFilePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUIFontFilePB)
}
CUIFontFilePB::CUIFontFilePB(const CUIFontFilePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  font_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_font_file_name()) {
    font_file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_font_file_name(), 
      GetArena());
  }
  opentype_font_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opentype_font_data()) {
    opentype_font_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_opentype_font_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUIFontFilePB)
}

void CUIFontFilePB::SharedCtor() {
font_file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
opentype_font_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUIFontFilePB::~CUIFontFilePB() {
  // @@protoc_insertion_point(destructor:CUIFontFilePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUIFontFilePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  font_file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  opentype_font_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUIFontFilePB::ArenaDtor(void* object) {
  CUIFontFilePB* _this = reinterpret_cast< CUIFontFilePB* >(object);
  (void)_this;
}
void CUIFontFilePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUIFontFilePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUIFontFilePB::Clear() {
// @@protoc_insertion_point(message_clear_start:CUIFontFilePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      font_file_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      opentype_font_data_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUIFontFilePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string font_file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_font_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CUIFontFilePB.font_file_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes opentype_font_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_opentype_font_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUIFontFilePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUIFontFilePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string font_file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_file_name().data(), static_cast<int>(this->_internal_font_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CUIFontFilePB.font_file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_font_file_name(), target);
  }

  // optional bytes opentype_font_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_opentype_font_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUIFontFilePB)
  return target;
}

size_t CUIFontFilePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUIFontFilePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string font_file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_font_file_name());
    }

    // optional bytes opentype_font_data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_opentype_font_data());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUIFontFilePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUIFontFilePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CUIFontFilePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUIFontFilePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUIFontFilePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUIFontFilePB)
    MergeFrom(*source);
  }
}

void CUIFontFilePB::MergeFrom(const CUIFontFilePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUIFontFilePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_font_file_name(from._internal_font_file_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_opentype_font_data(from._internal_opentype_font_data());
    }
  }
}

void CUIFontFilePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUIFontFilePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUIFontFilePB::CopyFrom(const CUIFontFilePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUIFontFilePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUIFontFilePB::IsInitialized() const {
  return true;
}

void CUIFontFilePB::InternalSwap(CUIFontFilePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  font_file_name_.Swap(&other->font_file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  opentype_font_data_.Swap(&other->opentype_font_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUIFontFilePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUIFontFilePackagePB_CUIEncryptedFontFilePB::_Internal {
 public:
  using HasBits = decltype(std::declval<CUIFontFilePackagePB_CUIEncryptedFontFilePB>()._has_bits_);
  static void set_has_encrypted_contents(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CUIFontFilePackagePB_CUIEncryptedFontFilePB::CUIFontFilePackagePB_CUIEncryptedFontFilePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
}
CUIFontFilePackagePB_CUIEncryptedFontFilePB::CUIFontFilePackagePB_CUIEncryptedFontFilePB(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encrypted_contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encrypted_contents()) {
    encrypted_contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encrypted_contents(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::SharedCtor() {
encrypted_contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CUIFontFilePackagePB_CUIEncryptedFontFilePB::~CUIFontFilePackagePB_CUIEncryptedFontFilePB() {
  // @@protoc_insertion_point(destructor:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encrypted_contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::ArenaDtor(void* object) {
  CUIFontFilePackagePB_CUIEncryptedFontFilePB* _this = reinterpret_cast< CUIFontFilePackagePB_CUIEncryptedFontFilePB* >(object);
  (void)_this;
}
void CUIFontFilePackagePB_CUIEncryptedFontFilePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUIFontFilePackagePB_CUIEncryptedFontFilePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::Clear() {
// @@protoc_insertion_point(message_clear_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    encrypted_contents_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUIFontFilePackagePB_CUIEncryptedFontFilePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes encrypted_contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encrypted_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUIFontFilePackagePB_CUIEncryptedFontFilePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes encrypted_contents = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_encrypted_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  return target;
}

size_t CUIFontFilePackagePB_CUIEncryptedFontFilePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes encrypted_contents = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encrypted_contents());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CUIFontFilePackagePB_CUIEncryptedFontFilePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUIFontFilePackagePB_CUIEncryptedFontFilePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
    MergeFrom(*source);
  }
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::MergeFrom(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_encrypted_contents()) {
    _internal_set_encrypted_contents(from._internal_encrypted_contents());
  }
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::CopyFrom(const CUIFontFilePackagePB_CUIEncryptedFontFilePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUIFontFilePackagePB.CUIEncryptedFontFilePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUIFontFilePackagePB_CUIEncryptedFontFilePB::IsInitialized() const {
  return true;
}

void CUIFontFilePackagePB_CUIEncryptedFontFilePB::InternalSwap(CUIFontFilePackagePB_CUIEncryptedFontFilePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_contents_.Swap(&other->encrypted_contents_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CUIFontFilePackagePB_CUIEncryptedFontFilePB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CUIFontFilePackagePB::_Internal {
 public:
  using HasBits = decltype(std::declval<CUIFontFilePackagePB>()._has_bits_);
  static void set_has_package_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CUIFontFilePackagePB::CUIFontFilePackagePB(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  encrypted_font_files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUIFontFilePackagePB)
}
CUIFontFilePackagePB::CUIFontFilePackagePB(const CUIFontFilePackagePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      encrypted_font_files_(from.encrypted_font_files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  package_version_ = from.package_version_;
  // @@protoc_insertion_point(copy_constructor:CUIFontFilePackagePB)
}

void CUIFontFilePackagePB::SharedCtor() {
package_version_ = 0u;
}

CUIFontFilePackagePB::~CUIFontFilePackagePB() {
  // @@protoc_insertion_point(destructor:CUIFontFilePackagePB)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CUIFontFilePackagePB::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CUIFontFilePackagePB::ArenaDtor(void* object) {
  CUIFontFilePackagePB* _this = reinterpret_cast< CUIFontFilePackagePB* >(object);
  (void)_this;
}
void CUIFontFilePackagePB::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CUIFontFilePackagePB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CUIFontFilePackagePB::Clear() {
// @@protoc_insertion_point(message_clear_start:CUIFontFilePackagePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encrypted_font_files_.Clear();
  package_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CUIFontFilePackagePB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 package_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_package_version(&has_bits);
          package_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encrypted_font_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CUIFontFilePackagePB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CUIFontFilePackagePB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 package_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_package_version(), target);
  }

  // repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encrypted_font_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_encrypted_font_files(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUIFontFilePackagePB)
  return target;
}

size_t CUIFontFilePackagePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CUIFontFilePackagePB)
  size_t total_size = 0;

  // required uint32 package_version = 1;
  if (_internal_has_package_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_package_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CUIFontFilePackagePB.CUIEncryptedFontFilePB encrypted_font_files = 2;
  total_size += 1UL * this->_internal_encrypted_font_files_size();
  for (const auto& msg : this->encrypted_font_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUIFontFilePackagePB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CUIFontFilePackagePB)
  GOOGLE_DCHECK_NE(&from, this);
  const CUIFontFilePackagePB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CUIFontFilePackagePB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CUIFontFilePackagePB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CUIFontFilePackagePB)
    MergeFrom(*source);
  }
}

void CUIFontFilePackagePB::MergeFrom(const CUIFontFilePackagePB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CUIFontFilePackagePB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  encrypted_font_files_.MergeFrom(from.encrypted_font_files_);
  if (from._internal_has_package_version()) {
    _internal_set_package_version(from._internal_package_version());
  }
}

void CUIFontFilePackagePB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CUIFontFilePackagePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUIFontFilePackagePB::CopyFrom(const CUIFontFilePackagePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUIFontFilePackagePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUIFontFilePackagePB::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CUIFontFilePackagePB::InternalSwap(CUIFontFilePackagePB* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encrypted_font_files_.InternalSwap(&other->encrypted_font_files_);
  swap(package_version_, other->package_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CUIFontFilePackagePB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CUIFontFilePB* Arena::CreateMaybeMessage< ::CUIFontFilePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUIFontFilePB >(arena);
}
template<> PROTOBUF_NOINLINE ::CUIFontFilePackagePB_CUIEncryptedFontFilePB* Arena::CreateMaybeMessage< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUIFontFilePackagePB_CUIEncryptedFontFilePB >(arena);
}
template<> PROTOBUF_NOINLINE ::CUIFontFilePackagePB* Arena::CreateMaybeMessage< ::CUIFontFilePackagePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CUIFontFilePackagePB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
